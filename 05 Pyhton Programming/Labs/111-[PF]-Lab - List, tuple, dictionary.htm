<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><script type="text/javascript">
    var vocdomain = document.domain.split('.').slice(-2).join('.');
    document.domain = vocdomain;
</script>
    

    
        <meta charset="utf-8">
        <title>Workbench - Vocareum</title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=3.0, user-scalable=yes">
        <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
        <meta http-equiv="Pragma" content="no-cache">
        <meta http-equiv="Expires" content="0">
        <!-- imported -->
        <!--basic styles-->
        <link href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/bootstrap.min.css" rel="stylesheet">
        <link href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/bootstrap-responsive.min.css" rel="stylesheet">
        <link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/font-awesome.min.css">
        <!--[if IE 7]>
        <link rel="stylesheet" href="../shared/ace/assets/css/font-awesome-ie7.min.css"/>
        <![endif]-->
        <!--page specific plugin styles-->
        <!-- <link rel="stylesheet" href="../shared/ace/assets/css/jquery-ui-1.10.3.custom.min.css"/> -->
        <link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/jquery-ui.min.css">
        <link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/jquery.gritter.css">
        <link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/colorbox.css">
        <!--fonts-->
        <link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/ace-fonts.css">
        <!--ace styles-->
        <link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/chosen.css">
        <link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/ace.css">
        <link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/ace-responsive.min.css">
        <link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/ace-skins.min.css">
        <link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/datepicker.css">
        <link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/jsPanel.css">
        <!-- Add the slick-theme.css if you want default styling -->
        <link rel="stylesheet" type="text/css" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/slick.css">
        <link rel="stylesheet" type="text/css" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/slick-theme.css"> 
        <!--[if lte IE 8]>
        <link rel="stylesheet" href="../shared/ace/assets/css/ace-ie.min.css"/>
        <![endif]-->
        <!-- Vocareum styles -->
        <link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/vocareum.css">
                <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/localStorage.js"></script>
        <!-- js start -->
        <!-- jquery start -->
        <!--[if !IE]>-->
        
        <!-- <script type="text/javascript">
          window.jQuery || document.write("<script src='../shared/ace/assets/js/jquery-2.0.3.min.js'>" + "<" + "/script>");
        </script> -->
        <script type="text/javascript" src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/jquery-2.2.4.min.js"></script>
        <!--<![endif]-->
        <!--[if IE]>
        <script type="text/javascript">
            window.jQuery || document.write("<script src='../shared/ace/assets/js/jquery-1.10.2.min.js'>" + "<" + "/script>");
        </script>
        <![endif]-->
        <script type="text/javascript">
          if ("ontouchend" in document) document.write("<script src='../shared/ace/assets/js/jquery.mobile.custom.min.js'>" + "<" + "/script>");
        </script>
        <!-- <script src="../shared/ace/assets/js/jquery-ui-1.10.3.custom.min.js"></script> -->
        <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/jquery-ui.min.js"></script>
        <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/jquery.ui.touch-punch.min.js"></script>
        <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/jquery.easy-pie-chart.min.js"></script>
        <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/fuelux.wizard.min.js"></script>
        <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/jquery.jspanel.js"></script>
        <!-- jquery end -->
        <!-- js end -->
        <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/bootstrap.min.js"></script>
        <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/ace.js"></script>
        <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/ace-extra.min.js"></script>
        <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/bootbox.min.js"></script>
        <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/jquery.autosize-min.js"></script>
        <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/chosen.jquery.min.js"></script>
        <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/bootstrap-datepicker.min.js"></script>
        <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/bootstrap-tag.min.js"></script>
        <!-- <script src="../shared/ace/assets/js/jquery-validation-1.11.1/jquery.validate.min.js"></script>
        <script src="../shared/ace/assets/js/jquery-validation-1.11.1/additional-methods.min.js"></script> -->
        <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/jquery.validate.min.js"></script>
        <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/additional-methods.min.js"></script>
        <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/jquery.tmpl.min.js"></script>
        <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/jquery.cookie.js"></script>
        <!-- Golden Layout Dependencies -->
        <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/goldenlayout.js" type="text/javascript"></script>
        <link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/goldenlayout-base.css">
        <link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/goldenlayout-light-theme.css">
        <link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/pseudoBS5.css">


        <!-- Load sitewide icons CSS from file: Flaticons UIcons -->
        <!-- 
            To use an icon, look up available icons "Flaticons UIcons
            example: <i class="fi fi-sr-camera"></i>
            The "rr" is regular-rounded. Replace with "br" for bold-rounded, and "sr" for solid-rounded
        -->
        <link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/uicons-regular-rounded.css">
        <!-- <link type="text/css" href="../shared/flaticons/uicons-regular-rounded/css/uicons-regular-rounded.css" rel="stylesheet"> -->
        <link type="text/css" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/uicons-bold-rounded.css" rel="stylesheet">
        <link type="text/css" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/uicons-solid-rounded.css" rel="stylesheet">

        <!-- Vocareum JS Funcs -->
        <script type="text/javascript" src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/jsfuncs.js"></script>
        
        <style>
            html,
            body {
                height: 100%;
                font-size: 95%;
                background-color: rgb(255, 255, 255) !important;
            }

            .vocbtn-round-corner {
                border-radius: 3px !important;
                margin: 0 5px 2px 0px !important;
            }

            #wrap {
                min-height: 100%;
                height: auto !important;
                height: 100%;
                /* Negative indent footer by it's height */
                margin: 0 auto -30px;
            }

            /* Set the fixed height of the footer here */
            #push,
            #footer {
                height: 30px;
                position: fixed;
            }

            #footer {
                background-color: #333;
                color: #ccc;
            }

            /* Lastly, apply responsive CSS fixes as necessary */
            @media (max-width: 767px) {
                #footer {
                    margin-left: -20px;
                    margin-right: -20px;
                    padding-left: 20px;
                    padding-right: 20px;
                }
            }

            /* one more CSS fixes as necessary */
            @media (max-width: 979px) {
                #page-content {
                }
            }


            /* Custom page CSS
            -------------------------------------------------- */
            /* Not required for template or sticky footer method. */

            #wrap > .container {
                padding-top: 60px;
            }

            .container .credit {
                margin: 20px 0;
            }

            code {
                font-size: 80%;
            }

            .dropdown-menu > li > div:hover,
            .dropdown-menu > li > div:focus {
                color: #ffffff;
                text-decoration: none;
                background-color: #0081c2;
                background-image: -moz-linear-gradient(top, #0088cc, #0077b3);
                background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#0088cc), to(#0077b3));
                background-image: -webkit-linear-gradient(top, #0088cc, #0077b3);
                background-image: -o-linear-gradient(top, #0088cc, #0077b3);
                background-image: linear-gradient(to bottom, #0088cc, #0077b3);
                background-repeat: repeat-x;
                filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff0088cc', endColorstr='#ff0077b3', GradientType=0);
            }

            .dropdown-menu > li > div {
                display: block;
                padding: 3px 20px;
                clear: both;
                font-weight: normal;
                line-height: 20px;
                color: #333333;
                white-space: nowrap;
            }

            .ace-nav > li > div {
                position: relative;
                color: #EEE;
                display: block;
                height: 100%;
                padding: 0 8px !important;
                background-color: transparent;
            }

            .ace-nav > li > div > [class*="icon-"] {
                font-size: 16px;
                color: #EEE;
                display: inline-block;
                width: 20px;
                text-align: center;
            }

            .tree .tree-selected > [class*="icon-"]:first-child {
                color: 0 !important;
            }

            #navbar-logo {
                margin: -3px 0 -5px 5px;
                padding-left:0;
                padding-right:0;
            }

            /* accessibility contrast */
            .alert-success > * > .icon-remove {
                color: #155724;
            }
            .alert-warning > * > .icon-remove {
                color: #856404;
            }
            .alert-error > * > .icon-remove {
                color: #721c24;
            }


        </style>

        <style>
            .spinner-preview {
                width: 100px;
                height: 100px;
                text-align: center;
                margin-top: 60px;
            }

            .dropdown-preview {
                margin: 0 5px;
                display: inline-block;
            }

            .dropdown-preview > .dropdown-menu {
                display: block;
                position: static;
                margin-bottom: 5px;
            }

            .btn-group > .btn,
            .btn-group + .btn {
                margin: 0 1px 0 0;
                border-width: 1px !important;
            }

            /*
            .alert {
              color: black;
            }
            */

            .alert-success {
                color: #155724 !important;
            }

            .alert-error, .alert-danger {
                color: #721c24 !important;
            }

            .alert-warning {
                color: #856404 !important;
            }

            .chosen-container-single .chosen-default {
                color: black;
            }

            .vocbtn-ac {
                border-radius: 3px !important;
                padding: 1px 12px !important;
                margin: 0 8px 5px 0px !important;
                min-width: 60px !important;
                line-height: 30px !important;
                border-width: 1px !important;
            }

            .vocbtn2 {
                border-radius: 3px !important;
                padding: 1px 8px !important;
                margin: 0 8px 5px 0px !important;
                margin: 0 0px 0 0px !important;
                min-width: 40px !important;
                line-height: 30px !important;
                border-width: 1px !important;
            }

            .vocbtn-action {
                background: none repeat scroll 0% 0% rgb(0, 109, 204) !important;
                border-color: rgb(0, 109, 204) !important;
            }

            .vocbtn-action:hover, .vocbtn-primary:focus {
                background: none repeat scroll 0% 0% rgb(0, 109, 204) !important;
                border-color: rgb(0, 109, 204) !important;
            }

            .vocbtn-status {
                background: #f5f5f5 !important;
                text-shadow: 0 0 0 !important;
                color: #2D3B45 !important;
                border: 1px solid !important;
                border-color: #C7CDD1 !important;
            }

            .vocbtn-status:hover, .vocbtn-default:focus {
                background: #C7CDD1 !important;
            }

            .table-header {
                background-color: #394B58 !important;
            }

            .tree .tree-item, .tree .tree-folder .tree-folder-header {
                color: black;
            }

            .voc-link, .breadcrumb li a {
                color: rgb(32, 57, 157);
            }

            .table thead tr {
                color: #000 !important;
            }

            .breadcrumb li, .breadcrumb li .divider {
                color: #000 !important;
            }

            .loadinggif {
                display: block;
                position: absolute;
                flex: none;
                top: 0;
                margin-top: 45px;
                padding-top: -45px;
                left: 0;
                z-index: 50;
                width: 100vw;
                height: 90vh;
                background-color: #fff;
                background-image: url("../shared/img/vocpacifier.gif");
                background-size: 20%;
                background-repeat: no-repeat;
                background-position: center;
            }

            .nav-header {
                color: black !important;
            }

            .nav-dropdown-section {
                color: black !important;
            }

            .nav-section-header {
                color: black;
                background-color: #ecf2f7;
            }

            /* because bootstrap styling isn't expecting the
                <section> element, I just copied all the CSS rules here
            */
            .dropdown-menu > section > li > a {
                font-size: 13px;
                padding-left: 11px;
                padding-right: 11px;
                padding-top: 3px;
                padding-bottom: 3px;
                margin-bottom: 1px;
                margin-top: 1px;
                text-decoration: none;
                color: #333;
                display: block;
                line-height: 20px;
                white-space: nowrap;
            }
            .dropdown-menu > section > li > a:hover {
                background-color: transparent;
            }

            /* .navbar-inner {
                background-color: #394b58 !important;
            } */
        </style>
        <script>
    // Function to handle the POST request
    function postToUrl(href, token) {
        // Create a form element
        var form = document.createElement('form');
        form.method = 'POST';
        form.action = href;

        // Create hidden input elements for each data field - token and new session
        var data = { vockey: token, newtab: true };
        for (var key in data) {
          // Create a new hidden input element
          var hiddenField = document.createElement('input');
          hiddenField.type = 'hidden';
          hiddenField.name = key; // Set the name of the input
          hiddenField.value = data[key]; //set the token passed
          // Append the new input to the form
          form.appendChild(hiddenField);
        }

        // Append the form to the body and submit it
        document.body.appendChild(form);
        //console.log("Calling submit for form");
        form.submit();
    }

    function postToUrlInNewTab(href, token) {
        // Create a form element
        var form = document.createElement('form');
        form.method = 'POST';
        form.action = href;
        form.setAttribute("target", "_blank");

        // Create hidden input elements for each data field - token and new session
        var data = { vockey: token, newtab: true };
        for (var key in data) {
          // Create a new hidden input element
          var hiddenField = document.createElement('input');
          hiddenField.type = 'hidden';
          hiddenField.name = key; // Set the name of the input
          hiddenField.value = data[key]; //set the token passed
          // Append the new input to the form
          form.appendChild(hiddenField);
        }

        // Append the form to the body and submit it
        document.body.appendChild(form);
        //console.log("Calling submit for form href: " + href + " and token : " + token);
        form.submit();
        form.remove();
    }

    function areCookiesEnabled() {
        var cookieEnabled = false;
        
        if (!cookieEnabled) {
            document.cookie = "voctestcookie=1;path=/;SameSite=None;Secure";
            cookieEnabled = document.cookie.indexOf("voctestcookie") !== -1;
        }

        // Delete the test cookie
        if (cookieEnabled) {
            document.cookie = "voctestcookie=;path=/;SameSite=None;Secure;expires=Thu, 01 Jan 1970 00:00:00 GMT";
        }

        //console.log("Cookies enabled: " + cookieEnabled);
        return cookieEnabled;
    }

    function removeSpinner(){
      $("#loader").remove();
    }

    // Function to add a parameter to a URL
    function addParamToUrl(url, paramName, paramValue) {
        var urlObj = new URL(url, window.location.href);
        urlObj.searchParams.set(paramName, paramValue);
        return urlObj.toString();
    }

    // Function to update all iframes
    function updateIframeSources(paramName, paramValue) {
        var iframes = document.getElementsByTagName('iframe');

        for (var i = 0; i < iframes.length; i++) {
            var originalSrc = iframes[i].src;
            var newSrc = addParamToUrl(originalSrc, paramName, paramValue);
            iframes[i].src = newSrc;
        }
    }

    function callPostIfCookiesDisabled(href, token) {
        //console.log("Calling callPostIfCookiesDisabled for href: " + href);
        if (areCookiesEnabled()) {
            location.href=href;
        } else {
            //console.log("Cookies are disabled");
            //console.log("token used: " + token);
            //console.log("href: " + href);
            postToUrl(href, token);
        }
    }

    function replaceHrefIfCookiesDisabled(href, token) {
        if (areCookiesEnabled()) {
            location.href=href;
        } else {
            href = addParamToUrl(href, 'vockey', token);
            //console.log("Cookies are disabled call href");
            //console.log("token used: " + token);
            //console.log("href: " + href);
            location.href=href;
        }
    }

</script>
<script>
        var vocCookiesDisabled = false;
    if (!areCookiesEnabled()) {
      //console.log("areCookiesEnabled - false");
      vocCookiesDisabled = true;
    }
    window.addEventListener('load', function() {
        //console.log("window onload cookies");
        function vocChangeGetLinksToPost() {
            //console.log("Iterating all href a links ");
            // Attach event listeners to all hyperlinks
            var links = document.getElementsByTagName('a');
            //console.log("Total: " + links.length);
            for (var i = 0; i < links.length; i++) {
                //console.log("0. Iterating i: " + i + "href: " + links[i].href);
                var href = links[i].getAttribute('href');
                //console.log("1. Iterating i: " + i + "href: " + href);
                if (href == null || href == undefined || href.startsWith('#') || href.startsWith('http://') || href.startsWith('https://')) {
                    continue;
                }
                //console.log("2. Iterating i: " + i + "link: " + href);
                links[i].addEventListener('click', function(event) {
                    event.preventDefault(); // Prevent the default GET request
                    postToUrl(this.href, '92b04c35873bd949b37ad2d5305bdc08d94a5d6ff8998372748bc9b283f4c299'); // Call the POST function
                });
            }
        }

        //Add token to all iframes
        //can not be used now - as there are iFrames for terminal/containers which uses
        //proxy.vocareum.com and this is messing things up
        //updateIframeSources('vockey', '92b04c35873bd949b37ad2d5305bdc08d94a5d6ff8998372748bc9b283f4c299');


        if (vocCookiesDisabled) {
          //console.log("Cookies are disabled");
          vocChangeGetLinksToPost(); 
        } else {
          //console.log("Cookies are enabled");
        }
        removeSpinner();
        //console.log("Done");
    });
</script>
<!--
        <script type="text/javascript">
          function removeSpinner(){
            $("#loader").remove();
          }
        </script>
-->
    </head>
    <!-- body onload="removeSpinner()" -->
    <body>
                
                <!-- placeholder
        <div id="opennewtab" class="alert alert-block alert-warning hidden" role="alert">
          <p><b>It seems that third-party cookies are disabled in your browser, preventing Vocareum from being iframed. Please click this button to open Vocareum in a new tab.</b></p>
          <br/>
          <button type='button' onclick='makePostRequestInNewTab()' 
                style='cursor: pointer; background-color: #394B58;border: none;color: white;padding: 15px 32px;text-align: center;text-decoration: none;display: inline-block;font-size: 16px;'>
                Open in a New Tab
          </button>
        </div>
        -->
        <script type="text/javascript">
            function escapeHtml(unsafe) {
                return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
            }
            var postUrlCall = '';

            function makePostRequestInNewTab() {
                postToUrlInNewTab(postUrlCall, '92b04c35873bd949b37ad2d5305bdc08d94a5d6ff8998372748bc9b283f4c299');
            }

            /*
            //if 3rd party cookies are disabled - give an option to open in a new tab
            if (self !== top && !areCookiesEnabled()) {
                postUrlCall = window.location.href;
                window.stop();
                removeSpinner();
                $('#opennewtab').removeClass("hidden");
            }
            */

            
            /* for CSRF tokens */
            /* NOTE: ajaxPreFilter works better than the ajaxSetup where ajax happens when form.serialize is called */
            var csrfToken = "92b04c35873bd949b37ad2d5305bdc08d94a5d6ff8998372748bc9b283f4c299";
            $.ajaxPrefilter(function (options, originalData, xhr) {
                if (options.data) {
                if (options.data instanceof FormData) {
                    //let the form send the vockey
                } else {
                    try {
                    pdata = JSON.parse(options.data);
                    pdata['vockey'] = csrfToken;
                    options.data = JSON.stringify(pdata);
                    } catch (e) {
                    options.data += "&vockey=" + csrfToken;
                    }
                }
                } else {
                options.data = "vockey=" + csrfToken;
                }
            });

            function refreshNewSessionPage() {
                var url = window.location.href;
                var msg = 'Redirected+to+newly+logged+in+session.+Please+retry+the+operation';
                if (url.indexOf('?') > -1) {
                url += '&w=' + msg;
                } else {
                url += '?w=' + msg;
                }
                window.location.href = url;
            }
        </script>

        
        <div class="clearfix">
            
            
            <div id="page-content" class="clearfix" style="background-color:rgb(255,255,255);margin: 5px 10px 0px 10px;">
                <div class="row-fluid">
                    
                    
                    
                    
                    
                    <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/jquery.gritter.min.js"></script>

                    <!-- Displays Maintenance Banner on top of page -->
                    
                    <!-- PAGE CONTENT BEGINS HERE -->

                    
<!-- clab IDE UI -->
<style type="text/css">
html,
body {
  height: 100%;
  overflow: hidden;
}

#vmp-header {
  font-size: 12px;
  font-color: black;
}

#vmp-idebox {
  border: 0px solid blue;
  background-color: white;
  width: 100%;
  height: 100%;
  /*overflow: scroll;*/
}

#vmp-ideheader {
  height: 30px;
  background-color: white;
  border-top: 1px solid lightgray;
  font-size: 12px;
  font-color: black;
  display: block;
}

#vmp-panel1 {
  background-color: white;
  width: 20%;
  height: 100%;
  overflow-y: hidden;
  float: left;
  border-right: 1px solid lightgray;
}

#vmp-panel2 {
  width: 44%;
  height: 100%;
  margin-left: 0px;
  float: left;
  border-left: 1px solid lightgray;
  /*border-right: 1px solid lightgray;*/
  border-bottom: 0px solid red;
}

#vmp-panel3 {
  width: 31%;
  height: 100%;
  margin-left: 0px;
  margin-right: 0px;
  overflow: hidden;
  float: right;
  border-left: 1px solid lightgray;
  border-bottom: 0px solid lightgray;
}

#vmp-panel2-1 {
  background-color: white;
  height: 48%; /*100%*/
  width: 100%;
  /*margin-bottom: 0px;*/
  overflow-y: hidden; /*hidden;*/
  border-bottom: 0px solid gray;
}

#vmp-panel2-2 {
  background-color: transparent; /*rgba(90,90,90,1.0);*/
  height: 50%; /*100%*/
  width: 100%;
  margin-bottom: 0px;
  overflow-y: scroll;
  border-bottom: 0px solid blue;
}

#vmp-panel2-2 img {
  display: none;
  margin: 15% auto;
  max-height: 240px;
  max-width: 240px;
  position: relative;
  overflow: hidden;
}

#vmp-panel4 {
  position: fixed;
  width: 100%;
  height: 100%;
  background-color: white;
  z-index: -1;
  vertical-align: middle;
  text-align: center;
  display: block;
}

#vmp-panel4 img {
  display: block;
  margin: 0 auto;
  margin-top: 200px;
  max-height: 150px;
  max-width: 150px;
}

.vmp-idebutton {
  background-color: white; 
  min-width:50px; 
  height: 34px; 
  line-height: 34px;
  float: right;
  background-color: white; 
  margin: 0px 2px 0px 3px; 
  padding-right: 10px;
  padding-left: 10px;
  cursor: pointer; 
  border: 0px solid white; 
  text-align: center;
}

.vmp-idebutton:hover {
  background-color: #EEEEEE;
  color: black;
}

.vmp-idebutton-left {
  background-color: white; 
  min-width:50px; 
  height: 34px; 
  line-height: 34px;
  background-color: white; 
  margin: 0px 10px 0px 10px; 
  cursor: pointer; 
  border-bottom: 1px solid gray; 
  text-align: center;
}

.vmp-idebutton-left:hover {
  background-color: #EEEEEE;
  color: black;
}

.vmp-idebutton-submit {
  background-color: #393939; 
  min-width:50px; 
  height: 34px; 
  line-height: 34px;
  float: right;
  background-color: #393939; 
  margin: 0px 2px 0px 3px; 
  padding-right: 10px;
  padding-left: 10px;
  cursor: pointer; 
  border: 0px solid #393939; 
  text-align: center;
  color: white;
  border-radius: 3px;
}

.vmp-idebutton-run {
  background-color: #006dcc;
  min-width:50px;
  height: 34px;
  line-height: 34px;
  float: right;
  margin: 0px 2px 0px 3px;
  padding-right: 10px;
  padding-left: 10px;
  cursor: pointer;
  text-align: center;
  color: ghostwhite;
  border-radius: 3px;
}

.vmp-idebutton-run-actions {
  background-color: lightgray; 
  min-width:20px; 
  height: 32px; 
  line-height: 32px;
  float: right;
  margin: 0px 0px 0px 0px;
  cursor: pointer; 
  border: 1px solid gray;
  text-align: center;
  color: black;
  border-radius: 3px;
}

.vmp-idebutton-submit:hover {
  background-color: lightgray;
  color: black;
}

.vmp-idebutton-run:hover, .vmp-idebutton-run-actions:hover {
  background-color: #184E8B;
}

.vmp-idebutton-left-disabled {
  background-color: white; 
  min-width:50px; 
  height: 34px; 
  line-height: 34px;
  background-color: white; 
  margin: 0px 10px 0px 10px;
  text-align: center;
}

.vmp-idebutton-left2 {
  color: rgb(32, 57, 157);
  background-color: white; 
  min-width:50px; 
  height: 34px; 
  line-height: 34px;
  background-color: white; 
  margin: 0px 10px 0px 10px; 
  cursor: pointer; 
  text-align: center;
}

#vmp-showfullscreen {
  width: 34px; 
  height: 34px; 
  line-height: 34px; 
  float: right; 
  margin-right: 0px; 
  margin-top: 0px; 
  color: black; 
  border: 1px solid white; 
  cursor:pointer; 
  text-align:center; 
}

#vmp-showfullscreen:hover {
  background-color: #EEEEEE;
  color: black;
}

#newLayoutToggle {
  width: 34px; 
  height: 34px; 
  line-height: 34px; 
  float: right; 
  margin-right: 0px; 
  margin-top: 0px; 
  color: black; 
  border: 1px solid white; 
  cursor:pointer; 
  text-align:center; 
}

#newLayoutToggle:hover {
  background-color: #EEEEEE;
  color: black;
}

/* Style change for golden layout content*/
.lm_content {
  /*
  width: 100% !important;
  border: 0px;*/
}

.lm_title {
  color: #000000;
}

.lm_horizontal {
  width: 4px !important;
}

.filetreetab_selected {
  background-color: white !important;
  border-bottom: 0px solid lightgrey !important;
}
.btn, .btn-default {
  background-color: red;
}
</style>


<!--  script type="text/javascript" src="https://www.google.com/jsapi"></script -->
<script type="text/javascript">

var vcUploadMaxSize = 104857600; // 100MB
var vcUploadChunkSize = 1048576; // 1MB
function vcUploadCheckMsg(status, msg)
{
   var progressFile = document.createElement('div');
   var meterFile = document.createElement('span');
   status.appendChild(progressFile);
   progressFile.appendChild(meterFile);
   meterFile.textContent = msg;
   return false;
}
function vcUploadCheckDone(status, buckets, cnt, args, endFP)
{
   buckets[0] = buckets[0] - cnt;
   if( buckets[0]<1 ){
     if( endFP ){
       var msg = endFP(args);
       if( msg && msg.length>0 ){
         vcUploadCheckMsg(status, 'NOTE: ' + msg);
       }
     }
     vcUploadCheckMsg(status, 'NOTE: All files were processed, you may close the window and proceed.');
   }
   return false;
}
function vcUploadFileCheckStatus(status, buckets, path, meterFile, fn, args, endFP)
{
  'use strict';
  var xhr = new XMLHttpRequest();
  xhr.open('GET', '../util/vcput.php?vockey=92b04c35873bd949b37ad2d5305bdc08d94a5d6ff8998372748bc9b283f4c299&a=checkUpload&fn=' + encodeURIComponent(fn) + '&path=' + encodeURIComponent(path) + args, true);
  xhr.onreadystatechange = function () {
    if (xhr.readyState!=4) return false;
    if (xhr.status!=200 || !xhr.responseText ){
      meterFile.textContent += ' failed';
      vcUploadCheckDone(status, buckets, 1, args, endFP)
      return false;
    }
    var arr = xhr.responseText.split('VOC::');
    if(arr.length != 3){
       meterFile.textContent += ' failed';
       vcUploadCheckDone(status, buckets, 1, args, endFP)
       return false;
    }
    meterFile.textContent += arr[1];
    if( arr[1] != '.' ) {
      if (typeof refreshFileTree !== 'undefined' && $.isFunction(refreshFileTree)){
        refreshFileTree(true, true);
      }
      vcUploadCheckDone(status, buckets, 1, args, endFP)
      return false;
    }
    //mhui
    if (typeof(appsIde) != 'undefined' && appsIde)
		{
    	meterFile.textContent += ' Done';
		  refreshS3HomeTree(0);
		  return false;
		}
    setTimeout(function(){ vcUploadFileCheckStatus(status, buckets, path, meterFile, fn, args, endFP);}, 
               1000);
    return false;
  }
  xhr.send();
  return false;
}
function vcUploadFile(status, path, meterFile, blobOrFile, fn, st, sz, file_size, args, buckets, endFP)
{
     'use strict';
     var successful = false;

     var xhr = new XMLHttpRequest();
     if(!path){
       // need a path to store the uploaded file.
       xhr.open('GET', '../util/vcput.php?vockey=92b04c35873bd949b37ad2d5305bdc08d94a5d6ff8998372748bc9b283f4c299&a=getPath&fn=' + encodeURIComponent(fn), true);
       xhr.onreadystatechange = function () {
         if (xhr.readyState!=4) return false;
         if (xhr.status!=200 || !xhr.responseText ){
            meterFile.textContent = '    ' + fn + ' : terminating due to failure to obtain file path in the server';
            vcUploadCheckDone(status, buckets, 1, args, endFP);
            return false;
         }
         var arr = xhr.responseText.split('VOC::');
         if(arr.length != 3){
            meterFile.textContent = '    ' + fn + ' : terminating due to failure to obtain unique file path in the server';
            vcUploadCheckDone(status, buckets, 1, args, endFP);
            return false;
         }
         path = arr[1];
         if( !path || path.length<1 ){
            meterFile.textContent = '    ' + fn + ' : terminating due to empty file path in the server';
            vcUploadCheckDone(status, buckets, 1, args, endFP);
            return false;
         }
         vcUploadFile(status, path, meterFile, blobOrFile, fn, st, sz, file_size, args, buckets, endFP);
         return false;
       }
       xhr.send();
       return false;
     }
         xhr.open('POST', '../util/vcput.php?vockey=92b04c35873bd949b37ad2d5305bdc08d94a5d6ff8998372748bc9b283f4c299&a=batchUpload&fn=' + encodeURIComponent(fn) + '&path=' + encodeURIComponent(path) + args, true);
     // report chunk progress
         xhr.upload.onprogress = function (e) {
             if (e.lengthComputable) {
                 var msz = file_size - st;
                 if( sz<msz ) msz = sz;
                 if( file_size>0 ){
                   meterFile.value = Math.round((( (e.loaded/e.total)*msz + st) / file_size) * 100);
                 } else {
                   meterFile.value = '100';
                 }
                 var val = parseFloat(meterFile.value);
                 if( val>=100 ){
                   meterFile.textContent = '    ' + fn + ' (' + file_size + ' bytes) : ' + val + '% uploaded. Processing ...';
                 } else {
                   meterFile.textContent = '    ' + fn + ' (' + file_size + ' bytes) : ' + val + '%';
                 }
             }
         };
     // upload stopped
        xhr.onloadend = function (e) {
           if( successful ){
             // next chunk, if any
             if( (st+sz)<file_size ){
               vcUploadFile(status, path, meterFile, blobOrFile, fn, st+sz, sz, file_size, args, buckets, endFP);
             } else {
               vcUploadFileCheckStatus(status, buckets, path, meterFile, fn, args, endFP);
             }
           } else {
             vcUploadCheckDone(status, buckets, 1, args, endFP);
             meterFile.textContent += ' failed';
           }
         };
     // upload chunk successful
         xhr.onload = function (e) {
           meterFile.textContent += '.';
           successful = true;
         };
     // report chunk error
         xhr.ontimeout = function (e) {
            meterFile.textContent += '... terminating due to timeout';
            successful = false;
         };
         xhr.onerror = function (e) {
            meterFile.textContent += '... terminating due to error in fetching file';
            successful = false;
         };
         xhr.onabort = function (e) {
            meterFile.textContent += '... terminating due to aborting event';
            successful = false;
         };
     // 
     // send this chunk fn[st, st+sz-1]    
     var data = new FormData();
         data.append("file", blobOrFile.slice(st, st+sz));
         xhr.overrideMimeType('application/octet-stream');
         xhr.setRequestHeader('Content-Range', 'bytes ' + st + '-' + (st+sz) + '/' + file_size);
         xhr.send(data);
         successful = true;
     // return value
     return false;
}
function vcUploadFiles(modalStr, divStatus, validateFP, inputFile, maxsz, args, endFP)
{
  'use strict';
  var status = document.getElementById(divStatus);
  var listFile = document.getElementById(inputFile);
  var buckets = [];
  var filesz = maxsz<=0? vcUploadMaxSize : (maxsz*1024*1024);
  var listener = function (e) {
     var self = e.currentTarget;
     // disable the listener right-away
     listFile.removeEventListener('change', listener, false);
     (typeof vocNotebookIde != 'undefined' && vocNotebookIde) ? ($('#'+modalStr).css('z-index', '1000').css('opacity', '1')) : $('#' + modalStr).modal('show');
     status.innerHTML = ' Processing <b>' + self.files.length + '</b> file' + (self.files.length>1? 's' : '') + ':<br>';
     buckets = [ self.files.length ];
     for(var i=0; i<self.files.length; ++i){
       var blob = self.files[i];
       var progressFile = document.createElement('div');
       var meterFile = document.createElement('span');
       status.appendChild(progressFile);
       progressFile.appendChild(meterFile);
       if( !validateFP || validateFP(blob['name']) ){
         if( filesz < blob.size ){
           meterFile.textContent = '    ' + blob['name'] + ' : size (' + blob.size + ' bytes) exceeded the maximum file size (' + filesz + ')' +
                                   '. To increase the allowed size, please contact your TA or Vocareum for assistance.';
           --buckets[0];
         } else {
           vcUploadFile(status, false, meterFile, blob, blob['name'], 0, vcUploadChunkSize, blob.size, args, buckets, endFP);
         }
       } else {
         --buckets[0];
         meterFile.textContent = '    ' + blob['name'] + ' : skipped as it is not valid for this operation';
       }
     }
     status.scrollTop = status.scrollHeight;
     vcUploadCheckDone(status, buckets, 0, args, endFP);
   };
  listFile.addEventListener('change', listener, false);
  return listener;
}
</script>









<link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/codemirror.css">
<link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/neat.css">
<link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/merge.css">
<link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/show-hint.css">

<style type="text/css">

#waitClusterButton:disabled,
#waitClusterButton[disabled] {
  border: 0px;
}

#waitClusterButton:disabled:hover { 
  background-color: #abbac3 !important;
}

.CodeMirror {
    font-size: 13px;
    border: 1px solid #eee; /* #eee */
    width: auto;
    height: 100%;
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}

.CodeMirror-scroll {
  overflow-y: auto;
  overflow-x: auto;
  margin-bottom: -10px !important;
  padding-bottom: 10px !important;
}

.CodeMirror-linenumber {
  color: #000 !important;
}

.CodeMirror-hints, .CodeMirror-hint, .CodeMirror-hint-active { 
    z-index:2147483647 !important;
}

.clabs-state-modal-tr-vm {
    border-bottom:1px solid lightgray;
}
.clabs-state-modal-td-vm {
  text-align:left !important;
  border:0px !important; 
  padding-bottom:0px !important;
}
.clabs-state-modal-td-state {
  text-align:right !important;
  border:0px !important; 
  padding-bottom:4px !important;
}

.clab-toolbar-btn {
  margin-top: 2px;
  margin-left: 7px;
}

.vmp-overlay {
  position: relative;
  top:0;
  left:0;
  width:100%;
  height:100%;
  opacity:0.3;
  background:#b3b3b3;
  text-align:center;
}

/*---------Reset Button Style------------*/
.btn-reset {
  display: inline-block;
  padding: 4px 10px 4px;
  font-size: 13px;
  line-height: 18px;
  color: #2D3B45;
  text-align: center;
  text-shadow: 0 1px 1px rgba(255, 255, 255, 0.75);
  background-color: #f5f5f5;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffff', endColorstr='#e6e6e6', GradientType=0);
}
.btn-reset:hover {
  color: #333333;
  text-decoration: none;
  background-color: #e6e6e6;
  background-position: 0 -15px;
  -webkit-transition: background-position 0.1s linear;
  -moz-transition: background-position 0.1s linear;
  -ms-transition: background-position 0.1s linear;
  -o-transition: background-position 0.1s linear;
  transition: background-position 0.1s linear;
  cursor: pointer;
}


/*---------Submit Button Style----------------*/
.btn-submit {
  display: inline-block;
  padding: 4px 10px 4px;
  font-size: 13px;
  line-height: 18px;
  color: #EEEEEE;
  text-align: center;
  text-shadow: 0 1px 1px rgba(255, 255, 255, 0.75);
  background-color: #393939;
  filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ffffff', endColorstr='#e6e6e6', GradientType=0);
}
.btn-submit:hover {
  color: #333333;
  text-decoration: none;
  background-color: #e6e6e6;
  background-position: 0 -15px;
  -webkit-transition: background-position 0.1s linear;
  -moz-transition: background-position 0.1s linear;
  -ms-transition: background-position 0.1s linear;
  -o-transition: background-position 0.1s linear;
  transition: background-position 0.1s linear;
  cursor: pointer;
}

/*--------------Status Indicator------------*/
.led {
  height: 10px;
  width: 10px;
  background-color: #bbb;
  border-radius: 50%;
  display: inline-block;
  padding: auto auto;
  margin-left: 4px;
}

.led-red {
    background-color: red;
}

.led-green {
    background-color: #90ee90;
}

.led-yellow {
    background-color: yellow;
}

/*------------Custom Tooptip--------------------*/
.custom-tooltip {
  position: relative;
  display: inline-block;
}

.custom-tooltip .custom-tooltiptext {
  visibility: hidden;
  width: 120px;
  background-color: black;
  color: #fff;
  text-align: center;
  border-radius: 6px;
  padding: 5px 0;
  display: inline-block;
  
  /* Position the tooltip */
  position: absolute;
  z-index: 100;
  top: 100%;
  left: 50%;
  margin-left: -60px;
  margin-top: 10px;
}

.custom-tooltip:hover .custom-tooltiptext {
  visibility: visible;
}


.popover .popover-content {
  margin: 0px;
  padding: 0px 3px 0px 3px;
  font-size: 11px;
}

.voc-a11y-btn {
  background-color: var(--voc-a11y-secondary-text) !important;
}
.voc-a11y-btn:hover {
  background-color: var(--voc-a11y-text) !important;
}

.voc-code {
  font-family: 'Courier New', Courier, monospace;
  color: white;
  background-color: gray;
  padding: 2px;
  font-size: 100%;
}

</style>

<!-- filetree panel -->

<link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/codemirror.css">
<link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/neat.css">
<link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/merge.css">
<link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/show-hint.css">

<style type="text/css">

.CodeMirror {
    font-size: 13px;
    border: 1px solid #eee;
    width: auto;
    height: 100%;
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}

.CodeMirror-scroll {
  overflow-y: auto;
  overflow-x: auto;
  margin-bottom: -10px !important;
  padding-bottom: 10px !important;
}

.CodeMirror-linenumber {
  color: #000 !important;
}
.CodeMirror-hints, .CodeMirror-hint, .CodeMirror-hint-active { 
    z-index:2147483647 !important;
}
#buildtextarea {
	background-color: white;
    overflow: auto;
    border: 1px solid light-gray;
    padding: 5px;
    margin-bottom: 0;
}

.tree {
  font-size: 12px;
}

.tree .tree-selected > [class*="icon-"]:first-child {
  color: 0 !important;
}

#editor_current_file .icon-spin {
margin-right: 5px;
}

</style>

<!-- begin of modals -->

<div id="modal-table-report-submission" class="modal hide fade" tabindex="-1" style="height:60% !important;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">×</button>
      <span style="font-size: 15px">Submission Report</span>
    </div>
  </div>

   <div id="report_submission_div" class="modal-body no-padding">
     <p id="report_submission_msg_box" style="margin-left: 10px !important; font-family: Courier; white-space: pre;"></p>
   </div>
   
</div>

<div id="modal-table-report-grading" class="modal hide fade" tabindex="-1" style="height:60% !important;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">×</button>
      <span style="font-size: 15px">Grading Report</span>
    </div>
  </div>
                        
   <div id="report_grading_div" class="modal-body no-padding">
     <p id="report_grading_msg_box" style="margin-left: 10px !important; font-family: Courier; white-space: pre;"></p>
   </div>

</div>

<div id="modal-table-report-all-html" class="modal hide fade" tabindex="-1">
  <div class="modal-header no-padding">
    <div class="table-header">

      <button type="button" class="close" data-dismiss="modal">×</button>
      <span id="modal-table-report-all-html-title">Grading Report</span>
      <a class="" target="_blank" href="" id="modal-table-report-all-html-link">
					<i style="margin-left:10px" class="icon-external-link icon-only white"></i>
			</a>
    </div>
  </div>

  <div class="modal-body" id="modal-table-report-all-html-body">
      <iframe id="modal-table-report-all-html-iframe" src="" width="100%" height="100%" frameborder="0"></iframe>
  </div>
</div>

<div id="modal-table-report-run" class="modal hide fade" tabindex="-1" style="height:60% !important;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">×</button>
      <span style="font-size: 15px">RUN Report</span>
    </div>
  </div>
                        
   <div id="report_run_div" class="modal-body no-padding">
     <p id="report_run_msg_box" style="margin-left: 10px !important; font-family: Courier;"></p>
   </div>
</div>

<div id="modal-table-report-build" class="modal hide fade" tabindex="-1" style="height:60% !important;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">×</button>
      <span style="font-size: 15px">BUILD Report</span>
    </div>
  </div>

   <div id="report_build_div" class="modal-body no-padding">
     <p id="report_build_msg_box" style="margin-left: 10px !important; font-family: Courier;"></p>
   </div>
</div>

<!-- view output start -->
							<div id="modal-table-output" class="modal hide fade" tabindex="-1">
								<div class="modal-header no-padding">
									<div class="table-header">
										<button type="button" class="close" data-dismiss="modal">
											<h3>Close</h3>
										</button>
											<span style="font-size:20px">Output</span>
									</div>
								</div>

								<div class="modal-body no-padding" id="div-output" style="height:600px;">

								</div>
							</div>
<!-- end view output -->

<!-- diff window -->
							<div id="modal-table-diff" class="modal hide fade" tabindex="-1">
								<div class="modal-header no-padding">
									<div class="table-header">
										<button type="button" class="close" data-dismiss="modal">
																						<h3>Close</h3>
										</button>
											<span style="font-size:20px">View Changes</span>
									</div>
								</div>

								<div class="modal-body no-padding" id="div-diff">

								</div>
							</div>
<!-- end diff window -->

<!-- video viewer -->
    <div id="video-viewer-modal" class="modal hide fade" tabindex="-1">
		    <div class="modal-header no-padding">
            <div class="table-header">
              <button type="button" class="close" data-dismiss="modal">×</button>
                Video viewer
            </div>
				</div>

        <div class="modal-body">
            <table><tbody><tr><td>
               <div id="video-viewer-modal-div">
              </div>           
            </td></tr></tbody></table>
        </div>
   </div>
<!-- end video viewer -->                           
<!-- image viewer -->
    <div id="image-viewer-modal" class="modal hide fade" tabindex="-1">
		    <div class="modal-header no-padding">
            <div class="table-header">
              <button type="button" class="close" data-dismiss="modal">×</button>
                Image viewer
            </div>
				</div>

        <div class="modal-body">
            <table><tbody><tr><td>
                            <img id="image-viewer-modal-image">
            </td></tr></tbody></table>
        </div>
   </div>
<!-- end image viewer -->

<!-- largefile viewer --> 
    <div id="largefile-viewer-modal" class="modal hide fade" tabindex="-1" style="height:200px">
		    <div class="modal-header no-padding">
            <div class="table-header">
              <button type="button" class="close" data-dismiss="modal">×</button>
                File too big for viewer
            </div>
				</div>

        <div class="modal-body">
                <h4>The file is too big for the viewer. Please download the file instead.</h4>
                <br><mute>Only files smaller than 1 MB are shown in the viewer.</mute>
        </div>
   </div>
<!-- end largefile viewer -->

<!-- Uploader -->
 <div id="modal-upload-wait" class="modal hide fade" tabindex="-1">
   <div class="modal-header no-padding">
     <div class="table-header">
       <button type="button" class="close" onclick="afterUpload();" data-dismiss="modal">×</button>
       <span style="font-size:20px">Status</span>
     </div>
   </div>

   <div id="uploadWaitMsgDiv" class="modal-body no-padding">
     <p id="uploadWaitMsgBox" style="margin-left: 20px !important;"></p>
   </div>
 </div>

<!--  download -->
<div id="modal-table-download_from_ide" class="modal hide fade" tabindex="-1" style="height:200px">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">
	<h3>Close</h3>
      </button>
      <span style="font-size:15px">Preparing ZIP File</span>
    </div>
  </div>
  
  <div class="modal-body" id="div-output-download_from_ide" style="height:200px;">
    
  </div>
</div>	

<!-- other viewer -->
    <div id="other-viewer-modal" class="modal hide fade" tabindex="-1">
      <div class="modal-header no-padding">
        <div class="table-header">
          <button type="button" class="close" data-dismiss="modal">×</button>
            File viewer
        </div>
      </div>

      <div class="modal-body">
          <table><tbody><tr><td>
               <object type="application/pdf" id="other-viewer-modal-area" width="100%" height="100%">No default viewer found</object>
          </td></tr></tbody></table>
      </div>
    </div>
<!-- end other viewer -->

<!-- browser viewer -->
    <div id="browser-viewer-modal" class="modal hide fade" tabindex="-1">
      <div class="modal-header no-padding">
        <div class="table-header">

          <button type="button" class="close" data-dismiss="modal">×</button>
          <span id="browser-viewer-title">Viewer</span>
          <a class="" target="_blank" href="" id="browser-viewer-link">
							<i style="margin-left:10px" class="icon-external-link icon-only white"></i>
					</a>
        </div>
      </div>

      <div class="modal-body" id="browser-viewer-body">
          <iframe id="browser-viewer-iframe" src="" width="100%" height="100%" frameborder="0"></iframe>
      </div>
    </div>
<!-- browser viewer -->

<!-- gallery viewer -->
      <div id="gallery-viewer-modal" class="modal hide fade" tabindex="-1">
		    <div class="modal-header no-padding">
            <div class="table-header">
              <button type="button" class="close" data-dismiss="modal">×</button>
                Gallery Thumbnail
            </div>
				</div>

        <div class="modal-body">
            <table><tbody><tr><td>
                                <img src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/noimage.png">
            </td></tr></tbody></table>
        </div>
   </div>
  <!-- end gallery viewer -->


<!-- end of modals -->

<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/codemirror.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/clike.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/xml.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/python.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/php.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/markdown.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/gfm.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/overlay.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/javascript.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/active-line.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/matchbrackets.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/closebrackets.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/closetag.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/diff_match_patch.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/merge.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/show-hint.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/javascript-hint.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/html-hint.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/xml-hint.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/sql-hint.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/css-hint.js"></script>

<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/search.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/searchcursor.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/dialog.js"></script>
<link rel="stylesheet" href="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/dialog.css">

<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/css.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/sql.js"></script>

<!-- <script src="../shared/ace/assets/js/fuelux/data/fuelux.tree-sampledata.js"></script> -->
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/fuelux.tree.js"></script>
<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/ace-elements.js"></script>
<script type="text/javascript">


var $assets = "assets";//this will be used in fuelux.tree-sampledata.js
var gloss_theme = 0;
var editor_content_change = 0;
var viewer_last_fname = null;
var viewer_last_fpath = null;
var viewer_first_fpath = "/";

var doc_panel_width = 0;
var dynamic_tree_data;
var tree_data_files = "";
var syncworkarea_messageid = 0;

var viewSubmissionsViaVNB = false;
var vocNotebookIde = false;
var vocNotebookTeacherMode = false;

function isTextFile(ext) {
	// // EDIT_EXT
	var js_ext_array = ["java","xml","txt","text","py","c","C","cpp","cc","h","php","js","json","sql","html","vhd","vhdl","properties","mak","hpp","htm","html","sh","pl","pm","ml","R","csv","s","asm","m","pml","config","css","rb"];
	if (!ext) return false;
		if (js_ext_array.indexOf(ext.toLowerCase()) == -1) return false; 
		return true;
}

function isVidFile(ext) {
	var js_ext_array = ["mp4"];
	if (!ext) return false;
		if (js_ext_array.indexOf(ext.toLowerCase()) == -1) return false; 
		return true;
}

function isImgFile(ext) {
	var js_ext_array = ["jpg","jpeg","bmp","gif","png"];
	if (!ext) return false;
		if (js_ext_array.indexOf(ext.toLowerCase()) == -1) return false; 
		return true;
}

function isOtherFile(ext) {
	var js_ext_array = ["pdf"];
	if (!ext) return false;
		if (js_ext_array.indexOf(ext.toLowerCase()) == -1) return false; 
		return true;
}  

function isBrowserViewableFile(ext) {
	var js_ext_array = ["html","htm","md","markdown","mdown"];
	if (!ext) return false;
		if (js_ext_array.indexOf(ext.toLowerCase()) == -1) return false; 
		return true;
}      

function canOpenFile(filename) {
		var ext_index = filename.lastIndexOf('.');
		if (ext_index == -1) {
			ext = null;
		} else {
        	ext = filename.substring(ext_index + 1);
		}

		if ((ext == null) || isTextFile(ext)) {
			return true;
		} else {
			return false;
		}
}  

function findMode(filename) {
	ext = filename.split('.').pop().toLowerCase();
	switch (ext) {
		case "java": 
			mode = "text/x-java";
			break;
		case "xml": 
			mode = { name: "text/html", alignCDATA: true };
			break;
		case "py": 
			mode = "text/x-python";
			break;			
		case "php":
			mode = "application/x-httpd-php";
			break;
		case "c":
		case "h":
			mode = "text/x-csrc";
			break;
		case "hpp":
		case "cpp":
		case "c++":
			mode = "text/x-c++src";
			break;
		case "md":
			mode = "gfm";
			break;
		case "js":
			mode = { name: "text/javascript", globalVars: true };
			break;
		case "css":
			mode = "text/css";
			break;
		case "sql":
			mode = "text/x-sql";
			break;
		default: 
			mode = { name: "text/html", alignCDATA: true };
			break;
	}
	return mode;
}

function findReadOnlyDelimiter(filename) {
	var delim = filename.split('.').pop().toLowerCase();
	switch (ext) {
		case "java": 
			delim = "//";
			break;
		case "py": 
			delim = "#";
			break;			
		case "php":
		case "c":
		case "cpp":
		case "c++":
		default: 
			delim = "//";
			break;
	}
	return delim;
}	

var vocIndentSize = 4;

function vocBetterTab(cm) {
  if (cm.somethingSelected()) {
    cm.indentSelection("add");
  } else {
    cm.replaceSelection(cm.getOption("indentWithTabs")? "\t":
      Array(cm.getOption("indentUnit") + 1).join(" "), "end", "+input");
  }
}

function vocDefaultTab(cm) {
  if (cm.somethingSelected()) {
    cm.indentSelection("add");
  } 
  else {
    cm.execCommand("insertTab");
  }
}

var editor = null;
var cm_mode;
var lastEditTime = 0;
var numEdits = 1;

function initEditor() {
  
  // if Editor element can't be found, don't init editor
  if(newLayout && $('#codearea0').length == 0) return;
  
	//console.log('initEditor');
  //alert(1);
  /*
	editor = CodeMirror.fromTextArea(document.getElementById("codearea0"), {
	    lineNumbers: true,
	    styleActiveLine: true,
	    matchBrackets: true,
	    autoCloseBrackets: false,
	    autoCloseTags: false,
	    lineWrapping: true,
	    indentUnit: vocIndentSize,
	    smartIndent: true,
	    mode: {name: "xml", alignCDATA: true},
		  theme: "neat"
	});
  */
  editor = null;
  
	editor = CodeMirror.fromTextArea(document.getElementById("codearea0"), {
	    	    lineNumbers: true,
	    	    styleActiveLine: true,
	    matchBrackets: true,
	    autoCloseBrackets: false,
	    	    autoCloseTags: true,
	    	    lineWrapping: true,
	    indentUnit: vocIndentSize,
	    smartIndent: true,
	    mode: {name: "xml", alignCDATA: true},
		theme: "neat",
	    	      extraKeys: { Tab: vocBetterTab },
	    	});
	
	//console.log('end editor: ' + editor);
	//alert(2);
	cm_mode = findMode("");
	editor.setOption("mode", cm_mode);
	editor.setOption("readOnly", true);  
	
	editor.clearHistory();

	var map = {
			    "Cmd-E": function(cm){
			      //console.log("Command E");
			      var terminalFrame = document.getElementById('panel2-iframe');
			      if (document.getElementById('consolediv') && ($('#consolediv').height() != 0) && terminalFrame) {
			          //terminalFrame.focus();
			          terminalFrame.contentWindow.vocLaunchTerminalButton().focus();
			      } else if (document.getElementById('navbar-logo')) {
			          document.getElementById('navbar-logo').focus();
			      } else {
			          // set focus to any other element if navbar is not present
			          document.getElementById('breadcrumb-type-link').focus();
			      }
			    }, 
			    "Ctrl-Space": "autocomplete"
	}
	editor.addKeyMap(map);

	editor.on("change", handleEditorChange);	 
	editor.on("blur", handleUnfocusEvent);	 

	var canpaste = false;
	if (canpaste) {
	  editor.on("paste", disablePaste);	 
	}

	
}

function handleEditorChange(doc, param) {
	lastEditTime = new Date().getTime();
	if (numEdits) {
               if( save_in_progress ){
                 $('#editor-save-status-btn').hide();
                 $("#editor-save-status").show();
                 $("#editor-save-status").html("Saving...pending");
               } else {
                 $('#editor-save-status-btn').show();
                 $('#editor-save-status-btn').html("Save pending");
                 $("#editor-save-status").hide();
               }
	}
	numEdits++;
}	 
	 
	 
function vocIsFileReadOnly(fpath) {
	 	return false;
}

function handleUnfocusEvent(cm) {
	if (isSaveNeeded()) {					
		voc_save(true, "Saving");
	}
}

function disablePaste(cm, event) {
    event.preventDefault();
    show_voc_gritter(false, 'This functionality has been disabled', true);
}	 

function multiSelectShowHideBtns() {
  var showNewBtn = 1;
  var showRenameBtn = 1;
  var showDeleteBtn = 1;
  var showUploadBtn = 1;
  var showCopyBtn = 1;
  var showPasteBtn = 1;
  var showDownloadBtn = 1;

  var selectedItems = $('#tree1').tree('selectedItems');
  if (selectedItems.length > 1) { // can only copy, delete, download multiple items at once
    showNewBtn = 0;
    showRenameBtn = 0;
    showUploadBtn = 0;
    showPasteBtn = 0;
  }
    for (const el of selectedItems) {
    if (selectedItems[0].type == 'item') {
      showNewBtn = 0;
      showUploadBtn = 0;
      showPasteBtn = 0;
    }
    if (el.ed != 1) {
      showDeleteBtn = 0;
      showRenameBtn = 0;
    }
    if (el.ec != 1) {
      showNewBtn = 0;
      showUploadBtn = 0;
      showPasteBtn = 0;
    }
    if (el.path == './resource') {
      showNewBtn = 0;
      showRenameBtn = 0;
      showDeleteBtn = 0;
      showUploadBtn = 0;
      showCopyBtn = 0;
      showPasteBtn = 0;
      showDownloadBtn = 0;
    } else if (el.path.search(/resource/) >= 0) {
              showNewBtn = 0;
        showRenameBtn = 0;
        showDeleteBtn = 0;
        showUploadBtn = 0;
        showPasteBtn = 0;
          }
    if (el.path.search(/resource\/(asnlib|lib)\/publicdata/) >= 0) {
      if (el.type == 'item') {
        showCopyBtn = 0;
      }
    }
  }
  if (showNewBtn && vmp_panel1)      { $('#newbtn').show();        } else { $('#newbtn').hide(); }
  if (showRenameBtn && vmp_panel1)   { $('#filerenamebtn').show(); } else { $('#filerenamebtn').hide(); }
  if (showDeleteBtn && vmp_panel1)   { $('#filedelbtn').show();    } else { $('#filedelbtn').hide(); }
  if (showUploadBtn && vmp_panel1)   { $('#fileuploadbtn').show(); } else { $('#fileuploadbtn').hide(); }
  if (showCopyBtn && vmp_panel1)     { $('#filecopybtn').show();   } else { $('#filecopybtn').hide(); }
  if (showPasteBtn && vmp_panel1)    { showPasteFileBtn();         } else { hidePasteFileBtn(); }
  if (showDownloadBtn && vmp_panel1) { $('#downloadbtn').show();   } else { $('#downloadbtn').hide(); }
}

//var for copypaste feature
var copyPasteClipboard = false;
if (vocCookiesDisabled) {
  copyPasteClipboard = false;
}
var copyCBValue = '';
function saveCBClipboard(path, paths=[])
{
    $.ajax({
      url: "../util/vcput.php",
      type: "post",
      data: {
        a: "saveClipboard",
        userid:3209731,
        asnid:2792000,
        mode:'s',
        version:'0',
        path:path,
        paths: JSON.stringify(paths)
      },
      success: function(data) {
        if (data.indexOf('ERROR:INVALID_SESSION>') == 1) { // invalid session
          refreshNewSessionPage();
        }

        try {
          resp = jQuery.parseJSON(data);
        } catch(err) {
          show_voc_gritter(false, "Internal error: invalid json", true);
          return;
        }     
        if(resp.status == 'Error'){
          show_voc_gritter(false, resp.message, false);
        } else {
          if (vocCookiesDisabled) {
            copyCBValue = resp.val;
            //console.log("copyCBValue: " + copyCBValue);
          }
          show_voc_gritter(false, "Copied", false);
          copyPasteClipboard = true;
        }
        return false;
      }
    });
}
var pasteprogress=0;
function pasteCB(type, path, source, msg, confirm) {
      /* default value to be used for confirm - better to do it this way
       * than doing it in the funtion signature otherwise some browser
       * versions e.g. IE, Edge has problem showing IDE page
       */
      if(confirm === undefined) {
        confirm = false;
      }
      if( pasteprogress>0 ){
        alert('Paste-workarea is in progress, please wait until the prior operation finishes.');
        return false;
      }
      pasteprogress++;
      var stepstr = "&stepid=2792000";
      var url = "../util/vcsave.php?asnid=2791999"+stepstr+"&mode=s&version=0&type="+type+(confirm? '&confirm=1' : '') + "&vm="+vm_extip+"&labtype=1";
      //console.log("Calling pasteCB: " + copyCBValue);
      $.ajax({
        type: 'POST',
        url: url,
        async: false,
        data: {filepath: "./"+path , sourcepath: "./"+source, copyCBValue: copyCBValue}
        })
          .done(function(ret_val) {
                  if(pasteprogress) --pasteprogress;
                  if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
                      refreshNewSessionPage();
                  }
                  if (ret_val.indexOf('<ERROR:') !== -1) { // error
                    show_voc_gritter(false, ret_val.substring(7), true);
                  } else {
                    show_voc_gritter(false, msg, false);
                    refreshFileTree(true, true);
                  }

          })
             .fail(function(ret_val) {
                  if(pasteprogress) --pasteprogress;
                  show_voc_gritter(false, "Paste-workarea failed. Please check your internet connection", true);
          });
          return true;
}


function getCodeComment(which) {
	var obj = null;
	switch(which) {

						default:
							return null;
							break;
	}
	return obj;
}


var user_codecomments = [];
var user_codecomment_map = [];

var DataSourceTree = function(options) {
  this._data 	= options.data;
  this.url = options.url;
}

DataSourceTree.prototype.data = function(options, callback) {
  if (this.url) {
    $.ajax({
      url: this.url,
      data: {
        t: 'getFileTreeV2',
        mode: 's',
        ownerid: 3209731,
        tide: 0,
        asnid: 2791999,
        asnstep: 2792000,
        currversion: '0',
        globalunfoldpath: './work',
        path: options.path ? options.path : ''
      },
      success: function(tree_data) {
        //console.log('Dynamic Tree Load');
        //console.log(tree_data);
        dynamic_tree_data = tree_data;
        callback({data: JSON.parse(tree_data)});
      },
      error: function() {
        console.log('failed to load tree');
        callback({data: {}});
      }
    });
  } else { // use frontend implementation to build tree
    // copied from fuelux.tree-sampledata
    var self = this;
    var $data = null;

    if(!("name" in options) && !("type" in options)){
      $data = this._data;//the root tree
      callback({ data: $data });
      return;
    }
    else if("type" in options && options.type == "folder") {
      if("additionalParameters" in options && "children" in options.additionalParameters)
        $data = options.additionalParameters.children;
      else $data = {}//no data

    if($data != null)//this setTimeout is only for mimicking some random delay
      setTimeout(function(){callback({ data: $data });} , parseInt(Math.random() * 0));
    }
  }
};
var treeDataSource;
    var tree_data;


 tree_data = { 
  'resource' : {name:'resource',  base:'1',  type:'folder', nc:'',  extraHtml:'<i class=\"icon-lock bigger-140\" style=\"padding-left:4px\"></i>',  unfold:'1',  ed:'0', ec:'0', path:'./resource',} , 
 'work' : {name:'work',  base:'1',  type:'folder', nc:'', unfold:'1', ed:'0', ec:'1', path:'./work',} , 
 } 

 tree_data['resource']['additionalParameters'] = { 
 'children' : { 
 'lib' : {name:'lib',  type:'folder', nc:'0',  extraHtml:'<a class="badge badge-info pointer pull-right voc-tree-help tree-btn" tabindex="0" role="button" style="margin-right: 20px;" data-target="#LIB-help-modal" data-toggle="modal">?</a>',  unfold:'0',  ed:'0', ec:'0', path:'./resource/lib',} , 
 'asnlib' : {name:'asnlib',  type:'folder', nc:'0',  extraHtml:'<a class="badge badge-info pointer pull-right voc-tree-help tree-btn" tabindex="0" role="button" style="margin-right: 20px;" data-target="#ASNLIB-help-modal" data-toggle="modal">?</a>',  unfold:'0',  ed:'0', ec:'0', path:'./resource/asnlib',} , 
 'scripts' : {name:'scripts',  type:'folder', nc:'0',  extraHtml:'<a class="badge badge-info pointer pull-right voc-tree-help tree-btn" tabindex="0" role="button" style="margin-right: 20px;" data-target="#Scripts-help-modal" data-toggle="modal">?</a>',  unfold:'0',  ed:'0', ec:'0', path:'./resource/scripts',} , 
 'startercode' : {name:'startercode',  type:'folder', nc:'0',  extraHtml:'<a class="badge badge-info pointer pull-right voc-tree-help tree-btn" tabindex="0" role="button" style="margin-right: 20px;" data-target="#StarterCode-help-modal" data-toggle="modal">?</a>',  unfold:'0',  ed:'0', ec:'0', path:'./resource/startercode',} , 
 } 
 } 

 tree_data['resource']['additionalParameters']['children']['asnlib']['additionalParameters'] = { 
 'children' : { 
 '__error.dir_does_not_exist__' : {name:'__error.dir_does_not_exist__',  extraHtml:'',   type:'item', nc:'0', ed:'0', ee:'0', path:'./resource/asnlib/__error.dir_does_not_exist__',} , 
 } 
 } 

 tree_data['resource']['additionalParameters']['children']['lib']['additionalParameters'] = { 
 'children' : { 
 '__error.dir_does_not_exist__' : {name:'__error.dir_does_not_exist__',  extraHtml:'',   type:'item', nc:'0', ed:'0', ee:'0', path:'./resource/lib/__error.dir_does_not_exist__',} , 
 } 
 } 

 tree_data['resource']['additionalParameters']['children']['scripts']['additionalParameters'] = { 
 'children' : { 
 '__error.dir_does_not_exist__' : {name:'__error.dir_does_not_exist__',  extraHtml:'',   type:'item', nc:'0', ed:'0', ee:'0', path:'./resource/scripts/__error.dir_does_not_exist__',} , 
 } 
 } 

 tree_data['resource']['additionalParameters']['children']['startercode']['additionalParameters'] = { 
 'children' : { 
 '__error.dir_does_not_exist__' : {name:'__error.dir_does_not_exist__',  extraHtml:'',   type:'item', nc:'0', ed:'0', ee:'0', path:'./resource/startercode/__error.dir_does_not_exist__',} , 
 } 
 } 


tree_data_files = ' ./resource ./work ./resource/lib ./resource/asnlib ./resource/scripts ./resource/startercode ./resource/asnlib/__error.dir_does_not_exist__ ./resource/lib/__error.dir_does_not_exist__ ./resource/scripts/__error.dir_does_not_exist__ ./resource/startercode/__error.dir_does_not_exist__'
    treeDataSource = new DataSourceTree({data: tree_data});

//var treeDataSource = new DataSourceTree({data: tree_data});

var codeCommentWidgets = [];

function removeLineWidgets() {
            if (codeCommentWidgets.length) {
                for (var i = 0; i < codeCommentWidgets.length; i++) {
                    codeCommentWidgets[i].clear();
                }

                codeCommentWidgets = [];
        	}
}

function showCodeComment(ids) {
    var id, codeComment, node;

    removeLineWidgets();
    if (ids == '' || ids == null) {
        return;
    } 
    var ids = ids.split(',');

    

    for (var i = 0; i < ids.length; i++) {

    id = ids[i];

    codeComment = getCodeComment(id);
    
    if (codeComment.selectedPeer == 1) {
        commenterName = "Peer reviewer";
    } else {
                    commenterName = codeComment.name;
            }

    node = $('\
        <div class="vocborder-1" style="position: relative; padding: 4px 30px 4px 6px; background: #f7f7f7; border-color: #ddd !important; border-left: none !important; margin: 4px 0 !important; z-index: 4;">\
            <strong style="color: #3b7fd4;">' + commenterName + ', ' + codeComment.time + ' ago</strong>\
            ' + (codeComment.selectedComment.length ? ('<pre style="padding-top: 4px;">' + codeComment.selectedComment + '</pre>') : '')  + '\
        </div>'
    )[0];

    codeCommentWidgets.push(editor.addLineWidget(codeComment.selectedLine, node, {above: false, coverGutter: false, noHScroll: true}));
    }
}

var readonlyWidgets = [];

function clearReadOnlyWidgets() {
    if (readonlyWidgets.length) {
        for (var i = 0; i < readonlyWidgets.length; i++) {
            readonlyWidgets[i].clear();
        }

        readonlyWidgets = [];
    }

}	

function addReadOnlyWidget(widget) {
    readonlyWidgets.push(widget);
}	

function voc_process_readonly(cm, delim, begins, ends) {
    var expectingBegin = true;
    for (i=0; i< cm.doc.lineCount(); i++) {
    
    var test = delim+"READONLY_BEGIN";
    
        var val = cm.getLine(i);
        val = val.replace(/ /g,'');
        if (val == delim+"READONLY_BEGIN") {
            if (!expectingBegin) return false; 
            begins.push(i);
            expectingBegin = false;
        } else if (val == delim+"READONLY_END") {
        	if (expectingBegin) return false;
        	ends.push(i);
        	expectingBegin = true;
        } else {
        }
    }
    if (begins.length && (begins.length == ends.length)) {
        return true;
    } else {
        return false;
    }
}

var largefileurl = null;
var initialFileOpen = true;

function voc_get_viewer_code(fpath, fname, lineNum, codeComments){		

  if (vocNotebookIde && codeComments == null) {
    codeComments = '';
    let match1 = null; let match2 = null;

    // if file is being loaded from the workarea, then get all available code comments for the file
    //    - i.e. all code comments form all submissions (for 'Live Code Comments')
    if ((match1 = fpath.match(/^\.\/work\//))) {

      for (let key in user_codecomment_map) {

        if ((match2 = key.match(/^Submissions\/Submission_\d+\//)) || (match2 = key.match(/^\.\/home\/labsuser\//))) {

          /*
          // gets substring between _ and / (e.g. Submission_1/)
          let subNum = match2[0].match(/(\d+)/);
          if (0 && subNum) {
            subNum = subNum[0]; 
            codeCommentIds = user_codecomment_map[key].split(',');

            // itterates through user_codecomment
            for (let i = 0; i < codeCommentIds.length; i++) {
              let codeCommentId = codeCommentIds[i];
              let codeComment = user_codecomments[codeCommentId];

              if (typeof codeComment == 'undefined') {
                user_codeComments[codeCommentId].subNum = subNum;
              }

            }

          } */
          if (key.substring(match2[0].length) == fpath.substring(match1[0].length)) codeComments += (codeComments == '' ? '' : ',') + user_codecomment_map[key];
        }
      }
    }
  }
  //console.log("voc_get_viewer_code");
  if(vocNotebookIde) displayFiletreeLoadingScreen(1);

    $("#editor_current_file").html('<i class="icon-spin icon-spinner"></i>Reading ... ' + fpath.substring(2));
	

  //console.log('voc_get_viewer_code');
  
  var stepstr = "&stepid=2792000";        
  var data = fpath; 
  var url = "";
  var payload = {};

  if (vocNotebookIde) {
    if(false) var graderStr = "&fromGraderIde=1&subNum=0";
    
    try {
      url = "../vnb/vnb_api.php";
      var ownershipStr = "&version=0" + stepstr + (graderStr ?? "");
      ownershipStr = ownershipStr.startsWith('&') ? ownershipStr.substring(1) : str;
      var ownershipJSON = ownershipStr.split('&');

      payload = {
        "f": "filefetch",
        "mode": "s",
        "getcode": 1,
        "data": fpath,
        "getlarge": 0,
        "userid": 3209731,
        "asnid": 2791999,
        "vm": vm_extip,
        "labtype": "1",
      };

      if (ownershipJSON.length > 0) {
        ownershipJSON.forEach(function(pair) {
          var keyVal = pair.split('=');
          payload[keyVal[0]] = keyVal[1];
        });
      }
    } catch (e) {
      payload = {};
      url = "../util/vcprojapi.php?t=filefetch&mode=s&getcode=1&data="+encodeURIComponent(fpath)+"&getlarge=0&asnid=2791999&version=0"+stepstr + "&vm="+vm_extip+"&labtype=1";
    }
  } else {
    url = "../util/vcprojapi.php?t=filefetch&mode=s&getcode=1&data="+encodeURIComponent(fpath)+"&getlarge=0&asnid=2791999&version=0"+stepstr + "&vm="+vm_extip+"&labtype=1";
  }

  // if there are currently no files opened and an initial file is being opened, then we need to set the current file
  	$.post(url, payload ?? {},function(ret_val)
	{
		if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
			window.location.reload();
			return;
		}
  
		if (ret_val.indexOf('VOCAREUM-ERROR') !== -1) { // due to Db traffic or something
                   show_voc_gritter(false, "Error retrieving file, please try again", true);
                   return;
                }
	  if (ret_val.indexOf('<ERROR:FILE_TOO_BIG>') !== -1) { // too large to show in editor
	      largefileurl = url + "&dl=1";
	      $('#largefile-download').attr('href',largefileurl);
	      $('#largefile-viewer-modal').modal('show');
	      return;
	  }	
	
		//mhui
		$("#editor_current_file").html('');

		//$('#codebtn').tab('show');

		numEdits = 0; // reset num of edits for this file

    
    // if file is .ipynb and Vocareum Notebook is detected, go thorugh Vocareum Notebook Flow
    if(vocNotebookIde || viewSubmissionsViaVNB) {
      openFileInVocNotebook(ret_val, fpath, fname, codeComments == '' ? null : codeComments);
      return;
    }
    
		cm_mode = findMode(fpath);
		editor.setOption("mode", cm_mode);
                            $("#editor-save-status").show();
                            $('#editor-save-status-btn').hide();
                            if(ret_val.length>8388608/*8MB*/ || (fpath && fpath.search(/^\.\/(LIB|ASNLIB|resource\/lib|resource\/asnlib)\/publicdata\//)>=0) ){
                              editor.setOption("readOnly", true);
                              if(ret_val.length>8388608){
                                $("#editor-save-status").html("Read only[<font color='red'>8MB+</font>]");
                              } else {
                                $("#editor-save-status").html("Read only");
                              }
                            } else {
                              $("#editor-save-status").html("");
                            }
		editor.setValue(ret_val);
		editor.clearHistory();

		editor_content_change = editor.doc.changeGeneration();
		
        // check ext. check if copy of default
		var ro_begins = [];
		var ro_ends = [];
		var delim = findReadOnlyDelimiter(fpath);

        var readonly_lines = voc_process_readonly(editor, delim, ro_begins, ro_ends);
        
        clearReadOnlyWidgets(); // clear last

        if (readonly_lines && (ro_begins.length > 0)) {
        
            for (i = 0; i < ro_begins.length; i++) {
                  var msg1 = document.createElement("div");
                  // msg1.appendChild(document.createTextNode("Start readonly code"));
                  msg1.className = "voc-readonly-top";
                  
                  var label = document.createElement("span");
                  label.className = "label label-warning";
                  label.appendChild(document.createTextNode("READ ONLY"));
                  msg1.appendChild(label);
                  
                  var msg2 = document.createElement("div");
                  // msg2.appendChild(document.createTextNode("End of readonly code"));
                  msg2.className = "voc-readonly-bottom";                             
                  
                  ro_widget1 = editor.addLineWidget(ro_begins[i], msg1, {above:true, coverGutter: false, noHScroll: true});
                  ro_widget2 = editor.addLineWidget(ro_ends[i], msg2, {coverGutter: false, noHScroll: true});

                  addReadOnlyWidget(ro_widget1);
                  addReadOnlyWidget(ro_widget2);

                  editor.markText(
                    {line: ro_begins[i],ch:0}, {line: ro_ends[i] + 1, ch:0},        
                        {
                            readOnly:true, 
                            atomic: true,
                            className:"vocbghighlight",
                            title:"READONLY"
                        }
                  );
                    
            }
        }

		viewer_last_fname = fname;
		viewer_last_fpath = fpath;
		$("#editor_current_file").html(fpath.substring(2));
		
		// If basic ide, list out files within work dir within the file selection dropdown
		
                          		if (lineNum > 0) {
			if (lineNum > 0) lineNum = lineNum - 1;
			editor.setCursor(lineNum);
		}


    showCodeComment(codeComments);
	}).fail(function() {
	  // Record failed file load in activity log
    $.ajax({
      'url': '../util/vcput.php',
      'type': 'post',
      'data': {
        'a': 'addActivityLogEntry',
        'stepid': '2792000',
        'asnuserid': '3209731',
        'msg': 'Failed to load file: ' + "/home" + fpath.substring(1),
        'type': '9',
        'status': 0
      }
    });
    
    $("#editor_current_file").html(('<i class="icon-exclamation-sign"></i> FAILED to load ... ' + fpath.substring(2)));
    
	});
	
  return false;
}

/*
function reportFailedFileLoad(filepath) {
  var data = "";
  var urlval = "../util/vcput.php";
  $.ajax({
   type: "POST",
   url: urlval,
   data: {
      a: 'reportFailedFileLoad',
      stepid: 2792000,
      userid: 3209731,
      filepath: filepath
    }
  });
}
*/


function refreshFileSelectDropdown(fpath = null) {
  // Clears the list of files in the dropdown menu
  $('#fileSelectDropdown').html('');
  
  // Gets list of objects/files within the work directory
  try {
    var workDirObjects = (typeof treeDataSource._data.work.additionalParameters.children != "undefined")? treeDataSource._data.work.additionalParameters.children : false;
  } catch(e) {
    var workDirObjects = null;
  }
  
  if(workDirObjects && true) {
    // Iterates through list of objects/files within the work directory and lists them 
    //   - With the exception of the file that was just loaded/opened into the editor
    Object.entries(workDirObjects).forEach(([fileName, fileMetadata]) => {
      if(fileMetadata.path != fpath && fileMetadata.type != 'folder')
        $('#fileSelectDropdown').append('<li><div role="button" class="btn vocbtn2 vocbtn-status fileSelectElement" style="line-height:20px !important; font-size: 12px !important;" data-filename="'+fileName+'" data-fp="'+fileMetadata.path+'">'+fileName+'</div></li>');
    });
    
    // Binds event that opens the selected file in the source editor
    $('.fileSelectElement').unbind('click').bind('click', function() {
      // gets the filetree object to select
      var workDirObjects = treeDataSource._data.work.additionalParameters.children;
      var newFileToLoad = workDirObjects[$(this).attr('data-filename')];
      filetreeFileSelect(newFileToLoad);
    });
  }
}

//mhui
function s3HomeTreeInit(syncflag) {
	//console.log('in s3HomeTreeInit');
  $('#panel1-spin').removeClass('icon-refresh');
  $('#panel1-spin').addClass('icon-spin');
	$('#panel1-spin').addClass('icon-spinner');
	  
	var s3_data;
	$.ajax({
        url: "s3hometree.php",
        method: "GET",
        dataType: "JSON",
        async: false,
        data: {
            courseid: "117181",
            asnid: "2792000",
            userid: "3209731",
		        ide: 1,
		        sync: syncflag
        },
        success: function(data) {
    		s3_data = data;
    		//alert(JSON.stringify(s3_data));
        }
    });
	subDataSource = new DataSourceTree({data: s3_data});
	
	$('#trees3home').ace_tree({
		dataSource: subDataSource,
		multiSelect: false,
		loadingHTML:'<div class="tree-loading"><i class="icon-refresh icon-spin blue"></i></div>',
		'open-icon' : 'icon-minus',
		'close-icon' : 'icon-plus',
		'selectable' : true,
		'selected-icon' : 'icon-caret-right',
		'unselected-icon' : 'icon-caret-right',
		cacheItems: true
	});

	////console.log('S3FileSelect on select-----------------');
	$(document).on('selectedfolder', '#trees3home', function (evt, data) {
			$('#input_filename').val(data.info[0].fpath + "/");
			$('#span_selectedfile').html(data.info[0].fpath + "/");
			$('#well_selectedfile').show();
			$('#input_filetype').val("folder");
			hideAllFileBtn();
			showCopyFileBtn();
			$('#fileuploadbtn').show();
			$('#tree1').find('.tree-selected').removeClass('tree-selected');
		});
	$('#trees3home').on('selected', function (evt, data) {
		S3FileSelect(data.info[0]);
	});

	$('#panel1-spin').removeClass('icon-spin');
	$('#panel1-spin').removeClass('icon-spinner');
	$('#panel1-spin').addClass('icon-refresh');
}

//mhui
function s3WorkareaTreeInit(syncflag) {
	//console.log('in s3WorkareaTreeInit');
  $('#panel1-spin').removeClass('icon-refresh');
  $('#panel1-spin').addClass('icon-spin');
	$('#panel1-spin').addClass('icon-spinner');
	  
	var s3_data;
	$.ajax({
        url: "s3workareatree.php",
        method: "GET",
        dataType: "JSON",
        async: false,
        data: {
            courseid: "117181",
            asnid: "2792000",
            userid: "3209731",
		        ide: 1,
		        sync: syncflag
        },
        success: function(data) {
    		s3_data = data;
    		//alert(JSON.stringify(s3_data));
        }
    });
	subDataSource = new DataSourceTree({data: s3_data});
	
	$('#trees3workarea').ace_tree({
		dataSource: subDataSource,
		multiSelect: false,
		loadingHTML:'<div class="tree-loading"><i class="icon-refresh icon-spin blue"></i></div>',
		'open-icon' : 'icon-minus',
		'close-icon' : 'icon-plus',
		'selectable' : true,
		'selected-icon' : 'icon-caret-right',
		'unselected-icon' : 'icon-caret-right',
		cacheItems: true
	});

	//console.log('S3FileSelect on select-----------------');
	$(document).on('selectedfolder', '#trees3workarea', function (evt, data) {
			$('#input_filename').val(data.info[0].fpath + "/");
			$('#span_selectedfile').html(data.info[0].fpath + "/");
			$('#well_selectedfile').show();
			$('#input_filetype').val("folder");
			hideAllFileBtn();
			showCopyFileBtn();
			$('#fileuploadbtn').show();
		});
	$('#trees3workarea').on('selected', function (evt, data) {
		S3FileSelect(data.info[0]);
	});

	$('#panel1-spin').removeClass('icon-spin');
	$('#panel1-spin').removeClass('icon-spinner');
	$('#panel1-spin').addClass('icon-refresh');
}

//mhui
function refreshS3HomeTree(syncflag=0) {
	$('#span_selectedfile').html('Select file or folder');
	$('#trees3home').remove();
	$("<div id='trees3home' class='tree' style='background:white;'></div>").insertAfter('#tree1');
	s3HomeTreeInit(syncflag);
}

//mhui
function refreshS3WorkareaTree(syncflag=0) {
  //console.log("Refreshing S3 Work Area Tree");
	$('#span_selectedfile').html('Select file or folder');
	$('#trees3workarea').remove();
	$("<div id='trees3workarea' class='tree' style='background:white;'></div>").insertAfter('#tree1');
	s3WorkareaTreeInit(syncflag);
}

//
//mhui
var syncToS3WorkareaTimer = null;
var syncToS3WorkareaTimerCount = 0;
//
function syncToS3Workarea () 
{
	//console.log('in syncToS3Workarea');
	  
  $('#panel1-spin').removeClass('icon-refresh');
  $('#panel1-spin').addClass('icon-spin');
	$('#panel1-spin').addClass('icon-spinner');

	$.ajax({
        url: '../util/vcput.php?a=syncWorkarea',
        method: "POST",
        async: false,
        data: {
            courseid: "117181",
            stepid: "2792000",
            asnuserid: "3209731",
            ownerid: "3209731",
        }
    })
      .done(function(ret_val) {

    	  if (ret_val.indexOf('ERROR:INVALID_SESSION>') == 1) { // invalid session
    	        $('#panel1-spin').removeClass('icon-spin');
    	      	$('#panel1-spin').removeClass('icon-spinner');
    	      	$('#panel1-spin').addClass('icon-refresh');
              refreshNewSessionPage();
        }
/*
        $('#panel1-spin').removeClass('icon-spin');
      	$('#panel1-spin').removeClass('icon-spinner');
      	$('#panel1-spin').addClass('icon-refresh');
*/
      	try {
            data = jQuery.parseJSON(ret_val);
            if (data.hasOwnProperty('status') && data.status=='Ok'){
            	syncworkarea_messageid = data.msg;
            	console.log("syncworkarea_messageid = " + syncworkarea_messageid);
            	syncToS3WorkareaTimerCount = 0;
            	syncToS3WorkareaGetStatus();
            }
            else if (data.hasOwnProperty('status') && data.status=='Error'){
              syncworkarea_messageid = 0;
              //show_voc_gritter(false, data.msg, false);
              vocProxyShowErrMsg('Sync status: ' + data.msg)
              $('#panel1-spin').removeClass('icon-spin');
              $('#panel1-spin').removeClass('icon-spinner');
              $('#panel1-spin').addClass('icon-refresh');
            }
        }
        catch (e) {
            $('#panel1-spin').removeClass('icon-spin');
            $('#panel1-spin').removeClass('icon-spinner');
            $('#panel1-spin').addClass('icon-refresh');
        }

      })
      .fail(function(ret_val) {

        $('#panel1-spin').removeClass('icon-spin');
        $('#panel1-spin').removeClass('icon-spinner');
        $('#panel1-spin').addClass('icon-refresh');

      });
}

function syncToS3WorkareaGetStatus()
{	  
	  $('#panel1-spin').removeClass('icon-refresh');
	  $('#panel1-spin').addClass('icon-spin');
		$('#panel1-spin').addClass('icon-spinner');

		syncToS3WorkareaTimerCount++;
			
		$.ajax({
	        url: '../util/vcput.php?a=syncWorkareaStatus',
	        method: "POST",
	        async: false,
	        data: {
	            courseid: "117181",
	            stepid: "2792000",
	            asnuserid: "3209731",
	            messageid: syncworkarea_messageid,
	        }
	    })
	      .done(function(ret_val) {

	    	  if (ret_val.indexOf('ERROR:INVALID_SESSION>') == 1) { // invalid session
	    		      $('#panel1-spin').removeClass('icon-spin');
	    	        $('#panel1-spin').removeClass('icon-spinner');
	    	        $('#panel1-spin').addClass('icon-refresh');
	              refreshNewSessionPage();
	        }
	            
	      	try {
	            data = jQuery.parseJSON(ret_val);
	            if (data.hasOwnProperty('status') && data.status=='Ok')
		          {
	            	if (data.msg == 'PENDING')
	            	{
	            	  if (syncToS3WorkareaTimerCount < 12) // 1 min
	            	  {
	            		  if (syncToS3WorkareaTimer) { clearTimeout(syncToS3WorkareaTimer); syncToS3WorkareaTimer=false;}
	            		  syncToS3WorkareaTimer = window.setTimeout(syncToS3WorkareaGetStatus , 5000);
	            	  }
	            	  else
	            	  {
	            		  vocProxyShowErrMsg('Sync status: ' + 'TIME OUT');
	    	  	        $('#panel1-spin').removeClass('icon-spin');
	  		      	    $('#panel1-spin').removeClass('icon-spinner');
	  		      	    $('#panel1-spin').addClass('icon-refresh');
	  		      	    syncToS3WorkareaTimerCount = 0;
	            	  }
	            	}
	            	else
	            	{
	            	  vocProxyShowErrMsg('Sync status: ' + data.msg)
		  	          $('#panel1-spin').removeClass('icon-spin');
			      	    $('#panel1-spin').removeClass('icon-spinner');
			      	    $('#panel1-spin').addClass('icon-refresh');
			      	    syncToS3WorkareaTimerCount = 0;
			      	    if (data.msg == 'SUCCESS') { refreshS3WorkareaTree(0); }
	            	}
	            }
	            else if (data.hasOwnProperty('status') && data.status=='Error') {
	              //syncworkarea_messageid = 0;
	              vocProxyShowErrMsg('Sync status: ' + data.msg)
	  	          $('#panel1-spin').removeClass('icon-spin');
		      	    $('#panel1-spin').removeClass('icon-spinner');
		      	    $('#panel1-spin').addClass('icon-refresh');
		      	    syncToS3WorkareaTimerCount = 0;
	            }
	        }
	        catch (e) {
	        	    vocProxyShowErrMsg('Sync status: ' + 'Unknown response');
	  	          $('#panel1-spin').removeClass('icon-spin');
		      	    $('#panel1-spin').removeClass('icon-spinner');
		      	    $('#panel1-spin').addClass('icon-refresh');
		      	    syncToS3WorkareaTimerCount = 0;
	        }
	      })
	      .fail(function(ret_val) {
	    	  vocProxyShowErrMsg('Sync status: ' + 'Unknown response');
	        $('#panel1-spin').removeClass('icon-spin');
	        $('#panel1-spin').removeClass('icon-spinner');
	        $('#panel1-spin').addClass('icon-refresh');
	        syncToS3WorkareaTimerCount = 0;
	      });
}

//mhui
//var submitTimer = null;
//var submitTimerCount = 0;
//vcChkSubmitOneTime
var GradingScriptDone = false;
var SubmissionScriptDone = false;
function submitGetStatus(submitType, submitTimer, submitTimerCount)
{
  //console.log("Submit Get Status Type: " + submitType);
  
  // Gets variable that tells if the Grading/Submission script exist
    var does_submission_script_exist = "";
  var does_grading_script_exist = "";
 
  // Flags used to ensure that the grading panel ONLY refreshes if both Submission and Grading script finish
  
  if(submitType == 'Grading') {
    GradingScriptDone = (does_grading_script_exist) ? false : true;
  }
  else {
    SubmissionScriptDone = (does_submission_script_exist) ? false : true;
  }
  
    var url;
        var stepstr = "&stepid=2792000" + "&auto_calc_grading=1";
    //var stepstr = "&stepid=2792000";
    var filepathstr = "";
	  
    //url = "../domains/common_submit.php?loc=6&id="+stepstr+"&type=Grading"+filepathstr;
    url = "../domains/common_submit.php?loc=7&id=23667086&version=0"+stepstr+"&type="+submitType+filepathstr;
    url = url + "&getstatus=1";
    url = url + "&async=1";
    

    // only upgrades Grading Icon to 'Grading' if the grades are already published
        var grades_published = "1";
    var fromtide =  "";
    
    if(grades_published == 1 || fromtide == 1) {
      updateGradesIcon(true);
    }

	  submitTimerCount++;
		
		$.ajax({
	        //url:'../util/vcput.php?a=getsubmitdetail&stepid=2792000&userid=3209731&version=0',
	        url: url,
	        method: "POST",
	        data: {},
	    })
	      .done(function(ret_val) {

	    	  if (ret_val.indexOf('ERROR:INVALID_SESSION>') == 1) { // invalid session
            refreshNewSessionPage();
          }

          try {
            resp = jQuery.parseJSON(ret_val);
          } catch(err) {
            //show_voc_gritter(false, ret_val, true);
            updateGradesIcon(false);
            return;
          }

          if (resp.state != 2) 
          {
        	  if (submitTimerCount < 12) // 2 min
      	    {
      		    if (submitTimer) { clearTimeout(submitTimer); submitTimer=false; }
      		    //submitTimer = window.setTimeout(submitGetStatus(submitType, submitTimer, submitTimerCount) , 10000);
                    submitTimer = setTimeout(function() { submitGetStatus(submitType, submitTimer, submitTimerCount); }, 10000);
      	    }
      	    else
      	    {
      		    vocProxyShowErrMsg('Grading status: ' + 'please check back later for the report');
      		    updateGradesIcon(false);
      		    updateReportIcons('Grading', false);
      		    updateReportIcons('Submission', false);
	      	    submitTimerCount = 0;
      	    }
          } 
          else
          {  
                      // done
        	  var url = 'main.php?m=grades_review&modalMode=1&asnId=2791999&stepid=2792000&userid=3209731';
			                                url += "&vockey=92b04c35873bd949b37ad2d5305bdc08d94a5d6ff8998372748bc9b283f4c299";
			
			      //showPanel3(url, 1); //0
			      // Flags used to ensure that the grading panel ONLY refreshes if both Submission and Grading script finish
            if(submitType == 'Grading') {
              GradingScriptDone = true;
              if(newLayout) getReport(1);
            }
            else {
              SubmissionScriptDone = true;
              if(newLayout) getReport(0);
            }
            
            // If both Grading Script and Submission Script are finished, Grades Panel.
            if ((GradingScriptDone && SubmissionScriptDone) || (GradingScriptDone && !does_submission_script_exist) || (SubmissionScriptDone && !does_grading_script_exist)) {
              updateGradesIcon(false);
                              if(true) refreshSubTree();
                if(grades_published) showPanel3(url, 1);
                            //showPanel3(url, 1);
              GradingScriptDone = false;
              SubmissionScriptDone = false;
              
            }
			      //showGrades();
			      submitTimerCount = 0
                    }
	      })
	      
	      .fail(function(ret_val) {
	    	  vocProxyShowErrMsg('Grading status: ' + 'Unknown response');
	    	  updateGradesIcon(false);
	    	  submitTimerCount = 0;
	      });
}

var postSubmitProcessingTimeout = 0;
function postSubmitProcessing(submitType) {  
  // Gets variable that tells if the Grading/Submission script exist
    var does_submission_script_exist = "";
  var does_grading_script_exist = "";
 
 if(!newLayout) {
  // Flags used to ensure that the grading panel ONLY refreshes if both Submission and Grading script finish
  (submitType == 'Submission') ?
      (SubmissionScriptDone = (($('#'+submitType.toLowerCase()+'reportbutton').children().length > 0)? false : true))
    : (GradingScriptDone = (($('#'+submitType.toLowerCase()+'reportbutton').children().length > 0)? false : true));
 } else {
   (submitType == 'Submission') ?
      (SubmissionScriptDone = (($('#'+submitType.toLowerCase()+'_report_spinbox').children().length > 0)? false : true))
    : (GradingScriptDone = (($('#'+submitType.toLowerCase()+'_report_spinbox').children().length > 0)? false : true));
 }
    // only upgrades Grading Icon to 'Grading' if the grades are already published
        var grades_published = "1";
    var fromtide =  "";
    
    if(grades_published == 1 || fromtide == 1) {
      updateGradesIcon(true);
    }

		      // done
  	  var url = 'main.php?m=grades_review&modalMode=1&asnId=2791999&stepid=2792000&userid=3209731';
                    url += "&vockey=92b04c35873bd949b37ad2d5305bdc08d94a5d6ff8998372748bc9b283f4c299";

      // If both Grading Script and Submission Script are finished, Grades Panel.
      if ((GradingScriptDone && SubmissionScriptDone) || (GradingScriptDone && !does_submission_script_exist) || (SubmissionScriptDone && !does_grading_script_exist)) {
        updateGradesIcon(false);
                  if(grades_published) showPanel3(url, 1);
                //showPanel3(url, 1);
        GradingScriptDone = false;
        SubmissionScriptDone = false;
        if (postSubmitProcessingTimeout) {clearTimeout(postSubmitProcessingTimeout);}
        
      } else {
        if (postSubmitProcessingTimeout) {clearTimeout(postSubmitProcessingTimeout);}
        // Only set timeout if submitType's respective script hasn't finished running
        if((submitType == 'Submission' && !SubmissionScriptDone) || (submitType == 'Grading' && !GradingScriptDone)) {
          postSubmitProcessingTimeout = window.setTimeout(postSubmitProcessing, 2000, submitType); 
        }
      }
      //showGrades();
    }
var s3_data;
var prefetchedSubtree = "";
function subTreeInit(subNum = null) {
	//console.log('in subTreeInit');
	$('#panel1-spin').removeClass('icon-refresh');
  $('#panel1-spin').addClass('icon-spin');
	$('#panel1-spin').addClass('icon-spinner');
	
  if (prefetchedSubtree && !s3_data) {
    s3_data = prefetchedSubtree;
    prefetchedSubtree = null;
  }

  if (vocNotebookTeacherMode) {
    return;
  }

	if ( ( vocNotebookIde && !viewSubmissionsViaVNB ) || ( viewSubmissionsViaVNB && !s3_data ) || (!viewSubmissionsViaVNB && !vocNotebookIde)) { 
    $.ajax({
          url: "submissiontree.php",
          method: "GET",
          dataType: "JSON",
          async: vocNotebookIde ? true : false,
          data: {
              courseid: "117181",
              asnid: "2792000",
              userid: "3209731",
              published: (subNum == null) ? "1" : 0,
              ide: (subNum == null) ? 1 : 0,
              grading: (subNum == null) ? 0 : 1,
              subNum: subNum
          },
          success: function(data) {
          let prev_s3_data = s3_data;
          s3_data = data;
          let s3_data_is_the_same = (JSON.stringify(s3_data) == JSON.stringify(prev_s3_data));

          if (vocNotebookIde && !viewSubmissionsViaVNB && s3_data_is_the_same) return;
          else if (vocNotebookIde && !viewSubmissionsViaVNB && !s3_data_is_the_same) refreshFileTreeIde();
          else if (viewSubmissionsViaVNB) subTreeInit(subNum ?? null);
          //alert(JSON.stringify(s3_data));
          }
      });
      
    }

    if ( ( (vocNotebookIde && !viewSubmissionsViaVNB && !s3_data) || (viewSubmissionsViaVNB && !s3_data) )) {
      return;
    }


	subDataSource = new DataSourceTree({data: s3_data});
	    
    $('#trees3').ace_tree({
		dataSource: subDataSource,
		multiSelect: false,
		loadingHTML:'<div class="tree-loading"><i class="icon-refresh icon-spin blue"></i></div>',
		'open-icon' : (vocNotebookIde) ? 'icon-folder-open' : 'icon-minus',
		'close-icon' : (vocNotebookIde) ? 'icon-folder-close' : 'icon-plus',
		'selectable' : true,
		'selected-icon' : (vocNotebookIde) ? 'bi bi-file-earmark' : 'icon-caret-right',
		'unselected-icon' : (vocNotebookIde) ? 'bi bi-file-earmark' : 'icon-caret-right',
		cacheItems: true
	});
    // Unfolds the 'Submissoin' Folder
  	//console.log('S3FileSelect on select-----------------');
  $(document).on('selectedfolder', '#trees3', function (evt, data) {
	  if (data.info.length <= 0) { // when an item is unselected and the next item in the selected list is a folder
	    return;
	  }

    // if folder is clicked, automatically unfold it
    if(vocNotebookIde) {
      $('.tree-folder-header').each(function(item) {
          if(typeof data.info[0].name !== "undefined" && $(this).find('.tree-folder-name').html().indexOf(data.info[0].name) !== -1) $(this).find('.icon-folder-close').click();
      });
    }

	  $('#tree1').find('.tree-selected').removeClass('tree-selected');
		$('#input_filename').val(data.info[0].fpath + "/");
		$('#span_selectedfile').html(data.info[0].fpath + "/");
		$('#well_selectedfile').show();
		$('#input_filetype').val("folder");
		hideAllFileBtn();
		showCopyFileBtn();
	});
	$('#trees3').on('selected', function (evt, data) {
	  if (data.info.length) {
		  S3FileSelect(data.info[0]);
	  }
	  $('#tree1').find('.tree-selected').removeClass('tree-selected');
	});

  // Loads an initial file when viewing submissions via VNB
  if(viewSubmissionsViaVNB) {
    var widgetFiles = s3_data;
    if(widgetFiles != null && "") {
  	     $.each(widgetFiles, function(i, obj) {
  	      // File will autoload if file is an item, has a size < 8mb, and the file name doesn't start with a '.'
  	      if(obj.type == 'item' && (obj.name).indexOf('.') != 0 && autoloadFileOccurred < 2) {
                        
            // If initial file to load is set as URI parameter, use that file as initial file to load
            
            
            if (typeof initial_file_to_load === 'undefined' || obj.name === initial_file_to_load) {
              autoload = 1 // Used to exclude period_save() for filetreeFileSelect() or it'll throw cross-DOM error
              autoloadFileOccurred += 1;
              let htmlEl = $('span[class="tree-btn"]').filter(function() {
                return $(this).text() === obj.name;
              });
              $(htmlEl).click();
              return false;
            }
          }
  	    });
  	  }
  
      // when viewing Submissions via VNB, always have file tree expanded
      if (!$('#openFiletreeBtn').hasClass('active')) $('#openFiletreeBtn').click();
    }

    // if VNB teacher IDE and is not an LTI session, open file tree
    if (vocNotebookTeacherMode && false) {
      $('#openFiletreeBtn').click();
    }

	$('#panel1-spin').removeClass('icon-spin');
	$('#panel1-spin').removeClass('icon-spinner');
	$('#panel1-spin').addClass('icon-refresh');
}

function refreshSubTree() {

	$('#trees3').remove();

	var el1 = document.getElementById('trees3home'); 
	var el2 = document.getElementById('trees3workarea'); 
  if (typeof(el2) != "undefined" && el2 != null) 
  {
	  $("<div id='trees3' class='tree' style='background:white;'></div>").insertAfter('#trees3workarea');
  }
  else if (typeof(el1) != "undefined" && el1 != null) 
  {
	  $("<div id='trees3' class='tree' style='background:white;'></div>").insertAfter('#trees3home');
  }
  else
  {
	  $("<div id='trees3' class='tree' style='background:white;'></div>").insertAfter('#tree1');
  }
	subTreeInit();
}

function voc_get_s3_code(fpath, fname, lineNum, codeComments) {	
    
    // if lab type is VSCode or Jupyter Lab and at least 1 submission exists....
        
    
    $("#editor_current_file").html('<i class="icon-spin icon-spinner"></i>Reading ... ' + fpath);

    var stepstr = "&stepid=2792000";		
	var data = fpath; 
  var url = "";
  var payload = {};

  if (vocNotebookIde) {
    try {
      url = "../vnb/vnb_api.php";
      var ownershipStr = "&version=0" + stepstr;
      ownershipStr = ownershipStr.startsWith('&') ? ownershipStr.substring(1) : str;
      var ownershipJSON = ownershipStr.split('&');

      payload = {
        "f": "filefetch",
        "mode": "s",
        "getcode": 1,
        "data": fpath,
        "getlarge": 0,
        "userid": 3209731,
        "asnid": 2791999,
      };

      if (ownershipJSON.length > 0) {
        ownershipJSON.forEach(function(pair) {
          var keyVal = pair.split('=');
          payload[keyVal[0]] = keyVal[1];
        });
      }
    } catch (e) {
      payload = {};
      url = "../util/vcprojapi.php?t=filefetch&mode=s&getcode=1&data="+encodeURIComponent(fpath)+"&getlarge=0&userid=3209731&asnid=2791999&version=0"+stepstr;
    }
  } else {
    url = "../util/vcprojapi.php?t=filefetch&mode=s&getcode=1&data="+encodeURIComponent(fpath)+"&getlarge=0&userid=3209731&asnid=2791999&version=0"+stepstr;
  }



	$.post(url,payload ?? {},function(ret_val) {
		if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
			refreshNewSessionPage();
		}
		if (ret_val.indexOf('VOCAREUM-ERROR') !== -1) { // due to Db traffic or something
                   show_voc_gritter(false, "Error retrieving file, please try again", true);
                   return;
                }
	  	if (ret_val.indexOf('<ERROR:FILE_TOO_BIG>') !== -1) { // too large to show in editor
    		largefileurl = url + "&dl=1";
			$('#largefile-download').attr('href',largefileurl);
			$('#largefile-viewer-modal').modal('show');
			return;
		}
	
		$('#codebtn').tab('show');

		numEdits = 0; // reset num of edits for this file
    
    if (vocNotebookIde) {
      // if file is .ipynb and Vocareum Notebook is detected, go thorugh Vocareum Notebook Flow
     openFileInVocNotebook(ret_val, fpath, fname, codeComments == '' ? null : codeComments);
      return;

    } else {
      cm_mode = findMode(fpath);
      editor.setOption("mode", cm_mode);
          $("#editor-save-status").show();
          $('#editor-save-status-btn').hide();
          editor.setOption("readOnly", true);
          
          if(ret_val.length>8388608/*8MB*/ || (fpath && fpath.search(/^\.\/(LIB|ASNLIB|resource\/lib|resource\/asnlib)\/publicdata\//)>=0) ){
              if(ret_val.length>8388608) {
                  $("#editor-save-status").html("Read only[<font color='red'>8MB+</font>]");
              } else {
                  $("#editor-save-status").html("Read only");
        }
      } else {
        $("#editor-save-status").html("");
      }
      
      editor.setValue(ret_val);
      editor.clearHistory();
      editor_content_change = editor.doc.changeGeneration();
      $("#editor_current_file").html(fpath);
      
      if (lineNum > 0) {
        if (lineNum > 0) lineNum = lineNum - 1;
        editor.setCursor(lineNum);
      }
    }

		showCodeComment(codeComments);

		// IF vs Code & has at least 1 submisison
			});
  return false;
}

var $foldersToUnfold = [];


var unfoldLoopCount = 0;
function unfoldTree() {
        
    if ($foldersToUnfold.length <= 0) return;
    if (unfoldLoopCount++ > 20) {
        $foldersToUnfold = [];
        return;
    }

    $('.tree-folder-header').each(function() {
        $val = $(this).data();
        // console.log("element is "+$val['path']);
        if ('path' in $val) {
            $val['path'] = $val['path'].trim();
            var tmpIndex = $foldersToUnfold.indexOf($val['path']);
            if (tmpIndex != -1) {
              $('#tree1').tree('openFolder', $(this));
              $foldersToUnfold.splice(tmpIndex, 1);
            }
        }
    });      
    window.setTimeout('unfoldTree()', 100);                 

}	    
var tree1_files = "";

function resetFileTree()
{
	  currentEditFileIndex = 0; //?
	  lastHtmlFileShown = null;
	  fileoptype = '';
	
	  viewer_last_fname = null;
	  viewer_last_fpath = null;
	  editor_content_change = 0;
	  $("#editor-save-status").html('');
	  $("#editor_current_file").html('');
	  $("#filestatuslabel").html('');
	  hideAllFileBtn();
	  
    tree1 = '';
    tree1_files = '';
    tree_data_files = '';

    var treeData = new DataSourceTree({data: ''});

    $('#tree1').setDataSource(treeData);
    $('#span_selectedfile').html('Select file or folder');
    //console.log('resetFileTree');
    //alert('resetFileTree');
}

function refreshFileTreeIde(workchanged, retainwork) 
{
	refreshFileTree(workchanged, retainwork);
	refreshSubTree();
	if (vmlab2) {refreshS3WorkareaTree(0);}
}

function refreshFileTree(workchanged, retainwork) {
	//console.log('refreshFileTree');
	//console.log('vm_extip='+vm_extip+' '+vm_user);

  if (viewSubmissionsViaVNB /*|| vocNotebookTeacherMode*/) {
    return;
  }

	//mhui:
	if ($('#trees3home').length > 0 || (false && vocNotebookIde && !viewSubmissionsViaVNB && !$vocNotebookTeacherMode)) {
	    refreshS3HomeTree(0); //syncflag is 0
	    return;
	}
	  
	if (typeof(vm_user) == 'undefined' || vm_user == null ||
			typeof(vm_extip) == 'undefined' || vm_extip == null)
	{
    return;
	}
	
          
        $('.tree-folder-header').each(function() {
                $val = $(this).data();
                if (1 || ('base' in $val)) {
		                  if ($(this).children(".icon-minus").length) { 
		                      if (($val.path == "./work") && (!retainwork)) {
		                      } else {
                            $foldersToUnfold.push($val.path);
                        }
                    }
                }
        });
        var stepstr = "&stepid=2792000";
        $('#panel1-spin').removeClass('icon-refresh');
        $('#panel1-spin').addClass('icon-spin');
    	  $('#panel1-spin').addClass('icon-spinner');

    	  var fileurl;
    	  if (typeof(progmlab) != 'undefined' && progmlab != null && !progmlab)
    	  {
    		  fileurl = "../util/vcprojapi.php?t=getFileTree&asnid=2791999"+stepstr+"&mode=s&name=tree1&version=0" + "&labtype=1&dir=%2Fhome%2F"+vm_user+"&vm="+vm_extip;
    	  }
    	  else
    	  {
    		  fileurl = "../util/vcprojapi.php?t=getFileTree&asnid=2791999"+stepstr+"&mode=s&name=tree1&version=0" + "&labtype=1&vm=34.209.143.232";
    	  }
    	  
        $.ajax({
        url: fileurl,
        //url: "../util/vcprojapi.php?t=getFileTree&asnid=2791999"+stepstr+"&mode=s&name=tree1&version=0" + "&labtype=1&dir=%2Fhome%2F"+vm_user+"&vm="+vm_extip,
        context: document.body
        }).done(function(ret_val) {
          
        	$('#panel1-spin').removeClass('icon-spin');
        	$('#panel1-spin').removeClass('icon-spinner');
        	$('#panel1-spin').addClass('icon-refresh');
        	
              if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
                  refreshNewSessionPage();
              }

              var errPrefix = '<ERROR:';
              if (ret_val.indexOf(errPrefix) !== -1) { // failure
                errStr = ret_val.substring(errPrefix.length);
                //show_voc_gritter(false, "Cannot retrieving file tree: " + errStr, true);
                /*
                bootbox.dialog("Unable to access lab, please check if username " + vm_user + " is correct.", 
                        [{
                          "label" : "Ok",
                          "class" : "btn vocbtn-ac vocbtn-action",
                        }]
                ); 
                */
                $('.tree-folder-header').each(function() {
                  $val = $(this).data();
                  if ('base' in $val) {
                    $par = $(this).parent();
                    $par.detach();
                  } 
                });
                return;
              }
              
              eval(ret_val);
              
              if (tree_data_files === tree1_files) {
                   //console.log("Same tree");
                   $foldersToUnfold = [];
              } else {
                  //console.log("Not same tree ");
                  //refreshFileTree(false, true);

                  var treeDataSource2 = new DataSourceTree({data: tree1});

                  $('.tree-folder-header').each(function() {
                    $val = $(this).data();
                    if ('base' in $val) {
                      $par = $(this).parent();
                      $par.detach();
                    } 
                  });

                  $('#tree1').setDataSource(treeDataSource2);
                  tree_data_files = tree1_files;
                  unfoldLoopCount = 0;
                  window.setTimeout('unfoldTree()', 100);
               }             

                   

               reportsToOpen = true; // if the refresh happens - click the reports again
        });
        
        }

function markUpdateChanged(path)
{
  if( path.search(/^work/)<0 &&
      path.search(/^\.\/work/)<0 ) {
    $('#updatebtntext').html('Update*');
  }
}

$('#cmdprogressbtn').hide();
var cmdprogress = 0;
function voc_create_confirm(type, path, source, msg, qstr)
{
  bootbox.dialog(qstr, [{
                         "label" : "Yes",
                         "class" : "btn vocbtn-ac vocbtn-action",
                         "callback": function() {
                              voc_create(type, path, source, msg, true);
                            }
                        }, {
                         "label" : "Cancel",
                         "class" : "btn vocbtn-ac vocbtn-status"
                        }]
                );
  return false;
}

function voc_create(type, path, source, msg, confirm) {
    /* default value to be used for confirm - better to do it this way 
     * than doing it in the funtion signature otherwise some browser 
     * versions e.g. IE, Edge has problem showing IDE page
     */
    if(confirm === undefined) {
      confirm = false;
    }
    cmdprogress++;
    var stepstr = "&stepid=2792000";
    var url = "../util/vcsave.php?asnid=2791999"+stepstr+"&mode=s&version=0&type="+type+(confirm? '&confirm=1' : '') + "&vm="+vm_extip+"&labtype=1";
    
    //console.log("Calling voc_create add: " + copyCBValue);
    if(!vocNotebookIde) {
      var paths = $('#tree1').tree('selectedItems').map(function (el) {
        var path = el.path.substring(2);
        if (el.type == 'folder') {
          path += '/';
        }
        return path;
      });
    } else {
      var paths = [path];
    }
    markUpdateChanged(path);
    $('#cmdprogressbtn').show();
    $('#panel1-spin').removeClass('icon-refresh');
    $('#panel1-spin').addClass('icon-spin');
	  $('#panel1-spin').addClass('icon-spinner');
	  
    $.ajax({
      type: 'POST',
      url: url,
      async: false, 
      data: {
        filepath: "./"+path,
        sourcepath: "./"+source,
        files: JSON.stringify(paths),
        copyCBValue: copyCBValue
      }
    })
        .done(function(ret_val) {

        	$('#panel1-spin').removeClass('icon-spin');
        	$('#panel1-spin').removeClass('icon-spinner');
        	$('#panel1-spin').addClass('icon-refresh');
        	
                if(cmdprogress) --cmdprogress;
                if(cmdprogress<1) $('#cmdprogressbtn').hide();
                if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
                    refreshNewSessionPage();
                }
                if (ret_val.indexOf('<ERROR:') !== -1) { // error
                  show_voc_gritter(false, ret_val.substring(7), true);
                  $("#filestatuslabel").html("<i class='icon-warning-sign' style='margin-right:3px'> </i><font color=red>error</font>");
                } else if (ret_val.indexOf('<CONFIRM:') !== -1) {
                  voc_create_confirm(type, path, source, msg, ret_val.substring(9)); 
                } else {
                  show_voc_gritter(false, msg, false);
                  
                  // display well-sepected and hide fileform
                  $('#fileform').hide();
                  $('#well_selectedfile').show();
                  
                  refreshFileTree(true, true);
                }

        })
           .fail(function(ret_val) {
                if(cmdprogress) --cmdprogress;
                if(cmdprogress<1) $('#cmdprogressbtn').hide();
                var timenow = new Date().getTime();
                if (timenow - last_conn_warning > 10*1000) { // 10 seconds
                  show_voc_gritter(false, "File/folder creation/rename failed. Please check your internet connection", true);
                  last_conn_warning = new Date().getTime();
                }
        });

        return true;
}

var save_count = 0;	
var last_conn_warning = new Date().getTime();

function voc_save(showGritter, dspmsg) {
  if(newLayout && !basicV2Ide && !webDevIde) return true;
  
var save_ok = true;
save_count++;
if (save_in_progress) {
return false;
}
save_in_progress = true;

$('#editor-save-status-btn').hide();
$("#editor-save-status").show();
$("#editor-save-status").html('<i class="icon-spin icon-spinner"></i> '+dspmsg);

$("#save-icon").addClass('icon-spin');
$("#save-icon").addClass('icon-spinner');
$('#save-icon').removeClass('vochide');
try {
  var viewerContents = editor.getValue();  
} catch (e) {
  return;
}



var whichfilepath = viewer_last_fpath;

if (!whichfilepath) whichfilepath = viewer_first_fpath;
var filepath = encodeURIComponent(whichfilepath);				

var stepstr = "&stepid=2792000";        
var url = "../util/vcsave.php?type=Save&asnid=2791999"+stepstr+"&mode=s&version=0&filepath="+filepath + "&vm="+vm_extip+"&labtype=1";

editor_content_change = editor.doc.changeGeneration();
markUpdateChanged(whichfilepath);
$.ajax({
type: 'POST',
url: url,
async: true, 
data: {code0: viewerContents}
})
.done(function(ret_val) {
        if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
            refreshNewSessionPage();
        }
        $("#save-icon").removeClass('icon-spin');
        $("#save-icon").removeClass('icon-spinner');
        $("#save-icon").addClass('vochide'); 
        passed = ( ret_val.indexOf('SAVE SUCCESSFUL') !== -1 );
        $("#editor-save-status").show();
        $('#editor-save-status-btn').hide();
        if (passed) {
            $("#editor-save-status").html('<i class="icon-ok"></i> Saved');
                                                                    } else {
            if (1 || showGritter) {
                if (ret_val.indexOf('<ERROR:') !== -1) { 
                    errStr = ret_val.substring(7);
                } else {
                    errStr = ret_val;
                }
                //show_voc_gritter(false, "Save failed. " + errStr, true);
                                                            }
            $("#editor-save-status").html('<i class="icon-exclamation-sign"></i> Save failed');
        }

     //   editor_content_change = editor.doc.changeGeneration();
        save_in_progress = false;
        var moresave = save_count>1;
        save_count = 0;
          if( moresave ){
       window.setTimeout(function(){ voc_save(showGritter, dspmsg); } , 100);
     }
})
.fail(function(ret_val) {
    $("#save-icon").removeClass('icon-spin');
    $("#save-icon").removeClass('icon-spinner');
    $("#save-icon").addClass('vochide'); 

    var timenow = new Date().getTime();
    if (timenow - last_conn_warning > 10*1000) { // 10 seconds
      show_voc_gritter(false, "File save failed. Please check your internet connection", true);
      last_conn_warning = new Date().getTime();
    }
    save_count = 0;
    save_in_progress = false;
    save_ok = false;
});			

    return save_ok;
}

function isSaveNeeded() {
	var codeFileChanged = true;
	if (editor && editor.doc.isClean(editor_content_change)) codeFileChanged = false;
	if (vocIsFileReadOnly(viewer_last_fpath)) codeFileChanged = false;
	return codeFileChanged;
}

var isTermActive = true;	
function periodic_save() {
  var saveNeeded = isSaveNeeded();
 timeNow = new Date().getTime();
 if (saveNeeded && (timeNow - lastEditTime > 5000)) {
   voc_save(false, "Saving");
 } 
 if ($('#panel2-iframe').length > 0) {
	   //mhui
	   var terminalIframe = document.getElementById('panel2-iframe');
     if (document.activeElement.name == "panel2-iframe") {
         if (!isTermActive) {
            isTermActive = true;
            console.log("Terminal Status: Active");
            // terminalIframe.document.head.innerHTML += '<style type="text/css">.terminal-cursor{background:#AAAAAA !important;}</style>';

            var el = terminalIframe.contentWindow.document.getElementById('vocCursorStyle');
            if (el) {
                el.innerHTML = ".terminal-cursor{background:#AAAAAA !important;";
            }

         }
     } else { // activeElement is not terminal
         if (isTermActive) {
            isTermActive = false;
            console.log("Terminal Status: Inactive");

            // terminalIframe.document.head.innerHTML += '<style type="text/css">.terminal-cursor{background:#F3F3F3 !important;}</style>';
            var el = terminalIframe.contentWindow.document.getElementById('vocCursorStyle');
            if (el) {
                el.innerHTML = ".terminal-cursor{background:#F3F3F3 !important;";
            }
            
            //refreshFileTree(false, true);
         }
     } 
 }   
   
 //window.setTimeout('periodic_save()', 1000);
 if (savefilehandle) {clearTimeout(savefilehandle);}
 savefilehandle = window.setTimeout(periodic_save, 1000);
}

function processThisCommand($type){
	
  //console.log('processThisCommand ' + $type);
	var filepath = viewer_last_fpath;    
	if (!viewer_last_fpath) filepath = viewer_first_fpath;
				
    if (($type == "Grading") && 0)
    {
      //console.log("Using V3 Grading...");
      return;
    }

				

        if (false) //(doTerminalBuildRun($type))
        {
                return;
        }
        
	if (isSaveNeeded()) {
		voc_save(true, "Saving");
	}
	executeThisCommand($type, filepath, true);
    }
    function executeThisCommand($type, filepath, isfirst)
    {
        if ( ($type=='RUN' || $type=='BUILD') && isfirst) { // activity icon only for RUN as of now
        	//updateRunIcon($type, true);
        }

        if( save_in_progress && !vocNotebookIde) {
          // delay execution
          window.setTimeout(function(){ executeThisCommand($type, filepath, false); } , 300);
          return;
        }
	var asyncCommand = false;
	var asyncPollUrl = null;
        var scheduleMode = false;
	if ($type=="Submission" || $type=="Grading" || $type=="RUN" || $type=='BUILD') {
		asyncCommand = true;
	}
        if ($type == "Grading" && !basicV2Ide && !webDevIde) {
          scheduleMode = true;
        }
				
        var unencoded_filepath = filepath;
	filepath = encodeURIComponent(filepath);
				
        if (!asyncCommand) {
		//$('#buildtextarea').html("<i class=\"icon-spin icon-spinner\"></i>&nbsp; Waiting for output ..");
	}
        // if the Asn Grading Rule is MAX, then we need to make sure we pass the correct rule (ontime/late) here
        // otherwise setting-grades-via-submission will not work
        
        var stepstr = "&stepid=2792000" + "&auto_calc_grading=1";

        var filepathstr = "";
        if (($type == 'BUILD') || ($type == 'RUN')) {
          filepathstr = getFilePathStr(unencoded_filepath, true);
        }

        
        if ($type == 'SHELL') {
            var input = encodeURIComponent($('#shellinput').val());
            var url =  "../domains/common_submit.php?loc=3&id=2791999&version=0&type="+$type+stepstr+"&input="+input+"&dryrun=1&useworkarea=1"+filepathstr;
        } else {
        
	      if ($type == "Grading") {
                var url = "../domains/common_submit.php?loc=6&id=23667086&version=0"+stepstr+"&type="+$type+filepathstr;
              } else {
                              var url = "../domains/common_submit.php?loc=7&id=23667086&version=0"+stepstr+"&type="+$type+filepathstr;
                            }
			
      url += "&initiatorid=3209731"; // team projects: who performed the action
	      if (asyncCommand) {
	        asyncPollUrl = url + "&getstatus=1";
        	url = url + "&async=1";
              }
	      if (scheduleMode) {
        	url = url + "&scheduleMode=1";
              }
        } // else SHELL
                var msg = "Executing '" + $type + "' script...";
                if (!asyncCommand) { 
                                    var htmlMsg = "<pre>" + msg + "</pre>";
                    //$('#buildtextarea').html(htmlMsg);
                                }
                $.post(url,{code0: ""},function(ret_val)
                {
                  if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
                    //console.log(url);
                    //alert(url);
                	  refreshNewSessionPage();
                  }

                                      if ($type == 'Grading') {
                                            if (asyncCommand) {
                        reportsToOpen = true;
                        submitGetStatus($type, null, 0);
                        asyncCheckReportPeriodic($type, asyncPollUrl, false, false, maxPollTv, Math.floor(Date.now() / 1000));
                      }
                                            return;
                    } else if ($type == 'Submission') {
                      if (asyncCommand) {
                        reportsToOpen = true;
                        submitGetStatus($type, null, 0);
                        asyncCheckReportPeriodic($type, asyncPollUrl, false, false, maxPollTv, Math.floor(Date.now() / 1000));
                      }
                      return;
                    }
                    
                                    // show_voc_gritter(false, $type+" done", false);

                  data = ret_val;
                  if (!asyncCommand) {
                    if ($type=='RUN' || $type=='BUILD' ) { // activity icon only for RUN as of now
                      //updateRunIcon($type, false);
                    }
                                      //consolePrint(htmlMsg + "\n" + data);
                                    }

                  indicate_build_done();
                  build_in_progress = false;
                  
                  
                                        wasUnsubmitted = false;
                      if ($('#workunsubmitted').is(":visible")) {
                          wasUnsubmitted = true;
                      } 
                                                          refreshFileTree(false, ($type != "Submission"));
                                             	  refreshSubTree();
                  	                        if (false && wasUnsubmitted) {
                          window.setTimeout(function(){ $('#workunsubmitted').show(); } , 500);
                      }
                                    
                  if (asyncCommand) {
                       
                      
                                                            //$('#report_submission_msg_box').html("<i class=\"icon-spin icon-spinner\"></i>&nbsp; Creating report ..");
                                //$('#modal-table-report-submission').modal();
                                                  
                                            reportsToOpen = true;
                      var token = false;
                      var chksubmit = false;
                      var chkgrade = false;
                                            asyncCheckReportPeriodic($type, asyncPollUrl, chksubmit, chkgrade, maxPollTv, Math.floor(Date.now() / 1000));
                      if($type != 'BUILD' && $type != "RUN") postSubmitProcessing($type);
                      //if($type != 'BUILD' && $type != "RUN") submitGetStatus($type, null, 0);
                  }                 
                  
                });
						
		}

	

var save_in_progress = false;
var fileUploadListener = null;

var runlog_in_progress = false;
var verify_in_progress = false;
var log_interval = 1;	
var current_mode = 1;
var previous_mode = 1;

var viewer = false;
var currentEditFileIndex = 0;
var edit_file = "";
var edit_file_name = "";


var diffArea = null;

function initDiff() {
	  value = editor.getValue();
	  var target = document.getElementById("div-diff");
	 
	  target.innerHTML = "<h4>&nbsp;<i class=\"icon-spin icon-spinner\"></i> Loading diff. Please wait. </h4>";
	  
		var filepath = viewer_last_fpath;				
		if (!viewer_last_fpath) filepath = viewer_first_fpath;

		// filepath = encodeURIComponent(filepath);
		cm_mode = findMode(filepath);
		
		
		var url = "../util/vcprojapi.php?t=projsource&orig=1&asnid=2791999&wa_stepid=2792000&id=23667086&data=filepath&version=0";

		$.post(url,{getcode:1,data:filepath},function(ret_val)
		{
			if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
				refreshNewSessionPage();
			}		
			// conversion 
			$("#scratchpad").val(ret_val);
			orig_val = $("#scratchpad").val();
				
				
			if (ret_val == "") {
			  	target.innerHTML = "<h4>&nbsp; This file has no original version. </h4>";
				diffArea = null;						
				return;
			}	
			if (orig_val == value) {
			  	target.innerHTML = "<h4>&nbsp;<i class=\"icon-check\"></i> Current version is same as the original version. </h4>";

				// target.innerHTML = "<div style=\"padding: 10px\">Current Version is exactly same as the Original Version.</div>";	
				diffArea = null;						
				return;
			}
			
			target.innerHTML = "<span style=\"padding-left:10px\">Current Version</span><span class=\"pull-right\" style=\"padding-right:10px\">Original Version</span>";							
			  orig2 = orig_val;
			  // value_mod = value.replace(/\u003cscript/g, "\u003cscript type=text/javascript ");
			  value_mod = value;
			  diffArea = CodeMirror.MergeView(target, {
				value: value_mod,
				origLeft: null,
				orig: orig2,
				lineNumbers: true,
				mode: cm_mode,
				highlightDifferences: true
			  });

		});
	}

function indicate_build_done() {
	}
    
function getFilePathStr(unencoded_filepath, encodeIt)
{
  if (unencoded_filepath.length <= 1)
  {
    return ""; 
  } 
  // if starting with "./work", remove it
  // not sure what to do about asnlib, etc. right now
  fp = unencoded_filepath.replace(/^\.\/work\//, "");
  return "&selectedfile=" + ((encodeIt == true) ? encodeURIComponent(fp) : fp);
}

function hideCopyFileBtn() {
    $('#filecopybtn').hide();
    //mhui
    if (!vmlab2) {$('#filesyncbtn').hide();}
}
function showCopyFileBtn() {
    $('#downloadbtn').show();
    $('#filecopybtn').show();
    //mhui
    if (vmlab2) {$('#filesyncbtn').show();}
}

function hideSyncFileBtn() {
  $('#filesyncbtn').hide();
}

function hidePasteFileBtn() {
    $('#filepastebtn').hide();
}
function showPasteFileBtn() {
    if (copyPasteClipboard) {
        $('#filepastebtn').show();
    }
}

function hideAllFileBtn() {
                    $('#fileuploadbtn').hide();
                    $('#filedelbtn').hide();
                    $('#filerenamebtn').hide();
                    $('#newbtn').hide();
                    $("#fileform" ).hide();
                    $('#downloadbtn').hide();
                    hideCopyFileBtn();
                    hidePasteFileBtn();
                    hideSyncFileBtn();
}
function showDelFileBtn() {
                    $('#filedelbtn').show();
                    $('#filerenamebtn').show();                              
}
function showCreateFileBtn() {
                    // $("#fileform" ).hide();
                    $('#fileuploadbtn').show();
                    $('#newbtn').show();
}
function showNewBtn() {
    $('#newbtn').show();
}

$("#modal-table-diff").on('shown.bs.modal', 
	    function (e) {
	      initDiff();
	    }
	);







function showCanvas()
{
  
}
function showEditor()
{
  }




var lastHtmlFileShown = null;

function showHtmlFile(val) {
  // if path has spaces, replace with '+' for url
  if (val.includes(" ")) val = val.replaceAll(" ", "+");
      var url = "../web/3209731/2792000.0/" + val;
    url += "?vockey=92b04c35873bd949b37ad2d5305bdc08d94a5d6ff8998372748bc9b283f4c299";
  lastHtmlFileShown = val;
  
  // mhui: call clabide func()
  if(!newLayout) {
    showPanel3(url, 1); 
  } else {
    (webDevIde)? ($('#htmlFileViewer').attr('src', (url+"&domChange=1")), switchActiveTab('HTML')) : (displaySubmissionFileInPanel3(true, url, true));
  }
}

function showHtmlFileDelayed(val) {
  if (isSaveNeeded()) {					
    voc_save(true, "Saving");
  }
  if (save_in_progress) {
    setTimeout(showHtmlFileDelayed, 300, val);
  } else {
    showHtmlFile(val);
  }
}                   
    
$('#htmlreloadbtn').on('click', function() {
  if (lastHtmlFileShown == null) {
    return;
  }
  showHtmlFileDelayed(lastHtmlFileShown);
});

var wasDelOn = false;
var fileoptype = '';

function initFileButtons()
{
	//File operation handlers
	$('#filecopybtn').on('click', function() { 
	    $("#filestatuslabel").html("");
	    var cb = $('#input_filename').val();
	    var paths = $('#tree1').tree('selectedItems').map(function (el) {
        var path = el.path.substring(2);
        if (el.type == 'folder') {
          path += '/';
        }
        return path;
      });
	    saveCBClipboard(cb, paths);
	});
	$('#filepastebtn').on('click', function() {
	    $("#filestatuslabel").html(""); 
	    var tgt = $("#input_filename").val();
	    voc_create("Paste", tgt, '', "Paste successful");
	});

	$('#filecreatebtn').on('click', function() {
	    $("#filestatuslabel").html("");
	    if (fileoptype=='file') {
	        voc_create("File", $("#input_filename").val(), null, "File created");
	    } else if (fileoptype=='folder') {
	        voc_create("Folder", $("#input_filename").val(), null, "Folder created");
	    } else if (fileoptype=='rename') {
	        voc_create("Rename", $("#input_filename").val(), $("#span_selectedfile").text(), "Rename successful");
	    }
	});

	$('#filedelbtn').on('click', function() {
	  var paths = $('#tree1').tree('selectedItems').map(function (el) {
      var path = el.path.substring(2);
      if (el.type == 'folder') {
        path += '/';
      }
      return path;
    });
    
    
		var $val = $("#input_filename").val();
		var $type = $("#input_filetype").val();
	        $("#filestatuslabel").html("");
	        
		if ($val != '') {
		  
      console.log(JSON.stringify(paths).substring(1, JSON.stringify(paths).length-1));
          
          if(!vocNotebookIde) {
		  
  					bootbox.dialog("Are you sure you want to delete " + JSON.stringify(paths).substring(1, JSON.stringify(paths).length-1) + "?", 
  					[{
  						"label" : "Yes",
  						"class" : "btn vocbtn-ac vocbtn-action",
  						"callback": function() {
    							voc_create("Delete", $("#input_filename").val(), null, "Deleted");
    						}
  						}, 
  						{
  						"label" : "Cancel",
  						"class" : "btn vocbtn-ac vocbtn-status"
  						}]
  					);
          } else {
            // Since vocNotebookIde uses Bootstrap 5, the bootbox has been converted to a modal
            $('#modal-confirmDeleteString').html("Are you sure you want to delete " + JSON.stringify(paths).substring(1, JSON.stringify(paths).length-1) + "?");
            $('#modal-confirmFileDeletion').modal('show').css('opacity:1');
            
            
          }
		}
	});

	$( "#downloadbtn" ).click(function() {
		if ($('#input_filename').val().startsWith("Submissions/")) {
			var url = "../main/submissionurl.php?asnid=2792000&mode=s&version=0&courseid=117181&userid=3209731&data=" + $('#input_filename').val();
		} else {
		  var paths = $('#tree1').tree('selectedItems').map(function (el) {
	      var path = el.path.substring(2);
	      if (el.type == 'folder') {
	        path += '/';
	      }
	      return path;
	    });
	    	var filepath = "./" + $('#input_filename').val();
	    	var url = "../domains/ide_src_zip.php?stepid=2792000&mode=s&version=0&filepath=" + filepath;
		}
		$('#div-output-download_from_ide').html('');
  	$.ajax({
  	  url: url,
  	  type: 'post',
  	  data: {
  	    files: JSON.stringify(paths)
  	  },
  	  success: function(data) {
  	    $('#div-output-download_from_ide').html(data);
  	  }
  	});
	    //$('#div-output-download_from_ide').html("<iframe src=\""+url+"\" width=\"100%\" height=\"100%\" title=\"Download\"></iframe>");
	});
	  
	$('#filesyncbtn').on('click', function() {

		if (syncToS3WorkareaTimerCount) return;
		
	  $("#filestatuslabel").html("");
	  var msg = '';
	  if (appsIde) {
      msg = "Sync will copy Appstream Home Folder to your home/. Click Yes to continue. ";
	  }

	  else {
		  // check if the lab has been started
      msg = "Sync will copy your workarea to S3 bucket. Click Yes to continue. ";
	  }
		bootbox.dialog(msg, [{
			"label" : "Yes",
			"class" : "btn vocbtn-ac vocbtn-action",
			"callback": function() {
				//refreshFileTree(false, true);
			 if (appsIde && $('#trees3home').length > 0) {
	       refreshS3HomeTree(1); // syncflag is 1
	     } 
		   else {
			   syncToS3Workarea();
			   //refreshS3WorkareaTree(0); //1
			 }
			}
			}, {
			"label" : "Cancel",
			"class" : "btn vocbtn-ac vocbtn-status"
			}]
		);
	});

	 

	$('#fileuploadbtn').on('click', function() {
	  
	    $("#filestatuslabel").html("");
	    if(!vocNotebookIde) {
  	    	    }
	    markUpdateChanged($("#input_filename").val());
	    $('#fileuploadfield').val("");
	    var args;
	    var myfilepath;
	    if (appsIde) 
	    {
	    	myfilepath = ($("#input_filename").val() == 'Select file or folder')? 'work' : $("#input_filename").val();
		    args = '&type=S3Upload&asnid=2791999&stepid=2792000&mode=s&version=0&vmd=100&filepath=./' + myfilepath;
	    }
	    else
	    {
	      args = '&type=Upload&asnid=2791999&stepid=2792000&mode=s&version=0&vmd=100&filepath=./' + $("#input_filename").val();
	    }
	    
	    var uploadWaitModal = $('#modal-upload-wait');
	if(fileUploadListener) document.getElementById('fileuploadfield').removeEventListener('change', fileUploadListener, false);
	fileUploadListener = vcUploadFiles('modal-upload-wait', 'uploadWaitMsgBox', null,'fileuploadfield', 10, args, null);
	$("#fileuploadfield").click();
	if(vocNotebookIde) uploadWaitModal.show();
	
	});



	$('#filecancelbtn').on('click', function() {
        var sel_type = $('#input_filetype').val();
        var seltxt = $("#span_selectedfile").text();
        fileoptype = '';
$("#fileform" ).hide();
        if(copyPasteClipboard && sel_type=='folder'){
$('#newbtn').show();
$('#filepastebtn').show();
        }
$('#fileuploadbtn').show();
        if(seltxt.search(/^(ASNLIB|LIB|resource\/lib|resource\/asnlib)\/publicdata\//)<0){
          showCopyFileBtn();
        }
if (wasDelOn) {
$('#filedelbtn').show();
$('#filerenamebtn').show();
}
$("#filestatuslabel").html("");
$('#well_selectedfile').show();
        $("#input_filename").val(seltxt);
});
$('#filenewbtn').on('click', function() {
        fileoptype = 'file';
        $("#filestatuslabel").html("");
if ($('#filedelbtn').is(":visible")) {
	wasDelOn = true;
} else {
	wasDelOn = false;
}
    $('#filepastebtn').hide();	
$('#fileuploadbtn').hide();
hideCopyFileBtn();
$('#filedelbtn').hide();
$('#filerenamebtn').hide();
$("#fileform" ).show();
$('#well_selectedfile').hide();
$('#input_filename').focus();
});

$('#foldernewbtn').on('click', function() {
        fileoptype = 'folder';
        $("#filestatuslabel").html("");
if ($('#filedelbtn').is(":visible")) {
	wasDelOn = true;
} else {
	wasDelOn = false;
}
    $('#filepastebtn').hide();	
hideCopyFileBtn();
$('#fileuploadbtn').hide();
$('#filedelbtn').hide();
$('#filerenamebtn').hide();			
$("#fileform" ).show();
$('#well_selectedfile').hide();
$('#input_filename').focus();
});

$('#filerenamebtn').on('click', function() {
    fileoptype = 'rename';
    $("#filestatuslabel").html("");
if ($('#filedelbtn').is(":visible")) {
wasDelOn = true;
} else {
wasDelOn = false;
}
    hideCopyFileBtn();
$('#newbtn').hide();			
$('#filepastebtn').hide();	
$('#fileuploadbtn').hide();
$('#filedelbtn').hide();
$("#fileform" ).show();
$('#well_selectedfile').hide();
});

$('#canvasbtn').on('click', function() {
// var url = "../web/3209731/2792000/" + "work/" + "voc_canvas.html";
// $('#div_canvas').html("<iframe src=\""+ url +"\" width=\"100%\" height=\"100%\"></iframe>");
showCanvas();
});

$('#fileviewbtn').on('click', function() {
if (isSaveNeeded()) {					
	voc_save(true, "Saving");
} 
var val = $('#editor_current_file').text();

var url = "../web/3209731/2792000.0/"+val;
$('#browser-viewer-title').text(val);
$('#browser-viewer-iframe').attr("src", url);      
$('#browser-viewer-link').attr("href", url);      
$('#browser-viewer-modal').modal('show');
});
	
}

var initFileTree_once = 0;
var initCustomRightClickMenu = true;
var autoload = 0;
var autoloadFileOccurred = 0; // only autoload the first time page is loaded
// note: initFileTree is called twice when page loads
function initFileTree()
{
  //console.log('initFileTree');
  //console.log(JSON.stringify(treeDataSource));

  try {
    if (false && viewSubmissionsViaVNB && parent && typeof(parent.replaceNavButtons) === typeof(Function)) {
        parent.replaceNavButtons();
    }
  } catch (e) {
      // if we are here, then the parent is not the grader page
  }

  
  if(!newContainerLab || basicV2Ide || webDevIde || (newContainerLab && !hideFileBrowser)) {
  	$('#tree1').ace_tree({
  		dataSource: treeDataSource,
  		multiSelect: true,
  		loadingHTML:'<div class="tree-loading"><i class="icon-refresh icon-spin blue"></i></div>',
  		'open-icon' : (vocNotebookIde) ? 'icon-folder-open' : 'icon-minus',
  		'close-icon' : (vocNotebookIde) ? 'icon-folder-close' : 'icon-plus',
  		'selectable' : true,
  		'selected-icon' : (vocNotebookIde) ? 'bi bi-file-earmark' : 'icon-caret-right',
  		'unselected-icon' : (vocNotebookIde) ? 'bi bi-file-earmark' : 'icon-caret-right',
  		cacheItems: true
  	});
  }
	
		// one accesibilty handler per panel
	$('#filelisting').off('keydown');
    $('#filelisting').attach_accesible_handler();
    $('#idenav').off('keydown');
    $('#idenav').attach_accesible_handler();
    $('#breadcrumb').off('keydown');
    $('#breadcrumb').attach_accesible_handler();


	$('#tree1').on('loaded', function (evt, data) {	  
	  // if new container lab, hide tree1 (workarea) from filetree
	  if(newContainerLab && !webDevIde && hideFileBrowser) $('#tree1').hide();
	  if(newContainerLab && !webDevIde && hideFileBrowser) $('#well_selectedfile').hide();
	  
	  // make long file/folder names appear on one line and clip if too long
	  $('div[class="tree-item-name"] span[class="tree-btn"]').css({'display': 'inline-block', 'vertical-align': 'top', 'max-width': '75%', 'overflow': 'hidden', 'text-overflow': 'ellipsis', 'white-space': 'nowrap', 'user-select': 'none', '-ms-user-select': 'none', '-moz-user-select': 'none', '-webkit-user-select': 'none'});
	  $('div[class="tree-folder-name"] span[class="tree-btn"]').css({'display': 'inline-block', 'vertical-align': 'top', 'max-width': '75%', 'overflow': 'hidden', 'text-overflow': 'ellipsis', 'white-space': 'nowrap', 'user-select': 'none', '-ms-user-select': 'none', '-moz-user-select': 'none', '-webkit-user-select': 'none'});
	  $('#editor_current_file_div #editor_current_file').css({'display': 'inline-block', 'max-width': '500px', 'overflow': 'hidden', 'text-overflow': 'ellipsis', 'white-space': 'nowrap'});
	  // shift+click is used for multi-select so prevent text from being highlighted
	  $('div[class="tree-item"]').css({'user-select': 'none', '-ms-user-select': 'none', '-moz-user-select': 'none', '-webkit-user-select': 'none'});
	  $('div[class="tree-folder-header"]').css({'user-select': 'none', '-ms-user-select': 'none', '-moz-user-select': 'none', '-webkit-user-select': 'none'});
	//		var classList = $('.tree-btn');
	//		$.each(classList, function(index, item) {
	//    		$(item).make_accesible();
	//    	});

    // if README exists, open it instead of first file
    if (vocNotebookIde && true) {
      
      vocFileViewer.openReadMe('../web/3209731/2792000.0/ASNLIB/public/docs/lang/en-us/README.html');
      autoload = 1 // Used to exclude period_save() for filetreeFileSelect() or it'll throw cross-DOM error
      autoloadFileOccurred += 2;
    }

    if(typeof tree_data !== 'undefined' && true) {
	    //Autoloads files between 0mb-8mb

      var widgetFiles = null;
      try {
        widgetFiles = tree_data.work.additionalParameters.children;
      } catch (e) {
        widgetFiles = null;
      }
  	  if(widgetFiles != null && "" /*&& ""*/) {
  	     $.each(widgetFiles, function(i, obj) {

  	      // File will autoload if file is an item, has a size < 8mb, and the file name doesn't start with a '.'
  	      if(obj.type == 'item' && obj.size >= 0 && (obj.size < 8388608 || vocNotebookIde) && (obj.name).indexOf('.') != 0 && autoloadFileOccurred < 2) {
                    
          // If initial file to load is set as URI parameter, use that file as initial file to load
          
          
            if (typeof initial_file_to_load === 'undefined' || obj.name === initial_file_to_load) {
              var rec = {
                name: obj.name,
                path: obj.path,
                ee: obj.ee
              }
              autoload = 1 // Used to exclude period_save() for filetreeFileSelect() or it'll throw cross-DOM error
              autoloadFileOccurred += 1;
              // get the div[class="tree-item"] element for obj.name
              // in case of ./resource/.../work/<obj.name>, the correct one is the first child of the work folder
                // aka parent().parent().parent().parent().parent().attr('id') == 'tree1';
              let htmlEl = $('span[class="tree-btn"]').filter(function() {
                return $(this).text() === obj.name;
              }).filter(function() {
                return $(this).parent().parent().parent().parent().parent().attr('id') == 'tree1';
              }).parent().parent();
              
              $('#tree1').tree('selectItem', htmlEl);
              
              // if htmlEl is detected to be empty/length of 0, do alternate load
              // Typically occurs when submission is turned off when using new layout (since filetree element doesn't exist)....
              if((basicV2Ide || webDevIde) && htmlEl.length == 0) filetreeFileSelect(rec);
              return false;
            }
  	      }
  	    });
  	    // If initial file to load exists but failed to load, load filetree
  	    if(!autoload && false) refreshFileSelectDropdown();
  	  }
	  }
	  
	  // adds custom right-click menu
	  if(vocNotebookIde) {
      setupCustomRightClickMenu();
      
      // Unfolds the 'Submissoin' Folder
        }
	});

	$('#tree1').on('opened', function (evt, data) {
	});

	$('#tree1').on('closed', function (evt, data) {
	});

	$('#tree1').on('selectedfolder', function (evt, data) {

    // if folder is clicked, automatically unfold it
    if(vocNotebookIde) {
      $('.tree-folder-header').each(function(item) {
          if(typeof data.info[0].name !== "undefined" && $(this).find('.tree-folder-name').html().indexOf(data.info[0].name) !== -1) $(this).find('.icon-folder-close').click();
      });
    }

	  if (data.info.length <= 0) { // when an item is unselected and the next item in the selected list is a folder
	    hideAllFileBtn();
  		$('#span_selectedfile').html('');
      //$('#editor_current_file').html('');
	    return;
	  }
	  $('#trees3').find('.tree-selected').removeClass('tree-selected');
	  var workDirIsLocked = ((data.info[0]['name'] == "work") && 'extraHtml' in data.info[0] && data.info[0]['extraHtml'].includes("icon-lock"));
	  var relpath = data.info[0].path.substring(2);
		$('#input_filename').val(relpath + "/");
		$('#span_selectedfile').html(relpath + "/");
		$('#well_selectedfile').show();
    //$('#editor_current_file').html('');
		$('#input_filetype').val("folder");

		hideAllFileBtn();
                    if( relpath == 'resource' ){
                      $('#downloadbtn').hide();
                      return false;
                    }
                            
                  		if (data.info[0].ec==1 || relpath.search(/^LatestSubmission/)<0){
                                               if( relpath.search(/^resource/)<0 ){
		                      showCreateFileBtn();
	  	                    showPasteFileBtn();
                        } else {
                          showCopyFileBtn(); 
                        }
                                            if (relpath.search(/resource\/(asnlib|lib)\/publicdata/) >= 0) {
                        $('#filenewbtn').css({'visibility': 'hidden'});
                      } else {
                        $('#filenewbtn').css({'visibility': 'visible'});
                      }
                    } 
                                      if(relpath.search(/^(ASNLIB|LIB|resource\/lib|resource\/asnlib)\/publicdata($|\/)/)<0){
		  showCopyFileBtn();
                    }
		if (data.info[0].ed == 1) {
                              if( relpath.search(/^(ASNLIB|LIB)\/publicdata$/)<0 &&
                                  relpath.search(/^resource\/(lib|asnlib)\/publicdata$/)<0 &&
                                  relpath.search(/^resource\/(lib|asnlib|scripts|startercode)$/)<0 ){
		  	    showDelFileBtn();
                              }
                    }
    if ($('#tree1').tree('selectedItems').length > 1) {
      //$('#editor_current_file').html('');
  		$('#span_selectedfile').html('');
      multiSelectShowHideBtns();
    } else if ($('#tree1').tree('selectedItems').length == 1) {
      if ($('#tree1').tree('selectedItems')[0].type == 'item') {
        filetreeFileSelect($('#tree1').tree('selectedItems')[0]);
        multiSelectShowHideBtns();
      } else {
        let relpath = $('#tree1').tree('selectedItems')[0].path.substring(2);
        $('#input_filename').val(relpath + "/");
        //$('#editor_current_file').html('');
        
        if(workDirIsLocked) {
          $('#newbtn').hide();
          $('#fileuploadbtn').hide();
        }
      }
    }
	});

	if (!initFileTree_once) {
  	$('#tree1').on('selected', function (evt, data) {

      // if selected tree1 file contains filename input form, don't select it
      if($('#tree1 .tree-selected:has(.filenameform)').length > 0) {
        $('#tree1 .tree-selected:has(.filenameform)').removeClass('tree-selected');
        return;
      }


  	  if (data.info.length > 0 && (typeof data.info[0] !== 'undefined' && data.info[0] !== null) && data.info[0].type != 'folder' && $('#tree1').tree('selectedItems').length == 1) {
  	    // if 1 folder & 1 file are selected and then file is unselected, then data.info[0] will be a folder
  	    // so we need to check if data is a file and not a folder
        filetreeFileSelect(data.info[0]);
		  }
		  $('#trees3').find('.tree-selected').removeClass('tree-selected');
		  if ($('#tree1').tree('selectedItems').length > 1) {
    		$('#span_selectedfile').html('');
		    //$('#editor_current_file').html('');
        multiSelectShowHideBtns();
        // below: show appropriate buttons when an item is unselected
      } else if ($('#tree1').tree('selectedItems').length == 1) {
        if ($('#tree1').tree('selectedItems')[0].type == 'folder') {
          let relpath = $('#tree1').tree('selectedItems')[0].path.substring(2);
    			$('#input_filename').val(relpath + "/");
    			$('#span_selectedfile').html(relpath + "/");
    			//$('#editor_current_file').html('');
        }
        multiSelectShowHideBtns();
      } else {
        hideAllFileBtn();
        $('#downloadbtn').hide();
        //$('#editor_current_file').html('');
      }
  	});
  	initFileTree_once = 1;
	}

  $('.tree-folder-header').each(function(i, obj) {
		$val = $(this).data();
		if ($val['unfold'] == 1) {
			$(this).find('[class*="icon-"]:first-child').trigger('click');
			if ($val['name'] == 'work') {
			  $('#tree1').tree('selectFolder', obj);
			}
		}
	});

}

function refreshFileTreeHtml() 
{
	//console.log('refreshFileTreeHtml');
	//console.log($('#span_selectedfile').html());
	var relpath = $('#span_selectedfile').html();
	var ext_index = relpath.lastIndexOf('.');
	if (ext_index == -1) {
		ext = null;
	} else {
    	ext = relpath.substring(ext_index + 1);
  }
	//alert(ext);
	if (isBrowserViewableFile(ext)) {
	  showHtmlFile(relpath);
	}
}

	function filetreeFileSelect(rec) {	
		//console.log('filetreeFileSelect: '+rec.path.substring(2));
		//console.log(rec);
		if(vocNotebookIde && vocFileViewer.findFile(rec.path) && !viewFlag) {
      switchActiveTab(rec.path);
      displayFiletreeLoadingScreen(0);
      return;
    }
    
		
		var relpath = rec.path.substring(2);
		//showEditor();
		$('#input_filename').val(relpath);
		$('#span_selectedfile').html(relpath);
		$('#well_selectedfile').show();
		$('#input_filetype').val("file");

        hideAllFileBtn();
      if (rec.ed == 1) {
          if(relpath.search(/^(Scripts|LatestSubmission)/)<0){
            showDelFileBtn();
          }
      } 
      if (rec.nc != 1) {
          if( relpath.search(/^(ASNLIB|LIB|resource\/lib|resource\/asnlib)\/publicdata($|\/)/)<0 ){
            showCopyFileBtn();
          }
      }
    if(editor != null) {
    if (rec.ee == 1) {
      editor.setOption("readOnly", false);
		} else {
      editor.setOption("readOnly", true);
		}
  }
				
		var ext_index = rec.name.lastIndexOf('.');
		if (ext_index == -1) {
			ext = null;
		} else {
        	ext = rec.name.substring(ext_index + 1);
        }
		if (isVidFile(ext)) {
             
                var url = "https://labs.vocareum.com/web/3209731/2792000/" + relpath;
                var str = '<video width="600px" controls> ' +
                          '<source id="video-viewer-modal-video" src="' + url + '" type="video/mp4">' +
                          'Your browser does not support HTML5 video. </video>';
                $('#video-viewer-modal-div').html(str);                
                $('#video-viewer-modal').modal('show');
                return;
		} else if (isImgFile(ext)) {
                   							
                $.get('../util/vcprojapi.php', {t: 'filefetch', mode:'s', asnid: 2791999,  stepid:2792000, data: rec.path,version:0, vm: vm_extip, labtype:1}, function(data) {
              
                if(vocNotebookIde) {
                  openFileInVocNotebook(data, rec.path, rec.name);
                  //return;
                  
                } else {
                  $('#image-viewer-modal-image').prop('src', data);
                  $('#image-viewer-modal').modal('show');
                }
                
			});
            return;
		} else if (isOtherFile(ext)) {

              							
      $.get('../util/vcprojapi.php', {t: 'filefetch', mode:'s', asnid: 2791999,  stepid:2792000, data: rec.path,version:0, vm: vm_extip, labtype:1}, function(data) {
				$('#other-viewer-modal-area').prop('data', data);
				// set application type here
				$('#other-viewer-modal').modal('show');
			});
            return;
		} else {
				// all other
		}
		
                if (isBrowserViewableFile(ext) && false) {
                  //$('#htmlreloadbtn').show();
                  if(vocNotebookIde) {
                            							
                    $.get('../util/vcprojapi.php', {t: 'filefetch', mode:'s', asnid: 2791999,  stepid:2792000, data: rec.path,version:0, vm: vm_extip, labtype:1}, function(data) {
                      openFileInVocNotebook(data, rec.path, rec.name);
                    });
                  } else {
                    showHtmlFile(relpath);
                  }
                }
                else {
		if (isBrowserViewableFile(ext)) {
		    $('#fileviewbtn').show();
		} else {
		    $('#fileviewbtn').hide();
		}
                }
		
		var codeFileChanged = true;			
		
		if (editor != null && editor.doc.isClean(editor_content_change)) codeFileChanged = false;
		if (vocIsFileReadOnly(viewer_last_fpath)) codeFileChanged = false;

		if (codeFileChanged) {
				voc_save(true, "Saving, please wait");
		} 
		
		if(!autoload) { // Only periodic_save() if it's not an auto-load event (otherwise throws cross-DOM error)
		  periodic_save();  
		}
		else {
		  autoload = 0;
		}
		 
  var codeComments = ( (typeof (rec.comments) !== 'undefined') ? rec.comments : '' );
  voc_get_viewer_code(rec.path, rec.name, 0, codeComments == '' ? null : codeComments);


				
    openJupyterNbInPanel(rec);
	
	}

  function openJupyterNbInPanel(rec) {
    if(vocNotebookIde) return;
    
    // for jupyter elite, open notebooks in jupyter whenever a notebook (in the work area) is selected in the file tree 
    if (rec.path.startsWith('./work/')) {
      if (rec.name.endsWith('.ipynb')) {
        let iframe = $('#panel2-iframe')[0];
        let nbPath = rec.path.split("./work/")[1];
        if ($('#panel2-iframe').attr("src").endsWith('/tree')) {
          // replace the word 'tree' with 'notebooks/path_to_notebook/name_of_notebook.ipynb'
          let nbUrl = $('#panel2-iframe').attr("src").substring(0, $('#panel2-iframe').attr("src").length-4) + "notebooks/" + nbPath;
          if (encodeURI(nbUrl) != iframe.contentWindow.location.href) {
            //$('#panel2-iframe').attr("src", nbUrl); // this adds to the history
            iframe.contentWindow.location.replace(nbUrl);
          }
        } else if ($('#panel2-iframe').attr("src").endsWith('.ipynb')) { // for assignments that have a starting notebook
          let nbUrl = $('#panel2-iframe').attr("src").split("/notebooks/")[0] + "/notebooks/" + nbPath;
          if (encodeURI(nbUrl) != iframe.contentWindow.location.href) {
            //$('#panel2-iframe').attr("src", nbUrl); // this adds to the history
            iframe.contentWindow.location.replace(nbUrl);
          }
        } else if (!$('#panel2-iframe').attr("src")) {
          setTimeout(function() {
            openJupyterNbInPanel(rec);
          }, 1000);
        }
      }
    }
  }

	function S3FileSelect(rec) {
		//console.log('S3FileSelect: '+rec.fpath+' '+rec.name);

    if (viewSubmissionsViaVNB) {
      // if fpath doesn't begin with 'submissions', then prepend it
      if (!rec.fpath.startsWith("Submissions/")) rec.fpath = 'Submissions/' + 'Submission_0/' + rec.fpath;
    }

    // check if file is already opened, if so, switch to that tab
    if(vocNotebookIde && vocFileViewer.findFile(rec.path ?? rec.fpath)) {
      switchActiveTab(rec.fpath);
      displayFiletreeLoadingScreen(0);
      return;
    }

    // when viewing a submitted file, check if the submission has code comments
    if (vocNotebookIde && (rec.comments == null || rec.comments == '')) {

      if (false) {          
          let match1 = null; let match2 = null;

          // if file is being loaded from the workarea, then get all available code comments for the file
          //    - i.e. all code comments form all submissions (for 'Live Code Comments')
          if ((match1 = rec.fpath.match(/^Submissions\/Submission_(\d+)\//))) {
            rec.comments = '';
            for (let key in user_codecomment_map) {
              if ((match2 = key.match(/^Submissions\/Submission_\d+\//) || key.match(/^\.\/home\/labsuser\//))
                    && rec.fpath.substring(match1[0].length) == key.substring(match2[0].length)) {
                
                rec.comments += (rec.comments == '' ? '' : ',') + user_codecomment_map[key];
              }
            }
          }
      } else {
        if (typeof user_codecomment_map[rec.fpath] !== 'undefined') rec.comments = user_codecomment_map[rec.fpath];
      }
    }

		var fpath = rec.fpath;
		var fname = rec.name;
  //showEditor();
		
		if(vocNotebookIde) displayFiletreeLoadingScreen(1);
		
		    
    if(editor != null) {
  		editor.setOption("readOnly", true);
    }
      $('#input_filename').val(fpath);
		$('#span_selectedfile').html(fpath);
		$('#well_selectedfile').show();
		$('#input_filetype').val("file");
		
					hideAllFileBtn();
			showCopyFileBtn();
		
    // if there are currently no files opened and an initial file is being opened, then we need to set the current file
    
		var ext_index = fname.lastIndexOf('.');
		if (ext_index == -1) {
			ext = null;
		} else {
        	ext = fname.substring(ext_index + 1);
          if (ext.includes('<i class="')) {
            ext = ext.substring(0, ext.indexOf('<i class="'));
          }
        }
		if (isVidFile(ext)) {
             
            var url = "https://labs.vocareum.com/web/3209731/2792000/" + fpath;
            var str = '<video width="600px" controls> ' +
                      '<source id="video-viewer-modal-video" src="' + url + '" type="video/mp4">' +
                      'Your browser does not support HTML5 video. </video>';
            $('#video-viewer-modal-div').html(str);                
            $('#video-viewer-modal').modal('show');
            return;
		} else if (isImgFile(ext)) {
                   							
           $.get('../util/vcprojapi.php', {t: 'filefetch', mode:'s', userid: 3209731, asnid: 2791999,  stepid:2792000, data: fpath,version:0, vm:'34.209.143.232', labtype:1}, function(data) {
              if (vocNotebookIde) {
                openFileInVocNotebook(data, fpath, fname);
              } else {
                $('#image-viewer-modal-image').prop('src', data);
                $('#image-viewer-modal').modal('show');
              }
			});
            return;
		} else if (isOtherFile(ext)) {
						$.get('../util/vcprojapi.php', {t: 'filefetch', mode:'s', userid: 3209731, asnid: 2791999,  stepid:2792000, data: fpath,version:0, vm:'34.209.143.232', labtype:1}, function(data) {
                $('#other-viewer-modal-area').prop('data', data);
                // set application type here
                $('#other-viewer-modal').modal('show');
            });
            return;
		} else {
			// all other
		}
		
        if ((isBrowserViewableFile(ext) || ext == 'ipynb') && false && !vocNotebookIde) {
            //$('#htmlreloadbtn').show();
            showHtmlFile(fpath);
        } else {
			if (isBrowserViewableFile(ext)) {
			    $('#fileviewbtn').show();
			} else {
			    $('#fileviewbtn').hide();
			}
        }
		
		var codeFileChanged = true;			
		
		if (editor != null && editor.doc.isClean(editor_content_change)) codeFileChanged = false;
		if (vocIsFileReadOnly(viewer_last_fpath)) codeFileChanged = false;

		if (codeFileChanged) {
			voc_save(true, "Saving, please wait");
		}
		//mhui
		//periodic_save();
		
		var codeComments = ( (typeof (rec.comments) !== 'undefined') ? rec.comments : '' );
		voc_get_s3_code(fpath, fname, 0, codeComments);
	}
	
// Displays submission file in panel 3
	function displaySubmissionFileInPanel3(inprogress, fpath, html = false) {
	  if(!newLayout) {
  	  if($('#vmp-panel3').find('#codearea0').length == 0) {
        $('#vmp-panel2-1').html('');
        $('#vmp-panel3').html(`<div id="panel3Header" style="text-align:center;"><i class="icon-spin icon-spinner"></i>Reading ... ` + fpath + `</div>` + `   
       <div id="div_codeform0" style="height: 100%; border: 0px solid blue;">
         <form id="codeform0" style="height: 100%; 0px solid red;">
           <textarea id="codearea0" style="margin: 0px; border: 0px solid green;" aria-label="Source code">Choose a file to load from the Files menu on the left</textarea>
         </form>
       </div>
  
  `);
        showPanel3Info();
        initEditor();
      } else {
        if($('#vmp-panel3').find('#panel3Header').length > 0) {
          $('#panel3Header').html(`<i class="icon-spin icon-spinner"></i>Reading ... ` + fpath);
        }
      }
      
      if(inprogress) {
        $('#panel3Header').html(displayPanel3Hdr() + `<i class="icon-spin icon-spinner"></i>Reading ... ` + fpath);
      } else {
        $('#panel3Header').html(displayPanel3Hdr() + fpath);
      }
  	  showPanel3Info();
  	} else {  // if new layout (Golden Layout)
  	  
  	  if(!$('#submissionFileView').is(':visible')) {
  	    $('#submissionFileView').show();
  	    $('#submissionFileViewHeader').show();
  	  }
  	  
  	  // Checks to see if a component has been created for previous submissions
  	  if($('#submissionFileView').length == 0) {
  	    var submissionFileViewHtml = '<div id="submissionFileViewHeader" style="display: none; font-size: 18px; padding: 5px 5px 5px 5px;"> Submission(s) File Viewer</div> \
          <div style="border-bottom: 2px solid rgb(0,109,204);"></div> \
          <div id="submissionFileView" class="" style="width:100% !important; padding: 5px 10px 0px 0px; height:100% !important;"></div>';
  	    addComponentPostConfig('panel3-stack', 'Submission_File_Viewer',submissionFileViewHtml , true);
  	  } else {
  	    switchActiveTab("Submission_File_Viewer");
  	  }
  	  
  	  
  	  
  	  // If displaying regular file (display file using codemirror)
  	  if(html == false) {
  	    if($('#submissionFileView').find('#codearea0').length == 0) {
          $('#vmp-panel2-1').html('');
          $('#submissionFileView').html(`   
       <div id="div_codeform0" style="height: 100%; border: 0px solid blue;">
         <form id="codeform0" style="height: 100%; 0px solid red;">
           <textarea id="codearea0" style="margin: 0px; border: 0px solid green;" aria-label="Source code">Choose a file to load from the Files menu on the left</textarea>
         </form>
       </div>
  
  `);
          initEditor();
        } else {
          if($('#vmp-panel3').find('#panel3Header').length > 0) {
            $('#panel3Header').html(`<i class="icon-spin icon-spinner"></i>Reading ... ` + fpath);
          }
        }
        
        if(inprogress) {
          $('#panel3Header').html(displayPanel3Hdr() + `<i class="icon-spin icon-spinner"></i>Reading ... ` + fpath);
        } else {
          $('#panel3Header').html(displayPanel3Hdr() + fpath);
        }  
  	  } else {  // If displaying html file (Jupyter Elite HTML)
  	    if($('#submissionFileView').find('#submissionFileView-iframe').length == 0) {
          $('#submissionFileView').html(`<iframe id="submissionFileView-iframe" name="submissionFileView-iframe" src="`+fpath+`" style="width: 100%; height: 100%; padding-bottom:0px; border: 0px solid blue;"></iframe>`);
        } else {
          $('#submissionFileView-iframe').prop('src', fpath);
        }
  	  }
  	}
	}

	// modes
	$( "#codebtn" ).click(function() {
		});
		$( "#actionsdropdown" ).click(function() {
		}); 		


		
		// MODE 1: E and C     E8 C4  XP
		// MODE 2: F and E	   F4 E12 
		// MODE 3: E		   E12    XP
		
		// B1: M1 > M3
		// B2: M3 > M1
		
		// G1: M1 > M2
		//	   M3 > M2
		// G2: BACK TO M1 OR M3		
		function changeEditorMode(modeFrom, modeTo) {
			switch (modeFrom) {
				case 1:
				break;
				case 2:
				break;
				case 3:
				break;
				default:
				break;
			}
			switch (modeTo) {
				case 1:
					$("#filelisting").removeClass('hide');
					$("#icon-folder").removeClass('icon-chevron-down');		
					$("#icon-folder").addClass('icon-remove');			
				
				break;
				case 2:
					$("#filelisting").addClass('hide');
					$("#icon-folder").removeClass('icon-remove');			
					$("#icon-folder").addClass('icon-chevron-down');		
				break;
				default:
				break;
			}		
			current_mode = modeTo;
		}	
		
        $( "#savebutton").click(function() {
				voc_save(true, "Saving");
        });


        function showDefaultEditorFile() {
            var default_file_rec = {
                    name: "",
                    path: "./work/" + "",
                    ee: 1
            }
            filetreeFileSelect(default_file_rec);              
        }

       

       $('#input_filename').keydown(function(e) {
    	      if(e.keyCode == 13) {
    	          $('#filecreatebtn').trigger("click");
    	      }
    	  });


       $('#video-viewer-modal').on('hidden.bs.modal', function (e) {
    	    $('#video-viewer-modal-div').html("");  
    	})
    				$( document ).ready(function() {

    			$.extend($.gritter.options, {
    				position: 'top-left'
    			});
    		    	              	              $('.navbar').hide();
    	              	         
    	              	          			
    				});
    		
    				
//-----------------------------------------------------------------------------------------
//
// submission functions
//
//-----------------------------------------------------------------------------------------
var submit_maxcount = -1;
var submit_count = 0;		
var submit_in_progress = false;
var submission_open = 0;
var show_peer_review_confirm_dialog = 0;
var auto_peer_review_mode = 0;

var reportsToOpen = true;

function unescapeHtml(safe) {
    return safe.replace(/&amp;/g, '&')
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')
        .replace(/&quot;/g, '"')
        .replace(/&#039;/g, "'")
        .replace(/<br>/g, "");
}

/* we always get the str as htmlspecialchars from php - now print depends whether on terminal or console 
 * to unescape html */
function consolePrint(str) {
    if ((typeof(str) === 'undefined') || (str == null)) {
      return;
    }
            str = str.replace(/VOC_NL/gm, "");
        str = str.replace(/(?:\r\n|\r|\n)/g, '<br />');
                
        str = '<pre>' + str + '</pre>';
                    widgetModalOutput(str);
                

    }		

function widgetModalOutput(str) {
    $('#div-widgetoutput').html("<i class=\"icon-spin icon-spinner\"></i>&nbsp; Waiting for output ..");        
    $('#modal-table-widgetoutput').modal('show');
    $('#div-widgetoutput').html(str);
}

function updateReportStatus(type, str) {
    var statusElem = '#'+type+'ReportStatus';
    $(statusElem).html(str);
    $(statusElem).show();

    if (!($('#reports').hasClass('open')) && reportsToOpen) {
        $('#reportsdropdown').trigger('click');
        reportsToOpen = false;
    } 
}
function updateReportProgress(type, str) {
    var statusElem = '#'+type+'ReportProgress';
    if( str!='' ){
      $(statusElem).html(str);
      $(statusElem).show();
    } else {
      $(statusElem).hide();
    }
}
function updateReportReady(type, show) {
    var statusElem = '#'+type+'reportbutton';
    if( show ) $(statusElem).show();
    else       $(statusElem).hide();
}

function stopCheckReportTimeout(type) {
  if ($("body").data("timeout"+type) != null) {
    clearTimeout($("body").data("timeout"+type));
  }
}

function startCheckReportTimeout(type, url, chksubmit, chkgrade, tv, st) {
  stopCheckReportTimeout(type);
  timeoutVar = setTimeout(function() {
                 asyncCheckReportPeriodic(type, url, chksubmit, chkgrade, tv, st);
               }, 2000);
  $("body").data("timeout"+type, timeoutVar);
}

var waitingForReport = false;
var maxPollTv = 120; //3m
function asyncCheckReportPeriodic(type, url, chksubmit, chkgrade, tv, st) { 
      
    var statusElem = '#'+type+'ReportStatus';
            if( tv>0 ){
          var elapsed = (Math.floor(Date.now() / 1000) - st);
                    if( true || type!='Submission' || chksubmit===0 ){
            //updateReportStatus(type, '<i class="icon-spin icon-spinner"></i>waiting for report ' + elapsed + 's');
            updateReportIcons(type, true);
          }
        } else {
          waitingForReport = true;
          $("body").data("timeout"+type, null);
          //updateReportStatus(type, 'Please come back and click here for the report ...');
          updateReportIcons(type, false);
          if (type=='RUN' || type=='BUILD') { // activity icon only for RUN as of now
            //updateRunIcon(type, false);
          }
          return false;
        }
        if( tv <= (maxPollTv-10) ) { // after 10s
          if( tv>(maxPollTv-60) )  { // before 1m
            if( (tv % 10) != 0 ){
              startCheckReportTimeout(type, url, chksubmit, chkgrade, tv-2, st);
              return false;
            }
          } else if (tv>0){
            if( (tv % 30) != 0 ){
              startCheckReportTimeout(type, url, chksubmit, chkgrade, tv-2, st);
              return false;
            }
          }
        }
        tv -= 2;
        $.ajax({
            url: url,
            data: {},
            success: function(ret_val) {  

                if (ret_val.indexOf('ERROR:INVALID_SESSION>') == 1) { // invalid session
                  refreshNewSessionPage();
                }

                try {
                  resp = jQuery.parseJSON(ret_val);
                } catch(err) {
                    //show_voc_gritter(false, "Internal error: invalid json", true);
                    //consolePrint('Internal error: invalid json');
                    if (type=='RUN' || type=='BUILD') { // activity icon only for RUN as of now
                      //updateRunIcon(type, false);
                    }
                    return;
                }     
                                if (resp.state != 2) {
                    startCheckReportTimeout(type, url, chksubmit, chkgrade, tv, st);
                } else {  // done
                    $("body").data("timeout"+type, null);
                    if ( (resp.status == 1) ||
                                (resp.status == 2) ) {
                        
                        if (type=='RUN' || type=='BUILD') { // activity icon only for RUN as of now
                                                    if(resp.status == 1){
                            show_voc_gritter(false, type + ' completed successfully', false);
                            
                            
                          } else {
                            show_voc_gritter(false, type + ' completed with errors', true);
                          }
                          
                          
                          if(newLayout)  displayBuildRunOutput((type == "BUILD")? 1: 0,  resp.output);
 
                          
                          //updateRunIcon(type, false);
                                                  }
                                                                            if (type == 'RUN') {
                              $('#runreportbutton').trigger('click');
                            } else if (type=='BUILD'){
                              $('#buildreportbutton').trigger('click');
                            } else {
                              $('#submissionreportbutton').trigger('click');
                            }
                                                
                                                       reportsToOpen = true;
                               if( true ) {
                                 //updateReportStatus(type, '<i class="icon-ok"></i>New report ready');
                                 updateReportIcons(type, false);
                                 //mhui
                                 var element =  document.getElementById('gradeframe');
                                 if (typeof(element) != 'undefined' && element != null && advance_features == 1)
                                 {
                                 	 $('#gradesIdeBtn').click();
                                 }
                               }
                                                
                        
                    } else {
                        str = "Unexpected failure. Please contact support";
                                                    reportsToOpen = true;
                            //updateReportStatus(type, '<i class="icon-info"></i>Unexpected error');
                                                            $('#report_submission_msg_box').html("Unexpected error");
                                                        
                            
                                                
                    }
                    
                }          
            }
    });  
    
}		

function fillLastSubmissionFiles(filelist) {
            var latestTag = "LatestSubmission";
            var tmpList = filelist.split(/\.\//);
            var str = "";
            tmpList.forEach(function (item) {
                if (item.startsWith(latestTag + "/")) {
                    var fname = item.substring(latestTag.length + 1);
                    if (fname.charAt(0) != ".") {
                      str = str + '<i class="icon icon-angle-right" style="margin-right:2px"> </i>'+ fname +'<br>';
                    }
                }
            })
            if (str == "") str = "Not found";
            $('#lastSubmissionFiles').html(str);    
}

function getLatestSubmissionList() {
      return;
      };

function updateSubmitDetails(resp) {
    if( (typeof resp.data !== "undefined") && resp.data ) {
        var subData = resp.data;
        var str = "";
         
        if (str != '') {
            $('#subdetails').html(str);
            if(newLayout && assignment_submit_enabled) $('#submission_details_section').html($('#submission_details_info').html());
        }
    }
}

var submitUrlAfterUpload = false;
function uploadForSubmission(url)
{
  submitUrlAfterUpload = url;
  $("#filestatuslabel").html("");
  $("#input_filename").val('work/');
  $('#fileuploadfield').val("");
  var args = '&type=Upload&asnid=2791999&stepid=2792000&mode=s&version=0&vmd=100&filepath=./' + $("#input_filename").val();
  if(fileUploadListener) document.getElementById('fileuploadfield').removeEventListener('change', fileUploadListener, false);
  fileUploadListener = vcUploadFiles('modal-upload-wait', 'uploadWaitMsgBox', null,'fileuploadfield', 10, args, null);
  $("#fileuploadfield").click();
  return false;
}

function doSubmission(urlval)
{
  var data = "";

  // if assginment is Vocareum Notebook, get simplified Notebook JSON
  if (vocNotebookIde && true) {
    // gets the file enetity of the notebook that's currently active/being viewed
    var activeNotebook = vocFileViewer.getActiveFile();
    
    if(activeNotebook && activeNotebook.extension == 'ipynb' && !activeNotebook.isApp) {

      // checks if a file save is in progress
     if (typeof saveFileIndicatorTimeout[activeNotebook.filepath] !== 'undefined' && saveFileIndicatorTimeout[activeNotebook.filepath]) {
      setTimeout(doSubmission, 1000, urlval);
      return;
     }

      var simplifiedNotebookData = activeNotebook.getSimplifiedNotebookData();
      data = {
        name: activeNotebook.name, 
        path: activeNotebook.efsFilepath, 
        content: JSON.stringify(simplifiedNotebookData)
      };
    }
  }

       $.ajax({
           type: "POST",
           url: urlval,
           data: data
       })
       .done(function(ret_val) {
          if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
            refreshNewSessionPage();					
          }
          resp = jQuery.parseJSON(ret_val);
          if (resp.success !== 'true') {
               
              {
                show_voc_gritter(true, ' Submit failed. <br>' + resp.msg, true);
                updateSubmitIcon(false);  
                return false;
              }
          }
          // success
          if( (typeof resp.msg !== "undefined") && resp.msg ) {
            show_voc_gritter(true, 'Submitted with warning. <br>' + resp.msg, true);
          } else {
                      
           // Once submission is recorded, check to see if submit.js exists
            //  - if submit.js exists, execute submit.js
           if(webDevIde && false) {
            renderHtmlFile(true);
            return; 
            
          }
            show_voc_gritter(false, 'Submission recorded', false);
            //$('#subView-Grades').hide();

            // when submission is done, check if src of grades panel has scores param
            if (vocNotebookIde && true) {
              // if current active file is not ipynb, go through getGradingStatus
              var activeNotebook = vocFileViewer.getActiveFile();
              if (activeNotebook && activeNotebook.extension !== 'ipynb') {
                
                // check if grades panel src has scores param
                var gradesPanelSrc = $('#subView-Grades').attr('src');
                
                // if it doesn't have scores param, get grading status
                // and update grades panel src to display newest data
                if (gradesPanelSrc.indexOf('scores') == -1) {
                  getGradingStatus();
                } else {
                  // if it does, simply show grades panel
                  $('#subView-Grades').show();
                }
              }
            }

            if(newLayout) vcChkSubmitOneTime();
            
            // Switch active tab to the submission tab
            if(newLayout)  switchActiveTab('Submission');
            
            //mhui
            //submitTimerCount = 0;
            //submitGetStatus();
            //if (submitTimer) { clearTimeout(submitTimer); submitTimer=false;}
	    	    //    submitTimer = window.setTimeout(submitGetStatus , 1000);
                     }
          //mhui
          /*
          updateSubmitDetails(resp);
                    $('#workunsubmitted').hide(); 
          */
          submit_count = submit_count + 1;
           
          $foldersToUnfold.push("./LatestSubmission");

        //mhui
                  if ($('#licheck').length != 0) {
              if(true) refreshSubTree();
              window.setTimeout(function(){ $('#licheck').trigger('click'); }, 0);
          } else {
              refreshFileTree(false, false);
                                refreshSubTree();
                        }    
                    updateSubmitIcon(false);
                  // Adds 'Submission' filetree toggle when first submission is done
                      if(submit_count > 0  && ($('#viewSubmissionTree').length == 0 || !$('#viewSubmissionTree').is(":visible"))) {
              if(!newLayout) {
                $('#filelistbuttons').append(`<span id="viewSubmissionTree" onclick="toggleFiletreeView(true)" style="cursor: pointer; float: left; height: auto; color: rgb(32, 57, 157);"  tabindex="0" role="button">Submissions <i class="icon-chevron-right bigger-110 icon-only" style="vertical-align:middle;" id="expandFiletree"></i> </span>`);
                refreshFileTreeIde(false, true);
              } else {
                // When first submission is detected, display submission tree
                if(!$('#viewSubmissionTree').is(":visible")) {
                  $('#viewSubmissionTree').show(); 
                }
              }
            }
                   return false;   
        })
         .fail(function(ret_val) {
              show_voc_gritter(false, ' Operation failed. Please try again', true);
              updateSubmitIcon(false);
              return false;
        });          
    return false;
}


function recordSubmission() {
  
  show_voc_gritter(false, 'Submission recorded', false);
            
  if(newLayout) vcChkSubmitOneTime();
  
  // Switch active tab to the submission tab
  if(newLayout)  switchActiveTab('Submission');

            //mhui
          /*
          updateSubmitDetails(resp);
                    $('#workunsubmitted').hide(); 
          */
          submit_count = submit_count + 1;
           
          $foldersToUnfold.push("./LatestSubmission");

        //mhui
                  if ($('#licheck').length != 0) {
              //alert(1);              
              if(true) refreshSubTree();
              window.setTimeout(function(){ $('#licheck').trigger('click'); }, 0);
          } else {
              refreshFileTree(false, false);
                                refreshSubTree();
                        }    
                    updateSubmitIcon(false);
                  // Adds 'Submission' filetree toggle when first submission is done
                      if(submit_count > 0  && ($('#viewSubmissionTree').length == 0 || !$('#viewSubmissionTree').is(":visible"))) {
              if(!newLayout) {
                $('#filelistbuttons').append(`<span id="viewSubmissionTree" onclick="toggleFiletreeView(true)" style="cursor: pointer; float: left; height: auto; color: rgb(32, 57, 157);"  tabindex="0" role="button">Submissions <i class="icon-chevron-right bigger-110 icon-only" style="vertical-align:middle;" id="expandFiletree"></i> </span>`);
                refreshFileTreeIde(false, true);
              } else {
                // When first submission is detected, display submission tree
                if(!$('#viewSubmissionTree').is(":visible")) {
                  $('#viewSubmissionTree').show(); 
                }
              }
            }
                   return false;
}


function afterUpload()
{
  if(vocNotebookIde) $('#modal-upload-wait').hide();
  if( submitUrlAfterUpload ){
    var url = submitUrlAfterUpload;
    submitUrlAfterUpload = false;
    doSubmission(url);
  }
  return false;
}

function handleSubmitUpdate(urlval) {
    if (submit_in_progress) {
        $.gritter.add({
          title: ' Submit already in progress. Please wait',
          text: '',
          class_name: 'gritter-light gritter-warning'
        });    
        return false;   
    }
    $.gritter.removeAll();
    updateSubmitIcon(true);
           doSubmission(urlval);
        return false;
}


function updateSubmitIcon(inprogress) {
    submit_in_progress = inprogress;
    if (inprogress) {
        $('#btn-submitasn').html('<i class="icon-spin icon-spinner"></i>Submitting</button>');
    } else {
        if ((submit_maxcount < 0) || (submit_count <= submit_maxcount) || (submission_open != 0)) {
            $('#btn-submitasn').html('Submit');  
        } else {
            $('#btn-submitasn').hide();
        }      
    }
}

function updateRunIcon(type, inprogress) {
    var btn = '#' + type + '-btn';
    var name = type=='RUN'? 'Run' : 'Build';
    if (inprogress) {
        $(btn).html('<i class="icon-spin icon-spinner"></i>' + name);
    } else {
        $(btn).html(name);
    }
}


function updateGradesIcon(inprogress) {
    if(newLayout) {
      updateGradesSpinner(inprogress);
    }
    else {
      var btn = '#gradesIdeBtn';
      var name = inprogress? 'Grading' : 'Grades';
      if (inprogress) {
          $(btn).html('<i class="icon-spin icon-spinner"></i>' + name);
      } else {
          $(btn).html(name);
      }
    }
}



//==============================================================================
//        Function used to update/give feedback on Submisson Report
//------------------------------------------------------------------------------
//  Input:
//      -inprogress: progress of the Submisison Report Script Runtime
//  Output:
//      -none
//==============================================================================
function updateSubmissionReportIcon(inprogress) {
  var btn = '#submissionreportbutton';
  var name = 'Submission Report';
  if (inprogress) {
    $(btn).html('<i class="icon-spin icon-spinner"></i>' + name);
  }
  else {
    $(btn).html(name);
  }
}


//==============================================================================
//        Function used to update/give feedback on Grading Report
//------------------------------------------------------------------------------
//  Input:
//      -inprogress: progress of the Grading Report Script Runtime
//  Output:
//      -none
//==============================================================================
function updateGradingReportIcon(inprogress) {
  var btn = '#gradingreportbutton';
  var name = 'Grading Report';
  if (inprogress) {
    $(btn).html('<i class="icon-spin icon-spinner"></i>' + name);
  }
  else {
    $(btn).html(name);
  }
}


//==============================================================================
//        Function used to update/give feedback on Submisson/Grading Reports
//------------------------------------------------------------------------------
//  Input:
//      -type:        either 'Grading' (for grading report) or 'Submission' (for Submission Report)
//      -inprogress:  progress of the Submisison Report Script Runtime
//  Output:
//      -none
//==============================================================================
function updateReportIcons(type, inprogress) {
  
  if(newLayout) {
    updateReportSpinners(type, inprogress, true); return;
  }
  
  var iconType = (type == 'Grading') ? 'grading' : 'submission';
  var btn = '#' + iconType + 'reportbutton';
  var name = (iconType == 'grading') ? 'Grading Report' : 'Submission Report';
  
  if(inprogress) {
    $(btn).html('<i class="icon-spin icon-spinner"></i>' + name);
  }
  else {
    $(btn).html(name);
  }
}




function verifyResubmit(url, resubmit)
{
  var str = "Are you sure you want to submit?";
  if(resubmit){
    str += '<br>Your earlier submission is still being processed. If you submit again, the previous submission may be terminated.';
  }
      bootbox.dialog(str,
                 [{
                   "label" : "Yes",
                   "class" : "btn vocbtn-ac vocbtn-action",
                   "callback": function() {
                     handleSubmitUpdate(url);
                   }
                 },
                  {
                    "label" : "Cancel",
                    "class" : "btn vocbtn-ac vocbtn-status"
                  }]
  );
  return false;
}   

function checkAndVerifyResubmit(url) {
            $.ajax({
      url: "../util/vcput.php?a=chkResubmit&tv="+Date.now()+"&stepid=2792000&version=0",
    })
     .done(function(ret_val) {
       return verifyResubmit(url, ret_val.indexOf('status::progress')>=0);
     })
     .fail(function(ret_val) {
       // procees to submit anyway
       return verifyResubmit(url, false);
     });
      }


function confirmSubmitAsnBtn(url) {
    

	if (isSaveNeeded()) {					
		voc_save(true, "Saving");
	}       
    checkAndVerifyResubmit(url);
}

function runEditorFile() {
  // after runnig the file, get output then display in New Tab
  switchActiveTab('Output');
  
  // gets filepath
  var filepath = viewer_last_fpath;    
	if (!viewer_last_fpath) filepath = viewer_first_fpath;
	
	// Gets content loaded into editor
  try {
    var fileContent = editor.getValue();
  } catch(e) {
    show_voc_gritter(false, "Error: Failed to read Editor content", true);
    return;
  }
  
  $.ajax({
       type: "POST",
       url:'../util/vcput.php?&version=0',
       data: {
          a: "runEditorFileInKernel",
          userid:3209731,
          stepid:2792000,
          mode:'s',
          version:'0',
          filepath:filepath,
          fileContent:fileContent,
       },
  })
   .done(function(ret_val) {
       try {
         var resp = jQuery.parseJSON(ret_val);
         if(resp['status'] == 'success') {
           $('#run_output_section').html("<pre>" + resp['output'] + "</pre>");
         
         } else {
           $('#run_output_section').html("<pre style='color:red;'> ERROR: " + resp['msg'] + "</pre>");
         }
       } catch (e) {
         console.log(e);
         show_voc_gritter(false, "Failed to run", true);
       }
  });
  return;
}

var vcChkSubmitFP = false;

function periodicChkSubmitFP()
{
  if(vcChkSubmitFP) {
    clearTimeout(vcChkSubmitFP);
    vcChkSubmitFP = false;
  }
  if( submit_in_progress || $('#reports').hasClass('open') ){
    vcChkSubmitOneTime();
  }
}
function vcScheChkSubmit()
{
  if( !vcChkSubmitFP ){
    vcChkSubmitFP = setTimeout(periodicChkSubmitFP, 3000);
  }
}
function vcStStr(data, type)
{
  var str = '';
  var st = type + '_st';
  var code = type + '_code';
  if( data.hasOwnProperty(code) && data[code]>0 ){
    if( data[code]==6 || data[code]==134 ){
      return ' (script aborted, exitcode=' + data[code] + ')';
    } else {
      return ' (script exitcode=' + data[code] + ')';
    }
  }
  if( data.hasOwnProperty(st) && data[st]!=1 ){
    return  '(Error)';
  }
  return '';
}
function vcChkSubmitOneTime()
{
  $.ajax({
       type: "POST",
       url:'../util/vcput.php?a=getsubmitdetail&stepid=2792000&userid=3209731&version=0'
   })
   .done(function(ret_val) {
       try {
         var resp = jQuery.parseJSON(ret_val);
         updateSubmitDetails(resp);
         var data = resp.hasOwnProperty('data')? resp['data'] : [];
         if(data.hasOwnProperty('record')){ 
           if(!data['record']){
                            //updateReportProgress('Submission', '');
           } else {
             var substr = '';
             var st = '';
             var rep = '';
             if( data.hasOwnProperty('grade') ){
               if( data['grade'] ){
                                st = vcStStr(data, 'grade');
                 if( data.hasOwnProperty('grade_out') ){
                   substr = '<tr><td style="width:130px">Grading Report' + st + '</td><td><div class="btn btn-info vocbtn vocbtn-info" data-toggle="tab" href="#" tabindex="0" role="button" style="border:0px; line-height:17px !important" onclick="showrep(1);">Show</div></td></tr>';
                 } else 
                                {
                   substr = '<tr><td> Grading ' + st + '</td><td></td></tr>';
                 }
               } else {
                 substr = '<tr><td><i class="icon-spin icon-spinner"></i> Grading processing</td><td></td></tr>';
                 vcScheChkSubmit();
               }
             }
                        if(data['record_st']!=1) st = 'failed';
             else                                                                st = 'completed';
             updateSubmitIcon(false);
             //updateReportProgress('Submission', '<tr><td> Submission ' + st + '</td><td></td></tr>' + substr);
             //updateReportReady('submission', true);
                      }
         } else {
           //updateReportProgress('Submission', '');
           //updateReportReady('submission', true);
           updateSubmitIcon(false);
         }
       } catch (e) {
         show_voc_gritter(false, "Failed to retrieve submission status", true);
       }
  });
}

$( "#reports" ).click(function() {
	  	  });


$( "#odterminalbtn" ).click(function() {
	   $('#div-output-od_terminal').html("<iframe src=\"/terminal/?uid=3209731&token=\" width=\"100%\" height=\"100%\" frameBorder=\"0\" scrolling=\"no\" title=\"Terminal\"></iframe>");
	  });

function getStudentReport(target, targetDiv, type, num) {
    var jqxhr = $.ajax('../util/vcput.php?a=getStudentReport'
                     + '&stepid='+ 2792000                     + '&userid='+ 3209731                     + '&type=' + type 
                     + '&version=0'
                     + '&num=' + num)
                 .done(function(data, textStatus, jqXHR) {
                   // alert(data);
                   target.innerHTML = data;
                   targetDiv.scrollTop = targetDiv.scrollHeight;
                               if( waitingForReport && data.search(/Executed/)>=0 ){
                     waitingForReport = false;
                     if( true ) {
                       //updateReportStatus(type, '<i class="icon-ok"></i>New report ready');
                       updateReportIcons(type, false);
                     }
                     //consolePrint(data);
                   }
                             })
                 .fail(function(data, textStatus, jqXHR) {
                   target.innerHTML = "<p>No " + type + " Report has been generated<p>";
                   targetDiv.scrollTop = targetDiv.scrollHeight;
                 });
  }
                  
  function showStudentReportHtml(modalHtml, iframeHtml, iframeTitle, type, fileName)
  {
     var url = "../web/3209731/2792000/work/" + fileName;
     showPanel3(url, 0);
     iframeTitle.html(type + " Report");
     iframeHtml.attr("src", url);
     //modalHtml.modal('show');
  }             
                  
  function showStudentReportText(modalDiv, target, targetDiv, text)
  {
     modalDiv.modal('show');
     str = text.replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/(?:\r\n|\r|\n)/g, '<br />');
     target.innerHTML = str;
     targetDiv.scrollTop = targetDiv.scrollHeight;
  }             
                  
  function showStudentReport(modalDiv, target, targetDiv, modalHtml, iframeHtml, iframeTitle, type, num) {
    var jqxhr = $.ajax('../util/vcput.php?a=showStudentReport'
                     + '&stepid='+ 2792000                     + '&userid='+ 3209731                     + '&type=' + type
                     + '&work=' + "/home/nowhere"
                     + ''                     + '&version=0'
                     + '&num=' + num)
                 .done(function(data, textStatus, jqXHR) {
                   try {
                     var result = JSON.parse(data);
                     if (result['status'] == 'Error') {
                       showStudentReportText(modalDiv, target, targetDiv, result['msg']);
                     } else {
                       if (result['msg']) {
                         showStudentReportText(modalDiv, target, targetDiv, result['msg']);
                       } else if (result['fileType'] == "text") {
                         showStudentReportText(modalDiv, target, targetDiv, result['reportFile']);
                       } else {
                         showStudentReportHtml(modalHtml, iframeHtml, iframeTitle, type, result['reportFileName']);
                       }
                     }
                   }
                   catch (e) {
                     showStudentReportText(modalDiv, target, targetDiv, 'Parse error getting student report: ' + e);
                   }
                               if (waitingForReport) {
                     waitingForReport = false;
                     if( true ) {
                       //updateReportStatus(type, '<i class="icon-ok"></i>New report ready');
                       updateReportIcons(type, false);
                     }
                     //consolePrint(data);
                   }
                             })
                  .fail(function(data, textStatus, jqXHR) {
                    showStudentReportText(modalDiv, target, targetDiv, "<p>No " + type + " Report has been generated<p>");
                 });
  }

  function showrep(grading)
  {
    var name, type;
    if(grading) {
      name = 'grading';
      type = 'Grading';
    } else {
      name = 'submission';
      type = 'Submission';
    }
    var target = document.getElementById("report_" + name + "_msg_box");
    var targetDiv = document.getElementById("report_" + name + "_div");

    // if course has new flag set
          $('#modal-table-report-all-html-iframe').attr("src", "");
      //mhui
      //$('#panel3-iframe').attr("src", "");
      showStudentReport($('#modal-table-report-' + name), target, targetDiv,
                        $('#modal-table-report-all-html'), $('#modal-table-report-all-html-iframe'),
                        $('#modal-table-report-all-html-title'), type, 0);
      }
  
  
  
  
  $('#gradingreportbutton').click(function(e) {
    showrep(1);
    e.preventDefault();// prevent the default anchor functionality
  });
  
  $('#submissionreportbutton').click(function(e) {
    showrep(0);
    e.preventDefault();// prevent the default anchor functionality
  });

  $('#runreportbutton').click(function(e) {
    var target = document.getElementById("report_run_msg_box");
    var targetDiv = document.getElementById("report_run_div");

    $('#modal-table-report-run').modal('show');
    getStudentReport(target, targetDiv, 'RUN', 0);

    e.preventDefault();// prevent the default anchor functionality
  });
  $('#buildreportbutton').click(function(e) {
    var target = document.getElementById("report_build_msg_box");
    var targetDiv = document.getElementById("report_build_div");

    $('#modal-table-report-build').modal('show');
    getStudentReport(target, targetDiv, 'BUILD', 0);

    e.preventDefault();// prevent the default anchor functionality
  });

  
  function vocSaveFormData(json_data) 
  {
    return new Promise((resolve, reject) => {
      $.ajax({
        url: '../util/vcput.php?a=saveFormData',
        dataType: 'json',
        contentType: 'application/json',
        data: {
          courseid: 117181,
          stepid: 2792000,
          asnuserid: 3209731,
          formdata: JSON.stringify(json_data)
        },
        success: function(data) {
          resolve(data)
        },
        error: function(error) {
          reject(error)
        },
      })
    })
  }
  function vocRetrieveFormData() 
  {
    return new Promise((resolve, reject) => {
      $.ajax({
        url: '../util/vcput.php?a=retrieveFormData',
        dataType: 'json',
        contentType: 'application/json',
        data: {
          courseid: 117181,
          stepid: 2792000,
          asnuserid: 3209731        },
        success: function(data) {
          resolve(data)
        },
        error: function(error) {
          reject(error)
        },
      })
    })
  }

  function vocChatComplete(prompt, model, temp, top_p) {
    const params = {
      "temperature": temp,
      "top_p": top_p,
    };

    return new Promise((resolve, reject) => {
      $.post({
        url: '../vnb/vnb_api.php',
        data: {
          f: 'sendPromptToAI',
          userid: "3209731",
          stepid: "2792000",
          model: model,
          prompt: prompt,
          params: params
        },
        success: function(data) {
          resolve(data);
        },
        error: function(error) {
          reject(error);
        },
      })
    });
  }
  
  function vocSendToDeployedModel(params) {
    return new Promise((resolve, reject) => {
      $.post({
        url: '../vnb/vnb_api.php',
        data: {
          f: 'sendToDeployedModel',
          userid: "3209731",
          partid: "2792000",
          params: params
        },
        success: function(data) {
          resolve(data);
        },
        error: function(error) {
          reject(error);
        },
      })
    });
  }
  
// =============================================================================
//                  Golden Layout Functions
// =============================================================================

//==============================================================================
// [GOLDEN LAYOUT FUNCTION] Function that returns grading/submisison report output
//------------------------------------------------------------------------------
//  Input:
//      - grading: true if getting 'Grading' report output, false if getting 'Submission' report output[boolean]
//  Output:
//      -none
//==============================================================================
function getReport(grading) {
  var name, type;
  if(grading) {
    name = 'grading';
    type = 'Grading';
  } else {
    name = 'submission';
    type = 'Submission';
  }
  
  var target = document.getElementById("report_" + name + "_msg_box");
  var targetDiv = document.getElementById("report_" + name + "_div");

  // if course has new flag set
      $('#modal-table-report-all-html-iframe').attr("src", "");
     
     updateReportSpinners(type, true);
     target = (type == "Grading")? $('#grading_report_section') : $('#submission_report_section'); 

    //target = $('#vmp-panel2-reports');
    showStudentReportData(target, type, 0);     
                      
  }


//==============================================================================
// [GOLDEN LAYOUT FUNCTION] Puts report data into corresponding target element
//------------------------------------------------------------------------------
//  Input:
//      - target: target element to put the student report data into
//      - type: report type; either 'Submission' or 'Grading'
//      - num: submission # to get reports for
//  Output:
//      -none
//==============================================================================
function showStudentReportData(target, type, num) {
  var jqxhr = $.ajax('../util/vcput.php?a=showStudentReport'
                   + '&stepid='+ 2792000                   + '&userid='+ 3209731                   + '&type=' + type
                   + '&work=' + "/home/nowhere"
                   + ''                   + '&version=0'
                   + '&num=' + num)
  .done(function(data, textStatus, jqXHR) {
     try {
       
       // Parses the result/data
       var result = JSON.parse(data);
       
       if (result['status'] == 'Error') {
         if(result['msg'].indexOf('<br>') == 0) result['msg'] = result['msg'].replace('<br>', '');
          var errret_val =  result['msg'].replace(/(?:\r\n|\r|\n)/g, '<br />');
          $(target).html("<pre>"+errret_val+"</pre>");
       } else {
         if (result['msg']) {
           var ret_val =  result['msg'].replace(/(?:\r\n|\r|\n)/g, '<br />');
           $(target).html("<pre>"+ret_val+"</pre>");
         } else if (result['fileType'] == "text") {
           var ret_val2 =  result['reportFile'].replace(/(?:\r\n|\r|\n)/g, '<br />');
           $(target).html("<pre>"+ret_val2+"</pre>");
           
         } else {
         }
       }
       updateReportSpinners(type, false);
     }
     catch (e) {
       showStudentReportText(modalDiv, target, targetDiv, 'Parse error getting student report: ' + e);
     }
         if (waitingForReport) {
       waitingForReport = false;
       if( true ) {
         updateReportSpinners(type, false)
       }
     }
      })
  .fail(function(data, textStatus, jqXHR) {
    $(target).html("<p>No " + type + " Report has been generated<p>");
    updateReportSpinners(type, false);
    
  });
}


// [GOLDEN LAYOUT FUNCTION] Function used to update the grades spinner based on progress
function updateGradesSpinner(inprogress) {
    (inprogress)? $('#grades_spinbox').removeClass('icon-refresh').addClass('icon-spin icon-spinner') 
      : $('#grades_spinbox').removeClass('icon-spin icon-spinner').addClass('icon-refresh');
}
	
	
	
//==============================================================================
// [GOLDEN LAYOUT FUNCTION] Function used to update/give feedback on Submisson/Grading Reports
//------------------------------------------------------------------------------
//  Input:
//      -type:        either 'Grading' (for grading report) or 'Submission' (for Submission Report)
//      -inprogress:  progress of the Submisison Report Script Runtime
//  Output:
//      -none
//==============================================================================
function updateReportSpinners(type, inprogress, autograde = false) {
  // if coming from auto-grade and finished, don't hide (to keep spinner going until script results are fetched)
  if(autograde && !inprogress) return;  
  
  var iconType = (type == 'Grading') ? 'grading' : 'submission';
  if(inprogress) {
    $('#'+iconType+'_report_spinbox').removeClass('icon-refresh').addClass('icon-spin icon-spinner');
  }
  else {
    $('#'+iconType+'_report_spinbox').removeClass('icon-spin icon-spinner').addClass('icon-refresh');
  }
}

//==============================================================================
// [GOLDEN LAYOUT FUNCTION] Function used to update/give feedback on Build/Run Progress
//------------------------------------------------------------------------------
//  Input:
//      -type:        either 'Grading' (for grading report) or 'Submission' (for Submission Report)
//      -inprogress:  progress of the Submisison Report Script Runtime
//  Output:
//      -none
//==============================================================================
function updateBuildRunSpinners(type, inprogress) {
  var iconType = (type == 'BUILD'|| type == 'Build') ? 'build' : 'run';
  var name = (type == "BUILD" || type == 'Build')? 'Build' : 'Run';
  if(inprogress) {
    $('#'+iconType+'Button').html('<i class="icon-spin icon-spinner"></i> '+name);
  }
  else {
    $('#'+iconType+'Button').html(name);
  }
}


//==============================================================================
// [GOLDEN LAYOUT FUNCTION] Function that gets the 'BUILD' script output
//------------------------------------------------------------------------------
//  Input:
//      - biuld: true if getting 'Build' script output, false if getting 'Run' script output[boolean]
//  Output:
//      -none
//==============================================================================
function getBuildRunOutput(build) {
  var name = (build)? 'build' : 'run';
  var type = (build)? 'Build' : 'Run';
  
  var path = './work/.vocstdout.txt';
  $.get('../util/vcprojapi.php', {t: 'filefetch', mode:'s', asnid: 2791999,  stepid:2792000, data: path,version:0, vm: vm_extip, labtype:1}, function(data) {
		$('#'+name+'_script_section').html('<pre>'+$('#'+name+'_script_section').html()+"\n"+data+"</pre>");
		updateBuildRunSpinners(((build)? 'Build' : 'Run'), 0);
	});
}


//==============================================================================
// [GOLDEN LAYOUT FUNCTION] Alternate function that gets the 'BUILD'/'RUN' script output
//------------------------------------------------------------------------------
//  Input:
//      - biuld: true if getting 'Build' script output, false if getting 'Run' script output[boolean]
//  Output:
//      -none
//==============================================================================
function displayBuildRunOutput(build, output) {
  // Puts content into corresponding script output section
  $('#'+((build)? 'build' : 'run')+'_script_section').html('<pre>'+output+"</pre>");
	updateBuildRunSpinners(((build)? 'Build' : 'Run'), 0);
	(build)? build_in_progress = false : run_in_progress = false;
}

	
</script>

<!-- begin of modals -->


<div id="modal-table-report-aws" class="modal hide fade" tabindex="-1" style="height:80% !important;overflow: auto;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">×</button>
      <span style="font-size: 15px" id="aws-modal-label">AWS Credentials</span>
    </div>
  </div>

   <div id="report_aws_div" class="modal-body0 no-padding">
     <p id="report_aws_msg_box" style="margin-left: 10px;height:60% !important; font-family: Courier;overflow: auto;"> 		<div class="" style="display: block; border-bottom: 0px solid gray; background-color:#EEEEEE"> 		<span id="panel3-hide" onclick="panel3_close()" tabindex="0" role="button" aria-label="Close" style="float: right; cursor: pointer; padding: 5px; line-height: 20%; margin-right: 0px; font-size: 10px; border: 0px solid red;">Close</span> 		<i id="panel3-spin" class="" style="display: none; float: left; cursor: pointer; margin-left:3px;"></i> 		<div style="clear: right;"></div> 		</div><br>&nbsp;&nbsp;&nbsp;<strong>Cloud Labs</strong><br>&nbsp;&nbsp;&nbsp;Session started at: -0001-11-30T00:00:00-0752<br>&nbsp;&nbsp;&nbsp;Session <font color="red">stopped</font> at 2024-05-16T14:16:13-0700<br><span id="vlab-expiretime" class="hidden-1">0</span><br>&nbsp;&nbsp;&nbsp;Accumulated lab time: 00:07:00(7 minutes)<br><br></p>
   </div>
   <div class="modal-body0 no-padding">
     <p id="report_aws_progress_box" style="margin-left: 10px;height:60% !important; font-family: Courier;overflow: auto;"></p>
   </div>

</div>

<div id="modal-table-report-db" class="modal hide fade" tabindex="-1" style="height:50% !important;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">×</button>
      <span style="font-size: 15px">Database Credentials</span>
    </div>
  </div>

   <div id="report_db_div" class="modal-body no-padding">
     <p id="report_db_msg_box" style="margin-left: 10px !important; font-family: Courier;"></p>
   </div>
</div>

<div id="modal-table-report-cdb" class="modal hide fade" tabindex="-1" style="height:40% !important;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">×</button>
      <span style="font-size: 15px">Database Credentials</span>
    </div>
  </div>

   <div id="report_cdb_div" class="modal-body no-padding">
     <p id="report_cdb_msg_box" style="margin-left: 10px;height:30% !important; font-family: Courier;"></p>
   </div>
</div>

<div id="modal-table-report-clabs" class="modal hide fade" tabindex="-1" style="height:70% !important;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">×</button>
      <span style="font-size: 15px">Details</span>
    </div>
  </div>
  
  <div class="modal-body">
        
    <div id="submission_details_info" style="display: none;">
      <table class="table" style="border: 1px solid lightgray">
            <thead style="">
              <tr>
                <th style="width:140px">Submission Details</th>
                <th></th>
              </tr>
            </thead>
            <tbody id="subdetails"></tbody>
      </table>
    </div>
    
    <div id="report_clabs_div" class="no-padding">
      <p id="report_clabs_msg_box" style="margin-left: 10px;height:60% !important; font-family: Courier;"></p>
    </div>

       
 </div>
   
</div>
<div id="modal-table-report-web" class="modal hide fade" tabindex="-1" style="left:5%; width:90% !important; height:15% !important;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">×</button>
      <span style="font-size: 15px">Web/WebSocket Details</span>
    </div>
  </div>

   <div id="report_web_div" class="modal-body no-padding">
     <p id="report_web_msg_box" style="margin-left: 10px !important; font-family: Courier; margin-top: 5px;"></p>
   </div>
</div>

<div class="modal hide fade" id="clabsStateModal" role="dialog" style="max-height:50%; height:auto; width:50%; min-width:300px">
  <div id="clabsStateModal_dialog" class="modal-dialog jupyter-modal-dialog">
    <div id="clabsStateModal_content" class="modal-content">

      <div id="clabsStateModal_header" class="modal-header" style="padding-bottom:10px; border-bottom-color:#3e3e3e">
        <h3>Lab status</h3>
      </div>

      <div id="clabsStateModal_body" class="modal-body" style="padding-bottom: 15px; border-bottom:1px solid; border-bottom-color:#3e3e3e">
        <span id="clabsStateModal_vms">
          <table class="table table-first-column-check table-hover" style="margin-bottom:0px" border="1" frame="void" rules="rows">
            <tbody><tr id="vm_1" class="clabs-state-modal-tr-vm">
              <td class="clabs-state-modal-td-vm span6">
                Linux-1
              </td>
              <td class="clabs-state-modal-td-state span6">
                shutting down <i id="vm_1_spinbox" class="icon-spin icon-spinner"></i>
              </td>
            </tr>
            <tr id="vm_2" class="clabs-state-modal-tr-vm">
              <td class="clabs-state-modal-td-vm span6">
                Linux-2
              </td>
              <td class="clabs-state-modal-td-state span6">
                shutting down <i id="vm_2_spinbox" class="icon-spin icon-spinner"></i>
              </td>
            </tr>
          </tbody></table>
          <br>

        </span>
      </div>

      <div class="modal-footer" id="clabsStateModal_footer" style="padding: 15px 0 15px 0 !important; background-color:white;"> <!--  border-top-color:#3e3e3e"> -->

        <div id="clabsStateModal_msg">
          <textarea id="clabsStateModal_ta" style="height:50px; display:none; text-align:left !important; width:98%; border:0px; margin-bottom: 10px;padding-bottom: 10px;padding-top: 0px; resize:none; border-bottom:1px solid; border-bottom-color:#3e3e3e;">          </textarea>
        </div>

        <button id="clabsStateModal_ok" type="button" class="btn vocbtn2 vocbtn-action" style="min-width: 80px !important; margin-right:10px !important" data-dismiss="modal">Ok</button>
      </div>

    </div>
  </div>
</div>


<div class="modal hide fade" id="jupyterClearOutputModal" role="dialog" style="width:65%; min-width:400px; max-height:90%; height:auto;">
  <div id="jupyterClearOutputModal_dialog" class="modal-dialog jupyter-modal-dialog">
    <div id="jupyterClearOutputModal_content" class="modal-content">

      <div id="jupyterClearOutputModal_header" class="modal-header"></div>

      <div id="jupyterClearOutputModal_body" class="modal-body" style="padding-bottom: 0px;">
        <span id="jupyterClearOutputModal_files"></span>
      </div>

      <div class="modal-footer" id="jupyterClearOutputModal_footer" style="margin-top: 15px;padding: 15px 0 15px 0 !important; background-color:white">
        <div id="jupyterClearOutputModal_output">
          <textarea id="jupyterClearOutputModal_ta" style="height:80px; display:none; text-align:left !important; width:98%; border:0px; margin-bottom: 10px;padding-bottom: 10px;padding-top: 0px; resize:none; border-bottom:1px solid lightgray;">          </textarea>
        </div>

        <button id="jupyterClearOutputModal_cancel" type="button" class="btn vocbtn2 vocbtn-status" style="min-width: 80px !important" data-dismiss="modal">Cancel</button>
        <button id="jupyterClearOutputModal_co" type="button" class="btn vocbtn2 vocbtn-action" style="min-width: 80px !important; margin-right:10px !important">Clear Output</button>
        <button id="jupyterClearOutputModal_ok" type="button" class="btn vocbtn2 vocbtn-action" style="min-width: 80px !important; display:none; margin-right:10px !important" data-dismiss="modal">Ok</button>
      </div>
    </div>
  </div>
</div>

<!-- end of modals -->



<script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/platform.js"></script>


<script type="text/javascript">
var readme = 1;
var stulabs = false;
var appsIde = false;
var awsIde = true;
var awsconsole = true;
var azureIde = false;
var gcpIde = false;
var comboLab = false;
var canSubmit = false;
var canBuild = false;
var canRun = false;

var appsAllowed = false;
var clabsType = "ct";
var my_budget = {"monthly_time":0,"time":0,"length":"60","idle_time":0,"cost":"10.00","monthly_dollar":0,"interactive_budget":0,"batch_budget":0,"genai_budget":[],"genai_ids":[],"max_extension_time":"60","time_extension_increments":"15","cleanup_time":null};
var needIdleTimer = 0; // at this time will _only_ work for jupyterlab
var needUnloadEvent = 0;
var interactiveEnabled = false;

var newide = false;
var progmlab = true;
var vmlab2 = false;
var cnlab = false;
var rstudioelitelab = false;
var jupyterelitelab = false;
var jupyterelite2022lab = false;
var newContainerLab = false;
var newLabNoContainer = false;
var databrickslab = false;
var newContainerLabWithCloud = (newContainerLab && (awsIde || azureIde || gcpIde));

var newContainerFlow = false
var fromGraderIde = false;
var basicV2Ide = false;
var vocNotebookIde = false;
var webDevIde = false;

var vocNotebookTeacherMode = false;

var viewSubmissionsViaVNB = false;

var clabsStates =  $(([]));
var clabs_access_v2_list = new Array();

var manualLabStartFlag = false;

if (!appsIde && !awsIde && !appsAllowed) //(!stulabs && !appsIde && !awsIde && !appsAllowed) 
{
	progmlab = true;
}

var hideConsole = true;
var hideFileBrowser = true;
var hideHtml = false;
var hideSource = true;
var hideNavBar = false;
var hideTimer = true;
var remaining_budget = true; ;
var hideStart = false;
var hideStop = false;
var hideProgress = true;
var hideExtend = true;
var hideBudget = true;
var hideDetails = false;
var hideReadme = false;
var hideAllAsns = true;
var hideLtiAsns = true;
var newTab = false;
var allTabs = false;
var ResetAssignment = false;
var noworkarea = true;
var maximizeOnStart = false;
var displayRubricPresubmission = false;
var useJupyterNotebookView = false;
var initialFrameLoad = true;
var containerCookies = "";

var onlyReadme = (hideConsole && hideFileBrowser && !hideHtml && hideSource);

var allowSubmit = 0;  // 0: AWS not active, ask user to start, 1: Ask user to wait, 2: Ready to submit

var grading_script_exists = false;
var submission_script_exists = false;
var grades_published = true; 
var assignment_submit_enabled = false;

// 'newLayout' needs to be changed to whatever the nwe Elite Layout name should be
var newLayout = false;

var lang_readmes = {"ar-sa":"ASNLIB\/public\/docs\/lang\/ar-sa\/README.html","de-de":"ASNLIB\/public\/docs\/lang\/de-de\/README.html","en-us":"ASNLIB\/public\/docs\/lang\/en-us\/README.html","es-es":"ASNLIB\/public\/docs\/lang\/es-es\/README.html","fr-fr":"ASNLIB\/public\/docs\/lang\/fr-fr\/README.html","id-id":"ASNLIB\/public\/docs\/lang\/id-id\/README.html","it-it":"ASNLIB\/public\/docs\/lang\/it-it\/README.html","ko-kr":"ASNLIB\/public\/docs\/lang\/ko-kr\/README.html","pt-br":"ASNLIB\/public\/docs\/lang\/pt-br\/README.html","th-th":"ASNLIB\/public\/docs\/lang\/th-th\/README.html","uk-ua":"ASNLIB\/public\/docs\/lang\/uk-ua\/README.html","vi-vn":"ASNLIB\/public\/docs\/lang\/vi-vn\/README.html","zh-tw":"ASNLIB\/public\/docs\/lang\/zh-tw\/README.html"};
var expiretime = 0;
var timerhandle = null;
var cloudcosthandle = null;
var showclabshandle = null;
var savefilehandle = null;
var periodic_container_timer = 0;
var gpuTimerHandle = 0;
var gpuTimerSyncHandle = 0;
var vocdomain = document.domain.split('.').slice(-2).join('.');
document.domain = vocdomain;

var awsdetails = '';

var vm_extip = '';
var vm_user = '';
//var vm_state = '';
var vm_access = '';
var vm_access_url = false;
var cloudera = 0;

var cloudLabStarted = true;
var awsscnt = false;
var inCreationAWSaccess = false;  // flag that determines if AWS access is allowed during 'in creation' phase


/*c
if(cnlab && noworkarea) {
  //hideStart = true;
	//hideStop = true;
	//hideExtend = true;
	//hideAllAsns = false;
}*/


if (hideLtiAsns)
{
	hideAllAsns = true;
}

function lang_select()
{
	var readmelang = $('#localeLangReadmeSelect').val();
	
    langReadmePath = lang_readmes[readmelang];
    iframeReadmeSrc ="../web/3209731/2792000.0/" + langReadmePath;
    if (onlyReadme && !appsAllowed) {
      $("#panel1-iframe").attr('src', iframeReadmeSrc);
    }
    else {
      $("#panel3-iframe").attr('src', iframeReadmeSrc);
    }
    $.ajax({
             type: "POST",
             url: "../util/vcprojapi.php",
             data: { t : 'changeReadmeLang',
                     stepid : "2792000",
                     readmelang : readmelang,
                     tide: "0"
                    }
    }) .done(function(ret_val) {
      //just return
    });
}

function displayPanel3Hdr()
{  
	var str;

	str = ' \
		<div class="" style="display: block; border-bottom: 0px solid gray; background-color:#EEEEEE"> \
		<span id="panel3-hide" onclick="panel3_close()" tabindex="0" role="button" aria-label="Close" style="float: right; cursor: pointer; padding: 5px; line-height: 20%; margin-right: 0px; font-size: 10px; border: 0px solid red;">Close</span> \
		<i id="panel3-spin" class="" style="display: none; float: left; cursor: pointer; margin-left:3px;"></i> \
		<div style="clear: right;"></div> \
		</div>';

  return str;
}

function displayPanel3Databricks(data) {
  try {
    var result = JSON.parse(data);
    if ('setupdone' in result) {
      setupdone = result['setupdone'];
    }
    if ('endlab' in result) {
      endlab = result['endlab'];
    } else {
      endlab = false;
    }
    if (result['status'] == 'Error') {
      return result['msg'];
    } else {
      let str = '';
      if ('msg' in result && result['msg'] != '') {
        str = '<p>' + result['msg'] + '</p>';
      } else {
        str = '<table class="" style="margin-top: 10px; margin-left: 10px;">';
        if ('workspacestatus' in result) {
          str += '<tr><td style="font-weight: bold;">Databricks Workspace Status:</td><td style="padding-left: 15px;">' + result['workspacestatus'] + '</td></tr>';
        }
        if ('workspacestatusmsg' in result) {
          str += '<tr><td style="font-weight: bold;">Databricks Workspace Status Message:</td><td style="padding-left: 15px;">' + result['workspacestatusmsg'] + '</td></tr>';
        }
        if ('scriptstatus' in result) {
          str += '<tr><td style="font-weight: bold;">Databricks Script Status:</td><td style="padding-left: 15px;">' + result['scriptstatus'] + '</td></tr>';
        }
        if ('labactive' in result) {
          if ('workspace_url' in result) {
            str += '<tr><td style="font-weight: bold;">Workspace URL:</td><td style="padding-left: 15px;"><a href="' + result['workspace_url'] + '" target="_blank">Databricks Workspace</a></td></tr>';
          }
          if ('notebook_url' in result) {
            str += '<tr><td style="font-weight: bold;">Notebook URL:</td><td style="padding-left: 15px;"><a href="' + result['notebook_url'] + '" target="_blank">Databricks Notebook</a></td></tr>';
          }
        }
        str += '</table>';
        if ('session_info' in result) {
          str += result['session_info'];
        }
      }
      if ('expiretime' in result) {
        expiretime = result['expiretime'];
      }
      return str;
    }
  } catch (err) {
    return data;
  }
}

//----------------------------------------------------------------------
//GCP account details
//----------------------------------------------------------------------
function displayPanel3GCP(data) {
  try {
    var result = JSON.parse(data);
    if (result['status'] == 'Error') {
      return result['msg'];
    } else {
      let str = '';
      if ('msg' in result) {
        str = '<p>' + result['msg'] + '</p>';
      } else {
        str = '<table class="" style="margin-top: 30px; margin-left: 10px;">';
        str += '<tr><td style="font-weight: bold;">Email:</td><td style="padding-left: 15px;">' + result['email'] + '</td></tr>';
        str += '<tr><td style="font-weight: bold;">Password:</td><td style="padding-left: 15px;">' + result['password'] + '</td></tr>';
        str += '<tr><td style="font-weight: bold;">Employee ID:</td><td style="padding-left: 15px;">' + result['employee_id'] + '</td></tr>';
        str += '<tr><td style="font-weight: bold;">Project ID:</td><td style="padding-left: 15px;">' + result['project_id'] + '</td></tr>';
        str += '<tr><td style="font-weight: bold;">GCP Login:</td><td style="padding-left: 15px;"><a href="https://console.cloud.google.com" target="_blank">Console</a></td></tr>';
        str += '</table>';
        str += result['session_info'];
      }
      if ('expiretime' in result) {
        expiretime = result['expiretime'];
      }
      if ('setupdone' in result) {
        gcpsetupdone = result['setupdone'];
      }
      return str;
    }
  } catch (err) {
    return data;
  }
}

//----------------------------------------------------------------------
//Azure account details
//----------------------------------------------------------------------
function displayPanel3Htm(data, title=null)
{  
try {
     var result = JSON.parse(data);
     if (result['status'] == 'Error') 
     {
       return result['msg'];
     }
     else
     {
     	if (typeof(result['data'].user) !== 'undefined')
       {
         var str = '';
         var userdata = result['data'].user;
         var now = new Date().getTime();
         
         expiretime = userdata['session_expiration_time'];

         var distance = expiretime*1000 - now;
         //alert(expiretime);
     	  str = ' \
     		  <table class="" style="margin-top: 30px; margin-left: 10px;"> '+
     	    ((title)? '<tr><th colspan="2" style="text-align: left;"><strong><u>'+title+'</u></strong></th></tr>' : '') +
     		  '<tr><td style="font-weight: bold;">Id:</td><td style="padding-left: 15px;">' + userdata['id'] + '</td></tr> \
     		  <tr><td style="font-weight: bold;">Name:</td><td style="padding-left: 15px;">' + userdata['principal_name'] + '</td></tr> \
     		  <tr><td style="font-weight: bold;">Password:</td><td style="padding-left: 15px;">' + userdata['password'] + '</td></tr>';

     		if (typeof(userdata['duration']) !== 'undefined')
     		{
     			str = str + '<tr><td style="font-weight: bold;">Duration:</td><td style="padding-left: 15px;">' + userdata['duration'] + 'min</td></tr>';
     		}
     		if (typeof(userdata['currency']) !== 'undefined' && typeof(userdata['allocated_budget']) !== 'undefined')
     		{
     			str = str + '<tr><td style="font-weight: bold;">Budget:</td><td style="padding-left: 15px;">' + userdata['currency'] + userdata['allocated_budget'] + '</td></tr>';
     		}
     		if (typeof(userdata['is_active']) !== 'undefined' && userdata['is_active'] == 1)
     		{
           if (distance > 0) {
     			  str = str + '<tr><td style="font-weight: bold;">Status:</td><td style="padding-left: 15px;">active</td></tr>';
           }
           else {
 			      str = str + '<tr><td style="font-weight: bold;">Status:</td><td style="padding-left: 15px;">expired</td></tr>';
           }
     		}
     		if (typeof(userdata['created_at']) !== 'undefined')
     		{
     			str = str + '<tr><td style="font-weight: bold;">Created:</td><td style="padding-left: 15px;">' + userdata['created_at'] + '</td></tr>';
     		}
     		str = str + '</table>';
     		if (typeof(result['msg']) !== 'undefined')
         {
            show_voc_gritter(false, result['msg'], false);
         }
     	  return str;
       }
     	else if (typeof(result['msg']) !== 'undefined')
       {
     	  //show_voc_gritter(false, result['msg'], false);
       	return result['msg'];
       }
     }
}
catch (err) { 
     return data;
}
}

function getResetBtnHtml()
{  
	var str;

        str = '\
               <div id="container_btn_lab_reset" class="btn vocbtn2 vocbtn-status pull-right" style="margin-right:5px !important;" data-toggle="tab" href="#" tabindex="0" role="button" onclick="resetclabs();"> \
                 <i id="resetclabspinbox" class="icon-spin icon-spinner" style="display:none" ></i> \
                 Reset DB \
               </div>';

  return str;
}

function resetClabPanel(msg = false) 
{
	// reset filetree and panel
	/*
	initEditor();
	initFileTree();
  resetFileTree();
  */
  if (!comboLab && !progmlab && !onlyReadme && !newContainerLab)
  {
	  if (readme == 1)
		{
		  //console.log("calling vmp_22_3 in resetClabPanel");
			vmp_22_3();
		}
		else
		{
			vmp_22();
		}
		vmp_resize();
  }
  // If VM lab or contianer lab, reset clab panel if there is a message to display
  if ((cnlab || vmlab2 || newContainerLab) && msg) displayContainerPanelFiller(msg);
}

var previouslyAnnouncedTime = null;
const DEFAULT_GRITTER_DURATION = 10000;
function timercountdown(useGpuTimer = true) 
{
    // Highjacking this function to instead start and synchronize the
    // GPU budget timer as it is already called in many places in the code
    if (interactiveEnabled && useGpuTimer && !gpuTimerSyncHandle) {
      syncGpuBudgetTimer();
      return;
    }
    
	  // Get todays date and time
	  var now = new Date().getTime();
	  
	  // Find the distance between now and the count down date
	  var distance = expiretime*1000 - now;
	  awsscnt = distance;

	  try {
	    // remove terminal btn
	    var fm = document.getElementById('panel2-iframe');
	    if (typeof(fm) != "undefined" && fm != null) 
      {
        var el = fm.contentWindow.document.getElementById('open');
        if (typeof(el) != "undefined" && el != null) 
        {
          //alert('remove terminal btn');
          el.style.display = "none";
        }
      }
	  }
	  catch(err) {
	  }
	  // If VM Lab, check if there is 5 minutes left so that the user can be informed
	  if((vmlab2 || cnlab || newContainerLab) && distance > 0 && (minutesLeft = Math.ceil((distance/1000)/60)) <= 5  && (previouslyAnnouncedTime != minutesLeft))
	    show_voc_gritter_duration(false, "Lab Time Remaining: "+ (previouslyAnnouncedTime = minutesLeft) +" minutes", false, DEFAULT_GRITTER_DURATION);
	  
	  // If the count down is finished, write some text
	  if (distance < 0) {
	    previouslyAnnouncedTime = null;
	    updateLabStatusIndicator();
	    
		  awsscnt = 0;
	    document.getElementById("sessiontimer").innerHTML = "00:00";
	    //alert('timercountdown: '+distance);
	    if (timerhandle) clearTimeout(timerhandle);
	    var el = document.getElementById('vmBtn'+vm_indx_current);
	    if (typeof(el) != 'undefined' && el != null)
	    {
	      el.style.borderTop = "0px solid rgb(0,109,204)";
	    }
		  // reset filetree and panel
		  if(!$('#LoadingImage').is(':visible') && !$('#loader').is(':visible')) 
		    resetClabPanel(($('#panel2-iframe').attr('src') != "" && !newContainerLabWithCloud) ? "Session Timer has Expired!" : false);
	    return;
	  }
	  
	  // Time calculations for days, hours, minutes and seconds
	  var days = Math.floor(distance / (1000 * 60 * 60 * 24));
	  var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
	  var minutes = Math.ceil((distance % (1000 * 60 * 60)) / (1000 * 60));
	  var seconds = Math.floor((distance % (1000 * 60)) / 1000);

	  if (minutes == 60)
	  {
		  hours++; minutes = 0;
	  }
	  
	  var hours_str = (hours<10)? '0'+hours : hours;
	  var minutes_str = (minutes<10)? '0'+minutes : minutes;
	  var seconds_str = (seconds<10)? '0'+seconds : seconds;
	  var sessiontimerAriaLabelStr = (hours_str+":"+minutes_str == $('#sessiontimer').text())? "":"Remaining Lab Time: " + (((hours > 0)? hours+((hours > 1)? ' hours ':' hour ') : '')) + (((minutes > 0)? minutes+((minutes > 1)? ' minutes':' minute') : ''));
	  var sessionTimerAriaLabelDiv = "<span class='sr-only' style='display:none;' aria-hidden='false' role='status' aria-label='"+sessiontimerAriaLabelStr+"'></span>";
	  // Display the result in the element with id="sessiontimer"
	  $('#sessiontimer').html(hours_str + ":" + minutes_str+sessionTimerAriaLabelDiv);
    
	  //check the lab status
	  if (timerhandle) {clearTimeout(timerhandle);}
    timerhandle = window.setTimeout(timercountdown , 30000);
}

function budgetString2 (budget)
{
	var months = [
		  'Jan',
		  'Feb',
		  'Mar',
		  'Apr',
		  'May',
		  'Jun',
		  'Jul',
		  'Aug',
		  'Sep',
		  'Oct',
		  'Nov',
		  'Dec'
		];
	var d = new Date();
	var str = '';
	var mybudget, myspend;
	
	if (budget['monthly_budget'] > 0)
	{
		mybudget = budget['monthly_budget'];
		myspend = budget['monthly_spend'];
		mybudget = Math.round(mybudget * 10) / 10;
		myspend = Math.round(myspend * 10) / 10;
	}

	if (budget['monthly_budget'] > 0 && !hideBudget) // || budget['time'] > 0) 
	{
		document.getElementById('budget2').style.display = 'block';
	  str += 'Used $' + myspend + ' of $' + mybudget + ', ' + months[d.getMonth()] + ', ' + d.getFullYear();;
	}
	return str;
}

// Used for when a monthly budget isn't set but 'budget' is still ticked
function totalbudgetString2 (budget)
{

	var str = '';
	var mybudget, myspend;
	
	if (budget['monthly_budget'] <= 0||budget['monthly_budget'] == null)
	{
		mybudget = budget['total_budget'];
		myspend = budget['total_spend'];
		mybudget = Math.round(mybudget * 10) / 10;
		myspend = Math.round(myspend * 10) / 10;
	}

	if ((budget['monthly_budget'] <= 0 || budget['monthly_budget'] == null) && !hideBudget) // || budget['time'] > 0) 
	{
		document.getElementById('budget2').style.display = 'block';
	  str += 'Used $' + myspend + ' of $' + mybudget;
	}
	return str;
}

function budgetString (budget, spend)
{
	var months = [
		  'Jan',
		  'Feb',
		  'Mar',
		  'Apr',
		  'May',
		  'Jun',
		  'Jul',
		  'Aug',
		  'Sep',
		  'Oct',
		  'Nov',
		  'Dec'
		];
	var d = new Date();
	var str = '';
	var hstr = '';
	var mybudget, myspend, mytotalbudget;
	
	if (budget['monthly_time'] > 0)
	{
		mybudget = budget['monthly_time'] / 60;
		myspend = spend['monthly_time'] / 60;
		mybudget = Math.round(mybudget * 10) / 10;
		myspend = Math.round(myspend * 10) / 10;
	}

	if (budget['time'] > 0)
	{
		mytotalbudget = budget['time'] / 60;
		mytotalspend = spend['time'] / 60;
		mytotalbudget = Math.round(mytotalbudget * 10) / 10;
		mytotalspend = Math.round(mytotalspend * 10) / 10;
	}

	hstr = (mybudget >= 2 || mytotalbudget >= 2) ? ' hours in ' : ' hour in ';
	if (budget['monthly_time'] > 0 || budget['time'] > 0 && !hideBudget) {
		document.getElementById('budget').style.display = 'block';
		
		var monthly_budget_string = (budget['monthly_time'] > 0)? 'Used ' + myspend + ' of ' + mybudget + hstr + months[d.getMonth()] + ', ' + d.getFullYear() : "";
		var total_budget_string = ((budget['time'] > 0)? ('Used ' + mytotalspend + ' of ' + mytotalbudget + hstr + "total") : (""));
		var displayBoth = (budget['monthly_time'] > 0 && budget['time'] > 0)? true : false;
		str += monthly_budget_string + ((displayBoth)? " (" : "") + total_budget_string + ((displayBoth)? ")" : "");
		if (displayBoth) $('#budget').css('width', "500px");
	}
	return str;

}

function setTerminalV2Mode(lightMode)
{
    if (lightMode)
    {
      var overlayBg = '#f3f3f3';
      var thm = {"background":"#F3F3F3","foreground":"black","cursor":"black","selection":"#8C8C8C"};
    }
    else
    {
      var overlayBg = '#2b2b2b';
      var thm = {background:"#2b2b2b", foreground:"#d2d2d2", cursor:"#adadad", selection:"#cbcbcb"};
    }

    var fm = document.getElementById('panel2-iframe');
    if (! fm)
    {
        return false;
    }
    var doc = fm.contentWindow.document;
    if (! doc)
    {
      return false;
    }
    var tc = doc.getElementById('terminal-container');
    if (! tc)
    {
      return false;
    }
    tc.style.backgroundColor = overlayBg;

    if (! fm.contentWindow.term)
    {
        return false;
    }
    fm.contentWindow.term.setOption("theme", thm);
    
    return true;
}

function gradesBtnClicked() 
{
	var qstr = "Please make sure that you have submitted your work. You will not be allowed to make any more submissions once you start your participation in the peer review process. Are you sure you want to continue?";
	if (auto_peer_review_mode && show_peer_review_confirm_dialog)
	{
	  bootbox.dialog(qstr,
	             [{
	               "label" : "Yes",
	               "class" : "btn vocbtn-ac vocbtn-action",
	               "callback": function() {
	                  autoPeerReviewStart();
	               }
	             },
	              {
	                "label" : "Cancel",
	                "class" : "btn vocbtn-ac vocbtn-status"
	              }]
	       );
	} 
	else
	{
		if(newLayout) updateGradesIcon(true);
		
		var url = 'main.php?m=grades_review&modalMode=1&asnId=2791999&stepid=2792000&userid=3209731';
		                url += "&vockey=92b04c35873bd949b37ad2d5305bdc08d94a5d6ff8998372748bc9b283f4c299";
        if(!newLayout) {
      showPanel3(url, 1); 
      
    } //0
    else {
      $('#panel3-grades-iframe').attr('src', url).on('load', resizeGradesSection).on('load', updateGradesIcon(false)/*function() {updateGradesIcon(false);}*/);
    }
	}
}

function readmeBtnClicked() 
{
	var url;

	if (lang_readmes.length>0)
	{
	  var readmelang = $('#localeLangReadmeSelect').val();
    var langReadmePath = lang_readmes[readmelang];
    url ="../web/3209731/2792000.0/" + langReadmePath + "?vockey=92b04c35873bd949b37ad2d5305bdc08d94a5d6ff8998372748bc9b283f4c299";
	}
	else 
	{
	  url = '../web/3209731/2792000.0/ASNLIB/public/docs/lang/en-us/README.html?vockey=92b04c35873bd949b37ad2d5305bdc08d94a5d6ff8998372748bc9b283f4c299';
	}
	//console.log(url); 
	if (!onlyReadme || appsAllowed)
	{
	  //$('#vmp-panel3').html();
	  if (!newLayout) showPanel3(url, 0);
	}
}

function showGrades() 
{
  if (!vmp_panel3)
  {
    document.getElementById('vmp-panel3').style.display = 'block';
    document.getElementById('vmp-framedivider3').style.display = 'block';
    vmp_panel3 = true;
    vmp_resize();
  }
  
  if (panel3_hidden)
  {
    $('#vmp-panel3').width(panel3_fs_width);
      	
    if (document.getElementById('vmp-panel1').style.display == 'none')
	  {
      rightwidth = $('#vmp-idebox').width() - panel3_fs_width - 13;
	  }
    else
    {
      rightwidth = $('#vmp-idebox').width() - panel3_fs_width - 13 - $('#vmp-panel1').width() - 5;
      if (panel1_hidden || document.mozFullScreen || document.webkitFullScreen)  rightwidth += 5;
    }
    $('#vmp-panel2').width(rightwidth);
      	
    document.getElementById('vmp-framedivider3').style.left = panel3_fs_width + 13 + 'px';
    document.getElementById('vmp-framedivider3').style.display = 'block';

    panel3_hidden = false;
  }
  
  var gradesPanelIframe = $('#panel3-iframe');
  
  //$('#panel3-spin').removeClass('icon-refresh');
  $('#panel3-spin').addClass('icon-spin');
	$('#panel3-spin').addClass('icon-spinner');
  
  var url = 'main.php?m=grades_review&modalMode=1&asnId=2791999&stepid=2792000&userid=3209731';
      gradesPanelIframe.prop('src', url);

  gradesPanelIframe.on('load', function() {
	  $('#panel3-spin').removeClass('icon-spin');
  	$('#panel3-spin').removeClass('icon-spinner');
  	//$('#panel3-spin').addClass('icon-refresh');
  });
}

function periodic_showclabs() 
{
	//console.log('periodic_showclabs');
	showclabs(false);
	
	if (showclabshandle) {clearTimeout(showclabshandle);}
	showclabshandle = window.setTimeout(periodic_showclabs , 2000);
}

function showdbDetail(host,port,name,pwd){
    var target = document.getElementById("report_db_msg_box");
    target.innerHTML = "<strong>Host:</strong>" + host + '<br>' +
                       "<strong>Port:</strong>" + port + '<br>';
    if(name!='') target.innerHTML +=
                       "<strong>Name:</strong>" + name + '<br>';
     target.innerHTML += pwd;
    $("#modal-table-report-db").modal("show");
}
  
function show_voc_gritter($sticky, $msg, failed) {
	if (failed) {
		color_string = "gritter-error gritter-light";

	} else {
		color_string = "gritter-note gritter-light";
	}
	var duration = 2000;
	// if ($sticky) $duration = 10000;
	
	$.extend($.gritter.options, {
		position: 'bottom-right'
	});
	$.gritter.add({
		title: $msg,
		time: 2000,
		sticky: $sticky,
		class_name: color_string	
	});
}

function show_voc_gritter_duration($sticky, $msg, failed, duration) {
	if (failed) {
		color_string = "gritter-error gritter-light";

	} else {
		color_string = "gritter-note gritter-light";
	}
	$.extend($.gritter.options, {
		position: 'bottom-right'
	});
	$.gritter.add({
		title: $msg,
		time: duration,
		sticky: $sticky,
		class_name: color_string	
	});
}

function showclabs(modalflag){
    
    if(!newLayout) {
      if (modalflag)
      {
        $('#detailspinbox').removeClass('icon-info');
        $('#detailspinbox').addClass('icon-spin icon-spinner');
      }
      
      // display and update submission details if submission is enabled
      (assignment_submit_enabled)? $('#submission_details_info').show() : $('#submission_details_info').hide();
      if(assignment_submit_enabled && !viewSubmissionsViaVNB) vcChkSubmitOneTime();
      if(!stulabs) $('#report_clabs_div').hide(); 
      $.ajax({
         url: "../util/vcput.php?a=getclabs&stepid=2792000&version=0&labworkdir=/home/nowhere",
      })
      .done(function(ret_val) {
          
      	  if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) 
          { // invalid session
   			    window.location.reload();
   			    return;
   		    }
          var target = document.getElementById("report_clabs_msg_box");
          target.innerHTML = ''; //(str? str : '');
          try {
            resp = jQuery.parseJSON(ret_val);
            if (! ('labtype' in resp && resp.labtype == 'databricks')) {
              target.innerHTML += resp.message;
              //alert(resp.status);
              //mhui
              if (resp.status == 'in creation' || resp.status == 'initializing' || resp.status == 'Launching')
              {
                $('#labspinbox').removeClass('icon-play');
                $('#labspinbox').addClass('icon-spin icon-spinner');
                //$('#vmp-panel4').css('z-index', '100');
                DisplayLoadingScreen(1);

                if (!modalflag)
                {
                  launchclabs_confirmed(1);
                }
              }

              //mhui: display sessison timer
              expiretime = (typeof(resp.expiretime) !== 'undefined' && resp.expiretime > 0)? resp.expiretime : 0;
              if (timerhandle) clearTimeout(timerhandle);
              timercountdown();
            }

          } catch(err) {
            target.innerHTML += 'Failed to obtain lab status. If the problem persists, please report this problem to support@vocareum.com.';
          }
          if (modalflag)
          {
         	   //$('#modal-table-report-clabs').appendTo("#editordiv");
  	         $('#modal-table-report-clabs').appendTo("#vmp-idebox");
  	         $('#modal-table-report-clabs').modal('show');
          }
  	       //$('#detailspinbox').hide();
          $('#detailspinbox').removeClass('icon-spin icon-spinner');
          $('#detailspinbox').addClass('icon-info');
          
          if((vmlab2 || cnlab || newContainerLab) && expiretime == 0 && !$('#LoadingImage').is(':visible')) displayContainerPanelFiller();
          
       })
      .fail(function(ret_val) {
        alert('failed to retrieve Labs credentials');
        //$('#detailspinbox').hide();
        $('#detailspinbox').removeClass('icon-spin icon-spinner');
        $('#detailspinbox').addClass('icon-info');
      });
    }
    else {
      (assignment_submit_enabled)? $('#submission_details_info').show() : $('#submission_details_info').hide();
      if(assignment_submit_enabled && !viewSubmissionsViaVNB) vcChkSubmitOneTime();
      
      $('#general_details_spinbox').removeClass('icon-refresh').addClass('icon-spin icon-spinner');
      $.ajax({
         url: "../util/vcput.php?a=getclabs&stepid=2792000&version=0&labworkdir=/home/nowhere",
      })
      .done(function(ret_val) {
    	  if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
     	    window.location.reload(); return;
         }
        try {
          resp = jQuery.parseJSON(ret_val);
          $('#general_details_section').html(resp.message);
    
          if (resp.status == 'in creation' || resp.status == 'initializing' || resp.status == 'Launching') {
            $('#labspinbox').removeClass('icon-play').addClass('icon-spin icon-spinner');
            DisplayLoadingScreen(1);
            if (!modalflag) launchclabs_confirmed(1);
          }
       
          //mhui: display sessison timer
          expiretime = (typeof(resp.expiretime) !== 'undefined')? resp.expiretime : 0;
          if (timerhandle) clearTimeout(timerhandle);
          timercountdown();
        } catch(err) {
          $('#general_details_section').html('Failed to obtain lab status. If the problem persists, please report this problem to support@vocareum.com.');
        }
    
        $('#general_details_spinbox').removeClass('icon-spin icon-spinner').addClass('icon-refresh');
        
        if((vmlab2 || cnlab || newContainerLab) && expiretime == 0) displayContainerPanelFiller();
       })
      .fail(function(ret_val) {
        alert('failed to retrieve Labs credentials');
        $('#general_details_spinbox').removeClass('icon-spin icon-spinner').addClass('icon-refresh');
      });
    }
 }
 
function showcdbdetails(indx, dbtype)
{
	var vm_indx = indx;

	var vmspinbox =  document.getElementById('vmspinbox'+indx);
	if (typeof(vmspinbox) != 'undefined' && vmspinbox != null)
	{
		$('#vmspinbox'+indx).removeClass('hidden-1');
	}
	
    str = false;
     //$('#detailspinbox').show();
     $.ajax({
        url: "../util/vcput.php?a=getcdb&stepid=2792000&version=0&labworkdir=/home/nowhere&dbtype="+dbtype,
     })
     .done(function(ret_val) {
         var target = document.getElementById("report_cdb_msg_box");
         target.innerHTML = (str? str : '');
         try {
           resp = jQuery.parseJSON(ret_val);
           //cdbtime(resp);
           target.innerHTML += resp.message;

           var hdr = displayPanel3Hdr();
           var resetBtn = getResetBtnHtml();
           
           if(!newLayout) {
        	   $('#vmp-panel3').html(hdr + resp.message + "<hr>" + resetBtn);
        	   showPanel3Info();
           }
           else {
            $('#general_details_section').html(resp.message + "<hr>" + resetBtn);
      	    switchActiveTab('Details');
           }
      	   
         } catch(err) {
           target.innerHTML += 'Failed to obtain DB status. If the problem persists, please report this problem to support@vocareum.com.';
         }
         //$('#modal-table-report-cdb').appendTo("#editordiv");
         //$('#modal-table-report-cdb').appendTo("#vmp-idebox");
         //$('#modal-table-report-cdb').modal('show');
         //$('#detailspinbox').hide();
         if (typeof(vmspinbox) != 'undefined' && vmspinbox != null)
         {
        	$('#vmspinbox'+indx).addClass('hidden-1');
         }
      })
     .fail(function(ret_val) {
       alert('failed to retrieve DB credentials');
       //$('#detailspinbox').hide();
       if (typeof(vmspinbox) != 'undefined' && vmspinbox != null)
       {
        	$('#vmspinbox'+indx).addClass('hidden-1');
       }
     });
}

function launchclabs_confirmed(ischk)
{
  if (true) {
	  if (!hideProgress) {
		  document.getElementById('sessiontimer').style.display = "none";
      document.getElementById('clabstatus').style.display = "inline-block";
    }
    $('#clabstatus').html('Starting...');
    
    if (comboLab)
    {
      if (awsIde) {
        // if container lab and start is hidden, auto-start AWS
        if((hideStart && cnlab) || (vmlab2) || (!hideStart && (cnlab || newContainerLab) && manualLabStartFlag)) {
          startawslab(0);
        }
        manualLabStartFlag = false;
      }
      else {
        // if it's any other cloud resource (NOT AWS), start it
        startCloudResources(0);
      }
    }
    
    // Check if clab is already active:
    var containerIsReady = false;
    if(comboLab && (cnlab || newContainerLab) && !hideStart) {
      clabsStates.each(function() {
        if(this.state == "Ready") containerIsReady = true;
      });
    }
    
    // if clabs is already started, don't start it
    if(comboLab && (cnlab || newContainerLab) && containerIsReady) return;
    
	  if (clabsChangeStateTimer) clearTimeout(clabsChangeStateTimer);
    clabsChangeStateTimer = changeClabsState("Start", 'Starting', $('#labspinbox'), ischk);
  }
  else {
    launchclabs_confirmed_1(ischk);
  }
}


var clabshandle = false;
function launchclabs_confirmed_1(ischk){
  //console.log('launchclabs_confirmed_1()');
  if(clabshandle) clearTimeout(clabshandle);
  clabshandle = false;
  if( !ischk ) 
	{
		//$('#labspinbox').show();
		$('#labspinbox').removeClass('icon-play');
	  $('#labspinbox').addClass('icon-spin icon-spinner');
	  //$('#vmp-panel4').css('z-index', '100');
	  DisplayLoadingScreen(1);
	}

   $.ajax({
      url: "../util/vcput.php?a=" + (ischk? 'getclabs' : 'launchclabs') + "&stepid=2792000&version=0&version=0&labworkdir=/home/nowhere",
   })
   .done(function(ret_val) {

	       //display the session time
	       expiretime = 0;
	         
       if( !ischk && ret_val.indexOf('success')<0 ){
         var target = document.getElementById("report_clabs_msg_box");
         var msg = '';
         try {
           var obj = JSON.parse(ret_val);
           if( typeof(obj.message) != 'undefined' ){
             msg = '<br>' + obj.message;
           }
         } catch(err) {
           // do nothing
         }
         target.innerHTML = '<br>Failed to launch your lab. ' + msg + ' If the problem persists, please report to support@vocareum.com for assistance.';
         $('#modal-table-report-clabs').appendTo("#vmp-idebox");
         $('#modal-table-report-clabs').modal('show');
         //
         expiretime = 0;
       } else if ( ischk && ret_val.indexOf('NotReady')>=0 ){
         clabshandle = setTimeout(function() { launchclabs_confirmed(1); }, 1000);
         //
         expiretime = 0;
       } else if ( ischk && ret_val.indexOf('Ready')>=0 ){
         //$('#labspinbox').hide();
	       $('#labspinbox').removeClass('icon-spin icon-spinner');
	       $('#labspinbox').addClass('icon-play');
	       //$('#vmp-panel4').css('z-index', '-1');
	       DisplayLoadingScreen(0);
         var target = document.getElementById("report_clabs_msg_box");
         target.innerHTML = '<br>Lab is ready';

	       try {
	           resp = jQuery.parseJSON(ret_val);
	           if (resp.expiretime !== undefined)
	           {
	             expiretime = resp.expiretime;
	           }
	       } 
	       catch(err) {}
         
       } else if ( ischk && (ret_val.indexOf('Terminated')>=0 || ret_val.indexOf('Stopped')>=0) ){
         //$('#labspinbox').hide();
         $('#labspinbox').removeClass('icon-spin icon-spinner');
	       $('#labspinbox').addClass('icon-play');
	       //$('#vmp-panel4').css('z-index', '-1');
	       DisplayLoadingScreen(0);
         var target = document.getElementById("report_clabs_msg_box");
         target.innerHTML = '<br>Please re-launch the lab through Start Lab.';
         //
         expiretime = 0;
       } else {
         clabshandle = setTimeout(function() { launchclabs_confirmed(1); }, 1000);
       }
       //
     if (timerhandle) clearTimeout(timerhandle);
     timercountdown();
    })
   .fail(function(ret_val) {
     alert('failed to launch Lab');
     console.log('failed to launch lab');
     //$('#labspinbox').hide();
     $('#labspinbox').removeClass('icon-spin icon-spinner');
	   $('#labspinbox').addClass('icon-play');
	   //$('#vmp-panel4').css('z-index', '-1');
	   DisplayLoadingScreen(0);
     //
     expiretime = 0;
     if (timerhandle) clearTimeout(timerhandle);
     timercountdown();
   });
}


var clabsStateData = null;
function showEmptyClabsStateModal()
{
  $('#clabsStateModal_vms').hide();
  $('#clabsStateModal_body').hide();
  $('#clabsStateModal_ta').text('Retrieving lab information...');
  $('#clabsStateModal_ta').show();
  $("#clabsStateModal").css('height', 'auto');
  $('#clabsStateModal').appendTo("#vmp-idebox");
  //$('#clabsStateModal').modal();
}

function clabsStateModalSetMsg(msg)
{
  $('#clabsStateModal_ta').text(msg);
  $('#clabsStateModal_ta').show();
  $("#clabsStateModal").css('height', 'auto');
  $('#clabsStateModal').appendTo("#vmp-idebox");
  //$('#clabsStateModal').modal();
}

function clabsStateModalSetFinalState(state, msg)
{
  var status = "";

  vms = clabsStateData['vms'];
  for (var i = 0; i < vms.length; i++)
  {
    $('#clabs_modal_vm_' + i).hide();
    $('#clabs_modal_vm_spinner_' + i).hide();
    var vm = vms[i];
    var mc = vm['machine'];
    if (mc)
    {
      if (mc['state'] == "Failed")
      {
        if (mc['status'] != "")
        {
          status += "\n  " + mc['hostname'] + ': ' + mc['status'];
        }
      }
    }
  }

  clabsStateModalSetMsg(msg + status);
}

var clabsVmLastState = [];
function buildAndShowClabsStateModal(clabs_data, start_state)
{
  vms = clabs_data['vms'];

  data = '<table class="table table-first-column-check table-hover" style="margin-bottom:0px" border=1 frame=void rules=rows>';
  for (var i = 0; i < vms.length; i++)
  {
    vm = vms[i];
    data += '<tr id="vm_' + i + '" class="clabs-state-modal-tr-vm">';
    data += '<td class="clabs-state-modal-td-vm span4">';
    data += vm['name'];
    data += '</td>';
    data += '<td class="clabs-state-modal-td-state span4" id="clabs_modal_vm_state_' + i + '">';
    data += start_state + '&nbsp; <i id="clabs_modal_vm_spinner_' + i + '" class="icon-spin icon-spinner"></i>';
    data += '</td></tr>';
    clabsVmLastState.push(start_state);
  }
  data += '</table>';

  $('#clabsStateModal').appendTo("#vmp-idebox");
  $('#clabsStateModal_body').show();
  $('#clabsStateModal_vms').html(data);
  $('#clabsStateModal_vms').show();
  $('#clabsStateModal_ta').hide();
  $("#clabsStateModal").css('height', 'auto');
  //$('#clabsStateModal').modal();
}

function spinnerHide(printState, spinner)
{
  //console.log('spinnerHide()');
	if (!hideTimer && !cloudera) {document.getElementById('sessiontimer').style.display = "block";}
	document.getElementById('clabstatus').style.display = "none";
	
	if (printState == 'Starting')
	{
		$('#labspinbox').removeClass('icon-spin icon-spinner');
		$('#labspinbox').addClass('icon-play');
		//$('#vmp-panel4').css('z-index', '-1');
		DisplayLoadingScreen(0);
	}
	else if  (printState == 'Shutting down' || printState == 'Stopping' || printState == 'Stopped' || printState == 'None')
	{
	  if(basicV2Ide) updateKernelStatus(null, 'disconnected');
		$('#endclabspinbox').removeClass('icon-spin icon-spinner');
		$('#endclabspinbox').addClass('icon-stop');
		//console.log('spinnerHide END');
		/*
		// remove terminal btn
		var fm = document.getElementById('panel2-iframe');
		if (typeof(fm) != "undefined" && fm != null) 
    {
      var el = fm.contentWindow.document.getElementById('open');
      if (typeof(el) != "undefined" && el != null) 
      {
        //alert('remove terminal btn');
        el.style.display = "none";
      }
    }
    */
	}
	updateLabStatusIndicator();
}

//------------------------------------------------------------------------
//Azure cloud lab
//------------------------------------------------------------------------
function launchAzure()
{

//var v = awsscnt;

if (awsscnt===0){
  bootbox.dialog("<br>Your lab has not started yet. Please click StartLab in order to access Azure console",
                  [{
                    "label" : "Ok",
                    "class" : "btn vocbtn-ac vocbtn-action"
                  }]
             );
  return;
}
window.open("https://portal.azure.com/");

}

function launchAzureRedirect(url)
{

//var v = awsscnt;

if (awsscnt===0){
  bootbox.dialog("<br>Your lab has not started yet. Please click StartLab in order to access Azure console",
                  [{
                    "label" : "Ok",
                    "class" : "btn vocbtn-ac vocbtn-action"
                  }]
             );
  return;
}
window.open(url);

}

function startazurelab(v) 
{
	//alert('startazurelab');
	     updateLabStatusIndicator('Azure', 'Initializing');
	     if (v) 
		   {
	    	 $('#labspinbox').removeClass('icon-play');
	       $('#labspinbox').addClass('icon-spin icon-spinner');
	       //$('#vmp-panel4').css('z-index', '100');
	     }

	     $.ajax({
	        url: "../util/vcput.php?a=startazure&stepid=2792000&version=0&mode=s&type=1",
	     })
	     .done(function(ret_val) {
	    	   //alert(ret_val);
	    	   
	    	   if(!newLayout) {
	    	     var browser_image_detected = false;
	    	     var hdr = displayPanel3Hdr();
	    	     var htm = "";
	    	     var ret_val_data = JSON.parse(ret_val)['data'];
	    	     if(typeof ret_val_data !== 'undefined' && Array.isArray(ret_val_data)) {
	    	       ret_val_data.forEach(function(credentials) {
	    	         htm += displayPanel3Htm(JSON.stringify(credentials), (htm == "")? "":"Azure AD Credentials")+"<br><br>";
	    	       });
	    	     }
	    	     else {
	    	       htm = displayPanel3Htm(ret_val);
	    	     }
	    	     
  	    	   if(cnlab) {
  	    	     for(var i = 0, vm_access = clabsStates; i < clabsStates.length; i++) {
  	    	       if(typeof vm_access[i].machine !== null) {
  	    	        if (vm_access[i].name == 'browser' || vm_access[i].machine.hostname == 'browser') {browser_image_detected = true;}
  	    	       }
  	    	     }
  	    	   }
  	    	   if(!browser_image_detected) $('#vmp-panel3').html(hdr + htm), showPanel3Info();
	    	   }
	    	   else {
	    	     if(ret_val.search(/Error/)>=0) {
  	    	     updateLabStatusIndicator('Azure', 'Failed');
  	    	     $('#labspinbox').removeClass('icon-spin icon-spinner');
  	           $('#labspinbox').addClass('icon-play');
      	       show_voc_gritter(false, JSON.parse(ret_val)['msg'], true);
      	       return;
      	     }
	    	     getazuredetail(1);
	    	   }
	    	   
	    	   awsscnt = 1; // temporary
		       
	         if (v) 
		       {
	        	 $('#labspinbox').removeClass('icon-spin icon-spinner');
	           $('#labspinbox').addClass('icon-play');
	           //$('#vmp-panel4').css('z-index', '-1');
	           //mhui: display sessison timer
	           //alert(expiretime);
            if (timerhandle) clearTimeout(timerhandle);
            timercountdown();
	         }
           
           // Updates the Azure Lab Status Indicator
           checkAzureLabStatus(function(response) {
              updateLabStatusIndicator("Azure", (response)? 'Ready':'Terminated');
              getazuredetail(0);
            });
            /*
	         if(ret_val.search(/failed/) >= 0 || ret_val.search(/Failed/) >= 0) {
	           updateLabStatusIndicator('Azure', 'Failed');
	         } else {
	           updateLabStatusIndicator('Azure', 'Ready');
	         }*/
	        
	        if(!hideBudget && (azureIde) && !comboLab) {
            updatecloudbudget();
          }
		       
	      })
	     .fail(function(ret_val) {
	       alert('failed to start the lab');
	       if (v) 
		     {
	    	   $('#labspinbox').removeClass('icon-spin icon-spinner');
	         $('#labspinbox').addClass('icon-play');
	         //$('#vmp-panel4').css('z-index', '-1');
	       }
	       updateLabStatusIndicator('Azure', 'Failed');
	       
	     });
}

function endazurelabconfirmed(v) 
{
	     if(v) {
	    	 $('#endlabspinbox').removeClass('icon-stop');
		     $('#endlabspinbox').addClass('icon-spin icon-spinner');
	     }
	     updateLabStatusIndicator('Azure', 'Shutting down');
	     //alert('endazure');
	     
	     $.ajax({
	        url: "../util/vcput.php?a=endazure&stepid=2792000&version=0&mode=s&type=1",
	     })
	     .done(function(ret_val) {
	    	   var hdr = displayPanel3Hdr();
	    	   //alert(ret_val);
	    	   if(!newLayout) {
  	    	   $('#vmp-panel3').html(hdr);
  	    	   panel3_close();
	    	   }
	    	   else {
	    	     getazuredetail(1);
	    	   }
	    	   awsscnt = 0; // temporary
		       
	         if(v) {
	        	 $('#endlabspinbox').removeClass('icon-spin icon-spinner');
			       $('#endlabspinbox').addClass('icon-stop');
			       expiretime = 0;
			       document.getElementById("sessiontimer").innerHTML = "00:00";
			       try {
			           var result = JSON.parse(ret_val);
			           if (result['status'] == 'Error') 
			           {
			        	   show_voc_gritter(false, result['msg'], true);
			           }
			           else
			           {
			        	   show_voc_gritter(false, "Lab ended successfully", false);
			           }
			       }
			       catch (err) { 
			    	   show_voc_gritter(false, ret_val, true);
			       }
	         }
	         updateLabStatusIndicator('Azure', 'Terminated');
	      })
	     .fail(function(ret_val) {
	       //alert('failed to end the lab');
	       show_voc_gritter(false, "Failed to end the lab", true);
	       if(v) {
	    	   $('#endlabspinbox').removeClass('icon-spin icon-spinner');
		       $('#endlabspinbox').addClass('icon-stop');
	       }
	       updateLabStatusIndicator('Azure', 'Failed');
	     });
}

function endazurelab(v) 
{     
      checkAzureLabStatus(function(session_ongoing) {
        //console.log("Azure Lab Status");
        //console.log(session_ongoing);
        if(!session_ongoing) { 
          show_voc_gritter(false, "No session is running", false);
          return;
        } else {
          bootbox.dialog('Are you sure you want to end the lab?',
	        [
	          {
	            "label" : "Yes",
	            "class" : "btn vocbtn-ac vocbtn-action",
	            "callback": function() {
	              endazurelabconfirmed(v);
	            }
	          },
	          {
	            "label" : "No",
	            "class" : "btn vocbtn-ac vocbtn-status"
	          }
	        ]);
        }
      });
	     
}

function getazuredetail(vflag)
{
	//alert('getazuredetail');
	
	var v = 0;
	
	  if(!newLayout) {
  	  $('#detailspinbox2').removeClass('icon-info');
      $('#detailspinbox2').addClass('icon-spin icon-spinner');
    }
    else {
      $('#azure_details_spinbox').removeClass('icon-refresh').addClass('icon-spin icon-spinner');
    }
	     $.ajax({
	        url: "../util/vcput.php?a=getazure&type=1&stepid=2792000&version=0&v="+v,
	     })
	     .done(function(ret_val) {
	       
	       
	       if(!newLayout) {
	         var hdr = displayPanel3Hdr();
	    	   var htm = "";
	    	   var ret_val_data = JSON.parse(ret_val)['data'];
    	     if(typeof ret_val_data !== 'undefined' && ret_val_data.length > 1) {
    	       ret_val_data.forEach(function(credentials) {
    	          htm += displayPanel3Htm(JSON.stringify(credentials), ((htm == "")? "":"Azure AD Credentials"))+"<br><br>";
    	       });
    	       
    	       // if 'No session is running' occurs twice, remove 2nd itteration
    	       if((htm.match(/No session is running/g) || []).length > 1) htm = "No session is running";
    	       
    	     }
    	     else {
    	       htm = displayPanel3Htm(ret_val);
    	     }
	    	   
	    	   
	    	   if (vflag)
	    	   {
	    	     $('#vmp-panel3').html(hdr + htm);
	    	     showPanel3Info();
	    	   }
	    	   
		       $('#detailspinbox2').removeClass('icon-spin icon-spinner');
		       $('#detailspinbox2').addClass('icon-info');
	       }
	       else {
	         // Puts the Azure Details within the 'Azure Details' Section of the 'Details' Tab
      	   var azure_details = displayPanel3Htm(ret_val);
      	   $('#azure_details_section').html(azure_details);
      	   
      	   // If display flag is true, switch to the 'Details' Tab to display the Azure Details
      	   if (vflag) switchActiveTab('Details');
           $('#azure_details_spinbox').removeClass('icon-spin icon-spinner').addClass('icon-refresh');
      	   
	       }
    	   
    	   if(!hideBudget && (azureIde) && !comboLab) {
            updatecloudbudget();
          }
         //mhui: display sessison timer
	       //alert(expiretime);
         if (timerhandle) clearTimeout(timerhandle);
         timercountdown();
         
	      })
	     .fail(function(ret_val) {
	       alert('failed to retrieve Azure detail');
	       if(!newLayout) {
  	       $('#detailspinbox2').removeClass('icon-spin icon-spinner');
  	       $('#detailspinbox2').addClass('icon-info');
	       }
	       else {
	         $('#azure_details_spinbox').removeClass('icon-spin icon-spinner').addClass('icon-refresh');
	       }
	       
	     });
}

//------------------------------------------------------------------------
//GCP cloud lab
//------------------------------------------------------------------------

let gcpsetupdone = false;
let getgcpdetailInterval = false;

function launchGCP() {
  if (awsscnt === 0) {
    bootbox.dialog("<br>Your lab has not started yet. Please click StartLab in order to access GCP console",
                    [{
                      "label" : "Ok",
                      "class" : "btn vocbtn-ac vocbtn-action"
                    }]
              );
    return;
  }
  window.open('https://console.cloud.google.com');
}

function startgcplab(v) {
  updateLabStatusIndicator('GCP', 'Initializing');
  if (v) {
    $('#labspinbox').removeClass('icon-play');
    $('#labspinbox').addClass('icon-spin icon-spinner');
    //$('#vmp-panel4').css('z-index', '100');
  }

  $.ajax({
    url: "../util/vcput.php?a=startgcp&stepid=2792000&version=0&mode=s&type=1",
  })
  .done(function(ret_val) {
    //alert(ret_val);
    let result = JSON.parse(ret_val);
    let lab_status = result['status'];
    ret_val = result['msg'];
    let setupscript = result['setupscript'];
    let starting = result['starting'];

    if (lab_status !== 'success') {
      $('#labspinbox').removeClass('icon-spin icon-spinner');
      $('#labspinbox').addClass('icon-play');
      show_voc_gritter(true, ret_val, false);
    }

    getgcpdetail(1);

    if (setupscript || starting) {
      show_voc_gritter(false, ret_val, false);
      return;
    }

    if (v) {
      $('#labspinbox').removeClass('icon-spin icon-spinner');
      $('#labspinbox').addClass('icon-play');
      //$('#vmp-panel4').css('z-index', '-1');
      //mhui: display sessison timer
      //alert(expiretime);
      if (timerhandle) clearTimeout(timerhandle);
      timercountdown();
    }

    // Updates the GCP Lab Status Indicator
    checkGCPLabStatus(function(response) {
      updateLabStatusIndicator("GCP", (response) ? 'Ready' : 'Terminated');
      getgcpdetail(0);
    });

    if(!hideBudget && (gcpIde) && !comboLab) {
      updatecloudbudget();
    }
  })
  .fail(function(ret_val) {
    alert('failed to start the lab');
    if (v) {
      $('#labspinbox').removeClass('icon-spin icon-spinner');
      $('#labspinbox').addClass('icon-play');
      //$('#vmp-panel4').css('z-index', '-1');
    }
    updateLabStatusIndicator('GCP', 'Failed');
  });
}

function endgcplabconfirmed(v) {
  updateLabStatusIndicator('GCP', 'Shutting down');

  $.ajax({
    url: "../util/vcput.php?a=endgcp&stepid=2792000&version=0&mode=s&type=1",
  })
  .done(function(ret_val) {
    var hdr = displayPanel3Hdr();
    if(!newLayout) {
      $('#vmp-panel3').html(hdr);
      panel3_close();
    } else {
      getgcpdetail(1);
    }

    awsscnt = 0; // temporary

    if (v) {
      $('#endclabspinbox').removeClass('icon-spin icon-spinner');
      $('#endclabspinbox').addClass('icon-stop');
      expiretime = 0;
      document.getElementById("sessiontimer").innerHTML = "00:00";
      try {
        var result = JSON.parse(ret_val);
        if (result['status'] == 'Error') {
          show_voc_gritter(false, result['msg'], true);
        } else {
          show_voc_gritter(false, "Lab ended successfully", false);
        }
      } catch (err) {
        show_voc_gritter(false, ret_val, true);
      }
    }
    updateLabStatusIndicator('GCP', 'Terminated');
  })
  .fail(function(ret_val) {
    //alert('failed to end the lab');
    show_voc_gritter(false, "Failed to end the lab", true);
    if (v) {
      $('#endclabspinbox').removeClass('icon-spin icon-spinner');
      $('#endclabspinbox').addClass('icon-stop');
    }
    updateLabStatusIndicator('GCP', 'Failed');
  });
}

function endgcplab(v) {
  $('#endclabspinbox').removeClass('icon-stop');
  $('#endclabspinbox').addClass('icon-spin icon-spinner');
  checkGCPLabStatus(function(session_ongoing) {
    if (!session_ongoing) {
      show_voc_gritter(false, "No session is running", false);
      $('#endclabspinbox').removeClass('icon-spin icon-spinner');
      $('#endclabspinbox').addClass('icon-stop');
      return;
    } else {
      bootbox.dialog('Are you sure you want to end the lab?',
        [
          {
            "label" : "Yes",
            "class" : "btn vocbtn-ac vocbtn-action",
            "callback": function() {
              endgcplabconfirmed(v);
            }
          },
          {
            "label" : "No",
            "class" : "btn vocbtn-ac vocbtn-status"
          }
        ]);
    }
  });
}

function getgcpdetail(vflag) {
  var v = 0;

  if(!newLayout) {
    $('#detailspinbox2').removeClass('icon-info');
    $('#detailspinbox2').addClass('icon-spin icon-spinner');
  } else {
    $('#gcp_details_spinbox').removeClass('icon-refresh').addClass('icon-spin icon-spinner');
  }

  $.ajax({
    url: "../util/vcput.php?a=getgcp&mode=s&type=1&stepid=2792000&version=0&v="+v,
  })
  .done(function(ret_val) {
    let gcp_details = displayPanel3GCP(ret_val);
    if(!newLayout) {
      var hdr = displayPanel3Hdr();
      if (vflag) {
        $('#vmp-panel3').html(hdr + gcp_details);
        showPanel3Info();
      }
      $('#detailspinbox2').removeClass('icon-spin icon-spinner');
      $('#detailspinbox2').addClass('icon-info');
	  } else {
      // Puts the GCP Details within the 'GCP Details' Section of the 'Details' Tab
      $('#gcp_details_section').html(gcp_details);

      // If display flag is true, switch to the 'Details' Tab to display the GCP Details
      if (vflag) switchActiveTab('Details');
      $('#gcp_details_spinbox').removeClass('icon-spin icon-spinner').addClass('icon-refresh');
    }

    if (gcpsetupdone) {
      // lab is ready, terminated, or gcp script is done running
      clearTimeout(getgcpdetailInterval);
      getgcpdetailInterval = false;

      $('#labspinbox').removeClass('icon-spin icon-spinner');
      $('#labspinbox').addClass('icon-play');

      checkGCPLabStatus((session_ongoing) => {
        updateLabStatusIndicator("GCP", (session_ongoing) ? 'Ready' : 'Failed');
      });
    } else {
      // gcp script is still running
      $('#labspinbox').removeClass('icon-play');
      $('#labspinbox').addClass('icon-spin icon-spinner');

      updateLabStatusIndicator('GCP', 'Initializing');
      if (!getgcpdetailInterval) {
        getgcpdetailInterval = setInterval(getgcpdetail, 10000, vflag);
      }
    }

    if(!hideBudget && (gcpIde) && !comboLab) {
      updatecloudbudget();
    }
    if (timerhandle) clearTimeout(timerhandle);
    timercountdown();
  })
  .fail(function(ret_val) {
    alert('failed to retrieve GCP detail');
    if(!newLayout) {
      $('#detailspinbox2').removeClass('icon-spin icon-spinner');
      $('#detailspinbox2').addClass('icon-info');
    } else {
      $('#gcp_details_spinbox').removeClass('icon-spin icon-spinner').addClass('icon-refresh');
    }
  });
}

let setupdone = false;
let endlab = false;
let getdatabricksdetailInterval = false;

function startdatabrickslab(v) {
  updateLabStatusIndicator('Databricks', 'Initializing');
  if (v) {
    $('#labspinbox').removeClass('icon-play');
    $('#labspinbox').addClass('icon-spin icon-spinner');
  }
  DisplayLoadingScreen(1);
  $.ajax({
    url: "../util/vcprojapi.php?t=startdatabricks&stepid=2792000&version=0&mode=s&type=1",
  })
  .done(function(ret_val) {
    let result = JSON.parse(ret_val);
    let lab_status = result['status'];
    ret_val = result['msg'];
    let setupscript = result['setupscript'];
    let workspace_create = result['workspace_create'];
    let starting = result['starting'];

    if (lab_status !== 'success') {
      $('#labspinbox').removeClass('icon-spin icon-spinner');
      $('#labspinbox').addClass('icon-play');
      show_voc_gritter(true, ret_val, false);
    }

    if (setupscript || workspace_create || starting) {
      show_voc_gritter(false, ret_val, false);
      getdatabricksdetail(0, true);
      return;
    }

    getdatabricksdetail(0, false);

    if (v) {
      $('#labspinbox').removeClass('icon-spin icon-spinner');
      $('#labspinbox').addClass('icon-play');
      if (timerhandle) clearTimeout(timerhandle);
      timercountdown();
    }

    // Updates the Databricks Lab Status Indicator
    checkDatabricksLabStatus(function(response) {
      if (response) {
        if ($('#panel2-iframe').attr('src') == '') {
          launchDatabricks();
        }
      }
      updateLabStatusIndicator("Databricks", (response) ? 'Ready' : 'Terminated');
      DisplayLoadingScreen(0);
    });
  })
  .fail(function(ret_val) {
    alert('failed to start the lab');
    if (v) {
      $('#labspinbox').removeClass('icon-spin icon-spinner');
      $('#labspinbox').addClass('icon-play');
    }
    DisplayLoadingScreen(0);
  });
}

function enddatabrickslab(v) {
  bootbox.dialog('Are you sure you want to end the lab?',
    [
      {
        "label" : "Yes",
        "class" : "btn vocbtn-ac vocbtn-action",
        "callback": function() {
          enddatabrickslabconfirmed(v);
        }
      },
      {
        "label" : "No",
        "class" : "btn vocbtn-ac vocbtn-status"
      }
    ]);
}

function enddatabrickslabconfirmed(v) {
  if(v) {
    $('#endclabspinbox').removeClass('icon-stop');
    $('#endclabspinbox').addClass('icon-spin icon-spinner');
  }
  updateLabStatusIndicator('Databricks', 'Shutting down');

  $.ajax({
    url: "../util/vcprojapi.php?t=enddatabricks&stepid=2792000&version=0&mode=s&type=1",
  })
  .done(function(ret_val) {
    $('#endclabspinbox').removeClass('icon-spin icon-spinner');
    $('#endclabspinbox').addClass('icon-stop');

    var hdr = displayPanel3Hdr();
    if(!newLayout) {
      $('#vmp-panel3').html(hdr);
      panel3_close();
    } else {
      getdatabricksdetail(0, false);
    }

    if (v) {
      $('#endclabspinbox').removeClass('icon-spin icon-spinner');
      $('#endclabspinbox').addClass('icon-stop');
      expiretime = 0;
      document.getElementById("sessiontimer").innerHTML = "00:00";
      $('#panel2-iframe').attr('src', '');
      redirected = false;
      try {
        var result = JSON.parse(ret_val);
        if (result['status'] == 'error') {
          show_voc_gritter(false, result['msg'], true);
        } else {
          getdatabricksdetail(0, false);
        }
      } catch (err) {
        show_voc_gritter(false, ret_val, true);
      }
    }
    updateLabStatusIndicator('Databricks', 'Terminated');
  })
  .fail(function(ret_val) {
    //alert('failed to end the lab');
    show_voc_gritter(false, "Failed to end the lab", true);
    if (v) {
      $('#endclabspinbox').removeClass('icon-spin icon-spinner');
      $('#endclabspinbox').addClass('icon-stop');
    }
  });
}

function getdatabricksdetail(vflag, startlab) {
  $('#detailspinbox3').removeClass('icon-info');
  $('#detailspinbox3').addClass('icon-spin icon-spinner');

  if (!hideBudget) {
    $.ajax({
      url: "../util/vcput.php?a=vcGetLabInfo&stepid=2792000&version=0&labworkdir=/home/nowhere",
      success: function(data) {
        try {
          let result = JSON.parse(data);
          if ('budget' in result && 'spend' in result) {
            $('#budget').html('<span>' + budgetString(result['budget'], result['spend']) + '</span>');
            $('#budget').show();
          }
        } catch (err) {
          console.log("Exception: " + err);
        }
      }
    });
  }

  $.ajax({
    url: "../util/vcprojapi.php?t=getdatabricks&mode=s&details=1&type=1&stepid=2792000&version=0",
  })
  .done(function(ret_val) {
    let databricks_details = displayPanel3Databricks(ret_val);
    var hdr = displayPanel3Hdr();
    if (vflag) {
      $('#vmp-panel3').html(hdr + databricks_details);
      showPanel3Info();
    } else {
      databricks_details = "Databricks Details" + databricks_details;
      show_voc_gritter(false, databricks_details, false);
    }
    $('#detailspinbox3').removeClass('icon-spin icon-spinner');
    $('#detailspinbox3').addClass('icon-info');

    if (setupdone) {
      clearTimeout(getdatabricksdetailInterval);
      getdatabricksdetailInterval = false;
      $('#labspinbox').removeClass('icon-spin icon-spinner');
      $('#labspinbox').addClass('icon-play');
      if (timerhandle) clearTimeout(timerhandle);
      timercountdown();
      if (startlab) {
        checkDatabricksLabStatus(function(session_ongoing) {
          if (session_ongoing) {
            // load iframe if session still active
            launchDatabricks();
            updateLabStatusIndicator("Databricks", 'Ready');
          } else {
            // something went wrong starting the lab
            if (endlab) {
              updateLabStatusIndicator("Databricks", endlab);
              DisplayLoadingScreen(0);
            }
          }
        });
      } else {
        if (endlab) {
          updateLabStatusIndicator("Databricks", endlab);
          DisplayLoadingScreen(0);
        }
      }
    } else {
      if (endlab) {
        updateLabStatusIndicator('Databricks', endlab);
        DisplayLoadingScreen(0);
      } else {
        updateLabStatusIndicator('Databricks', 'Initializing');
      }
      if (! getdatabricksdetailInterval) {
        getdatabricksdetailInterval = setInterval(getdatabricksdetail, 15000, vflag, startlab);
      }
    }
  })
  .fail(function(ret_val) {
    alert('failed to retrieve Databricks detail');
    if(!newLayout) {
      $('#detailspinbox3').removeClass('icon-spin icon-spinner');
      $('#detailspinbox3').addClass('icon-info');
    } else {
      $('#databricks_details_spinbox').removeClass('icon-spin icon-spinner').addClass('icon-refresh');
    }
  });
}

//
//
//
function updateVmButtons(result)
{
  var str = '';
  var indx;
  var vm;

  //console.log('updateVmButtons');
  //console.log(result);

  vcSetupPeriodicUiCheck(vcPeriodUiCheckReloadDelay);

  if (typeof(result['cdb']) != "undefined" && result['cdb'].length > 0 && typeof(result['cdb'][0]['dbtype']) != "undefined")
  {
	  return updateVmButtonsCdb(result);
  }
  
  if (typeof(result['vms']) != "undefined")
  {
	  return updateVmButtonsVms(result);
  }
}

function updateVmButtonsCdb(result)
{
	  var str = '';
	  var indx;
	  var cdb;
	  var vm;
	  var dbtype;

	  //console.log('updateVmButtonsCdb');
	  //console.log(result);

	  if (typeof(result['cdb']) != "undefined" && result['cdb'].length > 0 && typeof(result['cdb'][0]['dbtype']) != "undefined")
	  {
	    indx = 0;
	    for (indx=0; indx < result['cdb'].length; indx++)
	    {
	      cdb = result['cdb'][indx];
	      dbtype = cdb['dbtype'];
	      vm = result['vms'][indx];
	 
	      if (typeof(vm['state']) != "undefined" && vm['host'] != "None")
	      {
	    	  str += '<span data-indx="' + indx + '" id="vmBtn' + indx + '" class="vmp-idebutton-left" tabindex="0" role="button" aria-label="' + vm['name'] + '" ';
	  	 	  str += 'data-toggle="tooltip" title="' + vm['name'] + '" onclick="showcdbdetails(' + indx + ',' + dbtype + ')" >';
	        str += '<i id="vmspinbox' + indx + '" class="icon-spin icon-spinner hidden-1" style="padding: 0 1px 0 1px;"></i>';
	      	str += vm['name'];
	      	str += '<i id="vmstatus' + indx + '" class="led ' + ((vm['state'] == "Ready")? "led-green":((vm['state'] == "terminated" || vm['state'] == "stopped" || vm['state'] == "None")? "led-red": "led-yellow")) + '" role="status" aria-label="'+ vm['name'] +' Status: Ready"></i>';
	      	str += '</span>';
	      }
	    }
	  }
	  
	  return str;
}

function updateVmButtonsVms(result)
{
  var str = '';
  var indx;
  var vm;
  var access_name;

  //console.log('updateVmButtonsVms');
  //console.log(result);
  
  // If basic IDE and is Ready, setup Kernel
  if(basicV2Ide && result['lab_state'] == 'Ready') clabsStates = $(result.vms), vocSetupKernel(result);

  if (typeof(result['vms']) != "undefined")
  {
    indx = 0;
    for (indx=0; indx < result['vms'].length; indx++)
    {
      vm = result['vms'][indx];
      
      // If vm entry is unbuntu 20.04, skip since we don't want it to show up as a vm button
      if((vm['name'] == "ubuntu2004" && newContainerLab) || basicV2Ide) {
        return;
      }
      
      if (typeof(vm['state']) != "undefined")
      {
    	  var access = vm['access'];
        var accesskeys = Object.keys(access);
    	  
    	  var access_v2 = (typeof(vm['access_v2']) != "undefined")? vm['access_v2'] : null;

    	  // use access_v2 if available
        if (access_v2)
        {
          if (access_v2.length == 1)
          { 
            
        	      str += '<span data-indx="' + indx + '" id="vmBtn' + indx + '" class="vmp-idebutton-left" tabindex="0" role="button" aria-label="' + vm['name'] + '" ';
      	 	      str += 'data-toggle="tooltip" title="' + access_v2[0]['name'] + '" onclick="vmBtnClicked(' + indx + ',\'' + access_v2[0]['name'] + '\',0)" >';
                str += '<i id="vmspinbox' + indx + '" class="icon-spin icon-spinner hidden-1" style="padding: 0 1px 0 1px;"></i>';
          	    str += vm['name'];
          	    str += '<i id="vmstatus' + indx + '" class="led  ' + ((vm['state'] == "Ready")? "led-green":((vm['state'] == "terminated" || vm['state'] == "stopped" || vm['state'] == "None")? "led-red": "led-yellow")) + '" role="status" aria-label="'+ vm['name'] +' Status: '+ vm['name'] +' Status: '+((vm['state'] == "None")? 'Terminated': vm['state']) +'"></i>';
          	    //str += '<i id="vmstatus' + indx + '" class="led  led-green" aria-label="Status: NULL"></i>';
          	    
          	    str += '</span>';
          	    if (access_v2[0]['name'] == 'cdm' || access_v2[0]['name'] == 'hue')
      	        {
          	      cloudera = 1;
      	        }
          }
          else
          {
              if (result['vms'].length == 1)
              {
                
                // Adds access name to access list
                if($.inArray({name: vm['name'], access_v2:  access_v2}, clabs_access_v2_list) == -1) {
                  clabs_access_v2_list.push({
                      name: vm['name'], 
                      access_v2:  access_v2
                  });  
                }

            	    for (var j=0; j<access_v2.length; j++)
                  {
            	      access_name = access_v2[j]['name'];
                    if (jupyterelite2022lab && (access_name == "vscode" || access_name == "ttyd")) continue;
            	      str += '<span data-indx="' + indx + '" id="vmBtn' + indx + '" class="vmp-idebutton-left" tabindex="0" role="button" aria-label="' + access_name + '" ';
          	 	      str += 'data-toggle="tooltip" title="' + access_name + '" onclick="vmBtnClicked(' + indx + ',\'' + access_name + '\',0)" >';
                    str += '<i id="vmspinbox' + indx + '" class="icon-spin icon-spinner hidden-1" style="padding: 0 1px 0 1px;"></i>';
              	    str += access_name;
              	    str += '<i id="vmstatus' + indx + '" class="led ' + ((vm['state'] == "Ready")? "led-green":((vm['state'] == "terminated" || vm['state'] == "stopped" || vm['state'] == "None")? "led-red": "led-yellow")) + '" style="'+((false && j > 0)? "display: none;" : "") +'" role="status" aria-label="'+ access_name +' Status: '+ vm['name'] +' Status: '+((vm['state'] == 'None')? 'Terminated': vm['state']) +'"></i>';
              	    str += '</span>';
            	      if (access_name == 'cdm' || access_name == 'hue')
            	      {
                	    cloudera = 1;
            	      }
            	      //indx++;
            	    }
              }
              else
              {
        	      str += '<span class="dropdown">';
                
                if (access_v2.length > 0) {
                  str += '<span data-indx="' + indx + '" id="vmBtn' + indx + '" class="vmp-idebutton-left dropdown-toggle" data-toggle="dropdown" tabindex="0" role="button">';
                }
                else {
                  str += '<span data-indx="' + indx + '" id="vmBtn' + indx + '" class="vmp-idebutton-left-disabled dropdown-toggle" data-toggle="dropdown" tabindex="0" role="button">';
                }
          	    //str += '<span data-indx="' + indx + '" id="vmBtn' + indx + '" class="vmp-idebutton-left dropdown-toggle" data-toggle="dropdown" tabindex="0" role="button">';
          	    str += '<i id="vmspinbox' + indx + '" class="icon-spin icon-spinner hidden-1" style="padding: 0 1px 0 1px;"></i>';
          	    str += vm['name'];
          	    str += '<i id="vmstatus' + indx + '" class="led ' + ((vm['state'] == "Ready")? "led-green":((vm['state'] == "terminated" || vm['state'] == "stopped" || vm['state'] == "None")? "led-red": "led-yellow")) + '" role="status" aria-label="'+ vm['name'] +' Status: '+((vm['state'] == "None")? 'Terminated': vm['state']) +'"></i>';
          	    str += '</span>';

          	    str += '<ul class="dropdown-menu" role="menu" aria-labelledby="vmBtn' + indx + '">';
          	    for (var j=0; j<access_v2.length; j++)
                {
          	      access_name = access_v2[j]['name'];
                  if (jupyterelite2022lab && (access_name == "vscode" || access_name == "ttyd")) continue;
          	      str += '<li tabindex="0" role="presentation"><a role="menuitem" href="#" onclick="vmBtnClicked(' + indx + ',\''+access_v2[j]['name']+'\',0)">'+access_name+'</a></li>';
          	      if (access_name == 'cdm' || access_name == 'hue')
          	      {
              	    cloudera = 1;
          	      }
          	    }
          	    str += '</ul>';
          	    str += '</span>';
              }
          }
        }
        
        else
        {
          if (accesskeys.length == 1)
      	  {
      	 	  str += '<span data-indx="' + indx + '" id="vmBtn' + indx + '" class="vmp-idebutton-left" tabindex="0" role="button" aria-label="' + vm['name'] + '" ';
      	 	  str += 'data-toggle="tooltip" title="' + accesskeys[0] + '" onclick="vmBtnClicked(' + indx + ',\'' + accesskeys[0] + '\',0)" >';
            str += '<i id="vmspinbox' + indx + '" class="icon-spin icon-spinner hidden-1" style="padding: 0 1px 0 1px;"></i>';
          	str += vm['name'];
          	str += '<i id="vmstatus' + indx + '" class="led ' + ((vm['state'] == "Ready")? "led-green":((vm['state'] == "terminated" || vm['state'] == "stopped" || vm['state'] == "None")? "led-red": "led-yellow")) + '" role="status" aria-label="'+ vm['name'] +' Status: '+ vm['name'] +' Status: '+((vm['state'] == 'None')? 'Terminated': vm['state']) +'"></i>';
          	str += '</span>';
      	  }
      	  else
      	  {
      	    str += '<span class="dropdown">';
                  
      	    str += '<span data-indx="' + indx + '" id="vmBtn' + indx + '" class="vmp-idebutton-left dropdown-toggle" data-toggle="dropdown" tabindex="0" role="button">';
      	    str += '<i id="vmspinbox' + indx + '" class="icon-spin icon-spinner hidden-1" style="padding: 0 1px 0 1px;"></i>';
      	    str += vm['name'];
      	    str += '<i id="vmstatus' + indx + '" class="led ' + ((vm['state'] == "Ready")? "led-green":((vm['state'] == "terminated" || vm['state'] == "stopped" || vm['state'] == "None")? "led-red": "led-yellow")) + '" role="status" aria-label="'+ vm['name'] +' Status: '+ vm['name'] +' Status: '+((vm['state'] == 'None')? 'Terminated': vm['state']) +'"></i>';
      	    str += '</span>';

      	    str += '<ul class="dropdown-menu" role="menu" aria-labelledby="vmBtn' + indx + '">';
      	    for (var property in access)
            {
      	      if (!access.hasOwnProperty(property)) continue;
      	      access_name = property;
      	      str += '<li tabindex="0" role="presentation"><a role="menuitem" href="#" onclick="vmBtnClicked(' + indx + ',\''+property+'\',0)">'+access_name+'</a></li>';
      	      if (property == 'cdm' || property == 'hue')
      	      {
          	    cloudera = 1;
      	      }
      	    }
      	    str += '</ul>';
      	    str += '</span>';
      	  }
  	  
        }
        
      }
    }

    if (comboLab || awsIde || azureIde || gcpIde)
    {
      if (awsIde)
      {
  	    str += '<span data-indx="' + indx + '" id="vmBtn' + indx + '" class="vmp-idebutton-left" tabindex="0" role="button" aria-label="AWS" ';
	 	    str += 'data-toggle="tooltip" title="AWS" onclick="launchAws()" >';
	      str += '<i id="vmspinbox' + indx + '" class="icon-spin icon-spinner hidden-1" style="padding: 0 1px 0 1px;"></i>';
  	    str += 'AWS';
  	    str += '<i id="vmstatus' + indx + '" class="led ' + ((comboLab) ? ((allowSubmit == 2)? "led-green":((allowSubmit == 1)? "led-yellow" : "led-red")) : "") + '" role="status" aria-label="AWS Status: NULL" title="Status: NULL"></i>';
  	    str += '</span>';
      }
      else if (azureIde)
      {
    	  str += '<span data-indx="' + indx + '" id="vmBtn' + indx + '" class="vmp-idebutton-left" tabindex="0" role="button" aria-label="Azure" ';
	 	    str += 'data-toggle="tooltip" title="Azure" onclick="launchAzure()" >';
	      str += '<i id="vmspinbox' + indx + '" class="icon-spin icon-spinner hidden-1" style="padding: 0 1px 0 1px;"></i>';
  	    str += 'Azure';
  	    str += '<i id="vmstatus' + indx + '" class="led" role="status" aria-label="Azure Status: NULL" title="Status: NULL"></i>';
  	    str += '</span>';
  	    
  	      	    
      }
      else if (gcpIde)
      {
        str += '<span data-indx="' + indx + '" id="vmBtn' + indx + '" class="vmp-idebutton-left" tabindex="0" role="button" aria-label="GCP" ';
        str += 'data-toggle="tooltip" title="GCP" onclick="launchGCP()" >';
        str += '<i id="vmspinbox' + indx + '" class="icon-spin icon-spinner hidden-1" style="padding: 0 1px 0 1px;"></i>';
        str += 'GCP';
        str += '<i id="vmstatus' + indx + '" class="led" role="status" aria-label="GCP Status: NULL" title="Status: NULL"></i>';
        str += '</span>';
      }
    }
    
    if (cloudera) {document.getElementById('sessiontimer').style.display = "none";}
  }
  return str;
}

var clabsChangeStateTimer = null;
function changeClabsState(ctrl, printState, spinner, chkCounter)
{
  // Gets the vmButton elements then creates an array of their names
  var vmButtons = $("span[id^='vmBtn']");
  var vmButtonNamesList = new Array();
  vmButtons.each(function() {vmButtonNamesList.push($(this).text())});
  
  if(clabsStates != null) {
    clabsStates.each(function() {
      if($.inArray(this.name, vmButtonNamesList) >= 0) {
        updateLabStatusIndicator(this.name, printState);
      }
      else {
        if(this.access_v2 != null) {
          $(this.access_v2).each(function() {
            updateLabStatusIndicator(this.name, printState);
          });
        }
        else {
          if(clabs_access_v2_list.length > 0) {
            $(clabs_access_v2_list).each(function() {
              $(this.access_v2).each(function() { updateLabStatusIndicator(this.name, printState) });
            });
          }
        }
      }
    });
  }
  
  clearTimeout(clabsChangeStateTimer);
  var timelen = 2000;

  if (chkCounter == 0)
  {
    op = (ctrl == "Stop") ? 'endclabs' : 'launchclabs';
    $.ajax({
    url: "../util/vcput.php?a=" + op + "&show_solution=&stepid=2792000&version=0&labworkdir=/home/nowhere",
    })
    .done(function(ret_val) 
     {
    	 //spinnerHide(printState, spinner);
       showEmptyClabsStateModal();
       //console.log(ret_val);
       
       // Change vm lab status here

       if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) 
       { // invalid session
			   window.location.reload();
			   return;
		   }
       try
       {
    	   // remove terminal btn
		     var fm = document.getElementById('panel2-iframe'); 
		     if (typeof(fm) != "undefined" && fm != null) 
	       {
	         var el = fm.contentWindow.document.getElementById('open');
	         if (typeof(el) != "undefined" && el != null) 
	         {
	           //alert('remove terminal btn');
	           el.style.display = "none";
	         }
	       }
       }
       catch(err) {}

       clabsStateModalSetMsg('');
       try 
       {   
         var result = JSON.parse(ret_val);
         if (result['status'] != 'success')
         {
           //mhui
           clabsStateModalSetMsg(result['message']);
           //$('#clabsStateModal').modal();
           spinnerHide(printState, spinner);
           if (newContainerLab || (vmlab2) || cnlab) {
            displayContainerPanelFiller(result['message'], false);
            if (vocNotebookIde) {  // VNB doesn't have a panel filler so show a gritter instead
              show_voc_gritter(false, result['message'], true);
            }
           } else {
            show_voc_gritter(false, result['message'], true);
           }
         }
         else 
         {
        	 if (clabsChangeStateTimer) clearTimeout(clabsChangeStateTimer);
           clabsChangeStateTimer = setTimeout(changeClabsState, 100, ctrl, printState, spinner, 1);
         }
       }
       catch(err) 
       {
         //clabsStateModalSetMsg('Exception changing state of lab1: ' + err);
         clabsStateModalSetMsg(ret_val);
         $('#clabsStateModal').modal();
         spinnerHide(printState, spinner);
       }
     })
     .fail(function(data, textStatus, jqXHR)
     {
       clabsStateModalSetMsg("Failed to get lab1 information");
       show_voc_gritter_duration(false, 'Failed to get lab1 information', true, DEFAULT_GRITTER_DURATION);
       //spinner.hide();
       spinnerHide(printState, spinner);
       if(newContainerLab  || vmlab2 || cnlab) displayContainerPanelFiller("Failed to get lab1 information");
     });
  }
  else
  {
    var infourl = (newContainerLab && chkCounter == 1)? "../util/vcprojapi.php?t=vcGetLabInfoNew&stepid=2792000&version=0&labworkdir=/home/nowhere" : "../util/vcput.php?a=vcGetLabInfo&stepid=2792000&version=0&labworkdir=/home/nowhere&graderide=0";
    var jqxhr = $.ajax(infourl)
      .done(function(data, textStatus, jqXHR)
      {
        try 
        {
          //console.log(data);
          var result = JSON.parse(data);
          //mhui
          var vm_state_updated = 0;
		      expiretime = 0;
          if (result['status'] == 'Error')
          {
            clabsStateModalSetMsg("Could not get lab information: " + result['msg']);
            show_voc_gritter(false, "Error: " + result['msg'], true);
            //spinner.hide();
            spinnerHide(printState, spinner);
            if(newContainerLab || (vmlab2  || cnlab)) displayContainerPanelFiller("Could not get lab information: " + result['msg']);
          }
          else if (result['status'] == 'Launching')
          {
            //daemon is launching it - just wait
          }
          else
          {
            clabsStateData = result;
            state = result['lab_state'];
            //vm_state = result['lab_state'];
            status = result['lab_status'];
            var subtype = result['subtype'];
            timelen = (subtype == 2 || subtype == 16)? 20000 : 1000;
            
            //display budget
            if (typeof(result['budget']) != "undefined") {
              //$('#budget').html('<span>' + budgetString('Monthly:', result['budget']['monthly_time']) + '</span> <span style="float:right; margin-right: 30px;" >' + budgetString('Total:', result['budget']['time']) + '</span>');
            	$('#budget').html('<span>' + budgetString(result['budget'], result['spend']) + '</span>');
            }
            if (typeof(result['aws_budget']) != "undefined") {
              //console.log('setting budget2 ................');
               $('#budget2').html('<span>' + budgetString2(result['aws_budget']) + '</span>');
            }
      
            if (chkCounter == 1 && !newContainerLab)
            {
              buildAndShowClabsStateModal(result, printState);
              if (clabsChangeStateTimer) clearTimeout(clabsChangeStateTimer);
              clabsChangeStateTimer = setTimeout(changeClabsState, timelen, ctrl, printState, spinner, chkCounter + 1);
            }
            else
            {
              // check the state - if we've reached a good final state, all done
         
              // let's first update all the vm individual states
              vms = result['vms'];
              for (var i = 0; i < vms.length; i++)
              {
                vm = vms[i];
                st = vm['state'];
                if (true) //(st != clabsVmLastState[i])
                {
                  var msg = st;
	                if (  (st != "Ready")
                     && (st != "Stopped")
                     && (st != "Terminated")
                     && (st != "Failed") )
                  {
                    msg += '&nbsp; <i id="clabs_modal_vm_spinner_' + i + '" class="icon-spin icon-spinner"></i>';
                    //mhui
                    if (!hideProgress) {
                      document.getElementById('clabstatus').style.display = "inline-block";
                    }
                    //$('#clabstatus').html(st+'...');
                    vm_state_updated = 1;
                  }
                  $('#clabs_modal_vm_state_' + i).html(msg);
                  clabsVmLastState[i] = st;
                }
              }

              //always take over-all state not VMs
              $('#clabstatus').html(state+'...');
              if (!vm_state_updated)
              {
            	  if (!hideProgress) {
                  document.getElementById('clabstatus').style.display = "inline-block";
                }
            	  $('#clabstatus').html(state+'...');
            	  timelen = 2000; //2000
              }

              if (state == "Failed")
              {
                msg = 'Failed to launch lab';
                if (status != "")
                {
                  msg += ": " + status;
                }
                clabsStateModalSetFinalState('Failed', msg);
                $('#clabsStateModal').modal();
                
                reportFailedLabStart(ctrl, state);
                
                //$('#clabstatus').html('Failed');
                //show_voc_gritter(false, msg, true);
                //spinner.hide();
                spinnerHide(printState, spinner);
                if(newContainerLab || cnlab || vmlab2) displayContainerPanelFiller(msg);
                //mhui
                expiretime = 0; //typeof(result['expiretime']) !== 'undefined' ? result['expiretime'] : 0;
                document.getElementById("sessiontimer").innerHTML = "00:00";
                if (timerhandle) {clearTimeout(timerhandle);}
              }
              //else if (  (ctrl == "Stop")
               else if (  true
                      && ( (state == "None")
                        || (state == "Stopped")
                        || (state == "Terminated") ) )
              {
                // done!!
                var print_state = state;
                var isError = false;
                if(ctrl == "Start") {
                  reportFailedLabStart(ctrl, state);
                  errorMsg = "An error occurred while attempting to start your lab, please try reloading the page";
                  isError = true;
                } else {
                  if (state == "None") print_state = "Stopped";
                  errorMsg = 'Your lab is now ' + print_state;
                }
                clabsStateModalSetFinalState(state, errorMsg);
                show_voc_gritter(isError, errorMsg, isError);
                //spinner.hide();
                spinnerHide(printState, spinner);
                if(newContainerLab || (vmlab2 || cnlab)) displayContainerPanelFiller(errorMsg);
                //awslabtimer(''); // end-timer
                if (needIdleTimer)
                {
                  vcIdleTimerCheckerStop();
                }
                //mhui
                $('#endclabspinbox').removeClass('icon-spin icon-spinner');
		            $('#endclabspinbox').addClass('icon-stop');
                expiretime = 0;
                document.getElementById("sessiontimer").innerHTML = "00:00";
                // show the Start Lab
                if (!hideStart)
                {
                  $('#labspinbox').removeClass('icon-spin icon-spinner');
       	          $('#labspinbox').addClass('icon-play');
       	          $('#launchclabsbtn').removeClass('hidden-1');
                }
                if ((appsAllowed || clabsType == 'ct' || hideStop)  && stulabs)
                {
              	  $('#endclabsbtn').addClass('hidden-1');
                }
              }
              else if (ctrl == "Start")
              {
            	  if (state == "Initializing")
                {
            		  clabsStateModalSetFinalState(state, 'Your lab is coming up... ');
            		  //console.log('Pending...');
                }
                if (state == "Ready")
                {
                  // done!!
                  clabsStateModalSetFinalState(state, 'Your lab is now ' + state);
                  show_voc_gritter(false, 'Your lab is now ' + state, false);
                  //spinner.hide();
                  spinnerHide(printState, spinner);
                  vcSetupLabEvents();
                  //mhui
                  if (result['expiretime'] !== undefined)
			            {
			              expiretime = result['expiretime'];
			            }

                  if ((appsAllowed || clabsType == 'ct')  && stulabs && !hideStop)
                  {
                    if (cloudLabStarted && 0)
                    {    
                    	$('#labspinbox').removeClass('icon-spin icon-spinner');
             	        $('#labspinbox').addClass('icon-play');
                	    $('#launchclabsbtn').addClass('hidden-1');
                    }
                	  $('#endclabsbtn').removeClass('hidden-1');
                  }
		            
                  vcSetupPeriodicUiCheck(vcPeriodUiCheckFirstDelay);

		              //mhui: refresh the Vm buttons after start lab
		              //alert('refreshed vmButtons');
		              $('#vmButtons').html(updateVmButtons(result));
		              //updateLabStatusIndicator();

		              //console.log ('allTabs = ' + allTabs);
		              if (allTabs)
		              {
                    vmOpenAllTabs(result);
                    if (appsAllowed && !jupyterelitelab) { launchApp(9); }
		              }
		              else if (!appsAllowed || newContainerLab) 
                  {
                    vmBtnClicked(0, '', 0, (newContainerLab? result : null));
                  }
                  else
                  {
                	  if(!jupyterelitelab && !newContainerLab) launchApp(9); //2
                  }
                  
                  // Starts the periodic container check for the 2022 labs
                  if (periodic_container_timer) clearTimeout(periodic_container_timer);
                  if(newContainerLab || (vmlab2 && newContainerFlow)) periodic_container_timer = setTimeout(periodic_container_check, 30000);
                }
                else if ( (state == "Stopped")
                       || (state == "Terminated") )
                {
                  // something went wrong
                  msg = 'Please re-launch your lab';
                  if (status != "")
                  {
                    msg += ": " + status;
                  }
                  clabsStateModalSetFinalState(state, msg);
                  show_voc_gritter(false, msg, true);
                  //spinner.hide();
                  spinnerHide(printState, spinner);
                  if(newContainerLab  || (vmlab2 || cnlab)) displayContainerPanelFiller(msg);
                  //mhui
                  expiretime = 0;
                  document.getElementById("sessiontimer").innerHTML = "00:00";
                }
                else
                {
                	if (clabsChangeStateTimer) clearTimeout(clabsChangeStateTimer);
                  clabsChangeStateTimer = setTimeout(changeClabsState, timelen, ctrl, printState, spinner, chkCounter + 1);
                }
              }
              else
              {
            	  if (clabsChangeStateTimer) clearTimeout(clabsChangeStateTimer);
                clabsChangeStateTimer = setTimeout(changeClabsState, timelen, ctrl, printState, spinner, chkCounter + 1);
              }
            }
          }
        }
        catch(err)
        {
          console.log("Exception: " + err);
          //clabsStateModalSetMsg('Exception stopping lab: ' + err);
          //clabsStateModalSetMsg('Please login again');
          clabsStateModalSetMsg(data);
          $('#clabsStateModal').modal();
          spinnerHide(printState, spinner);
          if(newContainerLab  || (vmlab2 || cnlab)) displayContainerPanelFiller("Exception: " + err);
        }
        //mhui
        if (timerhandle) {clearTimeout(timerhandle);}
        useGpuTimer = (interactiveEnabled && state == "Ready");
        timercountdown(useGpuTimer);
      })
      .fail(function(data, textStatus, jqXHR)
      {
        clabsStateModalSetMsg("Failed to get lab2 information");
        show_voc_gritter_duration(false, "Failed to get lab2 information", true, DEFAULT_GRITTER_DURATION);
        //spinner.hide();
        //spinnerHide(printState, spinner);
        if (clabsChangeStateTimer) clearTimeout(clabsChangeStateTimer);
        clabsChangeStateTimer = setTimeout(changeClabsState, timelen, ctrl, printState, spinner, chkCounter + 1);
      });
  }
}

function endclabs_confirmed(ischk)
{
  //console.log('endclabs_confirmed()');
  if (true) {
	  // reset filetree and panel
	  $('#labspinbox').removeClass('icon-spin icon-spinner');
    $('#labspinbox').addClass('icon-play');
    //$('#vmp-panel4').css('z-index', '-1');
    DisplayLoadingScreen(0);
	  resetClabPanel();
	  document.getElementById("sessiontimer").innerHTML = "00:00";
	  if (timerhandle) clearTimeout(timerhandle);
	  if (appsAllowed) 
	  {
      stopApp();
	  }

	  if (comboLab)
	  {
		  if (awsIde) {
		    endawslabconfirmed(1);
		  }
      else if (gcpIde) {
        endgcplabconfirmed(1);
      }
		  else {
			  endazurelabconfirmed(1);
		  }
	  }
	  
    // the lab is going to be stopped/terminated - unload the iframe now
    if(!jupyterelitelab) $('#panel2-iframe').attr("src", "");
	  if (clabsChangeStateTimer) clearTimeout(clabsChangeStateTimer);
    clabsChangeStateTimer = changeClabsState("Stop", 'Shutting down', $('#endclabspinbox'), ischk);
  }
  else {
    endclabs_confirmed_1(ischk);
  }
  
}

var endclabshandle = null;
function endclabs_confirmed_1(ischk) {
  //console.log('endclabs_confirmed_1()');
  clearTimeout(endclabshandle);
  if (! ischk)
  {
	   //$('#endclabspinbox').show();
	   $('#endclabspinbox').removeClass('icon-stop');
	   $('#endclabspinbox').addClass('icon-spin icon-spinner');
  }

  $.ajax({
    url: "../util/vcput.php?a=" + (ischk? 'stateclabs' : 'endclabs') + "&stepid=2792000&version=0&labworkdir=/home/nowhere",
  })
   .done(function(ret_val) {
     //console.log(ret_val);

     try {
       var result = JSON.parse(ret_val);
       if (!ischk) {
         if (result['status'] != 'success') {
           //$('#endclabspinbox').hide();
           $('#endclabspinbox').removeClass('icon-spin icon-spinner');
	         $('#endclabspinbox').addClass('icon-stop');
           var target = document.getElementById("report_clabs_msg_box");
           target.innerHTML = '<br>Failed to end your lab. If the problem persists, please report to support@vocareum.com for assistance.';
           $('#modal-table-report-clabs').appendTo("#vmp-idebox");
           $('#modal-table-report-clabs').modal('show');
         }
         else {
           clabshandle = setTimeout(function() { endclabs_confirmed(1); }, 1000);
           //mhui
           expiretime = 0;
           if (timerhandle) {clearTimeout(timerhandle);}
	         timercountdown();
         }
       } else {
         if (   (result['state'] == "None")
             || (result['state'] == "Stopped")
             || (result['state'] == "Terminated") ) {
           //$('#endclabspinbox').hide();
           $('#endclabspinbox').removeClass('icon-spin icon-spinner');
	         $('#endclabspinbox').addClass('icon-stop');
           var target = document.getElementById("report_clabs_msg_box");
           target.innerHTML = '<br>Your lab has been stopped.';
           $('#modal-table-report-clabs').appendTo("#vmp-idebox");
           $('#modal-table-report-clabs').modal('show');
           //awslabtimer(''); // end-timer
           //mhui
           expiretime = 0;
           if (timerhandle) {clearTimeout(timerhandle);}
	         timercountdown();
         } else {
           clabshandle = setTimeout(function() { endclabs_confirmed(1); }, 1000);
         }
       }
     }
     catch(err) {
       //$('#endclabspinbox').hide();
       $('#endclabspinbox').removeClass('icon-spin icon-spinner');
	     $('#endclabspinbox').addClass('icon-stop');
       var target = document.getElementById("report_clabs_msg_box");
       target.innerHTML = '<br>Exception stopping lab: ' + err;
       $('#modal-table-report-clabs').appendTo("#vmp-idebox");
       $('#modal-table-report-clabs').modal('show');
     }
   })
   .fail(function(ret_val) {
     //$('#endclabspinbox').hide();
     $('#endclabspinbox').removeClass('icon-spin icon-spinner');
	   $('#endclabspinbox').addClass('icon-stop');
     var target = document.getElementById("report_clabs_msg_box");
     target.innerHTML = '<br>Failed to end Lab.';
     $('#modal-table-report-clabs').appendTo("#vmp-idebox");
     $('#modal-table-report-clabs').modal('show');
   });
}

function endclabs_question(str){
    bootbox.dialog(str,
         [
           {
             "label" : "Yes",
             "class" : "btn vocbtn-ac vocbtn-action",
             "callback": function() {
            	 //$('#endclabspinbox').removeClass('icon-spin icon-spinner');
               //$('#endclabspinbox').addClass('icon-stop');
               var el = document.getElementById('vmBtn'+vm_indx_current);
               if (typeof(el) != 'undefined' && el != null)
               {
                 el.style.borderTop = "0px solid rgb(0,109,204)";
               }
               /*
               var cdm = document.getElementById('vmBtnCdm');
               var hue = document.getElementById('vmBtnHue');
               if (typeof(cdm) != 'undefined' && cdm != null) {
                 document.getElementById('vmBtnCdm').style.display = "none";
               }
               if (typeof(hue) != 'undefined' && hue != null) {
                 document.getElementById('vmBtnHue').style.display = "none";
               }
               */
               endclabs_confirmed(0);
               
             }
           },
           {
             "label" : "No",
             "class" : "btn vocbtn-ac vocbtn-status",
             "callback": function() {
               //$('#endclabspinbox').hide();
            	 $('#endclabspinbox').removeClass('icon-spin icon-spinner');
               $('#endclabspinbox').addClass('icon-stop');
             }
           }
         ]);
}
  
function endclabs_note(str){
    //console.log("endclabs_note()");
    bootbox.dialog(str,
         [
           {
             "label" : "Close",
             "class" : "btn vocbtn-ac vocbtn-action",
             "callback": function() {
               //$('#endclabspinbox').hide();
            	 $('#endclabspinbox').removeClass('icon-spin icon-spinner');
               $('#endclabspinbox').addClass('icon-stop');
             }
           }
         ]);
}
  
function launchclabs_note(str){
    bootbox.dialog(str,
         [
           {
             "label" : "Close",
             "class" : "btn vocbtn-ac vocbtn-action",
             "callback": function() {
               //$('#labspinbox').hide();
            	 $('#labspinbox').removeClass('icon-spin icon-spinner');
               $('#labspinbox').addClass('icon-play');
               //$('#vmp-panel4').css('z-index', '-1');
               DisplayLoadingScreen(0);
             }
           }
         ]);
}

function extendclabs_note(str){
    bootbox.dialog(str,
         [
           {
             "label" : "Close",
             "class" : "btn vocbtn-ac vocbtn-action",
             "callback": function() {
            	 $('#extendclabspinbox').removeClass('icon-spin icon-spinner');
               $('#extendclabspinbox').addClass('icon-plus');
             }
           }
         ]);
}
  
function launchclabs_question(str){
    bootbox.dialog(str,
         [
           {
             "label" : "Yes",
             "class" : "btn vocbtn-ac vocbtn-action",
             "callback": function() {
            	 $('#labspinbox').removeClass('icon-spin icon-spinner');
               $('#labspinbox').addClass('icon-play');
               //$('#vmp-panel4').css('z-index', '-1');
               DisplayLoadingScreen(0);
               launchclabs_confirmed(0);
             }
           },
           {
             "label" : "No",
             "class" : "btn vocbtn-ac vocbtn-status",
             "callback": function() {
               //$('#labspinbox').hide();
            	 $('#labspinbox').removeClass('icon-spin icon-spinner');
               $('#labspinbox').addClass('icon-play');
               //$('#vmp-panel4').css('z-index', '-1');
               DisplayLoadingScreen(0);
             }
           }
         ]);
}
  
function endclabs(){
    
    if ($('#labspinbox').hasClass('icon-spin'))
    {
    	show_voc_gritter(false, "Please wait for lab to Start completely before attempting to end completely", false);
    	return;
    }
    
	  if ($('#endclabspinbox').hasClass('icon-spin'))
    {
    	show_voc_gritter(false, "Ending lab...", false);
    	return;
    }
	    
    $('#endclabspinbox').removeClass('icon-stop');
    $('#endclabspinbox').addClass('icon-spin icon-spinner');
    
    //$('#labspinbox').removeClass('icon-spin icon-spinner');
    //$('#labspinbox').addClass('icon-play');
    
    $.ajax({
        url: "../util/vcput.php?a=getclabs&stepid=2792000&version=0&labworkdir=/home/nowhere",
     })
     .done(function(ret_val) {
    	   //$('#endclabspinbox').removeClass('icon-spin icon-spinner');
         //$('#endclabspinbox').addClass('icon-stop');
         if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
			     window.location.reload();
			     return;
		     }
         var resp;
         var target = document.getElementById("report_clabs_msg_box");
         try {
           resp = jQuery.parseJSON(ret_val);
           if( resp.status=='Ready' || resp.status=='stopped' || 
               resp.status=='in creation' ||
               resp.status=='ROLLBACK_COMPLETE' || resp.status=='initializing' || resp.status=='Failed'){
             //endclabs_question('Are you sure you want to end the following? <br><br>' + resp.message + '<br>');
             endclabs_question('Are you sure you want to end the lab? <br><br><br>');
           } else {
             endclabs_note('Your lab has not started yet.');
             $('#endclabspinbox').removeClass('icon-spin icon-spinner');
             $('#endclabspinbox').addClass('icon-stop');
           }
         } catch(err) {
           endclabs_note('Your lab has not started yet.');
           $('#endclabspinbox').removeClass('icon-spin icon-spinner');
           $('#endclabspinbox').addClass('icon-stop');
         }
      })
     .fail(function(ret_val) {
       alert('failed to retrieve Labs credentials, report this problem to support@vocareum.com if the problem persists.');
       //$('#labspinbox').hide();
       $('#endclabspinbox').removeClass('icon-spin icon-spinner');
       $('#endclabspinbox').addClass('icon-stop');
     });
}

var batchScriptTimeout;
var batchJobStatus = null;
var batchJobPosition = null;

function openBatchModal() {
  if (true) {
    show_voc_gritter(true, 'Error: batch execution is disabled', true);
    return;
  }

  $('#batchModal').modal('show');
  $('.batchSpinner').removeClass('hidden');

  $.ajax({
    url: '../util/vcput.php',
    type: 'GET',
    data: {
      a: 'getBatchFiles',
      partid: 2792000,
      userid: 3209731    }
  })
  .done(function(ret_val) {
    if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) {  // Invalid session
      window.location.reload();
      return;
    }
    try {
      var resp = jQuery.parseJSON(ret_val);
      var selectedFile = $("#batchFileSelect").val();

      if (resp.status === 'Error') {
        $('.batchSpinner').addClass('hidden');
        $('.gritter-close').click();
        show_voc_gritter(true, resp.msg, true);
      } else {
        files = resp.files;
        $("#batchFileSelect").empty();

        for (const file of files) {
          fileName = file.split('\\').pop().split('/').pop();
          if (selectedFile === file) {
            $("#batchFileSelect").append('<option value=' + file + ' selected>' + fileName + '</option>');
          } else {
            $("#batchFileSelect").append('<option value=' + file + '>' + fileName + '</option>');
          }
        }
        $('.batchSpinner').addClass('hidden');
      }
    } catch (err) {
      show_voc_gritter(true, err.message, true);
    }
  })
  .fail(function(ret_val) {});
}

function runBatchSelected() {
  $('#batchModal').modal('hide');
  filepath = $('#batchFileSelect').val();
  runBatchJob(filepath);
}

function runBatchJob(filepath) {
  if (true) {
    show_voc_gritter(true, 'Error: batch execution is disabled', true);
    return;
  }
  
  if (batchScriptTimeout) clearTimeout(batchScriptTimeout);
  updateBatchActionsButton('cancel');
  $('.gritter-close').click();
  show_voc_gritter(false, 'Adding job into queue...', false);
  
  // Set up batch script contents
  filepath = filepath.replace(/ /g, '\\ ');  // If there are spaces in the filepath we must escape them
  var extension = filepath.split('.').pop();
  var tzOffset = (new Date()).getTimezoneOffset() * 60000;
  var isoDate = (new Date(Date.now() - tzOffset)).toISOString().match(/(\d{2}\-\d{2}\-\d{2})T(\d{2}:\d{2}:\d{2})/);
  var outputDir = `Batch Executions/${isoDate[1]} ${isoDate[2]}`;
  if (extension === 'ipynb') {
    var batchScript = `python3 /usr/local/vocareum/scripts/voc_jupyter_batch.py -f ${filepath} -o "${outputDir}"`;
  } else if (extension === 'sh') {
    var batchScript = `/bin/bash ${filepath}`;
  } else {
    show_voc_gritter(true, 'Invalid file, must be of either type .ipynb or .sh', true);
    return;
  }
  
  $.ajax({
    url: '../util/vcput.php',
    type: 'POST',
    data: {
      a: 'runBatchJob',
      partid: 2792000,
      userid: 3209731,
      batchScript: batchScript,
      outputDir: outputDir
    }
  })
  .done(function(ret_val) {
    if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) {  // Invalid session
      window.location.reload();
      return;
    }
    try {
      var resp = jQuery.parseJSON(ret_val);
      if (resp.status == 'Error') {
        $('.gritter-close').click();
        show_voc_gritter(true, resp.msg, true);
        if (resp.msg == 'The previous job has not yet finished') {
          batchScriptTimeout = setTimeout(getBatchJobStatus, 3000, true, true);
        } else {
          updateBatchActionsButton('run');
          // No need to do anything else as the job should not have been scheduled
        }
      } else {
        getBatchJobStatus(true, true);
      }
    } catch (err) {
      updateBatchActionsButton('run');
      show_voc_gritter(true, err.message, true);
    }
  })
  .fail(function(ret_val) {});
}

function cancelBatchJob() {
  if (true) {
    show_voc_gritter(true, 'Error: batch execution is disabled', true);
    return;
  }

  if (batchScriptTimeout) clearTimeout(batchScriptTimeout);
  updateBatchActionsButton('cancelling');
  
  $.ajax({
    url: '../util/vcput.php',
    type: 'POST',
    data: {
      a: 'cancelBatchJob',
      partid: 2792000,
      userid: 3209731    },
  })
  .done(function(ret_val) {
    if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) {  // Invalid session
      window.location.reload();
      return;
    }
    try {
      var resp = jQuery.parseJSON(ret_val);
      if (resp.status === 'Error') {
        $('.gritter-close').click();
        show_voc_gritter(true, resp.msg, true);
      }
      batchScriptTimeout = setTimeout(getBatchJobStatus, 1500, false, true);
      // No need to do anything else here as the UI will be handled by getBatchJobStatus()
    } catch (err) {
      updateBatchActionsButton('run');
      show_voc_gritter(true, err.message, true);
    }
  })
  .fail(function(ret_val) {
    updateBatchActionsButton('run');
    show_voc_gritter(true, "Error cancelling job", true);
  });
}

// Adds/updates Batch Job Status Indicator 
function updateBatchClusterStatus(clusterStatus) {
  var ledStatus;
  switch (clusterStatus) {
    case 'Online':
      ledStatus = 'led-green';
      break;
    case 'Launching':
      ledStatus = 'led-yellow';
      break;
    case 'Offline':
      ledStatus = 'led-red';
      break;
    case 'Disabled':
    default:
      ledStatus = 'led';
  }
  
  if ($('#batchClusterStatus').length == 0) {
    var str = '<span id="batchClusterStatus" class="vmp-idebutton-left" tabindex="0" role="button" aria-label="Batch Cluster Status: ' + clusterStatus + '" style="border: 0px;"';
    str += 'data-toggle="tooltip" title="Batch Cluster Status '+clusterStatus+'">';
    str += "Batch Cluster" ;
    str += '<i class="led '+ledStatus+'" id="batchClusterStatusIndicator" role="status" aria-label="Batch Cluster Status: '+clusterStatus+'"></i>';
    str += '</span>';
    
    var vmButtons = document.getElementById('vmButtons');
    vmButtons.insertAdjacentHTML(
      'beforeend',
      str
    );
  } else {
    // if status indicator doesn't match, update it
    if (!$('#batchClusterStatusIndicator').hasClass(ledStatus)) {
      $('#batchClusterStatusIndicator').removeClass('led-green led-yellow led-red').addClass(ledStatus);
    }
  }
}

function updateBatchActionsButton(action) {
  switch (action) {
    case 'cancel':
      if (vocNotebookIde) {
        for (const filePath in vocFileViewer.openedFiles) {
          if (vocFileViewer.openedFiles[filePath].statusBar) {
            vocFileViewer.openedFiles[filePath].statusBar.statusBatchJobBtn.hide();
            vocFileViewer.openedFiles[filePath].statusBar.runBatchJobBtn.hide();
            vocFileViewer.openedFiles[filePath].statusBar.cancelBatchJobBtn.show();
            vocFileViewer.openedFiles[filePath].statusBar.cancellingBatchJobBtn.hide();
          }
        }
      } else {
        $('#btn-batchActions').html('<i class="icon-ban-circle"></i>&nbsp Cancel Batch Job');
        $('#btn-batchActions').attr('onclick', 'cancelBatchJob()');
      }
      break;
    case 'cancelling':
      if (vocNotebookIde) {
        for (const filePath in vocFileViewer.openedFiles) {
          if (vocFileViewer.openedFiles[filePath].statusBar) {
            vocFileViewer.openedFiles[filePath].statusBar.statusBatchJobBtn.hide();
            vocFileViewer.openedFiles[filePath].statusBar.runBatchJobBtn.hide();
            vocFileViewer.openedFiles[filePath].statusBar.cancelBatchJobBtn.hide();
            vocFileViewer.openedFiles[filePath].statusBar.cancellingBatchJobBtn.show();
          }
        }
      } else {
        $('#btn-batchActions').html('<i class="icon-spin icon-spinner"></i>&nbsp Cancelling Job');
        $('#btn-batchActions').attr('onclick', '');
      }
      break;
    case 'run':
    default:
      if (vocNotebookIde) {
          for (const filePath in vocFileViewer.openedFiles) {
            if (vocFileViewer.openedFiles[filePath].statusBar) {
              vocFileViewer.openedFiles[filePath].statusBar.statusBatchJobBtn.hide();
              vocFileViewer.openedFiles[filePath].statusBar.runBatchJobBtn.show();
              vocFileViewer.openedFiles[filePath].statusBar.cancelBatchJobBtn.hide();
              vocFileViewer.openedFiles[filePath].statusBar.cancellingBatchJobBtn.hide();
            }
          }
      } else {
        $('#btn-batchActions').html('<i class="icon-play"></i>&nbsp Run Batch Job');
        $('#btn-batchActions').attr('onclick', 'openBatchModal()');
      }
  }
}

// This function handles all the UI elements for batch jobs (cluster status indicator, action button, gritter notifications)
// It will recursively call itself until an "end state" where no more UI changes are antipated is reached
// This function also handles updating GPU/OpenAI budget values when appropriate
function getBatchJobStatus(showRunning = false, showCompleted = false) {
  if (true) {
    show_voc_gritter(true, 'Error: batch execution is disabled', true);
    return;
  }
  
  $.ajax({
      url: '../util/vcput.php',
      type: 'GET',
      data: {
        a: 'getBatchJobStatus',
        partid: 2792000,
        userid: 3209731      },
      timeout: 15000
  })
  .done(function(ret_val) {
    if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) {  // Invalid session
      window.location.reload();
      return;
    }
    try {
      updateBudgetValues('gpu');
      var resp = jQuery.parseJSON(ret_val);
      if (resp.status === 'Error') {
        batchJobStatus = 'Completed';
        updateBatchActionsButton('run');
        show_voc_gritter(true, resp.msg, true);

        if (vocNotebookIde) {
          // Updates the status indicator to indicate latest batch job status
          Object.entries(vocFileViewer.openedFiles).forEach(([key, openedFile]) => {
            if (openedFile && (openedFile.statusBar ?? false) && openedFile.statusBar.batchJobTriggered) openedFile.statusBar.updateTextStatusIndicator(" Batch job error - " + resp.msg);
          });
        }
        if (batchScriptTimeout) clearTimeout(batchScriptTimeout);
      } else {
        batchJobStatus = resp.job_status;
        updateBatchClusterStatus(resp.cluster_status);
        
        if (vocNotebookIde) {
          // Updates the status indicator to indicate latest batch job status
          Object.entries(vocFileViewer.openedFiles).forEach(([key, openedFile]) => {
            if (openedFile && (openedFile.statusBar ?? false) && openedFile.statusBar.batchJobTriggered) {
              var statusIcon = (resp.job_status == 'Queued' || resp.job_status == 'Picked' || resp.job_status == 'Running') ? '<i class="icon-spin icon-spinner"></i>' : '';
              openedFile.statusBar.updateTextStatusIndicator(statusIcon + " Batch job - " + resp.job_status);
            }
          });
        }
        
        switch (resp.job_status) {
          case 'Completed':
          case 'Cancelled':
            updateBatchActionsButton('run');
            // Don't show the latest job's status on page load if job is in a "completed-like" state
            if (showCompleted) {
              $('.gritter-close').click();
              if (typeof resp.msg !== 'undefined') {  // Right now we only have a message with the completed state if the job times out
                show_voc_gritter(true, resp.msg, true);
              } else {
                show_voc_gritter(true, (vocNotebookIde ? 'Training' : 'Batch job') + ' successfully ' + resp.job_status.toLowerCase(), false);
              }
              if (vocNotebookIde) {
                refreshFileTreeIde(false, true);
              }
            }
            if (batchScriptTimeout) clearTimeout(batchScriptTimeout);
            break;
          case 'Queued':
          case 'Picked':
            updateBatchActionsButton('cancel');
            // Update job position gritter whenever position changes
            if (resp.cluster_status === 'Launching') {
              $('.gritter-close').click();
              show_voc_gritter(false, 'Server is being launched', false);
            } else if (typeof resp.job_position !== 'undefined' && resp.job_position != batchJobPosition) {
              batchJobPosition = resp.job_position
              $('.gritter-close').click();
              show_voc_gritter(false, 'Job position in queue: ' + resp.job_position, false);
            }
            if (batchScriptTimeout) clearTimeout(batchScriptTimeout);
            batchScriptTimeout = setTimeout(getBatchJobStatus, 3000, true, true);
            break;
          case 'Running':
            updateBatchActionsButton('cancel');
            // Only show the running message once for VNB (showRunning should be true during init->picked states)
            if (showRunning) {
              $('.gritter-close').click();
              show_voc_gritter(false, 'Job is currently ' + resp.job_status.toLowerCase(), false);
            }
            if (batchScriptTimeout) clearTimeout(batchScriptTimeout);
            batchScriptTimeout = setTimeout(getBatchJobStatus, 3000, (vocNotebookIde ? false : true), true);
            break;
          case 'Error':
            updateBatchActionsButton('run');
            if (showCompleted) show_voc_gritter(true, resp.msg, true); 
            if (batchScriptTimeout) clearTimeout(batchScriptTimeout);
            break;
          case 'Server not found':
            updateBatchActionsButton('run');
            show_voc_gritter(true, 'Batch server not found', true);
            if (batchScriptTimeout) clearTimeout(batchScriptTimeout);
            break;
          default:
            updateBatchActionsButton('run');
            show_voc_gritter(true, 'Job status not found', true);
        }
        
        // If server is launching when user enters IDE keep making status checks until it is deployed
        if (resp.cluster_status === 'Launching') {
          if (batchScriptTimeout) clearTimeout(batchScriptTimeout);
          batchScriptTimeout = setTimeout(getBatchJobStatus, 3000);
        } else if (resp.cluster_status === 'Disabled') {
          show_voc_gritter(true, 'NOTICE: Batch servers for this assignment are currently offline', true);
          if (batchScriptTimeout) clearTimeout(batchScriptTimeout);
        }
      }
    } catch (err) {
      show_voc_gritter(true, err.message, true);
    }
  })
  .fail(function(ret_val, textStatus) {
    if (textStatus === 'timeout') {
      $('.gritter-close').click();
      show_voc_gritter(false, 'Retrying getting job status after timeout. If the problem persists please check your internet connection', true);
      if (batchScriptTimeout) clearTimeout(batchScriptTimeout);
      batchScriptTimeout = setTimeout(getBatchJobStatus, 3000);
    }
  });
}

function getOtherBudget(type) {
  return $.post({
    url: '../vnb/vnb_api.php',
    data: {
      f: 'getOtherBudget',
      type: type,
      partid: 2792000,
      userid: 3209731    }
  });
}

function getTimeStringFromSeconds(seconds, shorthand) {
  // If a minute or less, return seconds
  if (seconds <= 60) {
    if (shorthand) return seconds + ' s';
    else           return seconds + ' seconds';
  }
  // If an hour or less, return minutes
  else if (seconds <= 3600) {
    minutes = (seconds / 60).toFixed(1);
    if (minutes.slice(-2) === ".0") minutes = minutes.slice(0, -2);
    if (shorthand) return minutes + ' m';
    else           return minutes + ' minutes';
  }
  // Otherwise, return hours
  else {
    hours = (seconds / 3600).toFixed(1);
    if (hours.slice(-2) === ".0") hours = hours.slice(0, -2);
    if (shorthand) return hours + ' h';
    else           return hours + ' hours';
  }
}

function getTimerFromSeconds(seconds) {
  let hours = Math.floor(seconds / 3600);
  let minutes = Math.floor((seconds / 60) % 60);
  seconds = seconds % 60;

  hours = hours < 10 ? '0' + hours : hours;
  minutes = minutes < 10 ? '0' + minutes : minutes;
  seconds = seconds < 10 ? '0' + seconds : seconds;
  
  if (hours === '00') {
    return `${minutes}:${seconds}`;
  } else {
    return `${hours}:${minutes}`;
  }
}

// This function updates Vocareum Notebook UI budget elements to up-to-date values
function updateBudgetValues(type) {
  getOtherBudget(type)
    .done(function(data) {
      if (data.indexOf('<ERROR:INVALID_SESSION>') !== -1) {
        window.location.reload();
        return;
      }
      try {
        let resp = jQuery.parseJSON(data);
        if (resp.status === 'Error') {
          show_voc_gritter(true, resp.msg, true);
        }
        if (type === 'gpu') {
          let interactiveNavString = getTimeStringFromSeconds(resp.details.interactive.remaining, true);
          let interactiveUsedString = getTimeStringFromSeconds(resp.details.interactive.used, false);
          let interactiveTotalString = getTimeStringFromSeconds(resp.details.interactive.total, false);
          let interactiveRemainingString = getTimeStringFromSeconds(resp.details.interactive.remaining, false);
          let interactiveTimerString = getTimerFromSeconds(resp.details.interactive.remaining);
          let batchNavString = getTimeStringFromSeconds(resp.details.batch.remaining, true);
          let batchUsedString = getTimeStringFromSeconds(resp.details.batch.used, false);
          let batchTotalString = getTimeStringFromSeconds(resp.details.batch.total, false);
          let batchRemainingString = getTimeStringFromSeconds(resp.details.batch.remaining, false);
          $('#interactiveNav').text(interactiveNavString);
          $('#interactiveUsed').text(interactiveUsedString);
          $('#interactiveTotal').text(interactiveTotalString);
          $('#interactiveRemaining').text(interactiveRemainingString);
          $('#batchNav').text(batchNavString);
          $('#batchUsed').text(batchUsedString);
          $('#batchTotal').text(batchTotalString);
          $('#batchRemaining').text(batchRemainingString);

          if (!gpuTimerHandle) {
            $('#gpuTimer').text(interactiveTimerString);
          }
        } else if (type === 'genai') {
          let openaiNavString = '$' + Number(resp.details.openai.remaining).toFixed(2);
          let openaiUsedString = '$' + Number(resp.details.openai.used).toFixed(4);
          let openaiTotalString = '$' + Number(resp.details.openai.total).toFixed(4);
          let openaiRemainingString = '$' + Number(resp.details.openai.remaining).toFixed(4);
          $('#openaiNav').text(openaiNavString);
          $('#openaiUsed').text(openaiUsedString);
          $('#openaiTotal').text(openaiTotalString);
          $('#openaiRemaining').text(openaiRemainingString);
        }
      } catch (err) {
        show_voc_gritter(true, err.message, true);
      }
    })
    .fail(function(data) {});
}

function extendLabs() {
  if(comboLab || vmlab2 || cnlab) {
    extendclabs();
  }
  else if ((awsIde || azureIde || gcpIde) && !vmlab2 && !cnlab) {
    extendcloudlab();
  }
  
}

function extendclabs()
{
	if ($('#extendclabspinbox').hasClass('icon-spin'))
  {
  	show_voc_gritter(false, "Extending lab...", false);
  	return;
  }
	    
  $('#extendclabspinbox').removeClass('icon-plus');
  $('#extendclabspinbox').addClass('icon-spin icon-spinner');
  
  $.ajax({
      url: "../util/vcput.php?a=getclabs&stepid=2792000&version=0&labworkdir=/home/nowhere",
   })
   .done(function(ret_val) {

       if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
			     window.location.reload();
			     return;
		     }
       var resp;
       try {
         resp = jQuery.parseJSON(ret_val);
         if( resp.status=='Ready')
         {
           extendclabs_ready();
           if (comboLab)
           {
        	   extendcloudlab();
           }
         }
         else 
         {
           extendclabs_note('Your lab has not ready yet.');
           //$('#extendclabspinbox').removeClass('icon-spin icon-spinner');
           //$('#extendclabspinbox').addClass('icon-plus');
         }
       } catch(err) {
    	   extendclabs_note('Your lab has not started yet.');
         //$('#endclabspinbox').removeClass('icon-spin icon-spinner');
         //$('#endclabspinbox').addClass('icon-plus');
       }
    })
   .fail(function(ret_val) {
	   extendclabs_note('Unknown error.');
     //$('#endclabspinbox').removeClass('icon-spin icon-spinner');
     //$('#endclabspinbox').addClass('icon-plus');
   });
}

function extendclabs_ready()
{
  $.ajax({
      url: "../util/vcput.php?a=extendclabs&stepid=2792000&version=0&labworkdir=/home/nowhere",
   })
   .done(function(ret_val) {

       if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
			     window.location.reload();
			     return;
		     }
       var resp;
       try {
         resp = jQuery.parseJSON(ret_val);
         if (resp.status == 'success')
         {
        	 show_voc_gritter(false, "Lab extended", false);
        	 if (resp.expiretime !== undefined)
	         {
	           expiretime = resp.expiretime;
	           if (timerhandle) clearTimeout(timerhandle);
	           timercountdown();
	         }
        	 $('#extendclabspinbox').removeClass('icon-spin icon-spinner');
           $('#extendclabspinbox').addClass('icon-plus');
         }
         else 
         {
           extendclabs_note(resp.message);
         }
       } catch(err) {
    	   extendclabs_note('Failed to extend lab.');
       }
    })
   .fail(function(ret_val) {
	   extendclabs_note('Unknown error.');
   });
}

function extendcloudlab()
{
	var url;

	if (awsIde) {
		url = "../util/vcput.php?a=extendaws&stepid=2792000&version=0&type=1";
		// not available now
		return;
	}
  else {
		url = "../util/vcput.php?a=extendazure&stepid=2792000&version=0&type=1";
  }
  
  
  if(!comboLab && (awsIde || azureIde || gcpIde)) {
    $('#extendclabspinbox').addClass('icon-spin icon-spinner').removeClass('icon-plus');
  }
	  
	  
  $.ajax({
      url: url
   })
   .done(function(ret_val) {

       if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
			     window.location.reload();
			     return;
		     }
       var resp;
       try {
         resp = jQuery.parseJSON(ret_val);
         if (resp.status == 'Ok')
         {
           if(Array.isArray(resp.data)) resp = resp.data[0];
           
        	 show_voc_gritter(false, "Cloud Lab extended", false);
        	 if (/*resp.expiretime*/resp.data.user.session_expiration_time !== undefined && !comboLab)
	         {
	           expiretime = resp.data.user.session_expiration_time;
	           if (timerhandle) clearTimeout(timerhandle);
	           timercountdown();
	         }
        	 $('#extendclabspinbox').removeClass('icon-spin icon-spinner');
           $('#extendclabspinbox').addClass('icon-plus');
         }
         else 
         {
        	 if (resp.msg !== undefined && !comboLab)
	         {
             extendclabs_note(resp.msg);
	         }
         }
       } catch(err) {
    	   extendclabs_note('Failed to extend cloud lab.');
       }
    })
   .fail(function(ret_val) {
	   extendclabs_note('Error: Failed to extend cloud lab.');
   });
}


function launchclabs(){
    //console.log('launchclabs()');
    // If no work area is on, don't lauch clabs (unless vmlab2)
    if((noworkarea && !vmlab2) || (newLabNoContainer)) {
      return;
    }
  
    //$('#labspinbox').show();
    if ($('#endclabspinbox').hasClass('icon-spin'))
    {
    	show_voc_gritter(false, "Please wait for lab to end completely", false);
    	return;
    }
    
    $('#labspinbox').removeClass('icon-play');
    $('#labspinbox').addClass('icon-spin icon-spinner');
    //$('#vmp-panel4').css('z-index', '100');
    DisplayLoadingScreen(1);
    var infourl = (newContainerLab)? "../util/vcprojapi.php?t=vcGetLabInfoNew&stepid=2792000&version=0&labworkdir=/home/nowhere" : "../util/vcput.php?a=vcGetLabInfo&stepid=2792000&version=0&labworkdir=/home/nowhere&graderide=0";
    $.ajax({
        //url: "../util/vcput.php?a=getclabs&stepid=2792000&version=0&labworkdir=/home/nowhere",
        url: infourl,//"../util/vcprojapi.php?t=vcGetLabInfoNew&stepid=2792000&version=0&labworkdir=/home/nowhere",
     })
     .done(function(ret_val) {
    	   if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
    		   window.location.reload();
    		   return;
	       }
         var resp;
         var target = document.getElementById("report_clabs_msg_box");
         try {
           resp = jQuery.parseJSON(ret_val);
           resp.status = resp.lab_state;
           
           // If 2022 Labs is detected, it check the status of the lab - which was started within the PHP code
           if( resp.status=='Ready' ){
             if (true) {
               
               // If lab is a 2022 lab and is ready, load container into iframe
               if(newContainerLab) {
                 vmBtnClicked(0,'',0, resp);
                 
                 //$('#labspinbox').removeClass('icon-spin icon-spinner');
                 $('#labspinbox').removeClass('icon-spin icon-spinner').addClass('icon-play');
            	   DisplayLoadingScreen(0);
            	   
            	   // Updates the VM Buttons using the lab info fetched
                 $('#vmButtons').html(updateVmButtons(resp));
                 
                 if (periodic_container_timer) clearTimeout(periodic_container_timer);
                 if(newContainerLab || (vmlab2 && newContainerFlow)) periodic_container_timer = setTimeout(periodic_container_check, 30000);

                // if new contaier lab has cloud resources, attempt to start them (if lab start was manually initiated)
                if (comboLab && manualLabStartFlag) startCloudResources(0);

                if (!comboLab) updateLabStatusIndicator(); 
               } else {
                 launchclabs_confirmed(1);
               }
             } else {
               launchclabs_question('Are you sure you want to launch a new lab? When you launch a new lab, the earlier one shown below will be terminated and its content will be deleted completely.<br><br>' + resp.message + '<br>');
             }
	           //mhui: display time timer
	           if (resp.expiretime !== undefined)
	           {
	             expiretime = resp.expiretime;
	             if (timerhandle) clearTimeout(timerhandle);
	             timercountdown();
	           }
           } else if (resp.status=='Starting') {
             launchclabs_confirmed(1);
           } else {
             launchclabs_confirmed(0);
           }
         } catch(err) {
           launchclabs_confirmed(0); 
         }
         //$('#labspinbox').removeClass('icon-spin icon-spinner');
         //$('#labspinbox').addClass('icon-play');
      })
     .fail(function(ret_val) {
       alert('failed to retrieve Labs credentials, report this problem to support@vocareum.com if the problem persists.');
       //$('#labspinbox').hide();
       $('#labspinbox').removeClass('icon-spin icon-spinner');
       $('#labspinbox').addClass('icon-play');
       //$('#vmp-panel4').css('z-index', '-1');
       DisplayLoadingScreen(0);
     });
}

// set the cookie for the web stuff
var str;
if (false)
{
  str = "domain_latestWebProxy" + "=" + "https://proxy.vocareum.com/hostip//vocproxy/" + "; path=/" + "; domain=vocareum.com; SameSite=None; secure";
}
// else
// {
//   str = "domain_latestWebProxy" + "=" + "expired" + "; path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT" + "; domain=vocareum.com";
// }
document.cookie = str;
	  
function vocWebSocket() {
    // should we have our own class and wait for server connection?
    var url = "wss://proxy.vocareum.com";
    var ws = new WebSocket(url + "/xfer/" + "" + "/client");
    // var ws = new WebSocket("ws://jag.vocareum.com:8088/xfer/" + "" + "/client");
    return ws;
}

function vocWebSocketUrl() {
    var baseUrl = "wss://proxy.vocareum.com";
    var fullUrl = baseUrl + "/xfer/" + "" + "/client";
    return fullUrl;
}

function vocProxyShowErrMsg(msg) {
    bootbox.dialog(msg, 
                   [{
                     "label" : "Ok",
                     "class" : "btn vocbtn-ac vocbtn-action",
                    }]
    );
}
	  
function vocProxyGetWsUrl() {
    url = "wss://proxy.vocareum.com/hostip//vocproxy/";
    //console.log("Proxy URL: " + url);
    return url;
}

function vocProxyWebSocket() {
    if (true)
    {
      vocProxyShowErrMsg("Error: proxy setup failed.<br><br>If a page reload does not resolve it, please contact Vocareum Technical Support");
      return null;
    }
    var url = vocProxyGetWsUrl();
    var ws = new WebSocket(url);
    // Note: this error callback may be overridden by calling code
    //       in that case, it is up to that code to handle the error appropriately
    ws.onerror = function() {
      vocProxyShowErrMsg("Error: WebSocket connection closed due to error - is your WebSocket server running?<br><br>If it is running (and listening on the correct port) and a page reload does not resolve it, please contact Vocareum Technical Support");
    };
    return ws;
}

function vocProxyWebSocketUrl() {
    if (true)
    {
      vocProxyShowErrMsg("Error: proxy setup failed.<br><br>If a page reload does not resolve it, please contact Vocareum Technical Support");
      return null;
    }
    return vocProxyGetWsUrl();
}

function vocProxyWebUrl() {
    if (true)
    {
      vocProxyShowErrMsg("Error: proxy setup failed.<br><br>If a page reload does not resolve it, please contact Vocareum Technical Support");
      return null;
    }
    url = "https://proxy.vocareum.com/hostip//vocproxy/";
    //console.log("Proxy URL: " + url);
    return url;
}

function vocCommShowErrMsg(msg) {
    vocProxyShowErrMsg(msg);
}

function vocCommGetWsUrl() {
    url = "wss://proxy.vocareum.com/hostip//voccomm/";
    //console.log("Proxy URL: " + url);
    return url;
}

function vocCommWebSocket(type) {
    if (true)
    {
      vocCommShowErrMsg("Error: comm channel setup failed.<br><br>If a page reload does not resolve it, please contact Vocareum Technical Support");
      return null;
    }
    var url = vocCommGetWsUrl();
    var ws = new WebSocket(url + "/" + type + "?vocmsgs=1");
    // Note: this error callback may be overridden by calling code
    //       in that case, it is up to that code to handle the error appropriately
    ws.onerror = function() {
      vocCommShowErrMsg("Error: WebSocket connection closed due to error - if a page reload does not resolve it, please contact Vocareum Technical Support");
    };
    return ws;
}
  
function vocCommWebSocketUrl() {
    if (true)
    {
      vocCommShowErrMsg("Error: comm channel setup failed.<br><br>If a page reload does not resolve it, please contact Vocareum Technical Support");
      return null;
    }
    return vocCommGetWsUrl();
}
function sshkeyboxdownload(s, f)
{
  var t = document.createElement('a');
  t.setAttribute('href', 'data:application/octet-stream;charset=utf-16le;base64,' + s);
  t.setAttribute('download', f);
  t.style.display = 'none';
  document.body.appendChild(t);
  t.click();
  document.body.removeChild(t);
}
function ssodownload(id)
{
  $.ajax({
    url: '../util/vcput.php',
    type: 'post',
    data: {
      a: 'ssodownload',
      data:id,
      step:2792000    },
    success: function(data) {
      if( data.search(/^Error/) >=0 ){
        alert(data);
      } else {
        sshkeyboxdownload(data, 'ssourl.txt');
      }
    },
    fail: function(data) {
      alert('Failed to retrieve SSO URL');
    }
  });
}
function sshkeyboxshow(){
    $("#sshkeybox").show();
    $("#sshkeyboxbtn").hide();
}

function clikeyboxshow(){
    $("#clikeybox").show();
    $("#clikeyboxbtn").hide();
}

var clabstimeout = false;
var clabsbldinprogress = 0;
var clabslastchktime = 0;

var vocPanelTerminalTryMax = 40; // 20s

function vocTerminalTabTimeout(el, access_type, vm, counter)
{
  if (el.contentWindow.tabReadyForCmd(vm['name']))
  {
	  if (access_type == 'ssh') {
		  //console.log(vm['ssh_cmd']);
      el.contentWindow.executeCommandOnTab(vm['name'], 'exec ' + vm['ssh_cmd']);
	  }
	  else if (access_type == 'telnet') {
		  //console.log(vm['telnet_cmd']);
      el.contentWindow.executeCommandOnTab(vm['name'], 'exec ' + vm['telnet_cmd']);
	  }
    return;
  }
  counter += 1;
  if (counter <= vocPanelTerminalTryMax)
  {
    setTimeout(vocTerminalTabTimeout, 500, el, vm, counter);
  }
  else
  {
    alert("Could not open new tab in terminal");
  }
}

function vocTerminalTimeoutInternal(el, access_type, vm, isNewWin)
{
	//console.log('vocTerminalTimeoutInternal: ' + access_type);
  if (isNewWin)
  {
    el.contentWindow.setTabTitle(0, vm['name']);
    if (access_type == 'ssh') {
    	//console.log(vm['ssh_cmd']);
      el.contentWindow.executeCommand('exec ' + vm['ssh_cmd']);
    }
    else if (access_type == 'telnet') {
    	//console.log(vm['telnet_cmd']);
      el.contentWindow.executeCommand('exec ' + vm['telnet_cmd']);
    }
  }
  else
  {
	  //console.log('vocTerminalTimeoutInternal: ' + vm['ssh_cmd']);
    if (el.contentWindow.createTabIfNoneExists(vm['name']) == true)
    {
      // so a new tab is being created - we need to wait for it
      // no need for else clause - coz the above call will focus on the correct tab
      setTimeout(vocTerminalTabTimeout, 500, el, access_type, vm, 0);
    }
  }
}

function vocTerminalTimeout(el, access_type, vm, isNewWin, counter)
{ 
	//console.log('vocTerminalTimeout: ' + access_type);
   try 
   {
     if (el.contentWindow.vocTerminalIsAvailable())
     {
    	 //console.log('vocTerminalIsAvailable');
       setTimeout(vocTerminalTimeoutInternal, 500, el, access_type, vm, isNewWin);
       return;
     }
   }
   catch(err)
   {
     // nothing to do - we'll just try again
   }

   counter += 1;
   if (counter <= vocPanelTerminalTryMax)
   {
     setTimeout(vocTerminalTimeout, 500, el, access_type, vm, isNewWin, counter);
   }
   else
   {
     alert("Could not start terminal");
   }
}

var firstFrameLoad = (newContainerLab && !newLabNoContainer && !cnlab && !vmlab2);
var firstFrameLoadWasReady = true;
function vmDisplayFrameAfterDelay(displayUrl)
{
  // Checks if 'Launch Lab' button is being displayed...if it is, remove it
  if((newContainerLab || cnlab || (vmlab2 || (vmlab2 && newContainerFlow))) && $('#open').is(':visible')) {
    $('#panel2-div').remove();
    $('#vmp-panel2-2').append(`
      <div id="panel2-div" style="overflow:hidden; height:100%; padding: 0px; margin-bottom: 0px; margin-left:0px; border:0px solid lightblue;">
        <iframe id="panel2-iframe" name="panel2-iframe" title="Desktop" src="" width="100%" height="100%" style="overflow:none;border:0px solid red;" onload="terminalLoaded()"></iframe>
      </div>`);
    $('#panel2-iframe').attr('src', '');
  }
  
  if(firstFrameLoad) {
    firstFrameLoad = false;
    $('#panel2-iframe').css('opacity', '1');
  }
  
  // VNB: If an attempt to display content in an iframe is being done, go thrtough the VNB flow
  if (vocNotebookIde) {
    var appBeingLaunched = $('.appLauncher:has(.appLauncherLoadingIcon:visible)').attr('name');
    (newTab) ? vocFileViewer.openAppInNewWindow(appBeingLaunched, displayUrl)
             : vocFileViewer.openNewAppTab(appBeingLaunched, displayUrl);
    return;
  } 

  if ((allTabs || newTab) && $('#panel2-iframe').attr("src") != "") {
    window.open(displayUrl);
  } else {
    
    if(newLayout && !$('#panel2-iframe').length) {
       $(myLayout.openPopouts[0].getGlInstance().container[0]).find('#panel2-iframe').attr('src', displayUrl);
     } else {
       $('#panel2-iframe').attr("src", displayUrl);
     }
  }
}

var vmCheckAndDisplayFrameCounterMax = vmlab2 ? 300 : 40;
var container503ErrorReported = false;
var checkAndDisplayFrameTimeout = null;
function vmCheckAndDisplayFrame(checkUrl, displayUrl, cookieName, cookieValue, counter)
{
  // if new container lab,  panel2-2 is hidden, and not opening in new tab, don't attempt to display frame
  // since iframe element to display to would not exist
  if((newContainerLab && hideConsole && !newTab && !vocNotebookIde) || (vocNotebookIde && !allowFrameDisplay)) return;
  
  // If first frame load, immediately set iframe source and hide iframe to ensure any errors are not visible
  if(firstFrameLoad) $('#panel2-iframe').attr('src', displayUrl).css('opacity', '0');
  
  //console.log("vmCheckAndDisplayFrame()");
  var acc_url = (newContainerLab)? "../util/vcprojapi.php?t=checkVmAccessNew&displayUrl=" + checkUrl + "&cookieName=" + cookieName + "&cookieValue=" + cookieValue : "../util/vcput.php?a=checkVmAccess&displayUrl=" + checkUrl + "&cookieName=" + cookieName + "&cookieValue=" + cookieValue;
  $.ajax({
    url: acc_url
  })
   .done(function(data) 
   {
     try 
     {
       var result = JSON.parse(data);
       //console.log("vmCheckAndDisplayFrame: " + data);
       if (result['status'] == 'Error') 
       {
         //console.log("vmCheckAndDisplayFrame: Error");
       }
       else 
       {
         if (result['http_status'] == 503 || result['http_status'] == 404 || result['http_status'] == 0)
         {
           // If first frame load attempt
           if(firstFrameLoad) {
             firstFrameLoad = firstFrameLoadWasReady = false;
             $('#panel2-iframe').attr('src', '').css('opacity', '1');
           }
           
            // if newcontainerlab and UI not ready and is FullStack, give message to come back later
            if (false) {
             var waitForUI = true;
             // Checks if url being accessed is non-vscode
             if(typeof clabsStates !== 'undefined') {
               clabsStates.each(function() {
               if(typeof this['access_url'] !== 'undefined') {
                    for (let access_name in this['access_url']) {
                      if(access_name != 'vscode' && this['access_url'][access_name]['url'] == displayUrl) {
                        waitForUI = false;
                        return false;
                      } 
                    }
                  }
                });
              }
              if(!waitForUI) {
               show_voc_gritter(false, 'UI Not Ready; Please try again later', false);
               return;
              }
            }
           
           if (counter < vmCheckAndDisplayFrameCounterMax)
           {
             if (counter == 1)
             {
               show_voc_gritter_duration(false, 'Waiting for the UI to be ready', false, Math.abs(vmCheckAndDisplayFrameCounterMax - 3) * 1000);
             }
             var sleepTime = 1;
             if (counter > 120)
             {
               sleepTime = 10;
             }
             else if (counter > 20)
             {
               sleepTime = 5;
             }
             //console.log("vmCheckAndDisplayFrame: UI not ready; sleep for " + sleepTime + " second(s)");
             checkAndDisplayFrameTimeout = setTimeout(vmCheckAndDisplayFrame, sleepTime * 1000, checkUrl, displayUrl, cookieName, cookieValue, counter + sleepTime);
             return;
           } else {
            if (result['http_status'] == 503 && (newContainerLab || cnlab || vmlab2) && !container503ErrorReported) reportContainer503Error( (vmlab2 ? "VM" : "Container") );
           }
         }
       }
       $.gritter.removeAll();

       try {
         if (parent && typeof(parent.replaceNavButtons) === typeof(Function)) {
           parent.replaceNavButtons();
         }
       } catch (error) {
         // if we are here, then the parent is not the grader page
       }
       
       // If frame was ready during the first attempt to load the frame
       if(firstFrameLoad && firstFrameLoadWasReady) {
         firstFrameLoad = false;
         if ($('#panel2-iframe').attr('src') == displayUrl) {
           $('#panel2-iframe').css('opacity', '1');
           return;
         }
       }
        checkAndDisplayFrameTimeout = null;
        setTimeout(vmDisplayFrameAfterDelay, 1000, displayUrl);
     } 
     catch (err) 
     {
       //console.log("vmCheckAndDisplayFrame:Exc " + err);
       
       /// Checks if panel2 can be found, if not, check poped out windows
       if(newLayout && !$('#panel2-iframe').length) {
         $(myLayout.openPopouts[0].getGlInstance().container[0]).find('#panel2-iframe').attr('src', displayUrl);
       } else {
         $('#panel2-iframe').attr("src", displayUrl);
       }
     }
   })
   .fail(function(data, textStatus, jqXHR) 
   {
     //console.log("vmCheckAndDisplayFrame: Fail");
     $('#panel2-iframe').attr("src", displayUrl);
   });
}

var vm_indx_current = 0;

function vmBtnDelayedNovnc(vm, indx, vmspinbox)
{
	//console.log('vmBtnDelayedNovnc');
  // load the iframe
  $('#panel2-iframe').attr("src", vm['novnc_proxy']);
    
  if (typeof(vmspinbox) != 'undefined' && vmspinbox != null)
  {
    //vmspinbox.style.display = 'none';
    $('#vmspinbox'+indx).addClass('hidden-1');
  }
}

function vmOpenAllTabs(result)
{
	var vms, vm;
	var subtype;
	var lab_state;
	var access_url, access_v2;
	var access_name, access_type, access_port;
	var i, j;
	var str;

	//console.log('vmOpenAllTabs---');
	
	
	// Openning in all tabs....
	
  // get the appropriate container/vm
  vms = result['vms']; //[vm_indx];
  subtype = result['subtype'];
  lab_state = result['lab_state'];

  if (lab_state != "Ready")
  {
    return;
  }
  
  vcSetupLabEvents();

  for (i = 0; i < vms.length; i++)
  {
	  vm = vms[i];
    access_url = (typeof(vm['access_url']) != 'undefined')? vm['access_url'] : false;
    access_v2 = (typeof(vm['access_v2']) != 'undefined')? vm['access_v2'] : false;

    if (vm['state'] == "Ready" && access_v2 && access_url)
    {
    	for (j=0; j<access_v2.length; j++)
      {
  	    access_name = access_v2[j]['name'];
  	    access_type = access_v2[j]['type'];
  	    access_port = access_v2[j]['port'];
  	    //access_tab = access_v2[j]['tab'];
  	  
  	    if (typeof(access_url[access_name]) != "undefined") 
        {
     	    var url = access_url[access_name]["url"]; //"https://eval.vocareum.com";

          var cookieName = access_url[access_name]["cookie"]["name"]; //"vocLabAccess";
          var cookieValue = access_url[access_name]["cookie"]["value"]; //"ttyd";
          var cookiePath = access_url[access_name]["cookie"]["path"]; //"/";
          var cookieDomain = access_url[access_name]["cookie"]["domain"]; //"vocareum.com";
          
          var age = newContainerLab ? "; max-age=43200" : "";
          var checkUrl = url;
          if (cookieDomain == "vocareum.com")
          {
            str = cookieName + "=" + cookieValue + "; path=" + cookiePath + "; domain=" + cookieDomain + age + "; SameSite=None; secure";
            document.cookie = str;
            //console.log(str);
          }
          else
          {
            url = url + "/redirector" + "?name=" + encodeURIComponent(cookieName) + "&value=" + encodeURIComponent(cookieValue);
          }

          if (access_name.toLowerCase() == 'dcv')
          {
        	  window.open(url);
          }
          else if (j == 0)  //temporary
          {
            vmCheckAndDisplayFrame(checkUrl, url, cookieName, cookieValue, 0);
          }
          else
          {
        	  window.open(url);
          }
        }
        else
        {
     	    show_voc_gritter_duration(false, "Could not get " + access_name + " access_url information", true, DEFAULT_GRITTER_DURATION);
        }
  	      
  	    if (access_name == 'cdm' || access_name == 'hue')
  	    {
      	  cloudera = 1;
  	    }
  	  }  // for
    } //if Ready
    
  }
  
}

function vmBtnClicked(indx, access_type, refresh, data = null) 
{
  //console.log("vmBtnClicked()");
var vm_indx = indx; //e.target.dataset.indx;
var subtype;
var state;
var vm;
var str;


if(newContainerLab && data != null) {
  //console.log("vmBtnClicked() - vm Data Provided");
  // If lab is a 2022 lab and is ready, load container into iframe
     try {
       var containerURL = '';
       var containerCookieName = '';
       var containerCookieValue = '';
       var containerCookiePath = '';
       var containerCookieDomain = '';
       var vms_urls = (typeof data.vms[0].simple_url != 'undefined')? data.vms[0].simple_url : data.vms[0].access_url;
       
       Object.entries(vms_urls).some(([key, value]) => {
         containerURL = value.url;
         // set jupyterRootUri for editor-jupyter
         jupyterRootUri = containerURL.match(/(https:\/\/.*\.vocareum\.com)/)[0];
        if(typeof data.vms[0].access_url != 'undefined') containerCookieName = value.cookie.name, containerCookieValue = value.cookie.value,containerCookiePath = value.cookie.path, containerCookieDomain = value.cookie.domain;
        if(!initialFrameLoad || !useJupyterNotebookView || (initialFrameLoad && useJupyterNotebookView && key === "jupyter")) {initialFrameLoad = false; return true;}
       });
       
              
       
       var age = "; max-age=43200"; // 12 hours
       var checkUrl = containerURL;
       // Sets Cookies
        if (containerCookieDomain == "vocareum.com") {
          str = containerCookieName + "=" + containerCookieValue + "; path=" + containerCookiePath + "; domain=" + containerCookieDomain + age + "; SameSite=None; secure";
          document.cookie = str;
          //console.log("Set Cookies on Ready: " + str);
          containerCookies = str;
        }
        else if(containerCookieName != "" && containerCookieValue != "") {
          containerURL += "/redirector" + "?name=" + encodeURIComponent(containerCookieName) + "&value=" + encodeURIComponent(containerCookieValue);
        }
        
        // If no conatiner URL is directly found, attempt to load/display container via vmBtn click event
        (containerURL != '')? ((true && typeof data.lab_ui_state != 'undefined')? vmDisplayFrameAfterDelay(containerURL) : vmCheckAndDisplayFrame(checkUrl, containerURL, containerCookieName, containerCookieValue, 0)) : vmBtnClicked(0, '', 0);
      } catch(err) {
       var access_type = '';
                 vmBtnClicked(0, access_type, 0);
     }
     return;
}

var vmspinbox =  document.getElementById('vmspinbox'+indx);
if (typeof(vmspinbox) != 'undefined' && vmspinbox != null)
{
  //vmspinbox.style.display = 'inline';
	$('#vmspinbox'+indx).removeClass('hidden-1');
}
  
var jqxhr = $.ajax("../util/vcput.php?a=vcGetLabInfo&stepid=2792000&version=0&labworkdir=/home/nowhere" + '&vm_indx=' + vm_indx)
 .done(function(data, textStatus, jqXHR)
 {
	 if (data.indexOf('<ERROR:INVALID_SESSION>') !== -1) 
   { // invalid session
	   window.location.reload();
		 return;
	 }
	    
   try 
   {
     var result = JSON.parse(data);
     if (result['status'] == 'Error')
     {
        // Only display Error if vmBtnCLicked() triggers a refresh
        if (!refresh) show_voc_gritter_duration(false, "Could not get lab information: " + result['msg'], true, DEFAULT_GRITTER_DURATION);
        
        if (typeof(vmspinbox) != 'undefined' && vmspinbox != null)
        {
          //vmspinbox.style.display = 'none';
        	$('#vmspinbox'+indx).addClass('hidden-1');
        }
        
        if ($('#panel2-iframe').attr('src') == '') displayContainerPanelFiller("Error: " + result['msg']);
     }
     else
     {
       subtype = result['subtype'];
       state = result['lab_state'];

       //display budget
       if (typeof(result['budget']) != "undefined") {
         //console.log('setting budget................');
         $('#budget').html('<span>' + budgetString(result['budget'], result['spend']) + '</span>');
       }
       if (typeof(result['aws_budget']) != "undefined") {
         //console.log('setting budget2 ................');
        $('#budget2').html('<span>' + budgetString2(result['aws_budget']) + '</span>');
       }
        
       if((state == "None"
          || state == "Stopped"
          || state == "Terminated"
          || state == "Failed")
          && (vmlab2 && newContainerFlow)) {
              periodic_container_check();
       }

       if (state != "Ready")
       {
    	   if (typeof(vmspinbox) != 'undefined' && vmspinbox != null)
         {
           $('#vmspinbox'+indx).addClass('hidden-1');
         }
         return;
       }
       // just a precuationary measure in case the check returns with state != Ready and at the same time
       // we are trying to start the check for a just started lab
       vcSetupPeriodicUiCheck(vcPeriodUiCheckReloadDelay);

       //mhui: refresh the Vm buttons after start lab
       if (refresh) { $('#vmButtons').html(updateVmButtons(result)); }
        updateLabStatusIndicator();
       if (allTabs && indx == 0 && access_type == '')
       {
    	   vmOpenAllTabs(result);
    	   return;
       }
       
       // get the appropriate container/vm
       vm = result['vms'][vm_indx];
       state = vm['state'];
	     vm_extip = (typeof(vm['extip']) != 'undefined')? vm['extip'] : vm['ip'];
       vm_user = vm['user'];
       vm_access = vm['access'];
       vm_access_url = (typeof(vm['access_url']) != 'undefined')? vm['access_url'] : false;
       vm_simple_url = (typeof(vm['simple_url']) != 'undefined')? vm['simple_url'] : false;
       
       var access_v2 = (typeof(vm['access_v2']) != 'undefined')? vm['access_v2'] : false;
       var access_name, access_port;

       // handles the mysql db container when no access is passed back
       if (vm_access.length == 0)
       {
    	   $('#vmspinbox'+indx).addClass('hidden-1');
         //console.log('cdb = ' + JSON.stringify(result['cdb'][0]));
    	   return;
       }
       
       if (state != "Ready")
       {
         if (typeof(vmspinbox) != 'undefined' && vmspinbox != null)
         {
        	 $('#vmspinbox'+indx).addClass('hidden-1');
         }
       }
       else
       {
         if (access_type == '')
         {
            if (access_v2)
            {
            	  access_type = access_v2[0]['name']; //type
            	  access_name = access_v2[0]['name'];
            	  access_port = access_v2[0]['port']
            }
            else
            {
                var keys = Object.keys(vm_access);
                //console.log(keys);
                if (keys.length == 0) {return;}
                access_type = keys[0];
                access_port = vm_access[access_type];
            }
         }
          
         if(initialFrameLoad && false) {
           access_type = (useJupyterNotebookView)? 'jupyter' : 'jupyterlab';
           initialFrameLoad = false;
         }
  
         var is_telnet = access_type.includes("telnet");
         //console.log('access type = '+access_type);

         //2020-01-26: new access_url
         if (vm_access_url)
         {
     	     access_name = access_type;
 	         if (typeof(vm_access_url[access_name]) != "undefined") 
 	         {
 	        	 var url = vm_access_url[access_name]["url"]; //"https://eval.vocareum.com"
 	           var cookieName = vm_access_url[access_name]["cookie"]["name"]; //"vocLabAccess";
 	           var cookieValue = vm_access_url[access_name]["cookie"]["value"]; //"ttyd";
 	           var cookiePath = vm_access_url[access_name]["cookie"]["path"]; //"/";
 	           var cookieDomain = vm_access_url[access_name]["cookie"]["domain"]; //"vocareum.com";
            
             

                   var age = newContainerLab ? "; max-age=43200" : "";
                   var checkUrl = url;
                   if (cookieDomain == "vocareum.com")
                   {
 	             str = cookieName + "=" + cookieValue + "; path=" + cookiePath + "; domain=" + cookieDomain + age + "; SameSite=None; secure";
 	             document.cookie = str;
 	             //console.log(str);
 	             containerCookies = str;
                   }
                   else
                   {
                     url = url + "/redirector" + "?name=" + encodeURIComponent(cookieName) + "&value=" + encodeURIComponent(cookieValue);
                   }
 	           //console.log('allTabs = ' + allTabs + ', ' + indx);
 	           
 	           var keys = Object.keys(vm_access_url);
             
 	           if (access_type.toLowerCase() == 'dcv')
 	           {
 	        	   window.open(url);
 	           }
 	           else if ((!hideConsole && allTabs && vm_indx == 0 && keys[0] == access_name) || (!hideConsole && vm_indx == 0 && keys[0] == access_name))
 	           {
               vmCheckAndDisplayFrame(checkUrl, url, cookieName, cookieValue, 0);
 	           }
 	           else if (allTabs || newTab)
 	           {
 	             vmCheckAndDisplayFrame(checkUrl, url, cookieName, cookieValue, 0);
 	        	   //window.open(url);
 	           }
 	           else
 	           {
               vmCheckAndDisplayFrame(checkUrl, url, cookieName, cookieValue, 0);
 	           }
 	         }
 	         else
 	         {
 	        	 show_voc_gritter_duration(false, "Failed: Could not get " + access_name + " access_url information", true, DEFAULT_GRITTER_DURATION);
 	         }
            
            if (periodic_container_timer) clearTimeout(periodic_container_timer);
            if(newContainerLab || (vmlab2 && newContainerFlow)) periodic_container_timer = setTimeout(periodic_container_check, 30000);
        	 $('#vmspinbox'+indx).addClass('hidden-1');
         }
         
         else if (vm_simple_url)
         {
           access_name = access_type;
           if (typeof(vm_simple_url[access_name]) !== "undefined") 
           {
             var url = vm_simple_url[access_name]["url"];
                        //setTimeout(vmDisplayFrameAfterDelay, 100, url); // may need a check for ui readiness...
             setTimeout(vmCheckAndDisplayFrame, 100, url, url, 'dummyCookieName', 'dummyCookieValue', 0);
           }
           else
 	   {
 	     show_voc_gritter_duration(false, "Failed: Could not get " + access_name + " simple_url information", true, DEFAULT_GRITTER_DURATION);
 	   }
           $('#vmspinbox'+indx).addClass('hidden-1');
         }

         else if (access_type != 'ssh' && access_type != 'telnet' && !is_telnet && //subtype != 16 && 
                 (typeof vm['novnc_proxy'] !== "undefined") && vm['novnc_proxy']) 
         {
             //console.log(vm['novnc_proxy']);
             document.getElementById('vmBtn'+vm_indx_current).style.borderTop = "0px solid rgb(0,109,204)";
             document.getElementById('vmBtn'+indx).style.borderTop = "3px solid #6495ED";
             vm_indx_current = indx;

             ///////////////////
             if (newTab || onlyReadme)
             {
            	 if (access_v2)
               {
            	   for (var j=0; j<access_v2.length; j++)
                 {
                   if (access_type == access_v2[j]['name'])
                   {
                     //console.log("v2 new tab = " + access_v2[j]['type'] + "://" + vm['extip'] + ":" + access_v2[j]['port']);
       	             window.open(access_v2[j]['type'] + "://" + vm['extip'] + ":" + access_v2[j]['port']);
       	             break;
                   }
                 }
               }
            	 else 
               {
                 //console.log("newTab: open a new tab - http://" + vm['extip'] + ":" + vm_access[access_type]);   
                 window.open("http://" + vm['extip'] + ":" + vm_access[access_type]);
               }
            	 $('#vmspinbox'+indx).addClass('hidden-1');
             }
             else
             {
            	 if (!document.mozFullScreen && !document.webkitFullScreen) 
               {
                 //load the readme
                 if (onlyReadme)
      	         {
      		         //vmp_3();
      		         //console.log("olyReadme: open a new tab - https://" + vm['extip'] + ":" + vm_access[access_type]);
                	 window.open("http://" + vm['extip'] + ":" + vm_access[access_type]);
      	         }
                 else if (readme == 1)
          	     {
          	       //console.log("calling vmp_22_3 from vmBtnClicked");
          	       vmp_22_3();  
          	     }
          	     else
          	     {
          	       vmp_22();
          	     }
                 if (canSubmit) {document.getElementById('vmp-ideheader').style.display = "block"; vmp_ideheader = true;}
          	     vmp_resize();
               }
            	 // if there's already something in the frame and we are effectively just reloading the iframe,
               // unload and it first and give the existing ws connection time to be closed first - otherwise 
               // there's a conflict
               if (!onlyReadme)
               {
                 $('#panel2-iframe').attr("src", "");
                 setTimeout(vmBtnDelayedNovnc, 2000, vm, indx, vmspinbox);
               }
             }
         }
         else if (access_type != 'ssh' && access_type != 'telnet')
         {
           //console.log("newTab = " + newTab);
           if (newTab)
           {
        	   if (access_v2)
             {
            	   for (var j=0; j<access_v2.length; j++)
                 {
                   if (access_type == access_v2[j]['name'])
                   {
                     //console.log("v2-1 new tab = " + access_v2[j]['type'] + "://" + vm['extip'] + ":" + access_v2[j]['port']);
       	             window.open(access_v2[j]['type'] + "://" + vm['extip'] + ":" + access_v2[j]['port']);
       	             break;
                   }
                 }
             }
        	   else if (access_type == 'https')
        	   {
        		   //console.log("https://" + vm['extip'] + ":" + vm_access[access_type]);
               window.open("https://" + vm['extip'] + ":" + vm_access[access_type]);
        	   }
        	   else
        	   {
               //console.log("http://" + vm['extip'] + ":" + vm_access[access_type]);
               window.open("http://" + vm['extip'] + ":" + vm_access[access_type]);
        	   }
           }
           else
           {
        	     var url;
        	     if (access_v2)
               {
              	 for (var j=0; j<access_v2.length; j++)
                 {
                   if (access_type == access_v2[j]['name'])
                   {
                     //console.log("v2-1 new tab = " + access_v2[j]['type'] + "://" + vm['extip'] + ":" + access_v2[j]['port']);
         	           url = access_v2[j]['type'] + "://" + vm['extip'] + ":" + access_v2[j]['port'];
         	           break;
                   }
                 }
               }
        	     else
        	     {
        	       //console.log("https://" + vm['extip'] + ":" + vm_access[access_type]);
                 url = "https://" + vm['extip'] + ":" + vm_access[access_type];
        	     }
               if (!document.mozFullScreen && !document.webkitFullScreen) 
               {
            	   //load the readme
            	   if (onlyReadme)
	               {
		               vmp_3();
	               }
            	   else if (readme == 1)
      	         {
      	        	if (!cloudera && !hideFileBrowser && !hideSource) {vmp_1_22_3();} 
      	        	else {
      	        	  vmp_22_3();
      	        	}
      	     		 }
      	     		 else
      	     		 {
      	     			if (!cloudera && !hideFileBrowser && !hideSource) {vmp_1_22();} else {vmp_22();}
      	     		 }
            	   if (canSubmit) {document.getElementById('vmp-ideheader').style.display = "block"; vmp_ideheader = true;}
	     		   
      	     	   vmp_resize();
               }
               $('#panel2-iframe').attr("src", url);
           }
           
           if (typeof(vmspinbox) != 'undefined' && vmspinbox != null)
           {
        	   $('#vmspinbox'+indx).addClass('hidden-1');
           }
         }
         else if ((access_type == 'ssh' && (typeof vm['ssh_cmd'] !== "undefined") && vm['ssh_cmd']) ||
        		      (access_type == 'telnet' && (typeof vm['telnet_cmd'] !== "undefined") && vm['telnet_cmd']))
         {

           document.getElementById('vmBtn'+vm_indx_current).style.borderTop = "0px solid rgb(0,109,204)";
           document.getElementById('vmBtn'+indx).style.borderTop = "3px solid #6495ED";
           vm_indx_current = indx;

           // clear periodic_save
           if (savefilehandle) {clearTimeout(savefilehandle);}

           if (!document.mozFullScreen && !document.webkitFullScreen) 
           {
               //set the panels
               if (onlyReadme)
	             {
		             vmp_3();
	             }
               else if (readme == 1)
  	           {
            	   if (!cloudera && !hideFileBrowser && !hideSource && progmlab) {vmp_1_2_3_filetree();} 
            	   else {
            	     vmp_22_3();
            	   }
  	     		   }
  	     		   else
  	     		   {
  	     			   if (!cloudera && !hideFileBrowser && !hideSource && progmlab) {vmp_1_2_filetree();} else {vmp_22();}
  	     		   }
               if (canSubmit || hasSubmissions) {document.getElementById('vmp-ideheader').style.display = "block"; vmp_ideheader = true;}
   		     
    		   	   vmp_resize();
           }

           // Three cases:
           // 
           // 1. no terminal has ever been launched
           //    - start terminal
           //    - ssh cntnr
           // 2. terminal disappeared
           //    - "press" the launch button
           //    - ssh cntnr
           // 3. terminal is present
           //    - check if tab for this vm is already there
           //      - if so, select it
           //      - if not, open a new tab and ssh cntnr

           var isNewWin = true;
           const termExp = /\/terminal\//;
           var telement = document.getElementById('panel2-iframe');
           if ($('#panel2-iframe').attr("src") == "")
           {
             $('#panel2-iframe').attr("src", "");
             $('#panel2-iframe').on('load', function() {
                 /*
                var elmnt = telement.contentWindow.document.getElementById('open');
                if (typeof(elmnt) != "undefined" && elmnt != null) {
                  elmnt.style.display = "none";
                  }
                 */
              });
           }
           else if (termExp.test($('#panel2-iframe').attr("src")) === false)
           {
             $('#panel2-iframe').attr("src", "");
             $('#panel2-iframe').on('load', function() {
                var elmnt = telement.contentWindow.document.getElementById('open');
                if (typeof(elmnt) != "undefined") {
                  elmnt.style.display = "none";
                  }
              });
           }
           else if (! telement.contentWindow.vocTerminalIsAvailable())
           {
             telement.contentWindow.vocStartTerminal();
             var elmnt = telement.contentWindow.document.getElementById('open');
                if (typeof(elmnt) != "undefined") {
                  elmnt.style.display = "none";
                  }
           }
           else
           {
             isNewWin = false;
           }
           setTimeout(vocTerminalTimeout, 500, telement, access_type, vm, isNewWin, 0);

           // reset filetree and panel
           if (!cloudera && !hideFileBrowser && !hideSource) //(!cloudera)
	         {
     	       initEditor();
     	       initFileTree();
             resetFileTree();
             refreshFileTree(false, true);
             refreshS3WorkareaTree(0);
             refreshSubTree();
           
             //mhui
             window.setTimeout('periodic_save()', 60000);
	         }
	         
           if (typeof(vmspinbox) != 'undefined' && vmspinbox != null)
           {
             //vmspinbox.style.display = 'none';
        	   $('#vmspinbox'+indx).addClass('hidden-1');
           }
         }
         else if ((typeof vm['err'] !== "undefined") && vm['err'])
         {
           bootbox.dialog("Unable to access:  " + vm['err'], 
                          [{
                            "label" : "Ok",
                            "class" : "btn vocbtn-ac vocbtn-action",
                          }]
           );
         }
       }
     }
   }
   catch(err)
   {
     console.log("Exception: " + err);
     if (typeof(vmspinbox) != 'undefined' && vmspinbox != null)
     {
       //vmspinbox.style.display = 'none';
    	 $('#vmspinbox'+indx).addClass('hidden-1');
     }
     //show_voc_gritter(false, "Exception: " + err, true);
   }
 })
 .fail(function(data, textStatus, jqXHR)
 {
	 if (typeof(vmspinbox) != 'undefined' && vmspinbox != null)
   {
       //vmspinbox.style.display = 'none';
		 $('#vmspinbox'+indx).addClass('hidden-1');
   }
   show_voc_gritter_duration(false, "Failed: Could not get lab information", true, DEFAULT_GRITTER_DURATION);
 });
}

//-------------------------------------------------------------------------
// cloud lab
//-------------------------------------------------------------------------
function awslabchkdone() 
{
	      $.ajax({
	        url: "../util/vcput.php?a=labready&stepid=2792000&version=0&mode=s&type=1",
	     })
	     .done(function(ret_val) {
	         if( ret_val.search(/ready/)>=0 ){
	        	 if(!comboLab) {
	        	   $('#labspinbox').removeClass('icon-spin icon-spinner');
	             $('#labspinbox').addClass('icon-play');
	             
	             if(!onlyReadme) {
	               DisplayLoadingScreen(0);
	             }
	        	 }
	        	 
	        	 //console.log("AWS: Ready");
	        	 //console.log(awsscnt);
	        	 
	        	 checkAWSLabStatus(function(response) {
              if(response) {
                updateLabStatusIndicator('AWS', 'Ready');
                allowSubmit = 2;
	        	   if(awsdetails != '') {
  	             var hdr = displayPanel3Hdr();
    	           show_voc_gritter(false, awsdetails, false);
    
    	           if(!hideDetails) {
    	             $('#vmp-panel3').html(hdr + awsdetails);
                   showPanel3Info();
    	           }
  	           }
              }
              else {
                updateLabStatusIndicator('AWS', 'Terminated');
                allowSubmit = 0;
              }
            });
	        	
	           if (!hideProgress) {
               document.getElementById('clabstatus').style.display = "inline-block";
             }
         	   $('#clabstatus').html('Ready');
         	   inCreationAWSaccess = true;
	           showawsact(0);
	         } else if (ret_val.search(/in creation/)>=0 ) {
	           //target.innerHTML = '<i class="icon-spin icon-spinner"></i>' + target.innerHTML;
	           if(!comboLab) {
  	           
  	           $('#labspinbox').removeClass('icon-play');
  	           $('#labspinbox').addClass('icon-spin icon-spinner');
  	           
  	           if(!onlyReadme) {
	               DisplayLoadingScreen(1);
	             }
  	           
	           }
	           //getAWSLabStatus();
	           //console.log("AWS: in creation");
	           allowSubmit = 1;
	           updateLabStatusIndicator('AWS', 'In Creation');
	           window.setTimeout(awslabchkdone, 10000); 
	           if (!hideProgress) {
               document.getElementById('clabstatus').style.display = "inline-block";
             }
         	   $('#clabstatus').html('In creation...');
	         } else {
	        	 $('#labspinbox').removeClass('icon-spin icon-spinner');
		         $('#labspinbox').addClass('icon-play');

            allowSubmit = 0;

            if(!hideDetails) {
               var hdr = displayPanel3Hdr();
	             $('#vmp-panel3').html(hdr + ret_val);
               showPanel3Info();
	           }
		         //console.log('AWS: ' +ret_val);
		         show_voc_gritter(false, ret_val, false);
		         endawslabconfirmed(0);
		         
		         //$('#vmp-panel4').css('z-index', '-1');
		         DisplayLoadingScreen(0);
		         if (!hideTimer && !cloudera) {document.getElementById('sessiontimer').style.display = "block";}
		         document.getElementById('clabstatus').style.display = "none";
	         	 $('#clabstatus').html('');
	         }
	      })
	     .fail(function(ret_val) {
	       alert('failed to check the lab status');
	       $('#labspinbox').removeClass('icon-spin icon-spinner');
         $('#labspinbox').addClass('icon-play');
         //$('#vmp-panel4').css('z-index', '-1');
         DisplayLoadingScreen(0);
         if (!hideTimer && !cloudera) {document.getElementById('sessiontimer').style.display = "block";}
         document.getElementById('clabstatus').style.display = "none";
     	   $('#clabstatus').html('');
	     }); 
}

//==============================================================================
//    Function that checks and updates the current AWS Lab Status
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - NONE
// Output:
//    - NONE
//==============================================================================
function checkAWSStatus() {
  $.ajax({
    url: "../util/vcput.php?a=getawsstatus&stepid=2792000&version=0&mode=s&type=1",
  })
  .done(function(ret_val) {
    if( ret_val.search(/ready/)>=0 ){ // If lab status is 'Ready'
      //console.log("AWS " + ret_val);
      
      // If lab is NOT a combo lab, don't update the 'Start Lab' icons
      if(!comboLab) $('#labspinbox').removeClass('icon-spin icon-spinner').addClass('icon-play');
      
      // If lab ONLY shows readme, don't show/hide the Loading Screen || if it's a combo lab
      //  - For combo labs, loading screen will be hidden after VM/Container is done loading
      if(!onlyReadme && !comboLab) DisplayLoadingScreen(0); 
      
      // If combo lab, check to see if conatiner/vm has already finished loading
     if(comboLab) {
       var containerVMIsReady = false;
        clabsStates.each(function() {
          if(this.state == "Ready") containerVMIsReady = true;
        });
        
        if(containerVMIsReady) {
          DisplayLoadingScreen(0);
          $('#labspinbox').removeClass('icon-spin icon-spinner').addClass('icon-play');
        }
     }
      
      
      // Updates the Lab Status Indicator to 'Ready' (Greeen Light Indicator)
      updateLabStatusIndicator('AWS', 'Ready');
      allowSubmit = 2;
      
      // If awsdetails isn't empty, properly display it
      //    NOTE: Will only be empty if page is reset during AWS lab Start
      if(awsdetails != '' && !newLayout) {
        show_voc_gritter(false, awsdetails, false);
        if(!hideDetails) {
          //$('#vmp-panel3').html(displayPanel3Hdr() + awsdetails);
          //showPanel3Info();
        }
        awsdetails = '';
      }
      
      // Shows AWS State in Text if Progress is enabled
      if (!hideProgress) document.getElementById('clabstatus').style.display = "inline-block";
      $('#clabstatus').html('Ready');
      inCreationAWSaccess = true;
      
      if(newLayout) showawsact(1);
    }
    else if (ret_val.search(/in creation/)>=0 ) { // If lab status is 'in creation'
      //console.log("AWS " + ret_val);
      
      // Updates inCreationAWSaccess
      inCreationAWSaccess = false;
      
      // If lab is NOT a combo lab, don't update the 'Start Lab' icons
      if(!comboLab) $('#labspinbox').removeClass('icon-play').addClass('icon-spin icon-spinner');
      
      // If lab ONLY shows readme, don't show/hide the Loading Screen
      if(!onlyReadme && !comboLab) DisplayLoadingScreen(1);
      
      // Updates the Lab Status Indicator to 'In Creation' (Yellow Light Indicator)
      updateLabStatusIndicator('AWS', 'In Creation');
      allowSubmit = 1;
      
      // Shows AWS State in Text if Progress is enabled
      if (!hideProgress) document.getElementById('clabstatus').style.display = "inline-block";
      $('#clabstatus').html('In creation...');
      
      // Do check again after 5 seconds...
      window.setTimeout(checkAWSStatus, 5000); 
    }
    else if (ret_val.search(/terminated/)>=0 || ret_val.search(/stopped/)>=0 || ret_val.search(/not started/)>=0 ) {
      //console.log("AWS " + ret_val);
      
      // If lab is NOT a combo lab, don't update the 'Start Lab' icons
      if(!comboLab) $('#labspinbox').removeClass('icon-spin icon-spinner').addClass('icon-play');
      
      // If lab ONLY shows readme, don't show/hide the Loading Screen
      if(!onlyReadme && !comboLab) DisplayLoadingScreen(0); 
      
      // If combo lab, check to see if conatiner/vm has already finished loading
      if(comboLab) {
       var containerVMIsReady = false;
        clabsStates.each(function() {
          if(this.state == "Ready" || this.state == "Terminated") containerVMIsReady = true;
        });
        
        if(containerVMIsReady) {
          DisplayLoadingScreen(0);
          $('#labspinbox').removeClass('icon-spin icon-spinner').addClass('icon-play');
        }
      }
      
      // Disable AWS Access during 'in creation' state
      inCreationAWSaccess = false;
      
      if (!hideProgress) document.getElementById('clabstatus').style.display = "inline-block";
      $('#clabstatus').html('Terminated');
      
      // Update Lab Status Indicator to Terminated..
      if(newLayout && allowSubmit != 0) showawsact(1);
      updateLabStatusIndicator('AWS', 'Terminated');
      allowSubmit = 0;
      
    }
    else {
      //console.log("AWS " + ret_val);
      // If lab is NOT a combo lab, don't update the 'Start Lab' icons
      if(!comboLab) $('#labspinbox').removeClass('icon-spin icon-spinner').addClass('icon-play');
      allowSubmit = 0;
      
      // If lab ONLY shows readme, don't show/hide the Loading Screen
      if(!onlyReadme) DisplayLoadingScreen(0); 
      
      if(!hideDetails) {
        if(!newLayout) {
          $('#vmp-panel3').html(displayPanel3Hdr() + ret_val);
          showPanel3Info();
        }
        
      }
      if(newLayout)  {
        $('#aws_details_section').html(ret_val);
          //switchActiveTab('Details');
      }
      
      //show_voc_gritter(false, ret_val, false);
      
      // if it's not already terminating, call end labs
      if(ret_val.search(/terminating/) == -1) endawslabconfirmed(0);
      
      if (!hideTimer && !cloudera) {document.getElementById('sessiontimer').style.display = "block";}
        document.getElementById('clabstatus').style.display = "none";
        $('#clabstatus').html('');
    }
  })
  .fail(function(ret_val) {
    alert('failed to check the lab status');
    $('#labspinbox').removeClass('icon-spin icon-spinner').addClass('icon-play');
    
    // If lab ONLY shows readme, don't show/hide the Loading Screen
      if(!onlyReadme) DisplayLoadingScreen(0); 
    
    if (!hideTimer && !cloudera) {document.getElementById('sessiontimer').style.display = "block";}
    document.getElementById('clabstatus').style.display = "none";
    $('#clabstatus').html('');
  });
}

function startawslab(v) 
{
    updateLabStatusIndicator('AWS', 'Initializing');
    if (!hideProgress) document.getElementById('clabstatus').style.display = "inline-block";
    $('#clabstatus').html('Initializing');
      allowSubmit = 1;
    if (v) 
    {
   	  $('#labspinbox').removeClass('icon-play');
      $('#labspinbox').addClass('icon-spin icon-spinner');
      if (!onlyReadme) 
	    {
        //$('#vmp-panel4').css('z-index', '100');
        DisplayLoadingScreen(1);
      }
    }
    
    
    $.ajax({
       url: "../util/vcput.php?a=startaws&stepid=2792000&version=0&mode=s&type=1",
    })
    .done(function(ret_val) {
          //getAWSLabStatus();
          var result = JSON.parse(ret_val);
          var lab_status = result['status'];
          ret_val = result['msg'];
        // Displays the Remianing session time & Refresh Session time
    	  var hdr = displayPanel3Hdr();
    	  awsdetails = ret_val;
    	  
    	  //console.log("startaws: " + lab_status);

	      if (comboLab && lab_status !== 'success')
        {
	        cloudLabStarted = false;
          $('#launchclabsbtn').removeClass('hidden-1');
          checkAWSStatus();
          allowSubmit = 0;
        }
	      else if (comboLab)
	      {
		      cloudLabStarted = true;
	    	  //$('#launchclabsbtn').addClass('hidden-1');
	    	  $('#endclabsbtn').removeClass('hidden-1');
	      }
        
        // Changes AWS Status Indicator to the appropriate indicator
        if (lab_status !== 'success') {
          if(!awsscnt && v) {
             DisplayLoadingScreen(0);
             $('#labspinbox').removeClass('icon-spin icon-spinner');
             $('#labspinbox').addClass('icon-play');
             
             //console.log("failed on start due to status.....");
             
          }
          show_voc_gritter(false, ret_val, false);
          
          // If details button is hidden, don't show right panel
          if(!hideDetails) {
            if(!newLayout) {
              $('#vmp-panel3').html(hdr + ret_val);
              showPanel3Info();
            }
          }
          
          if(newLayout) {
            $('#aws_details_section').html(ret_val);
              switchActiveTab('Details');
          }
          
          allowSubmit = 0;
          checkAWSStatus();
        }
        else {
          showawsact(0);
          checkAWSStatus();
        }
        
        // Shows the budget if:
        //  -Budget layout option is toggled 'ON'
        //  -Current IDE is not combo lab and ONLY awsIde
        if(!hideBudget && (awsIde) && !comboLab) {
          updatecloudbudget();
        }
        
        
     })
    .fail(function(ret_val) {
      alert('failed to start the lab');
      if(v) {
   	   $('#labspinbox').removeClass('icon-spin icon-spinner').addClass('icon-play');
        DisplayLoadingScreen(0);
        updateLabStatusIndicator('AWS', 'Failed');
        allowSubmit = 1;
      }
    });
}

function endawslab(v) 
{
  
  //If end lab behavior is 'Terminate Resources,' give the user a warning.
  var term_lab_str = '';
  
  
	   	     bootbox.dialog('Are you sure you want to end the lab?' + term_lab_str,
	        [
	          {
	            "label" : "Yes",
	            "class" : "btn vocbtn-ac vocbtn-action",
	            "callback": function() {
	              endawslabconfirmed(v);
	            }
	          },
	          {
	            "label" : "No",
	            "class" : "btn vocbtn-ac vocbtn-status"
	          }
	        ]);
	  }

function endawslabconfirmed(v) 
{
  
  // AWS lab is already ended/shut down, no need to end lab
  if(allowSubmit === 0) {
    //console.log("AWS Already Shut Down.");
    return;
  }
  
	     if(v) {
	    	 $('#endclabspinbox').removeClass('icon-stop');
		     $('#endclabspinbox').addClass('icon-spin icon-spinner');
	     }
	     updateLabStatusIndicator('AWS', 'Shutting down');
	     if (!hideProgress) document.getElementById('clabstatus').style.display = "inline-block";
       $('#clabstatus').html('Shutting down');
	     allowSubmit = 1;
	     $.ajax({
	        url: "../util/vcput.php?a=endaws&stepid=2792000&version=0&mode=s&type=1",
	     })
	     .done(function(ret_val) {
	        
	        var result = JSON.parse(ret_val);
          var end_lab_status = result['status'];
          ret_val = result['msg'];
	        
	        // if end_lab_status returns an error
	        if(end_lab_status != 'success') {
	           // Removes spinbox on 'End Lab' Button if lab is not a combo lab (is ended on endclabs() instead)
	           if(!comboLab && v)$('#endclabspinbox').removeClass('icon-spin icon-spinner').addClass('icon-stop');
	           show_voc_gritter(false, ret_val, false);
             checkAWSStatus();
             allowSubmit = 2;
	          return;
	        }

	         if(v) {
	           // Removes spinbox on 'End Lab' Button if lab is not a combo lab (is ended on endclabs() instead)
	           if(!comboLab) {
	             $('#endclabspinbox').removeClass('icon-spin icon-spinner');
			         $('#endclabspinbox').addClass('icon-stop');
			         show_voc_gritter(false, "Ended AWS Lab Successfully", false);
	           }
			       expiretime = 0;
	         }
	         // Disables the AWS Console Button when AWS Lab is successfully started
	         // Also changes the Lab Status Indicator to Inactive
	         checkAWSStatus();
	         allowSubmit = 0;
	         //console.log("Disabled AWS Console Button");
	         showawsact(0);
	      })
	     .fail(function(ret_val) {
	       alert('failed to end the lab');
	       if(v) {
	    	   $('#endclabspinbox').removeClass('icon-spin icon-spinner');
		       $('#endclabspinbox').addClass('icon-stop');
	       }
	     });
}

function showawsact(modalflag)
{ 
  if(!newLayout) {
    
  
	     var v = 0;
	     //if(v==1) $('#showawsdetail').html('Account Details <i id="awsbtnspinbox" class="icon-spin icon-spinner"></i>');
	     $('#detailspinbox2').removeClass('icon-info');
       $('#detailspinbox2').addClass('icon-spin icon-spinner');
	     $.ajax({
	        url: "../util/vcput.php?a=getaws&type=1&stepid=2792000&version=0&v="+v,
	     })
	     .done(function(ret_val) {
	    	   if (modalflag) 
		    	 { 
			    	 //alert(ret_val);
	    		   $('#report_aws_msg_box').html('');
	    		   var hdr = displayPanel3Hdr();
	    		   $('#vmp-panel3').html("<div id='awsdetailsframe' style='display:block;' tabindex='0'></div>")
		    	   $('#awsdetailsframe').html(hdr + ret_val);
		    	   document.getElementById('awsdetailsframe').focus();
			    	 
			    	 showPanel3Info();
			    	 //$('#vmp-panel3').focus();
		    	 }
	    	   else
	    	   {
	    	     var hdr = displayPanel3Hdr();
	    	     $('#report_aws_msg_box').html('');
	    	     $('#report_aws_msg_box').html(hdr + ret_val);
	    	     //showPanel3Info();
	    	   }
	    	   
		       $('#detailspinbox2').removeClass('icon-spin icon-spinner');
		       $('#detailspinbox2').addClass('icon-info');
          
           //mhui: display sessison timer
           if ($('#vlab-expiretime').length > 0) 
           {
             expiretime = $('#vlab-expiretime').html();
             if (timerhandle) clearTimeout(timerhandle);
             timercountdown();
             
             
             if(!hideBudget && (awsIde) && !comboLab) {
                updatecloudbudget();
             }
           }
	         
	      })
	     .fail(function(ret_val) {
	       alert('failed to retrieve AWS credentials');
	       //if(v==1) $('#showawsdetail').html('Account Details');
	       $('#detailspinbox2').removeClass('icon-spin icon-spinner');
	       $('#detailspinbox2').addClass('icon-info');
	     });
  }
  else {
    var v = 0;
	     $('#aws_details_spinbox').removeClass('icon-refresh').addClass('icon-spin icon-spinner');
	     $.ajax({
	        url: "../util/vcput.php?a=getaws&type=1&stepid=2792000&version=0&v="+v,
	     })
	     .done(function(ret_val) {

	    	   if (modalflag) {
	    		   $('#report_aws_msg_box').html('');
		    	   $('#aws_details_section').html(ret_val);
		    	   switchActiveTab('Details');
		    	 }
	    	   else {
	    	     $('#report_aws_msg_box').html('');
	    	     $('#report_aws_msg_box').html(ret_val);
	    	     $('#aws_details_section').html(ret_val);
	    	   }
	    	   
		       $('#aws_details_spinbox').removeClass('icon-spin icon-spinner').addClass('icon-refresh');

           //mhui: display sessison timer
           if ($('#vlab-expiretime').length > 0) 
           {
             expiretime = $('#vlab-expiretime').html();
             if (timerhandle) clearTimeout(timerhandle);
             timercountdown();
             
             
             if(!hideBudget && (awsIde) && !comboLab) updatecloudbudget();
           }
	         
	      })
	     .fail(function(ret_val) {
	       alert('failed to retrieve AWS credentials');
	       //if(v==1) $('#showawsdetail').html('Account Details');
	       $('#aws_details_spinbox').removeClass('icon-spin icon-spinner').addClass('icon-refresh');
	     });
  }
}

function launchAws()
{
   var v = awsscnt;
   
   // Checks aws status to update the allowSubmit variable (used to determine if aws is ready)
   checkAWSStatus();
   
   // if v !== 0 && allowAWSaccess is false, show lab has not started....
   if ((v===0 && allowSubmit === 0) || (cnlab && allowSubmit === 0)){
     bootbox.dialog("<br>Your lab has not started yet. Please click StartLab in order to access AWS console",
                     [{
                       "label" : "Ok",
                       "class" : "btn vocbtn-ac vocbtn-action"
                     }]
                );
     return;
   }
   
   // if V !== 0 and allowAWSaccess is false, AWS console cannot be accessed
   if (v !== 0 && !inCreationAWSaccess){
     bootbox.dialog("<br>Your lab is starting....Please wait",
                     [{
                       "label" : "Ok",
                       "class" : "btn vocbtn-ac vocbtn-action"
                     }]
                );
     return;
   }
   
   var tv = ''; //v<0? '' : ('&tv=' + v);
   $.ajax({
            url: "../util/vcput.php?vockey=92b04c35873bd949b37ad2d5305bdc08d94a5d6ff8998372748bc9b283f4c299&a=getawsurl"+tv+"&asnid=2792000&userid=3209731&mode=s&version=0",
            data: {},
            success: function(data) {
               var apos = data.search('voc::');
               var bpos = data.search('::voc');
               if(apos>=0 && bpos>=0 && bpos>apos){
                 if( data.search('voc::Error:')>=0 ){
                   //consolePrint(data.substring(apos+5,bpos) + ' -- failed to launch AWS Console');
                 } else {
                   window.open(data.substring(apos+5,bpos), "EMMANUEL ARHU");
                 }
               } else {
                 //consolePrint('Failed to launch AWS Console');
               }
            }
         });
}


//-----------------------------------------------------
//  Function used to update the AWS budget display
//-----------------------------------------------------
function updatecloudbudget() {
  if(awsIde) {
    var v = 3;
    $.ajax({
      url: "../util/vcput.php?a=getaws&type=1&stepid=2792000&version=0&v="+v,
    })
    .done(function(ret_val) {
      if(ret_val.includes('fail_getaws_cost')) {
        alert('failed to retrieve AWS Account Budget/Spending');
      }
      else {
        var result = JSON.parse(ret_val);
        if(result['monthly_budget'] != 0) {
          $('#budget2').html('<span>' + budgetString2(result) + '</span>'); //shows monthly spending/budget
        }
        else if(result['total_budget'] != 0) {
          $('#budget2').html('<span>' + totalbudgetString2(result) + '</span>');  // shows total spending/budget
        }
      }
    })
    .fail(function(ret_val) {
     alert('failed to retrieve AWS Account Budget/Spending');
    });
  }
  else if (azureIde) {
    var v = 0;
     $.ajax({
        url: "../util/vcput.php?a=getazure&type=1&stepid=2792000&version=0&v="+v,
     })
     .done(function(ret_val) {
       var AzureLabDetails = JSON.parse(ret_val); // JSON parses the data returned
       
       if(typeof AzureLabDetails.data !== 'undefined' && Array.isArray(AzureLabDetails.data)/*AzureLabDetails.data.length > 1*/) {
         AzureLabDetails = AzureLabDetails.data[0];
       }
        
       // If User data exists within the response & Azure is active, return true (Azure IS active)
       if(AzureLabDetails.data.user != null) {
         var azure_budget = new Array();
         azure_budget['total_budget'] = AzureLabDetails.data.user.allocated_budget;
         azure_budget['total_spend'] = AzureLabDetails.data.user.consumed_budget;
         $('#budget2').html('<span>' + totalbudgetString2(azure_budget) + '</span>');  // shows total spending/budget
       }

      })
     .fail(function(ret_val) {
       alert('Failed to retrieve Azure Account Budget/Spending');
     });
  }
  else if (gcpIde) {
    let v = 3;
    $.ajax({
      url: "../util/vcput.php?a=getgcp&type=1&stepid=2792000&version=0&v="+v,
    })
    .done(function(ret_val) {
      let result = JSON.parse(ret_val);
      if(result['monthly_budget'] != 0) {
        $('#budget2').html('<span>' + budgetString2(result) + '</span>'); //shows monthly spending/budget
      }
      else if(result['total_budget'] != 0) {
        $('#budget2').html('<span>' + totalbudgetString2(result) + '</span>');  // shows total spending/budget
      }
    })
    .fail(function(ret_val) {
      alert('failed to retrieve GCP Budget/Spending');
    });
  }
 
  
  
  //check the lab status
  if (cloudcosthandle) {clearTimeout(cloudcosthandle);}
  cloudcosthandle = window.setTimeout(updatecloudbudget , 2*60000); // updates budget every 120 seconds
}




//----------------------------------------------------------------------
// Linux applications
//----------------------------------------------------------------------
function openAppWindow(loc)
{
  //console.log("Opening app...");
  $('#panel2-iframe').attr("src", loc);
}

function getXstartupFileName(type)
{
 switch (type) {
        case 0: return "xstartup.test";
        case 1: return "xstartup.eclipse";
        case 2: return "xstartup.mysqlwb";
        case 5: return "xstartup.pgadmin";
        case 3: return "xstartup.spyder3";
        case 4: return "xstartup.desktop";
        case 6: return "xstartup.android-studio";
        case 11: return "xstartup.thonny";
        default: return "xstartup.desktop";
 }
}

var vocLaunchingApp = false;
function vocLaunchTimer()
{
 vocLaunchingApp = false;
}
               
function launchApp(type)
{
  
  //console.log("launchApp: " + type);
  
	$('#labspinbox').removeClass('icon-play');
	$('#labspinbox').addClass('icon-spin icon-spinner');
	//$('#vmp-panel4').css('z-index', '100');
	DisplayLoadingScreen(1);

//console.log(type);
if (vocLaunchingApp == true) {
 return;
}
vocLaunchingApp = true;
setTimeout(vocLaunchTimer, 5000);

xstartup_file = '/home/lib/ubuntu1604/vdi/xstartup_files/' + getXstartupFileName(type);
data = { 'action': 'Launch', 'token': '', 'proxy_path': 'proxy.vocareum.com/hostip//vocproxy/', 'proxy_scheme': 'https', 'xstartup_file': xstartup_file };
//console.log(xstartup_file);

var jqxhr = $.ajax({
 type: 'POST',
 url: "https://proxy.vocareum.com/hostip//",
 data: JSON.stringify(data)
})
.done(function(data, textStatus, jqXHR) {
	$('#labspinbox').removeClass('icon-spin icon-spinner'); 
  $('#labspinbox').addClass('icon-play');
  //$('#vmp-panel4').css('z-index', '-1');
  DisplayLoadingScreen(0);
  //console.log(data);
  if (data['status'] == 'Error') {
    alert("VDI: Error: " + data['msg'])
  }
  else {
    // alert("location = " + data['location']);
    // window.setTimeout(function() { openAppWindow(data['location']); } , 1000);
    vmCheckAndDisplayFrame(data['location'], data['location'], "dummyCookieName", "dummyCookieValue", 0);
    // $('#panel2-iframe').attr("src", data['location']);
  }
  clearTimeout(vocLaunchTimer);
  vocLaunchingApp = false;
})
.fail(function(jqXHR, textStatus, errorThrown) {
	   $('#labspinbox').removeClass('icon-spin icon-spinner'); 
	   $('#labspinbox').addClass('icon-play');
	   //$('#vmp-panel4').css('z-index', '-1');
	   DisplayLoadingScreen(0);
  alert("VDI: Launch Failed");
  clearTimeout(vocLaunchTimer);
  vocLaunchingApp = false;
});
}

function stopApp()
{
	 $('#endlabspinbox').removeClass('icon-stop');
   $('#endlabspinbox').addClass('icon-spin icon-spinner');
  
data = { 'action': 'Stop', 'token': '' }

var jqxhr = $.ajax({
 type: 'POST',
 url: "https://proxy.vocareum.com/hostip//",
 data: JSON.stringify(data)
})
.done(function(data, textStatus, jqXHR) {
	   $('#endlabspinbox').removeClass('icon-spin icon-spinner');
  $('#endlabspinbox').addClass('icon-stop');
  //console.log(data);
  if (data['status'] == 'Error') {
    alert("VDI: Error: " + data['msg'])
  }
})
.fail(function(jqXHR, textStatus, errorThrown) {
	   $('#endlabspinbox').removeClass('icon-spin icon-spinner');
	   $('#endlabspinbox').addClass('icon-stop');    
	   
});                  
}


//==============================================================================
//          Function used launch RStudio onto Console/Terminal Panel
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - NONE
// Output:
//    - NONE
//==============================================================================

//==============================================================================
//      Function used to lauch Jupyter Notebook onto Console/Terminal Panel
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - NONE
// Output:
//    - NONE
//==============================================================================

//==============================================================================
//      launchJupyter()'s dependency functions
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - Username: Username to be used for Jupyter Notebook
// Output:
//    - NONE
//==============================================================================


function endResetClab(failed)
{
  document.getElementById("resetclabspinbox").style.display = "none";
}

function waitForNoneState(funcName)
{
  var func = window[funcName];
  if (typeof func !== "function") {
    show_voc_gritter(false, "Could not find function: " + funcName, true);
    return;
  }

  $.ajax({
    url: "../util/vcput.php?a=vcGetLabInfo&stepid=2792000&version=0&labworkdir=/home/nowhere",
  })
   .done(function(data) {
     try {
       var result = JSON.parse(data);
       if (result['status'] == 'Error') {
         show_voc_gritter_duration(false, "Could not get lab information: " + result['msg'], true, DEFAULT_GRITTER_DURATION);
         func(false);
       }
       else {
         state = result['lab_state'];
         if (state == "None") {
           func(true);
         } else {
           setTimeout(waitForNoneState, 1000, "endResetClab");
         }
       }
     } catch(err) {
       show_voc_gritter_duration(false, "Could not get lab1 information", true, DEFAULT_GRITTER_DURATION);
       func(false);
     }
   })
   .fail(function(data, textStatus, jqXHR) {
     show_voc_gritter_duration(false, "Could not get lab2 information", true, DEFAULT_GRITTER_DURATION);
     func(false);
   });

}

function reallyResetClab()
{
  var spinner = document.getElementById("resetclabspinbox");
  spinner.style.display = "inline-block";

  $.ajax({
    url: "../util/vcput.php?a=resetclabs&stepid=2792000&version=0&labworkdir=/home/nowhere",
  })
   .done(function(ret_val) {
     // wait for "None" state
     setTimeout(waitForNoneState, 1000, "endResetClab");
   })
   .fail(function(ret_val) {
     show_voc_gritter_duration(false, "Reset failed", true, DEFAULT_GRITTER_DURATION);
     spinner.style.display = "none";
   });
}

function resetclabs()
{
  $.ajax({
    url: "../util/vcput.php?a=vcGetLabInfo&stepid=2792000&version=0&labworkdir=/home/nowhere",
  })
   .done(function(data) {
     try {
        var result = JSON.parse(data);
        if (result['status'] == 'Error') {
           show_voc_gritter_duration(false, "Could not get lab information: " + result['msg'], true, DEFAULT_GRITTER_DURATION);
        }
        else {
          state = result['lab_state'];
          if (state == "Ready") {
            bootbox.dialog("The DB cannot be reset while the lab is running; please end the lab before proceeding.", 
                           [{
                             "label" : "Ok",
                             "class" : "btn vocbtn-ac vocbtn-action",
                           }]
            );
          }
          else {
            reallyResetClab();
          }
        }
     } catch(err) {
       show_voc_gritter_duration(false, "Could not get lab1 information", true, DEFAULT_GRITTER_DURATION);
     }
   })
   .fail(function(data, textStatus, jqXHR) {
     show_voc_gritter_duration(false, "Could not get lab2 information", true, DEFAULT_GRITTER_DURATION);
   });
  
  return;
}

function launchDatabricks() {
  DisplayLoadingScreen(1);
  $.ajax({
    url: '../util/vcprojapi.php',
    data: {
      't': 'getDatabricksWorkspaceSSOUrl',
      'courseid': '117181',
      'userid': '3209731',
      'partid': '2792000'
    },
    success: function(data) {
      try {
        let result = JSON.parse(data);
        if (result['status'] == 'Error') {
          show_voc_gritter_duration(false, "Could not get databricks workspace url: " + result['msg'], true, DEFAULT_GRITTER_DURATION);
        }
        else {
          if (newTab) {
            window.open(result['url']);
            $('#panel2-iframe').attr('src', "data:text/html;charset=utf-8,Databricks Workspace will open in a new tab. Please make sure pop-ups are enabled.");
          } else {
            $('#panel2-iframe').attr('src', result['url']);
          }
        }
      } catch(err) {
        show_voc_gritter_duration(false, "Could not get databricks workspace url", true, DEFAULT_GRITTER_DURATION);
      }
      DisplayLoadingScreen(0);
    }
  });
  return;
}

//----------------------------------------------------------------------
//
//----------------------------------------------------------------------
function createCarousel ()
{
	$('#vmButtons').slick({
		  infinite: false,
		  slidesToShow: 3,
		  slidesToScroll: 1
	    });
}

//----------------------------------------------------------------------
//
//----------------------------------------------------------------------
function vmp_init ()
{
  
  if(!newLayout) {  	
    if ((progmlab || comboLab || newide || appsIde || azureIde || gcpIde) && !onlyReadme)
  	{
  		if (readme == 1)
  		{
  			vmp_1_2_3_filetree();
  		}
  		else
  		{
  			vmp_1_2_filetree();
  		}
  	}
  	else if (onlyReadme && !appsAllowed)
  	{
  		//vmp_3();
  		// use panel2 to display panel3 readme
  		vmp_22 ();
  		vmp_copy_1_to_22 ();
  		$('#panel1-divhdr').removeClass('hidden');
  		$('#panel1-divhdr').find('span:eq(0)').addClass('hidden');
  		$("#panel1-iframe").css('height', '100vh');
  	}
  	else if (appsAllowed)
  	{
  		if(readme == 1) {
  		  vmp_1_2_3_filetree();
  		}
  		else {
  		  vmp_1_2_filetree();
  		}
  	}
  	else if (readme == 1)
  	{
  		vmp_1_2_3_filetree();
  		//vmp_22_3();
  	}
  	else
  	{
  		vmp_22();
  	}
  
  	if (!onlyReadme) //if (!progmlab)
  	{
  		if (hideFileBrowser) 
  		{
  			//console.log('hideFileBrowser');
  			document.getElementById('vmp-panel1').style.display = 'none';
  			document.getElementById('vmp-framedivider1').style.display = 'none';
  			vmp_panel1 = false;
  			
  			if (!canSubmit && !grading_script_exists && !grades_published)
  			{
  			  document.getElementById('vmp-ideheader').style.display = 'none';
  			  vmp_ideheader = false;
  			}
  		}
  		if (hideSource && hideConsole) 
  		{
  			//console.log('hideSource + hideConsole');
  			document.getElementById('editor_current_file').style.display = 'none';
  			if (hideFileBrowser) {vmp_22 ();} else {vmp_1_22 ();}
  			vmp_copy_3_to_22 ();
  		}
  		else if (hideSource) 
  		{
  			//console.log('hideSource');
  			document.getElementById('editor_current_file').style.display = 'none';
  			document.getElementById('vmp-panel2-1').style.display = 'none';
  			document.getElementById('vmp-framedivider2').style.display = 'none';
  			vmp_panel2_1 = false;
  			if (!canSubmit && !grading_script_exists && !grades_published)
  			{
  			  document.getElementById('vmp-ideheader').style.display = 'none';
  			  vmp_ideheader = false;
  			}
  		}
  		// Hides Terminal if noworkarea is ON (all except VM Labs)
  		else if (hideConsole || (noworkarea && !vmlab2)) 
  		{
  			//console.log('hideConsole');
  			document.getElementById('vmp-panel2-2').style.display = 'none';
  			document.getElementById('vmp-framedivider2').style.display = 'none';
  			vmp_panel2_2 = false;
  		}
  	}
  	
    
    if (hideNavBar && (document.getElementById('navbar-inner-div'))) {document.getElementById('navbar-inner-div').style.display = "none";}
    if (hideTimer) {document.getElementById('sessiontimer').style.display = "none";}
    if (canSubmit || !hideFileBrowser || grades_published || hasSubmissions) {document.getElementById('vmp-ideheader').style.display = "block"; vmp_ideheader = true;}
    //console.log("vmlab2 = " + vmlab2);
    if (!vmlab2) {$('#filesyncbtn').hide();}
    
    vmp_resize();
    
    if (hideAllAsns)
    {
  	  $('#coursename').addClass('hidden');
    }
    //console.log("hideStart: " + hideStart);
    if (hideStart && (stulabs || awsIde || azureIde || gcpIde) && !databrickslab)
    {
    	var detailbtn =  document.getElementById('launchclabsbtn');
    	if (typeof(detailbtn) != 'undefined' && detailbtn != null)
      {
        $('#launchclabsbtn').addClass('hidden-1');
      }
    }
    
    //console.log("hideStop: " + hideStop);
    if (hideStop && (stulabs || awsIde || azureIde || gcpIde))
    {
    	var detailbtn =  document.getElementById('endclabsbtn');
    	if (typeof(detailbtn) != 'undefined' && detailbtn != null)
      {
        $('#endclabsbtn').addClass('hidden-1');
      }
    }
    //console.log('hideExtend: ' + hideExtend);
    if (hideExtend || (comboLab && awsIde)) // aws extend is not implemented yet
    {
    	var btn =  document.getElementById('extendclabsbtn');
    	if (typeof(btn) != 'undefined' && btn != null)
      {
        $('#extendclabsbtn').addClass('hidden-1');
      }
    }
    
    //if (clabsType == 'ct' || hideDetails) // container
  	if (hideDetails)
    {
    	var detailbtn =  document.getElementById('detailbtn');
    	var detailbtn2 = document.getElementById('detailbtn2');
    	if (typeof(detailbtn) != 'undefined' && detailbtn != null)
      {
        $('#detailbtn').addClass('hidden-1');
      }
      if(typeof(detailbtn2) != 'undefined' && detailbtn2 != null) {
        $('#detailbtn2').addClass('hidden-1');
      }
    }
    
    // Hides the Reset Assignment Button if its Layout Option is disabled
    if(ResetAssignment) {
      document.getElementById('ResetAssignmentBtn').style.display="none";
      //console.log("ResetAssignmentBtn has been hidden");
    }
    
    
    if ((appsAllowed || clabsType == 'ct')  && stulabs && !jupyterelitelab && !newContainerLab && !newLabNoContainer)
    {
      //$('#launchclabsbtn').addClass('hidden-1');
      // clabs is ready, don't do another launch
  	  if(!clabsStates || (clabsStates && clabsStates[0].state != 'Ready')) launchclabs();
    }
  
    if (stulabs && !jupyterelitelab && !newContainerLab && !newLabNoContainer)
    {
      if((clabsStates && clabsStates[0].state == 'Ready')) vmBtnClicked(0, '', 1);
      showclabs(false); //false
    }
    else if (appsAllowed || newContainerLab)
    {
      if(rstudioelitelab) {
        launchRStudio();
      }
      else if (jupyterelitelab) {
        launchJupyter();
      }
      else if (newContainerLab) {
        console.log("Voc 2022");
        
                  if (databrickslab) {
            checkDatabricksLabStatus(function(session_ongoing) {
              if (session_ongoing) {
                getdatabricksdetail(0, false);
                launchDatabricks();
              } else {
                startdatabrickslab(1);
              }
            });
          } else {
            if(!vocNotebookIde) launchclabs();
          }
              }
      else {
        if (databrickslab) {
          checkDatabricksLabStatus(function(session_ongoing) {
            if (session_ongoing) {
              getdatabricksdetail(0, false);
              launchDatabricks();
            } else {
              startdatabrickslab(1);
            }
          });
        } else {
          launchApp(9);
        }
      }
    }
  
  	if (1)  // Always initial editor, filebuttons, hideallfilebtn
  	{
      initEditor();
      initFileButtons();
      hideAllFileBtn();
      
      // Initialize filetree if source is displayed (for autoloading starter files w/o need for filetree to be shown)
      if(!hideSource && hideFileBrowser) {
        initFileTree();
      }
      
      if (!hideFileBrowser)
      {
        initFileTree();
        if (progmlab) { refreshFileTree(); } //refreshS3WorkareaTree(0);}
        if (canSubmit) { refreshSubTree(); }
      } 
  	}
  
  	if (!vmp_panel1) 
  	{
  		hideAllFileBtn();
  	}
  
    // createCarousel();
  
    $('#input_filename').keydown(function(e) {
        if(e.keyCode == 13) {
            $('#filecreatebtn').trigger("click");
        }
    });
  
    $( ".commandbutton" ).click(function() {		
  		var $type = $(this).data("command");	
  	        processThisCommand($type);
  	});
  
    // workaround for guacamole container losing focus when panel3 is clicked on
    if (cnlab || newContainerLab)
    {
      var el = document.getElementById("vmp-panel2");
      if (el)
      {
        el.addEventListener('mouseenter',(event) => {
          var ifr = document.getElementById("panel2-iframe");
          if (ifr) { 
            ifr.blur(); 
            ifr.focus(); 
          }
        });
      }
    }

    $("body").on("show", ".bootbox", function () {
        $(".bootbox").appendTo("#vmp-idebox");
  	});
    
    document.onkeydown = function(e) {
  	     if (e.key === "Escape") { // escape key maps to keycode `27`
  	    	 if (document.mozFullScreen || document.webkitFullScreen) 
  	    	 {
  	    		 if (vmp_panel1)
  	    	   {
  	    	     vmp_panel1_unfloat();
  	    	   }
  	    	 }
  	    	 else
  	    	 {
  
  	    	 }
  	    }
  	};
  
    if (needIdleTimer)
    {
      panel2Iframe = document.getElementById("panel2-iframe");
      panel2Iframe.addEventListener('load', function()
      {
        //console.log("panel2 iframe load ...");
        try
        {
          if (   (typeof(panel2Iframe.contentWindow) !== 'undefined') 
              && (panel2Iframe.contentWindow != null))
          {
            vcIdleTimerSetup(panel2Iframe.contentWindow);
            idleTimerActive = true;
          }
        }
        catch (err) 
        {
          idleTimerActive = false;
          idleTimerDbResetDone = false;
          var msg = "Idle timer setup for the lab failed; the session timer (not user inactivity) will be used to auto-terminate the lab";
          console.log(msg);
          // show_voc_gritter_duration(false, msg, true, 5000);
        }
      });
    }
  }
  else {
  	// If End Exam Button or Exam Timer elements exist, display vmp-ideheader
    document.getElementById('vmp-ideheader').style.display = ((!$('#EndExamBtn').length && !$('#examTimer').length)? "none" : "block");
    vmp_ideheader = ((!$('#EndExamBtn').length && !$('#examTimer').length)? false : true);
    
    if(vmp_ideheader) {
      //if($('#EndExamBtn').length) $('#EndExamBtn').removeClass('pull-right');
      if($('#examTimer').length) $('#examTimer').removeClass('pull-right');
      $('#vmp-ideheader').addClass('center'); 
    }
    
    
    if (hideNavBar && (document.getElementById('navbar-inner-div'))) {document.getElementById('navbar-inner-div').style.display = "none";}
    if (hideTimer) {document.getElementById('sessiontimer').style.display = "none";}
    //console.log("vmlab2 = " + vmlab2);
    if (!vmlab2) {$('#filesyncbtn').hide();}
    vmp_resize();
    
    if (hideAllAsns)
    {
  	  $('#coursename').addClass('hidden');
    }
    //console.log("hideStart: " + hideStart);
    if (hideStart && (stulabs || awsIde || azureIde || gcpIde))
    {
    	var detailbtn =  document.getElementById('launchclabsbtn');
    	if (typeof(detailbtn) != 'undefined' && detailbtn != null)
      {
        $('#launchclabsbtn').addClass('hidden-1');
      }
    }
    
    //console.log("hideStop: " + hideStop);
    if (hideStop && (stulabs || awsIde || azureIde || gcpIde))
    {
    	var detailbtn =  document.getElementById('endclabsbtn');
    	if (typeof(detailbtn) != 'undefined' && detailbtn != null)
      {
        $('#endclabsbtn').addClass('hidden-1');
      }
    }
    //console.log('hideExtend: ' + hideExtend);
    if (hideExtend || (comboLab && awsIde)) // aws extend is not implemented yet
    {
    	var btn =  document.getElementById('extendclabsbtn');
    	if (typeof(btn) != 'undefined' && btn != null)
      {
        $('#extendclabsbtn').addClass('hidden-1');
      }
    }
    
    //if (clabsType == 'ct' || hideDetails) // container
  	if (hideDetails)
    {
    	var detailbtn =  document.getElementById('detailbtn');
    	var detailbtn2 = document.getElementById('detailbtn2');
    	if (typeof(detailbtn) != 'undefined' && detailbtn != null)
      {
        $('#detailbtn').addClass('hidden-1');
      }
      if(typeof(detailbtn2) != 'undefined' && detailbtn2 != null) {
        $('#detailbtn2').addClass('hidden-1');
      }
    }
    
    // Hides the Reset Assignment Button if its Layout Option is disabled
    if(ResetAssignment) {
      document.getElementById('ResetAssignmentBtn').style.display="none";
      //console.log("ResetAssignmentBtn has been hidden");
    }
    
    
    if ((appsAllowed || clabsType == 'ct')  && stulabs && !jupyterelitelab && !newContainerLab)
    {
      //$('#launchclabsbtn').addClass('hidden-1');
  	  launchclabs();
    }
  
    if (stulabs && !jupyterelitelab && !newContainerLab)
    {
      vmBtnClicked(0, '', 1);
      showclabs(false); //false
    }
    else if (appsAllowed || newContainerLab)
    {
      if(rstudioelitelab) {
        launchRStudio();
      }
      else if (jupyterelitelab) {
        launchJupyter();
      }
      else if (newContainerLab) {
        
                  if(!vocNotebookIde) launchclabs();
              }
      else {
        launchApp(9);
      }
    }
  
  	if (1)  // Always initial editor, filebuttons, hideallfilebtn
  	{
  	  initEditor();
      initFileButtons();
      hideAllFileBtn();
      
      // Initialize filetree if source is displayed (for autoloading starter files w/o need for filetree to be shown)
      if(!hideSource && hideFileBrowser) {
        initFileTree();
      }
      
      if (!hideFileBrowser)
      {
        initFileTree();
        if (progmlab) { refreshFileTree(); } //refreshS3WorkareaTree(0);}
        if (canSubmit) { refreshSubTree(); }
      } 
  	}
  
  	if (!vmp_panel1) 
  	{
  		hideAllFileBtn();
  	}
  
    // createCarousel();
  
    $('#input_filename').keydown(function(e) {
        if(e.keyCode == 13) {
            $('#filecreatebtn').trigger("click");
        }
    });
  
    $( ".commandbutton" ).click(function() {		
  		var $type = $(this).data("command");	
  	        processThisCommand($type);
  	});
  
    $("body").on("show", ".bootbox", function () {
        $(".bootbox").appendTo("#vmp-idebox");
  	});
    
    document.onkeydown = function(e) {
  	     if (e.key === "Escape") { // escape key maps to keycode `27`
  	    	 if (document.mozFullScreen || document.webkitFullScreen) 
  	    	 {
  	    		 if (vmp_panel1)
  	    	   {
  	    	     vmp_panel1_unfloat();
  	    	   }
  	    	 }
  	    	 else
  	    	 {
  
  	    	 }
  	    }
  	};
  }

} // vmp_init()

function iframeDoneLoading() {
  $.ajax({
    url: '../util/vcput.php',
    type: 'post',
    data: {
      'a': 'addActivityLogEntry',
      'stepid': "2792000",
      'asnuserid': "3209731",
      'msg': 'iframe done loading',
      'type': "18"
    }
  });
}

var performance_measured = false;
function measure_load_performance() {
  if(performance_measured || !newContainerLab) return;
  var performance_time = new Date().getTime() - window.performance.timing.fetchStart;//window.performance.timeOrigin;
  if($('#panel2-iframe').attr('src') == '') return; 
  console.log("*******************************************************");
  console.log("Loaded Source: " + $('#panel2-iframe').attr('src'));
  console.log("iFrame Load Time: "+ (performance_time/1000));
    console.log("*******************************************************");
  performance_measured = true;
}

function check_jupyter_ui() {
  if ($("#panel2-iframe").contents().find("#ipython_notebook").length > 0) {
    clearInterval(jupyter_ui_interval);
    $.ajax({
      url: '../util/vcput.php',
      type: 'post',
      data: {
        'a': 'addActivityLogEntry',
        'stepid': "2792000",
        'asnuserid': "3209731",
        'msg': 'jupyter ui loaded',
        'type': "18"
      }
    });
  }
}

let redirected = false;
function redirectIframe(ajaxUrl) {
  if ($('#panel2-iframe').attr('src') == '' || redirected) return;

  $.ajax({
    url: ajaxUrl,
    success: function(data) {
      try {
        let res = JSON.parse(data);
        let redirectUrl = res['msg'];
        if (redirectUrl != '' && $('#panel2-iframe').attr('src') != redirectUrl) {
          $('#panel2-iframe').attr('src', redirectUrl);
          redirected = true;
        }
      } catch (error) {
        show_voc_gritter(true, `failed to redirect: ${error}`, true);
      }
    }
  });
}

function terminalLoaded()
{
          measure_load_performance();
      if (databrickslab) {
        let ajaxUrl = "../util/vcprojapi.php?t=getRedirectUrl&type=databricks&userid=3209731&partid=2792000&courseid=117181";
        redirectIframe(ajaxUrl);
      }
      return;
    
    var st = setTerminalV2Mode(1);
    if (st !== false)
    {
      return;
    }
    setTimeout(terminalLoaded, 100); 
}



function renderHtmlFile(forSubmission = false) {
  showHtmlFile(viewer_last_fpath);
  if(forSubmission) $('#htmlFileViewer').off('load').on("load", function() {(eval(``));});
  else $('#htmlFileViewer').off('load')
}

function sendJsRunData(data) {
  
  // if user is studentview, instead of adding JSON file to S3, display it via voc_gritter instead
  if(false) {
    let stringData = "submit.js results: "+ JSON.stringify(data, null, 2);
    show_voc_gritter(true, stringData, false);
    show_voc_gritter(true, "* Note: submit.js results message is only viewable in Student View", false);
    recordSubmission();
  } else {
    var urlval = '../util/vcprojapi.php?t=sendJsonData&asnid=' + 2791999 + '&stepid=' + 2792000 + '&userid=' + 3209731;
  
    $.ajax({
           type: "POST",
           url: urlval,
           data: {
            'jsonResults' : (data)
          }
    })
    .done(function(ret_val) {
       if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
          console.log(ret_val + " Invalid session ");
          refreshNewSessionPage();					
        }
        
        resp = jQuery.parseJSON(ret_val);
        if (resp.status !== 'success') {
          show_voc_gritter(false, resp.msg, false);
          console.log(resp);
          
        } else {
          console.log("Javascript Successfully Executed on HTML file");
        }
        $('#htmlFileViewer').off('load');
        recordSubmission();
    });
  }
}


//popover toggle
$(document).ready(function(){
    $('[data-toggle="popover"]').popover();   

        // If there is a running container already then start the interactive GPU budget timer
    if (interactiveEnabled && vocNotebookIde && (clabsStates[0].state ?? false) == 'Ready' && !gpuTimerSyncHandle) {
      syncGpuBudgetTimer();
    }
    //checkAllLabStatus();
});

// If 'Enter' is pressed, click the element
$(document).on('keypress', function(event) {
    if(event.which == 13 || event.which == 32) $(event.target).click();
});

$(window).on('mouseenter', function() {
  $(window).focus();
});

// For new architecture, on window focus, re-set the container cookies
$(window).focus(function() {
    if(containerCookies && newContainerLab && $('#panel2-iframe').length > 0) {
      try {
        // Resolves for container's cookie data
        var cookieData = containerCookies.split(';')[0].split('=');
        var containerCookieName = cookieData[0];
        var containerCookieValue = cookieData[1];
        
        // Resolves for stored cookie data based on expected cookie name/value
        var storedCookieValue = getCookie(containerCookieName);
        
          // fetch container state
          if (vcPeriodicUiCheckHandle) {
            clearTimeout(vcPeriodicUiCheckHandle);
            vcPeriodicUiCheckHandle = null;
            vcPeriodicUiCheck();
          }
          
         (console.debug("Cookies set on Focus: " + containerCookies), document.cookie = containerCookies);
        
        if(storedCookieValue && storedCookieValue !== containerCookieValue) 
          ( console.debug("Cookie Mismatch Detected for ["+containerCookieName+"]: Setting New Cookie Values ("+storedCookieValue+") => ("+containerCookieValue+") \n\n***Refreshing Container Frame***"),
            $( '#panel2-iframe' ).attr( 'src', function ( i, val ) { return val; }));
      } catch(e) {
        console.debug("Error: Could not resolve Cookie Data");
      }
    }
});

function getCookie(cname) {
  let name = cname + "=";
  let decodedCookie = decodeURIComponent(document.cookie);
  let ca = decodedCookie.split(';');
  for(let i = 0; i <ca.length; i++) {
    let c = ca[i];
    while (c.charAt(0) == ' ') {
      c = c.substring(1);
    }
    if (c.indexOf(name) == 0) {
      return c.substring(name.length, c.length);
    }
  }
  return null;
}


var idleTimerActive = false;
var idleTimerDbResetDone = false;
var unloadEventSetup = false;

var vcUiAccessed = false;
var vcIdleTimerDelay = 30000;
var vcIdleTimerCheckAndUpdateHandle = null;
var vcIdleTimerEventsSetup = false;

function vcIdleTimerSetup(element) 
{
  console.log("===== Setting up Idle Timer events for element:");
  console.log(element);
  element.addEventListener('mousemove', vcSetUiAccessed);
  element.addEventListener('mousedown', vcSetUiAccessed);
  element.addEventListener('touchstart', vcSetUiAccessed);
  element.addEventListener('click', vcSetUiAccessed);
  element.addEventListener('keypress', vcSetUiAccessed);
  element.addEventListener('keyup', vcSetUiAccessed); // added for JupyterLab terminal
  element.addEventListener('scroll', vcSetUiAccessed, true);
}
  
//var vocdomain = document.domain.split('.').slice(-2).join('.')
//document.domain = vocdomain;

function vcSetUiAccessed() 
{
  vcUiAccessed = true;
}

function vcIdleTimerCheckAndUpdate() 
{
  if (idleTimerActive === false)
  {
    // we were not able to do this for the iframe - so we will not write anything to the db
    // since that column will now remain null, we will not terminate the lab based on the idle timer
    if (idleTimerDbResetDone === false)
    {
      idleTimerDbResetDone = true;
      vcUpdateIdleTime(1);
    }
    return;
  }
  if (vcUiAccessed)
  {
    console.log("VOC: " + Date.now() + ": the ui was accessed in the last " + vcIdleTimerDelay / 1000 + " seconds");
    vcUiAccessed = false;
    vcUpdateIdleTime(0);
  }
  else
  {
    console.log("VOC: " + Date.now() + ": the ui was _not_ accessed in the last " + vcIdleTimerDelay / 1000 + " seconds");
  }
  vcIdleTimerCheckAndUpdateHandle = setTimeout(vcIdleTimerCheckAndUpdate, vcIdleTimerDelay);
}

function vcIdleTimerCheckerStart()
{
  // setup the events - if not already done
  if (vcIdleTimerEventsSetup === false)
  {
    vcIdleTimerSetup(window);
    vcIdleTimerEventsSetup = true;
  }
  vcUiAccessed = false;
  if (vcIdleTimerCheckAndUpdateHandle == null)
  {
    console.log("Starting Idle Time Monitor...");
    vcIdleTimerCheckAndUpdateHandle = setTimeout(vcIdleTimerCheckAndUpdate, vcIdleTimerDelay);
    // write one non-null value is case the user never accesses it
    vcUpdateIdleTime(0);
  }
}

function vcSetupUnloadEvent()
{
  if (   (needIdleTimer || needUnloadEvent)
      && (unloadEventSetup === false))
  {
    unloadEventSetup = true;
    console.log("VOC: Setting up unload event...");

    window.addEventListener("beforeunload", function (e) 
    {
      var msgSent = false;
      var url = '../util/vcput.php?a=vocSourceUnloaded&vockey=92b04c35873bd949b37ad2d5305bdc08d94a5d6ff8998372748bc9b283f4c299';

      if (navigator.sendBeacon) 
      {
        const formData = new FormData();
        formData.append("partid", 2792000);
        formData.append("userid", 3209731);
        var result = navigator.sendBeacon(url, formData);
        if (result)
        {
          msgSent = true;
        }
      }

      if (! msgSent)
      {
        var jqxhr = $.ajax({
          type: "POST",
          url: url,
          data: { partid: 2792000, userid: 3209731 }
        });
      }

      var confirmationMessage = "\o/";
      (e || window.event).returnValue = confirmationMessage; // Gecko + IE
      return confirmationMessage;                            // Webkit, Safari, Chrome
    });
  }

}

function vcSetupLabEvents()
{
  if (needIdleTimer)
  {
    vcIdleTimerCheckerStart();
  }

  vcSetupUnloadEvent();
}

function vcIdleTimerCheckerStop()
{
  console.log("Stopping Idle Time Monitor...");
  clearTimeout(vcIdleTimerCheckAndUpdateHandle);
  vcIdleTimerCheckAndUpdateHandle = null;
}

function vcUpdateIdleTime(nullify)
{
  // userid / partid match; state = START; endtime = NULL
  // thisstep->id, $owner->id, 

  var jqxhr = $.ajax({
    type: "POST",
    url: '../util/vcput.php?a=updateIdleTime',
    data: { partid: 2792000, userid: 3209731, nullify: nullify }
  })
  .done(function(data, textStatus, jqXHR) {
    try {
      var result = JSON.parse(data);
      if (result['status'] == 'Error') {
        console.log("Error updating idle timer: " + result['message']);
      }
    }
    catch(err) {
      console.log("Exception updating idle timer: " + err);
    }
  })
  .fail(function(data, textStatus, jqXHR) {
    console.log("Failure updating idle timer: " + err);
  });
    
}
  
// Function used to Submit the assignment
function SubmitAsnBtnClicked(url) {
  console.log("allowSubmit Value: " + allowSubmit);
  if(awsIde) {
    if(allowSubmit == 0) {
      bootbox.dialog("The Lab must be started to Submit.", 
        [{
           "label" : "Ok",
           "class" : "btn vocbtn-ac vocbtn-action"
        }]
      );
    }
    else if (allowSubmit == 1) {
      bootbox.dialog("The Lab is still Loading. Please Wait.", 
        [{
           "label" : "Ok",
           "class" : "btn vocbtn-ac vocbtn-action"
        }]
      );
    }
    else {  //allowSubmit == 2
      confirmSubmitAsnBtn(url);
    }
  }
  else {
    console.log("ELSE'd.....");
    confirmSubmitAsnBtn(url);
  }
}



//==============================================================================
//                  Function used to Reset the assignment
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - url: reset URL (see "$reseturl" variable)
// Output:
//    - None
//==============================================================================
function confirmResetAsnBtn(url) {
  
  ;
              
  var str =   '<i class="icon-exclamation-sign red"></i> ' 
            + "Reset will delete all your content in the work area and replace it with the starter code.<br><br>"
            + ''
            + ''
            + ''
            + 'Are you sure you want to reset your work-area?';
            bootbox.dialog(str, 
                 [{
                   "label" : "Yes",
                   "class" : "btn vocbtn-ac vocbtn-action",
                   "callback": function() {
                                            show_voc_gritter(true, ' Resetting...', true);
                                          resetAsn(url, { async: 1 });
                   }
                 }, 
                  {
                    "label" : "Cancel",
                    "class" : "btn vocbtn-ac vocbtn-status"
                  }]
      );
      }

function resetAsn(url, data) {
  $.ajax({
    url: url,
    data: data,
    success: function(response) {
      try {
        const res = JSON.parse(response);
        if (res['state'] == 'Running') {
          show_voc_gritter(false, 'Reset in progress. Page will redirect when done.', false);
          setTimeout(() => {
            resetAsn(url, {
              getstatus: 1
            });
          }, 5000);
        } else if (res['state'] == 'Done') {
          const redirPage = res['output_str'];
          window.location = redirPage;
        } else if (res['state'] == 'Error') {
          show_voc_gritter(true, res['output_str'], true);
        }
      } catch (error) {
        show_voc_gritter(true, error, true);
      }
    }
  });
}

//==============================================================================
//         Prompts user with a modal confirming to end the exam
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - None
// Output:
//    - None
//==============================================================================
function endExamBtnClicked() {
  var qstr = "Please make sure that you have submitted your work. You will not be allowed to make any more submissions once you end the exam. Are you sure you want to continue? <br>";
  // qstr += "Please refresh page to verify submission(s).";

  //store original string/html in button, so we can add a spinner icon during wait and remove spinner after
  let EndExamBtn_HTML = $("#EndExamBtn").html();

  //ajax call to fetch the parts that have been submitted/missing, and 
  //append to string displayed in the bootbox dialog
  $.ajax({
      url: "../util/vcput.php",
      async: true,
      data: {
          a: "endExamGetRemainingParts",
          userid: 3209731,
          asnid: 2791999      },
      beforeSend: function() {
          console.log(`Fetching exam remaining parts...`);
          $("#EndExamBtn").html('<i class="icon-spin icon-spinner"></i>' + EndExamBtn_HTML);
      }
  }).done( function(data) {
    //remove spinner, set back to original text/html
    $("#EndExamBtn").html(EndExamBtn_HTML);

    data = JSON.parse(data);
    //append the submitted/missing parts strings. .join("") is used to remove
    //the comma, because the strings contain <br> tags already
    qstr += data.join("");

    //original bootbox to confirm endExam
    bootbox.dialog(qstr,
      [{
        "label" : "Yes",
        "class" : "btn vocbtn-ac vocbtn-action",
        "callback": function() {
          endExam();
        }
      },
      {
        "label" : "Cancel",
        "class" : "btn vocbtn-ac vocbtn-status"
      }]
    );
  });
}

//==============================================================================
//                    Function used to end the Exam
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - None
// Output:
//    - None
//==============================================================================
function endExam() {
  var data = "";
  var urlval = '../util/vcprojapi.php?t=auto_peer_review_end_exam&type=end_exam&asnid=' + 2791999 + '&userid=' + 3209731;
  $.ajax({
         type: "POST",
         url: urlval,
         data: data
  })
  .done(function(ret_val) {
        if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
          console.log(ret_val + " Invalid session ");
          // refreshNewSessionPage();					
        }
        resp = jQuery.parseJSON(ret_val);
        if (resp.status !== 'success') {
          show_voc_gritter(true, 'End exam failed. <br>' + resp.message, true);
        } else {
          $("#lisubmit").addClass('hidden');
          $("#end-exam-group").addClass('hidden');
                    show_voc_gritter(true, resp.message, true);
        }
    });
}


//==============================================================================
//                    Function used for RUN
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - None
// Output:
//    - None
//==============================================================================
function runBtnClicked() {
  doTerminalBuildRun('RUN');
  
}


//==============================================================================
//                    Function used for BUILD
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - None
// Output:
//    - None
//==============================================================================
function buildBtnClicked() {

	var codeFileChanged = true;
	if (editor.doc.isClean(editor_content_change)) codeFileChanged = false;
	if (vocIsFileReadOnly(viewer_last_fpath)) codeFileChanged = false;
	if (codeFileChanged) {		
		$('#buildtextarea').html("<i class=\"icon-spin icon-spinner\"></i>&nbsp; Saving file before triggering build. Note: A stable internet connection is required for the save and build");

		if (voc_save(true, "Saving before build")) {
		} else {
		}
	}

	if (doTerminalBuildRun('BUILD'))
	{
	  window.setTimeout(function(){ refreshFileTree(false, true); } , 2000);
		return;
	}
	build_in_progress = true;
					
	
	if (editor.doc.isClean(editor_content_change)) {
	} else {
	}
	$('#buildtextarea').html("<i class=\"icon-spin icon-spinner\"></i>&nbsp; Waiting for output ..");
	
	$('#build-icon').removeClass('vochide');				
	$("#build-icon").addClass('icon-spin');
	$("#build-icon").addClass('icon-spinner');

	var filepath = viewer_last_fpath;				
	if (!viewer_last_fpath) filepath = viewer_first_fpath;
                          var unencoded_filepath = filepath;
	filepath = encodeURIComponent(filepath);				

  var filepathstr = getFilePathStr(unencoded_filepath, true);
  var stepstr = "&stepid=2792000";        
	
  	  var url = "../?file0="+filepath+"&asnid=2791999&outputformat=json";
	
  var jqxhr = $.post(url,{code0: ""},function(ret_val) {
		if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
			refreshNewSessionPage();
		}
		passed = ( ret_val.indexOf('BUILD SUCCESSFUL') !== -1 );
		
		if (passed) {
			show_voc_gritter(false, "Build successful", false);
		} else {
			show_voc_gritter(false, "Build completed", false);
		}
		
		$('#buildtextarea').html(ret_val);

		
		var build_resp;
		
		try {
			build_resp = jQuery.parseJSON(ret_val);
		} catch(err) {
			build_resp = "ERROR";
		}					
		
		var outp = "Could not get build response";
		if (!build_resp || (build_resp == "") || (build_resp == "ERROR")) {
			if (build_resp == "ERROR") {
				outp = "Build error. <br><br> ERROR CODE: INVJ01"
			} else {
				outp = "Could not fetch build response";
			}
		} else {
			if (build_resp.result == "pass") {
				outp = '<i class="icon-ok icon-small green"> <strong>Build successful</strong></i><br>';
			} else if (build_resp.result == "fail") {
				outp = '<i class="icon-exclamation-sign icon-large red"> <strong>Build failed</strong></i><br>';
			}	
			for (i = 0; i < build_resp.messages.length; i++) {	
				msg = build_resp.messages[i];
				if (msg.file != "") {
					if (canOpenFile(msg.file)) {
						outp = outp + '<a class="bldFileOpen" href="#" data-filename="'+ msg.file + '" data-filedir="'+ msg.dir +'" data-line="'+ msg.line + '" class="btn btn-link btn-small" style="margin:2px;padding:0px 4px 0px 4px !important;"> ' +
									'	<i class="icon-reply icon-only"></i> ' +
									' </a> ';
					}
				}						
				outp = outp + '' + msg.message + ' <br>';
			}
		}	


        widgetModalOutput(outp);
  

										

  })
  .done(function() {
  	  })
  .fail(function() {
  	  	show_voc_gritter(false, "Something went wrong. Please try again", false);
  	$('#buildtextarea').html("Something went wrong. Please try again");
  })
  .always(function() {
  	  	indicate_build_done();
  	build_in_progress = false;
  });
  console.log("Reached End of Function");
}


//==============================================================================
//    FUNCTION THAT DOES EITHER BUILD OR RUN DEPENDING ON WHAT"S CALLED
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - None
// Output:
//    - None
//==============================================================================
var build_in_progress = false;
var run_in_progress = false;
function doBuildRun(build) {
  
  var name = (build == 1)? "Build" : "Run";
  var type = (build == 1)? "BUILD" : "RUN";
  
  
  var codeFileChanged = true;
	if (editor.doc.isClean(editor_content_change)) codeFileChanged = false;
	if (vocIsFileReadOnly(viewer_last_fpath)) codeFileChanged = false;
	if (codeFileChanged) {
		if (voc_save(true, "Saving before " + type)) {}
	}
  
  if(build_in_progress) {
    show_voc_gritter(false, "Build in Progress.  Please wait...", false);
    return;
  }
  else if(run_in_progress) {
    show_voc_gritter(false, "Run in Progress.  Please wait...", false);
    return;
  }
  
  (build == 1)? build_in_progress = true : run_in_progress = true;
  
  updateBuildRunSpinners(type, 1);
  
  
  
  
  
  $("#"+((build)? 'build' : 'run')+"_script_section").html("<pre>[ Executing '" + type + "'... ]</pre>");
					
	if (editor.doc.isClean(editor_content_change)) {}
	
	processThisCommand(type);
  return;
	
	$('#build-icon').removeClass('vochide');				
	$("#build-icon").addClass('icon-spin');
	$("#build-icon").addClass('icon-spinner');

	var filepath = viewer_last_fpath;				
	if (!viewer_last_fpath) filepath = viewer_first_fpath;
                          var unencoded_filepath = filepath;
	filepath = encodeURIComponent(filepath);				

  var filepathstr = getFilePathStr(unencoded_filepath, true);
  var stepstr = "&stepid=2792000";        
	
  	  if(build) {
	    var url = "../?file0="+filepath+"&asnid=2791999&outputformat=json"+filepathstr;
	  }
	  else {
	    var url = "../?file0="+filepath+"&asnid=2791999&outputformat=json"+filepathstr;
	  }
	

	  
  var jqxhr = $.post(url,{code0: ""},function(ret_val) {
    
		if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
			refreshNewSessionPage();
		}
		passed = ( ret_val.indexOf(name+' SUCCESSFUL') !== -1 );
		
		if (passed) {
			show_voc_gritter(false, name+" successful", false);
		} else {
			show_voc_gritter(false, name+" completed", false);
		}

		
		var buildrun_resp;
		
		try {
			buildrun_resp = jQuery.parseJSON(ret_val);
		} catch(err) {
			buildrun_resp = "ERROR";
		}					
		
		var outp = "Could not get build response";
		if (!buildrun_resp || (buildrun_resp == "") || (buildrun_resp == "ERROR")) {
			if (buildrun_resp == "ERROR") {
				outp = "Run error. <br><br> ERROR CODE: INVJ01"
			} else {
				outp = "Could not fetch build response";
			}
		} else {
			if (buildrun_resp.result == "pass") {
				outp = '<i class="icon-ok icon-small green"> <strong>'+type+' successful</strong></i><br>';
			} else if (buildrun_resp.result == "fail") {
				outp = '<i class="icon-exclamation-sign icon-large red"> <strong>'+type+' failed</strong></i><br>';
			}	
			
			try {
  			for (i = 0; i < buildrun_resp.messages.length; i++) {
  				msg = buildrun_resp.messages[i];
  				if (msg.file != "") {
  					if (canOpenFile(msg.file)) {
  						outp = outp + '<a class="bldFileOpen" href="#" data-filename="'+ msg.file + '" data-filedir="'+ msg.dir +'" data-line="'+ msg.line + '" class="btn btn-link btn-small" style="margin:2px;padding:0px 4px 0px 4px !important;"> ' +
  									'	<i class="icon-reply icon-only"></i> ' +
  									' </a> ';
  					}
  				}						
  				outp = outp + '' + msg.message + ' <br>';
  			}
			}
			catch {}
		}	

        widgetModalOutput(outp);
  

										

  })
  .done(function() {
  	  	getBuildRunOutput(build);
  	refreshFileTree();
  })
  .fail(function() {
  	  	show_voc_gritter(false, "Something went wrong. Please try again", false);
  	//$('#buildtextarea').html("Something went wrong. Please try again");
  })
  .always(function() {
  	  	//indicate_build_done();
  	(build == 1)? build_in_progress = false : run_in_progress = false;
  });
  console.log("Reached End of Function");
}

//==============================================================================
//                  Function used for RUN/BUILD Functionality
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - type: Either 'RUN' or 'BUILD' strings
// Output:
//    - None
//==============================================================================
function doTerminalBuildRun($type)
{
    return false;
}

//==============================================================================
//                  Helper function for doTerminalBuildRun() ????
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - Data: ????
// Output:
//    - None
//==============================================================================
function vcGetCmdStr(data)
{
  var st = data.search(/@vocbegin@/);
  var ed = data.search(/@vocend@/);
  if(st>=0 && ed>=0 ) return data.substring(st+10, ed);
  else                return '';
}

function saveDbScriptToFile($type, callback=null) {
  var whichfilepath = viewer_last_fpath;
  if (!whichfilepath) whichfilepath = viewer_first_fpath;
  filepathstr = getFilePathStr(whichfilepath, true);
  // save the db data into a file - .voc{$type}.sh
  var fileName = "/home/nowhere" + "/";
  var jqxhr = $.ajax('../util/vcput.php?a=SaveDbScriptToFile'
                    + '&asnid='+ 2792000                    + '&type=' + $type
                    + '&mode=s'
                    + '&version=0'
                    + '&filename=' + fileName
                    + filepathstr)
    .done(function(data, textStatus, jqXHR) {
      if (callback) {
        // the callback will use postMessage
        callback(vcGetCmdStr(data));
      } else {
        document.getElementById('panel2-iframe').focus();
        document.getElementById('panel2-iframe').contentWindow.executeCommand(vcGetCmdStr(data));
        refreshFileTree(false, true);
      }
    })
    .fail(function(data, textStatus, jqXHR) {
      str = "Unexpected failure. Please contact support";
            updateReportStatus($type, '<i class="icon-info"></i>Unexpected error');
          });
}


//==============================================================================
//          Function used to Initialize the lab status indicator
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - NONE
// Output:
//    - NONE
//==============================================================================
function initializeLabStatusIndicator() {
  
  if(cnlab /*|| newContainerLab*/) return;
  var vmButtons = $("span[id^='vmBtn']");
    var vmList = null;
  
  // Exits function if it's container Lab
  if(cnlab/* || newContainerLab*/) return;
  
  vmButtons.each(function() {
    var vmBtnIndex = $(this).attr('data-indx');
    if($(this).text() == 'AWS') {
      if(!$('#vmstatus'+vmBtnIndex).hasClass('led-red', 'led-yellow', 'led-green')) {
        
        checkAWSStatus();
        
        //updates the AWS Session Timer if it's the only lab existing
        if(vmList == null && vmButtons != null) {
          if (vmButtons.length == 1) { // only AWS button is there
            showawsact(0);  
          }
        }
      }
    }
    else if ($(this).text() == 'Azure') {
      if(!$('#vmstatus'+vmBtnIndex).hasClass('led-red', 'led-yellow', 'led-green')) {
        checkAzureLabStatus(function(response) {
          updateLabStatusIndicator("Azure", (response)? 'Ready':'Terminated');
          getazuredetail(0);
        });
      }
    }
    else if ($(this).text() == 'GCP') {
      if(!$('#vmstatus'+vmBtnIndex).hasClass('led-red', 'led-yellow', 'led-green')) {
        checkGCPLabStatus(function(response) {
          updateLabStatusIndicator("GCP", (response)? 'Ready':'Terminated');
          getgcpdetail(0);
        });
      }
    }
    else if ($(this).text() == 'Databricks') {
      if(!$('#vmstatus'+vmBtnIndex).hasClass('led-red', 'led-yellow', 'led-green')) {
        checkDatabricksLabStatus(function(response) {
          updateLabStatusIndicator("Databricks", (response)? 'Ready':'Terminated');
        });
      }
    }
    else {
      for(var i = 0; i < vmList.length; i++) {
        if(vmList[i].name == $(this).text() && !$('#vmstatus'+vmBtnIndex).hasClass('led-red', 'led-yellow', 'led-green')) {
          updateLabStatusIndicator($(this).text(), vmList[i].state); 
        }
      } 
    }
  });
}


//==============================================================================
//          Function used to update the lab status indicator
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - vmBtnText: the object of the lab status indicator to change
//    - Status:
//            -Ready: Changes labStatusElement to ready (green led)
//            -Initializing: Changes labStatusElement to initializing (yellow led)
//            -Terminated: Changes labStatusElement to Terminated (red led)
//    - INPUT NOTES: If vmBtnText & status are NULL, all vm buttons will be updated
// Output:
//    - NONE
//==============================================================================
function updateLabStatusIndicator(vmBtnText, status) {
  // Array that consists of all the vm buttons that show up on the top right of lab page
  var vmButtons = $("span[id^='vmBtn']");
  var vmButtonNamesList = new Array();
  var access_v2_namesList = new Array();
  vmButtons.each(function() {vmButtonNamesList.push($(this).text())});
  
  $(clabs_access_v2_list).each(function() {
    var parentVMName = this.name;
    $(this.access_v2).each(function() { access_v2_namesList[this.name] = parentVMName });
  });
  
  
  // Updates the Status indicator(s) of labs during startup (when vmBtnText & status are NULL)
  if(status == null && vmBtnText == null) {
    vmButtons.each(function() {
      var vmButtonToChange = this;  // THe button to evaluate
      var vmStatusElementToChange = $(vmButtonToChange).find('.led'); // the vm Status indicator to change

      
      // Checks AWS lab status and displays the correct state with the status indicator
      if($(vmButtonToChange).text() == "AWS") {
        checkAWSStatus();
      }
      // Checks Azure Lab status and displays the correct sate with the status indicator
      else if ($(vmButtonToChange).text() == "Azure") {
        if(!$(vmStatusElementToChange).hasClass('led-yellow')) {
          checkAzureLabStatus(function(response) {
            setLabStatusIndicator(vmStatusElementToChange, (response)? 'Ready':'Terminated', "Azure");
          }); 
        }
      }
      else if ($(vmButtonToChange).text() == "GCP") {
        if(!$(vmStatusElementToChange).hasClass('led-yellow')) {
          checkGCPLabStatus(function(response) {
            setLabStatusIndicator(vmStatusElementToChange, (response)? 'Ready':'Terminated', "GCP");
          });
        }
      }
      else if ($(vmButtonToChange).text() == "Databricks") {
        if(!$(vmStatusElementToChange).hasClass('led-yellow')) {
          checkDatabricksLabStatus(function(response) {
            setLabStatusIndicator(vmStatusElementToChange, (response)? 'Ready':'Terminated', "Databricks");
          });
        }
      }
      else {
        // Checks the ClabsStatus and changes the state based on response
        checkClabsStatus(function(vmList) {
          clabsStates = $(vmList);
          if(clabsStates) {
            // If button name is in access_v2 list
            if(access_v2_namesList[$(vmButtonToChange).text()] != undefined) {
              clabsStates.each(function () {
                if(this.name == access_v2_namesList[$(vmButtonToChange).text()]) {
                  if(this.state == 'None' || this.state == 'Stopped' || this.state == 'Failed' || this.state == 'Terminated') {
                    setLabStatusIndicator(vmStatusElementToChange, (this.state == 'Failed' || this.state == 'Stopped')? this.state : 'Terminated', this.name);
                  }
                  else {
                    setLabStatusIndicator(vmStatusElementToChange, (this.state == '')? "Starting": this.state , this.name);
                  }
                }
              });
            }
            else {  //if button name is not in access_v2 list
              clabsStates.each(function() {
                if(this.name == $(vmButtonToChange).text()) {
                  if(this.state == 'None' || this.state == 'Stopped' || this.state == 'Failed' || this.state == 'Terminated') {
                    setLabStatusIndicator(vmStatusElementToChange, (this.state == 'Failed' || this.state == 'Stopped')? this.state : 'Terminated', this.name);
                  }
                  else {
                    setLabStatusIndicator(vmStatusElementToChange, (this.state == '')? "Starting": this.state , this.name);
                  }
                }
              });
            }
          }
        }); 
      }
    });
  }
  // updates the specific lab status indicator specified by vmBtnText to the specified status (status parameter)
  else {
    vmButtons.each(function() {
      var vmButtonToChange = this;  // THe button to evaluate
      var vmStatusElementToChange = $(vmButtonToChange).find('.led');
      if($(vmButtonToChange).text() == vmBtnText) {
        setLabStatusIndicator(vmStatusElementToChange, status, vmBtnText);
      }
    });
  }
}

function checkAllLabStatus() {
  
  console.log("===== Polling Lab Status =====");
  
  // Array that consists of all the vm buttons that show up on the top right of lab page
  var vmButtons = $("span[id^='vmBtn']");
  var vmButtonNamesList = new Array();
  var access_v2_namesList = new Array();
  vmButtons.each(function() {vmButtonNamesList.push($(this).text())});
  
  $(clabs_access_v2_list).each(function() {
    var parentVMName = this.name;
    $(this.access_v2).each(function() { access_v2_namesList[this.name] = parentVMName });
  });
  
  
  // Updates the Status indicator(s) of labs during startup (when vmBtnText & status are NULL)
  vmButtons.each(function() {
    var vmButtonToChange = this;  // THe button to evaluate
    var vmStatusElementToChange = $(vmButtonToChange).find('.led'); // the vm Status indicator to change

    
    // Checks AWS lab status and displays the correct state with the status indicator
    if($(vmButtonToChange).text() == "AWS") {
      checkAWSStatus();
    }
    // Checks Azure Lab status and displays the correct sate with the status indicator
    else if ($(vmButtonToChange).text() == "Azure") {
      if(!$(vmStatusElementToChange).hasClass('led-yellow')) {
        checkAzureLabStatus(function(response) {
          setLabStatusIndicator(vmStatusElementToChange, (response)? 'Ready':'Terminated');
        }); 
      }
    }
    else {
      // Checks the ClabsStatus and changes the state based on response
      checkClabsStatus(function(vmList) {
        clabsStates = $(vmList);
        if(clabsStates) {
          // If button name is in access_v2 list
          if(access_v2_namesList[$(vmButtonToChange).text()] != undefined) {
            clabsStates.each(function () {
              if(this.name == access_v2_namesList[$(vmButtonToChange).text()]) {
                if(this.state == 'None' || this.state == 'Stopped' || this.state == 'Terminated') {
                  setLabStatusIndicator(vmStatusElementToChange, 'Terminated');
                }
                else {
                  setLabStatusIndicator(vmStatusElementToChange, (this.state == '')? "Starting": this.state );
                }
              }
            });
          }
          else {  //if button name is not in access_v2 list
            clabsStates.each(function() {
              if(this.name == $(vmButtonToChange).text()) {
                if(this.state == 'None' || this.state == 'Stopped' || this.state == 'Terminated') {
                  setLabStatusIndicator(vmStatusElementToChange, 'Terminated');
                }
                else {
                  setLabStatusIndicator(vmStatusElementToChange, (this.state == '')? "Starting": this.state );
                }
              }
            });
          }
        }
      }); 
    }
  });
  
  window.setTimeout(checkAllLabStatus, 15000);  // Poll every 15s
}


//==============================================================================
//          Function used to check VM/Container Lab Status
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - NONE
// Output:
//    - RETURNS: Data pertaining to the clabs and it's status
//==============================================================================
function checkClabsStatus(callback) {
  var obj = $.ajax({
    url: "../util/vcput.php?a=vcGetLabInfo&stepid=2792000&version=0&labworkdir=/home/nowhere&graderide=0",
  })
  .done(function(data) {
    var result = JSON.parse(data);
    if(result.status == "Error" && typeof result.data !== "undefined") result = result.data;
    clabsStates = $(result.vms);
    return callback(result.vms);
  })
  .fail(function(data) {
    return callback(data);
  });
}


//==============================================================================
//          Function used to check Azure Cloud Lab Status
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - NONE
// Output:
//    - RETURNS: true if Azure Lab Status returns Active
//==============================================================================
function checkAzureLabStatus(callback) {
  var v = 0;
   $.ajax({
      url: "../util/vcput.php?a=getazure&type=1&stepid=2792000&version=0&v="+v,
   })
   .done(function(ret_val) {
     var AzureLabDetails = JSON.parse(ret_val); // JSON parses the data returned
     if(typeof AzureLabDetails.data !== 'undefined' && Array.isArray(AzureLabDetails.data)/*AzureLabDetails.data.length > 1*/) {
       AzureLabDetails = AzureLabDetails.data[0];
     }
     
     // If User data exists within the response & Azure is active, return true (Azure IS active)
     if(AzureLabDetails.data.user != null) {
       if(!hideBudget && (azureIde) && !comboLab) {
          updatecloudbudget();
        }
       return (AzureLabDetails.data.user.is_active == 1)? callback(true) : callback(false);
     }
     else {
       return callback(false);
     }
     
    })
   .fail(function(ret_val) {
     return callback(false);
   });
}


//==============================================================================
//          Function used to check GCP Cloud Lab Status
//------------------------------------------------------------------------------
// Input Variables:
//    - NONE
// Output:
//    - RETURNS: true if GCP Lab Status returns Active
//==============================================================================
function checkGCPLabStatus(callback) {
  var v = 0;
  $.ajax({
    url: "../util/vcput.php?a=getgcp&mode=s&type=1&stepid=2792000&version=0&v="+v,
  })
  .done(function(ret_val) {
    if (ret_val.includes('labactive')) {
      return callback(true);
    } else {
      return callback(false);
    }
  })
  .fail(function(ret_val) {
    return callback(false);
  });
}

//==============================================================================
//          Function used to check Databricks Lab Status
//------------------------------------------------------------------------------
// Input Variables:
//    - NONE
// Output:
//    - RETURNS: true if Databricks Lab Status returns Active
//==============================================================================
function checkDatabricksLabStatus(callback) {
  var v = 0;
  $.ajax({
    url: "../util/vcprojapi.php?t=getdatabricks&mode=s&type=1&stepid=2792000&version=0&v="+v,
  })
  .done(function(ret_val) {
    try {
      let result = JSON.parse(ret_val);
      if ('labactive' in result) {
        if ('expiretime' in result) {
          expiretime = result['expiretime'];
          if (timerhandle) clearTimeout(timerhandle);
          timercountdown();
        }
        return callback(true);
      } else {
        if ('endlab' in result) {
          endlab = result['endlab'];
        } else {
          endlab = false;
        }
        return callback(false);
      }
    } catch (error) {
      return callback(false);
    }
  })
  .fail(function(ret_val) {
    return callback(false);
  });
}

//==============================================================================
//          Function used to check AWS Cloud Lab Status
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - NONE
// Output:
//    - RETURNS: true if AWS credentials are valid/exist, returns false if credentials are invalid/non-existant
//==============================================================================
function checkAWSLabStatus(callback) {
  var v = 0;
   $.ajax({
      url: "../util/vcput.php?a=getaws&type=1&stepid=2792000&version=0&v="+v,
   })
   .done(function(ret_val) {
     
      if(ret_val.includes('aws_access_key_id') && ret_val.includes('aws_session_token') && ret_val.includes('aws_secret_access_key')) {
        return callback(true);
      }
      else {
        return callback(false);
      }
   })
   .fail(function(ret_val) {   // Failed to retrieve credentials
     return callback(false);
   });
}

//==============================================================================
//        Function used to check for errors during AWS Console Startup
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - ret_val: Return value of vcIdpLaunchCfnInit(). Typically a message related to the activation of the AWS cloud labs, if it failed or succeeded.
// Output:
//    - RETURNS: 1 if there is an error, 0 if there isn't an error
//==============================================================================
function checkAWSInitializationStatus(ret_val) {

  // Individually checks error messages during initialization
  var myLabRegistrationErr = (ret_val.includes('failed to register my lab')) ? true : false;
  var getAWSAccountErr = (ret_val.includes('failed to get aws account')) ? true : false;
  var AWSAccountSuspendedErr = (ret_val.includes('AWS account deactivated')) ? true : false;
  var MonthlyBudgetErr = (ret_val.includes('Current month AWS expense exceeded monthly')) ? true : false;
  var AccessTokenErr = (ret_val.includes('failed to obtain access token')) ? true : false;
  var CloudformationErr = (ret_val.includes('no Cloudformation template')) ? true : false;
  var EmptyCloudFormationErr = (ret_val.includes('cloudformation content is empty')) ? true : false;
  var accountInCleanUpErr = (ret_val.includes('account is still in cleanup')) ? true : false;

  // Returns 1 if error is found, returns 0 if no error is found
  if(myLabRegistrationErr || getAWSAccountErr || AWSAccountSuspendedErr || MonthlyBudgetErr ||
    AccessTokenErr || CloudformationErr || EmptyCloudFormationErr || accountInCleanUpErr) {
    return 1;
  }
  else {
    return 0; // Returns 0 if no errors during initialization were found
  }
}


//==============================================================================
//          Function used to set the lab status indicator
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - labStatusElement: the object of the lab status indicator to change
//    - vmBtnElement: the object pertaining to the vm button itself
//    - vmTooltipElement: the tooltip object
//    - Status:
//            -Ready: Changes labStatusElement to ready (green led)
//            -Initializing: Changes labStatusElement to initializing (yellow led)
//            -Terminated: Changes labStatusElement to Terminated (red led)
// Output:
//    - NONE
//==============================================================================
function setLabStatusIndicator(labStatusElement, status, name="") {
  // Change it so that vmList is also changed
  if(status == "Ready") {
    $(labStatusElement).removeClass('led-red led-yellow').addClass('led-green');
    $(labStatusElement).attr('aria-label', ((name != '')?name+' ':'') +'Status: ' + status).attr('title', ((name != '')?name+' ':'') +'Status: ' + status);
  }
  else if (status == 'Starting' || status == 'Launching' || status == 'Initializing' || status == 'In Creation') {
    $(labStatusElement).removeClass('led-red led-green').addClass('led-yellow');
    $(labStatusElement).attr('aria-label', ((name != '')?name+' ':'') +'Status: ' + status).attr('title', ((name != '')?name+' ':'') +'Status: ' + status);
  }
  else if (status == 'Shutting down' || status == 'Stopping' || status == 'Terminating' || status == 'Deleting' || status == 'Ending') {
    $(labStatusElement).removeClass('led-red led-green').addClass('led-yellow');
    $(labStatusElement).attr('aria-label', ((name != '')?name+' ':'') +'Status: ' + status).attr('title', ((name != '')?name+' ':'') +'Status: ' + status);
  }
  else {  // For Terminated, Failed, Stopped
    $(labStatusElement).removeClass('led-yellow led-green').addClass('led-red');
    $(labStatusElement).attr('aria-label', (status == 'Failed')? ((name != '')?name+' ':'') + 'Status: Failed' : ((name != '')?name+' ':'') + 'Status: Terminated').attr('title', (status == 'Failed')? ((name != '')?name+' ':'') + 'Status: Failed' : ((name != '')?name+' ':'') + 'Status: Terminated');
  }
}


//==============================================================================
//          Function that launches the correct labs
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - NONE
// Output:
//    - NONE
//==============================================================================
function StartLabs() {
  
  // Checks if 'Launch Lab' button is being displayed...if it is, remove it
  if($('#open').is(':visible')) {
    $('#panel2-div').remove();
    $('#vmp-panel2-2').append(`
      <div id="panel2-div" style="overflow:hidden; height:100%; padding: 0px; margin-bottom: 0px; margin-left:0px; border:0px solid lightblue;">
        <iframe id="panel2-iframe" name="panel2-iframe" title="Desktop" src="" width="100%" height="100%" style="overflow:none;border:0px solid red;" onload="terminalLoaded()"></iframe>
      </div>`);
    $('#panel2-iframe').attr('src', '');
  }
  
  if(maximizeOnStart) {
    $('.vmp-showfullscreen').trigger('click');
  }
  
  if(comboLab) {
    manualLabStartFlag = true;
    console.log("Starting VM/Container Lab & AWS/Azure Console");
    launchclabs();  // Starts both the regular lab and the AWS lab
  }
  else {
    if (!startCloudResources(1)) {  // if a cloud resource start was not initiated
      manualLabStartFlag = true;
      console.log("Starting VM/ContainerLab/AWS/Azure/GCP Console");
      launchclabs();  // Starts both the regular lab and/or the AWS lab
    }
  }
}

//==============================================================================
//          Function that launches the associated cloud resource/lab
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - v: [BOOLEAN] that determines wether to show the loading screen or not
// Output:
//    - BOOLEAN: indicates whether or not a cloud resource 'start' was initiated
//==============================================================================
function startCloudResources(v) {
  if(awsIde) {
    console.log("Starting AWS Console");
    startawslab(v); // Starts just the AWS lab
  }
  else if (azureIde) {
    console.log("Starting Azure");
    startazurelab(v); // Starts just the azure lab
  }
  else if (gcpIde) {
    console.log("Starting GCP");
    startgcplab(v); // Starts just the gcp lab
  }
  else if (databrickslab) {
    console.log("Starting Databricks");
    startdatabrickslab(v);
  } else {
    return false;
  }
  return true;
}

//==============================================================================
//          Function that ends the correct labs
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - NONE
// Output:
//    - NONE
//==============================================================================
function EndLabs() {
    var cdbList = null; // For checking if custom db is active
  
  // End Lab Behavior for Combo Labs
  if(comboLab || (cdbList != null && !newContainerLab)) {
    console.log("Ending VM Lab & AWS/Azure Console");
    endclabs();
  }
  else {
    if(awsIde) {
      console.log("Ending AWS Console");
      endawslab(1);
    }
    else if(azureIde) {
      console.log("Ending Azure");
      endazurelab(1);
    }
    else if (gcpIde) {
      console.log("Ending GCP");
      endgcplab(1);
    }
    else if (databrickslab) {
      console.log("Ending Databricks");
      enddatabrickslab(1);
    }
    else {
      console.log("Ending VM Lab & AWS/Azure/GCP Console");
      endclabs();
    }
  }
}

//==============================================================================
//          Function that displays the loading screen/logo
//------------------------------------------------------------------------------ 
// Input Variables: 
//    - flag:
//          = 0: stop displaying logo
//          = 1: display logo
// Output:
//    - NONE
//==============================================================================
function DisplayLoadingScreen(flag) {
  if(flag == 0) {
    // Change background to gray
    if(document.getElementById('vmp-panel2-2') != null) {
      //$('#vmp-panel2-2').css('background-color', 'rgba(90,90,90,1.0)');
      $('#vmp-panel2-2').css('background-color', 'transparent');
      $('#vmp-panel2-2').css('overflow-y', 'scroll');
    }

    // Shows the terminal
    if(document.getElementById('panel2-iframe') != null) {
      //$('#panel2-iframe').css('display', 'block');
      if(!firstFrameLoad) $('#panel2-iframe').css('opacity', '100');
    }
    
        // hides the loading screen
    if(document.getElementById('LoadingImage') != null) {
      $('#LoadingImage').css('display', 'none');
    }
      }
  else {
    // Hides the terminal
    if(document.getElementById('panel2-iframe') != null) {
      //$('#panel2-iframe').css('display', 'none');
      $('#panel2-iframe').css('opacity', '0');
    }
    
    // Change background to white
    if(document.getElementById('vmp-panel2-2') != null) {
      $('#vmp-panel2-2').css('background-color', 'white');
      $('#vmp-panel2-2').css('overflow-y', 'hidden');
    }
    
        // Shows the loading Screen
    if(document.getElementById('LoadingImage') != null) {
      $('#LoadingImage').css('display', 'block');
    }
      }
}
var vcPeriodicUiCheckHandle = null;
var vcPeriodUiCheckReloadDelay = 5000;     // 5 s
var vcPeriodUiCheckFirstDelay = 30000;     // 30 s
var vcPeriodUiCheckSamplingDelta = 180000; // 3 min

function vcPeriodicUiCheck()
{
  $.ajax({
    url: "../util/vcput.php?a=vcPeriodicUiCheck&stepid=2792000&version=0&labworkdir=/home/nowhere",
  })
  .done(function(data, textStatus, jqXHR)
  {
    try 
    {
      var result = JSON.parse(data);
      if (result['status'] != 'Error')
      {
        var lab_info = result['lab_info'];
        var state = lab_info['lab_state'];
        if (state == "Ready") 
        {
          vcPeriodicUiCheckHandle = window.setTimeout(vcPeriodicUiCheck, vcPeriodUiCheckSamplingDelta);
        }
        else
        {
          // gray out the screen?
          vcPeriodicUiCheckHandle = null;
          console.log("The lab state is no longer 'Ready'; stopping periodic ui check");
          containerCookies = null;
          // Grays out screen when lab is no longer ready...
          if(newContainerLab || (vmlab2 && newContainerFlow)) {
            if (periodic_container_timer) clearTimeout(periodic_container_timer);
            periodic_container_check();
            updateLabStatusIndicator();
            displayContainerPanelFiller();
          }
          return;
        }
      }
    }
    catch(err)
    {
      console.log("vcPeriodicUiCheck:Error: " + err);
      vcPeriodicUiCheckHandle = window.setTimeout(vcPeriodicUiCheck, vcPeriodUiCheckSamplingDelta);
    }
  })
  .fail(function(data, textStatus, jqXHR)
  {
    console.log("vcPeriodicUiCheck:Fail: " + textStatus);
    vcPeriodicUiCheckHandle = window.setTimeout(vcPeriodicUiCheck, vcPeriodUiCheckSamplingDelta);
  });
}

function vcStopPeriodicUiCheck()
{
    if (vcPeriodicUiCheckHandle)
    {
      clearTimeout(vcPeriodicUiCheckHandle);
      vcPeriodicUiCheckHandle = null;
    }
}

function vcSetupPeriodicUiCheck(delay)
{
    // let's start with vm labs only
    if (! vmlab2 && ! newContainerLab && !cnlab) return;

    if (! vcPeriodicUiCheckHandle)
    {
      vcPeriodicUiCheckHandle = window.setTimeout(vcPeriodicUiCheck, delay);
    }
}


function vocareum_ttyd_ws_event(ev) {
  // When connection is closed, makes 'Re-Launch Terminal' Button Appear
  $('#panel2-div').html('<div style="position: relative; top: 45%; left: 40%;"><button id="open" \
    style="display: block; font: 20px/1.5 sans-serif; background: #438EB9; \
    height: 50px; padding: 10px 25px; color: white; \
    border: none; cursor: pointer;" onclick="relaunchTerminalV2()">Launch Terminal</button></div>');
}

// When a contianer is not running, displays the 'Relaunch' button
function displayContainerPanelFiller(msg = null, showLaunchBtn = true) {
  
  // if panel filler is already being shown OR if clab state is ready, filler doesn't need to be (re)displayed
  if((clabsStates[0].state == "Ready" && expiretime > 0 && $('#panel2-iframe').is(':visible') && $('#panel2-iframe').attr('src') == '') || $('#open').is(':visible')) return;
  
  if(newContainerLab || vmlab2 || cnlab) {
    $('#panel2-div').html(' \
        <div style="display:flex; flex-direction: column; justify-content: center; height: 100%; width: auto; align-items: center;">' 
        + ((msg) ? '<div style="display:block; font: 20px/1.5 sans-serif; color: white; padding-bottom: 10px;">'+msg+'</div>' : '')
        + (showLaunchBtn ? ' \
          <div> \
            <button id="open" style="display: block; font: 20px/1.5 sans-serif; background: #438EB9; height: 50px; padding: 10px 25px; color: white; \
              border: none; cursor: pointer;" onclick="relaunch2022Labs()"> \
              Launch Lab \
            </button> \
          </div> \
        </div>' : '')).css('background-color', 'rgba(90,90,90,1.0)');
    
    if(containerCookies) containerCookies = null;
    
  } else {
    $('#panel2-div').html('<div style="position: relative; top: 45%; text-align: center; color: white; font-size: 20px !important;"> '
    + (((msg)? msg : "Container Not Running.") + ".  Please refresh the page to relaunch the Lab.")
    + '</div>').css('background-color', 'rgba(90,90,90,1.0)');
  }

  if (interactiveEnabled) {
    stopGpuBudgetTimer();
    clearInterval(gpuTimerSyncHandle);
    gpuTimerSyncHandle = 0;
  }
}

function toggleSubmissionDetailsView() {
  if(!newLayout || viewSubmissionsViaVNB) return; 
  
  if($('#submissionsTreeBody').is(':visible')) {
    toggleFiletreeView(false);
  }
  
  vcChkSubmitOneTime();
  // if details section is visible, hide it
  if($('#submissionsDetailsBody').css('display') !== "none") {
    $('#viewSubmissionDetails').removeClass('filetreetab_selected');
    $('#submissionsDetailsBody').hide();
    $('#submissionsTreeElement').height('auto');
    $('#viewSubmissionDetailsIcon').removeClass('icon-chevron-up').addClass('icon-chevron-down');
  } else {
    $('#submissionsDetailsBody').show();
    $('#viewSubmissionDetails').addClass('filetreetab_selected');
    $('#submissionsTreeElement').height('230px');
    $('#viewSubmissionDetailsIcon').removeClass('icon-chevron-down').addClass('icon-chevron-up');
  }
  
}

// Relaunches/Starts the Container (2022 Labs)
function relaunch2022Labs() {
  $('#panel2-div').remove();
  $('#vmp-panel2-2').append(`
      <div id="panel2-div" style="overflow:hidden; height:100%; padding: 0px; margin-bottom: 0px; margin-left:0px; border:0px solid lightblue;">
        <iframe id="panel2-iframe" name="panel2-iframe" title="Desktop" src="" width="100%" height="100%" style="overflow:none;border:0px solid red;" onload="terminalLoaded()"></iframe>
      </div>`);
  $('#panel2-iframe').attr('src', '');
  StartLabs();
}
    
    
// Function that periodically checks the state of the container
function periodic_container_check() {
  return;
  $.ajax({
      url: "../util/vcput.php?a=getclabs&stepid=2792000&version=0&labworkdir=/home/nowhere",
   })
   .done(function(ret_val) {
       if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
		     window.location.reload();
		     return;
	     }
       try {
         var resp = jQuery.parseJSON(ret_val);
         if (periodic_container_timer) clearTimeout(periodic_container_timer);
         
         // if conatiner is 'ready', set periodc contianer check
         if(resp.status == "Ready") periodic_container_timer = window.setTimeout(periodic_container_check, 30000);
         else displayContainerPanelFiller("Your lab is " + resp.status);
         
       } catch(err) {
         endclabs_note('Your lab has not started yet.');
       }
    })
   .fail(function(ret_val) {
     alert('failed to retrieve Labs credentials for periodic check');
   });
   
}

function startTimer(seconds, display) {
  let timeLeft = seconds;
  return setInterval(function () {
    let timerString = getTimerFromSeconds(timeLeft);
    display.text(timerString);
    if (--timeLeft < 0) {
      timeLeft = 0;
    }
  }, 1000);
}

function startGpuBudgetTimer(seconds) {
  // let now = new Date().toLocaleString();
  // console.log(`Starting timer @ ${now}`);
  
  if (gpuTimerHandle) return;

  const gpuTimer = $('#gpuTimer');
  if (!gpuTimerHandle) {
    gpuTimerHandle = startTimer(seconds, gpuTimer);
  }
}

function stopGpuBudgetTimer() {
  // let now = new Date().toLocaleString();
  // console.log(`Stopping timer @ ${now}`);

  if (gpuTimerHandle) {
    clearInterval(gpuTimerHandle);
    gpuTimerHandle = 0;
  }
  updateBudgetValues('gpu');
}

// Call this function to start the GPU budget timer and periodically synchronize it with the backend
function syncGpuBudgetTimer() {
  // let now = new Date().toLocaleString();
  // console.log(`Syncronizing timer @ ${now}`);

  getOtherBudget('gpu')
    .done(function(data) {
      if (data.indexOf('<ERROR:INVALID_SESSION>') !== -1) {
        window.location.reload();
        return;
      }
      try {
        let resp = jQuery.parseJSON(data);
        if (resp.status === 'Error') {
          show_voc_gritter(true, resp.msg, true);
          return;
        }
        let interactiveRemaining = resp.details.interactive.remaining;
        stopGpuBudgetTimer();
        if (interactiveRemaining > 0) {
          startGpuBudgetTimer(interactiveRemaining);
          gpuTimerSyncHandle = setTimeout(syncGpuBudgetTimer, (1000 * 60 * 5));
        } else {
          clearInterval(gpuTimerSyncHandle);
          gpuTimerSyncHandle = 0;
        }
      } catch (err) {
        show_voc_gritter(true, err.message, true);
      }
    })
    .fail(function(data) {
      show_voc_gritter(true, 'Unable to synchronize remaining lab time, please try refreshing the page', true);
    });
}

function useSlipDays() {
  var data = "";
  var urlval = "../util/vcput.php?m=editor&vocajax=1&stepid=" + 2792000 + "&a=useMySlipDays&caller=ide&ajaxData=1&q1=asnid=" + 2791999;
  $.ajax({
   type: "POST",
   url: urlval,
   data: data
  })
  .done(function(ret_val) {
        if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
          refreshNewSessionPage();                                    
        }
        resp = jQuery.parseJSON(ret_val);
        if (resp.success !== 'true') {
            show_voc_gritter(true, 'Failed: ' + resp.msg, true);
        } else {
        // success
            if( (typeof resp.msg !== "undefined") && resp.msg ) {
              show_voc_gritter(true, 'Failed: ' + resp.msg, true);
            } else {
              show_voc_gritter(false, resp.ret_arg1 + ' slip day(s) used', false);
            }
        }       
        return false;   
    })
    .fail(function(ret_val) {
            show_voc_gritter(false, ' Operation failed. Please try again', true);
            return false;
    });
}

function useSlipDaysConfirmation() {
  var str = "Are you sure you want to use slip days for your submission?";
  bootbox.dialog(str, 
                 [{
                   "label" : "Yes",
                   "class" : "btn vocbtn-ac vocbtn-action",
                   "callback": function() {
                       useSlipDays();
                   }
                 }, 
                  {
                    "label" : "Cancel",
                    "class" : "btn vocbtn-ac vocbtn-status"
                  }]
  );
}

function reportFailedLabStart(op, endState) {
  var data = "";
  var urlval = "../util/vcput.php";
  $.ajax({
   type: "POST",
   url: urlval,
   data: {
      a: 'reportFailedLabStart',
      stepid: 2792000,
      userid: 3209731,
      operation: op,
      type: (vmlab2)? "VM" : "Container",
      endState: endState
    }
  })
  .done(function(ret_val) {
        if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
          refreshNewSessionPage();                                    
        }
        resp = jQuery.parseJSON(ret_val);
        if (resp.status != 'success') {
            console.log("An error occurred while reporting the failed lab start process");
        }    
    })
    .fail(function(ret_val) {
      console.log("Failed to Report Failed Lab Start");
    });
}


function reportContainer503Error(labtype) {
  var data = "";
  var urlval = "../util/vcput.php";
  $.ajax({
   type: "POST",
   url: urlval,
   data: {
      a: 'reportContainer503Error',
      stepid: 2792000,
      userid: 3209731,
      type: labtype
    }
  })
  .done(function(ret_val) {
        if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
          refreshNewSessionPage();                                    
        }
        resp = jQuery.parseJSON(ret_val);
        if (resp.status != 'success') {
          console.log("An error occurred while reporting the container 503 error");
        } else {
          container503ErrorReported = true;
        }
    })
    .fail(function(ret_val) {
      console.log("Failed to Report Contrainer 503 Error");
    });
}

    
  /*
  action: function inside iframe
  args: for the iframe function specified by action
  nextFunc: next function to call (if necessary)
  extArgs: data that needs to be passed around as postMessages are called
  */
  window.addEventListener('message', (event) => {
    let data = event.data;

    if (!event.origin.includes('vocareum.com') || data.vocSource !== 'terminal') {
      return;
    }

    switch (data.action) {
      case 'displayDataSimpleDone':
        if (typeof data.nextFunc !== 'undefined') {
          document.getElementById('panel2-iframe').contentWindow.postMessage({ action: data.nextFunc, args: {data: String.fromCharCode(21)}, nextFunc: 'executeCommand', extArgs: {...data.extArgs}, vocSource: 'terminal' }, "");
        }
        break;
      case 'executeCommandDone':
        if (typeof data.nextFunc !== 'undefined') {
          if (data.nextFunc === 'executeCommand') {
            // ajax call
            saveDbScriptToFile(data.extArgs.type, (executeCommandData) => {
              document.getElementById('panel2-iframe').focus();
              document.getElementById('panel2-iframe').contentWindow.postMessage({ action: data.nextFunc, args: {data: executeCommandData}, nextFunc: 'refreshFileTree', vocSource: 'terminal' }, "");
            });
          } else if (data.nextFunc === 'refreshFileTree') {
            refreshFileTree(false, true);
          }
        }
        break;
      default:
        break;
    }
  });
</script>

<div id="vmp-idebox" style="opacity: 100;">

  <div id="vmp-header" style="">
  
      
    <div class="vmp-showfullscreen" id="vmp-showfullscreen" tabindex="0" role="button" aria-label="Full screen">
      <span class="icon-fullscreen" style="" id="fullscreenicon"></span>
    </div>
    
    <div class="" style="width: auto; float: right; margin-right:0px; margin-top: 0px; border:0px solid red;">
        <div class="vmp-idebutton" id="ResetAssignmentBtn" style="" data-toggle="tab" href="#" tabindex="0" role="button" aria-label="Reset" onclick="confirmResetAsnBtn('../util/vcreset.php?vockey=92b04c35873bd949b37ad2d5305bdc08d94a5d6ff8998372748bc9b283f4c299&amp;asnid=2791999&amp;stepid=2792000&amp;mode=s&amp;vmd=100')">
          <i class="icon-undo" style="padding: 0 1px 0 1px;"></i>
          Reset
        </div>
    
      <div class="vmp-idebutton" id="readmeBtn" style="display: none;" data-toggle="tab" href="#" tabindex="0" role="button" aria-label="Readme" onclick="readmeBtnClicked()">
        <i id="readme-box" class="icon-info" style="padding: 0 1px 0 1px;"></i>
        Readme
      </div>
    
                       <div class="vmp-idebutton" id="detailbtn2" style="" data-toggle="tab" href="#" tabindex="0" role="button" aria-label="Aws Details" onclick="showawsact(1);">
                        <i id="detailspinbox2" class="icon-info" style="padding: 0 1px 0 1px;"></i>
                        AWS Details
                      </div>


                      <div class="vmp-idebutton" id="endclabsbtn" style="" data-toggle="tab" href="#" tabindex="0" role="button" aria-label="End Lab" onclick="EndLabs();">
                        <i id="endclabspinbox" class="icon-stop" style="padding: 0 1px 0 1px;"></i>
                        End Lab
                      </div>
                      <div class="vmp-idebutton hidden-1" id="extendclabsbtn" style="" data-toggle="tab" href="#" tabindex="0" role="button" aria-label="Extend Lab" onclick="extendLabs();">
                        <i id="extendclabspinbox" class="icon-plus" style="padding: 0 1px 0 1px;"></i>
                        Extend
                      </div>
                      <div class="vmp-idebutton" id="launchclabsbtn" style="border: 0px solid blue;" data-toggle="tab" href="#" tabindex="0" role="button" aria-label="Start Lab" onclick="StartLabs();">
                        <i id="labspinbox" class="icon-play" style="padding: 0 1px 0 1px;"></i>
                        Start Lab
                      </div>
</div>
                
        <div id="vmButtons" style="float: left; border: 0px solid red; width: auto; height: 37px; margin-left: 50px;"><span data-indx="" id="vmBtn" title="AWS" aria-label="AWS" class="vmp-idebutton-left" tabindex="0" role="button" style="" onclick="launchAws()"><i id="vmspinbox" class="icon-spin icon-spinner hidden-1" style="padding: 0 1px 0 1px;"></i>AWS<i id="vmstatus" class="led led-red" role="status" aria-label="AWS Status: Terminated" title="AWS Status: Terminated"></i></span></div>
    <div id="sessiontimer" style="float: right; border: 0px solid red; width: 80px; height: 34px; line-height: 34px; margin-left: 40px; font-size: 13px; display: none;">00:00</div>
    <div id="clabstatus" style="border: 0px solid red; padding-right: 18px; padding-left: 18px; height: 34px; line-height: 34px; margin-left: 40px; font-size:13px; color: white; background-color: #6495ED; text-align: center; display: none;">Terminated</div>
    <div id="budget" style="display: none; float: right; border: 0px solid red; width: 250px; height: 34px; line-height: 34px; margin-left: 40px; font-size:13px;"></div>
    <div id="budget2" style="display: none; float: right; border: 0px solid red; width: 210px; height: 34px; line-height: 34px; margin-left: 40px; font-size:13px;"></div>
            <div style="clear:both;"></div>
  </div>

  <div id="vmp-ideheader" style="display: block;">
       
<div id="ideButtonDiv" style="height: 30px; margin-top:3px; border: 0px solid red;">

  <div class="pull-right" style="border: 0px solid red;">
    <button type="button" id="editor-save-status-btn" class="vocidetoolbarbtn vobtn-status" style="display:none" tabindex="0" role="button"></button>
    <span id="editor-save-status" style="padding-right:5px"></span>
    <a class="btn btn-mini vocbtn_toolbar" style="display: none; margin-left:4px ! important; margin-right:4px ! important;" href="#" id="htmlreloadbtn">Reload</a>
  </div>
    <div id="filelistbuttons" class="pull-left" style="height:27px; border: 0px solid green;">
      <div id="newbtn" class="btn-group pull-left" style="display: none;">
                                  <div id="newdropdown" data-toggle="dropdown" class="dropdown-toggle btn btn-mini vocbtn-status vocbtn_toolbar pull-left" href="#" tabindex="0" role="button" aria-label="New">
                                    <span style="font-size:12px;">New</span>
                                    <i class="icon-caret-down"></i>
                                  </div>
                                  <ul class="dropdown-menu dropdown-info dropdown-caret dropdown-close" style="text-align:left">
                                    <li class="divider"></li>
                                    <li>
                                        <div href="#" id="filenewbtn" tabindex="0" role="button" aria-label="File">
                                             File
                                        </div>
                                    </li>
                                    <li>
                                      <div href="#" id="foldernewbtn" tabindex="0" role="button" aria-label="Folder">
                                           Folder
                                      </div>
                                    </li>
                                  </ul>
       </div>
       <div href="#" id="filerenamebtn" class="btn btn-mini vocbtn-status vocbtn_toolbar pull-left" style="display: none;" tabindex="0" role="button" aria-label="Rename">
                                    Rename
       </div>
        
        
                                <div href="#" id="filedelbtn" class="btn btn-mini vocbtn-status vocbtn_toolbar pull-left" style="display: none;" tabindex="0" role="button" aria-label="Delete">
                                    Delete
                                </div>
        
                                <div href="#" id="fileuploadbtn" class="btn btn-mini vocbtn-status vocbtn_toolbar pull-left" style="display: none;" tabindex="0" role="button" aria-label="Upload">
                                     Upload
                                </div>
        
                                <form id="fileuploadform" action="" enctype="multipart/form-data" method="post" style="display:none;">
                                    <input type="file" id="fileuploadfield" name="fileuploadfield" multiple="">
                                </form>
        
                              <div href="#" id="filecopybtn" class="btn btn-mini vocbtn-status vocbtn_toolbar pull-left" style="display: none;" tabindex="0" role="button" aria-label="Copy">
                                     Copy
                              </div>
                              <div href="#" id="filepastebtn" class="btn btn-mini vocbtn-status vocbtn_toolbar pull-left" style="display: none;" tabindex="0" role="button" aria-label="Paste">
                                     Paste
                              </div>
  
                              <div href="#" id="filesyncbtn" class="btn btn-mini vocbtn-status vocbtn_toolbar pull-left" style="display: none;" tabindex="0" role="button" aria-label="Sync">
                                     Save
                              </div>
  
                                <div href="#modal-table-download_from_ide" data-toggle="modal" id="downloadbtn" style="display: none;" tabindex="0" role="button" aria-label="Download" class="pull-left btn btn-mini vocbtn-status vocbtn_toolbar" title="Download the selected item">
                                  <i class="icon-download-alt icon-large"></i>
                                </div>
        
                              <div id="cmdprogressbtn" class="pull-left" style="margin-top:2px; margin-left:4px;"><i class="icon-spin icon-spinner hidden"></i></div>
                              <div id="filestatuslabel" class="pull-left" style="font-size:12px; margin-top:2px; margin-left:4px;"></div>
        
                             </div> <!-- filelistbuttons -->
        
                             <div id="editor_current_file_div" style="text-align:center;padding:2px 0px 0px 0px; margin:0px;
                                              background-color:rgb(255, 255, 255);color: rgb(0, 0, 0);border:none;">
                                                <span id="file_colon"></span>
                                                <span id="editor_current_file"><!--?php echo htmlspecialchars($code_file0, ENT_QUOTES);?--></span>
                                                  <a class="btn btn-mini vocbtn-status vocbtn_toolbar" style="display: none; margin-left:5px ! important;" href="#" id="fileviewbtn">View</a>
                                                <span id="editor_current_ts"><span>
                             </span></span></div> <!-- editor_current_file_div -->
        
        
  </div> <!-- ideButtonDiv -->
         <div style="clear:both;"></div>
  </div> 
    <!----------------------------------------------->
    <!--    If the normal Elite IDE is to be used  -->
    <!----------------------------------------------->
    <div id="vmp-panels" class="" style="border: 1px solid lightgray; opacity: 100;">
    <div id="vmp-panel1" class="ui-resizable-iframeFix" style="display: none; width: 15px; height: 863px;">
    <div id="panel1-div" class="" style="height: auto; margin: 0px,5px,0px,5px; border: 0px solid blue; overflow: hidden; z-index: 20; background-color: white">
    <div id="panel1-divhdr" class="" style="display: block; margin:0px; border-bottom: 0px solid gray; background-color:#EEEEEE">
    <span id="panel1-hide" onclick="panel1_hide()" style="float: right; cursor: pointer; padding: 2px 5px 8px 5px; line-height: 20%; margin-right: 0px; font-size: 200%; border: 0px solid red;" aria-label="minimize" class="hidden">-</span>
    <i id="panel1-spin" class="icon-refresh" style="float: left; cursor: pointer; margin-left:3px;" onclick="refreshFileTreeIde(false, true)"></i>
    <div style="clear: right;"></div>
    </div>
    <div id="panel1-content" style="display: block; border: 0px solid blue;">
    
      <div id="filelisting" class="" style="overflow: scroll; border: 0px solid green; margin: 0px; transform: translate3d(0px, 0px, 0px); height: 843px;">
      <!-- file buttons -->
      <div tyle="min-width:200px; text-align:center;padding:1px 0px 0px 0px; margin:0px;
                                  background-color:rgb(248, 248, 248);color: rgb(153, 153, 153);border:none;">
          
          
                                  <div class="clearfix"></div>
          
                                  <div class="well" id="well_selectedfile" style="height: 23px; margin: 3px 0px 0px 0px; padding: 2px 2px 1px 10px; font-size: 12px; color: black; text-align: left; border: 0px solid red;"><span id="span_selectedfile" style="border:0px solid blue;">Select file or folder</span><div style="clear:both;"></div></div>
          
          
                                  </div>
                                  <!-- file buttons end -->
          
          
                                  <div id="innerfilelisting" style="min-width:300px;height:100%;padding-bottom:40px !important;"> <!-- prevents file name breaking -->
                                  <div id="fileform" class="hide" style="text-align: center; padding: 0px; margin: 0px; background-color: rgb(248, 248, 248); color: rgb(153, 153, 153); border: medium; display: none;">
                                            <input class="pull-left span12" type="text" id="input_filename" placeholder="type name here" style="margin-bottom:0px">
                                            <input type="hidden" id="input_filetype">
                                            <div href="#" id="filecreatebtn" class="btn btn-mini vocbtn-action vocbtn_toolbar pull-left" style="padding: 0px 8px !important" tabindex="0" role="botton">
                                            Submit
                                            </div>
                                            <div href="#" id="filecancelbtn" class="btn btn-mini vocbtn-status vocbtn_toolbar pull-left" style="padding: 0px 8px !important" tabindex="0" role="botton">
                                            Cancel
                                            </div>
                                            </div> <!-- fileform -->
                                            <div class="clearfix"></div>
          
                                            <div id="tree1" class="tree" style="background:white; display:block;"></div>
                                            <!-- div id="trees3home" class="tree" style="background:white;"></div -->
                                            <div id="trees3" class="tree" style="background:white;"></div>
    
                                            <script type="text/javascript">
                                            var $assets = "assets";//this will be used in fuelux.tree-sampledata.js
                                            </script>
                                            </div> <!-- innerfilelisting -->
                                            </div>	<!-- filelisting end -->
    <div style="clear:both;"></div>
    </div>
    </div>
    </div>
    <div class="ui-draggable ui-draggable-handle" id="vmp-framedivider1" style="float: left; border: 0px solid red; width: 5px; height: 863px; margin: 0px; background: transparent url(&quot;../shared/img/vocdivider-v.png&quot;) 3px 50% no-repeat; padding: 0px; cursor: col-resize; display: none;"></div>
    <div id="vmp-panel2" style="border-left-width: 0px; width: 934px; height: 863px;">
      <div id="vmp-panel2-1" style="border: 0px solid blue; display: none;">   
       <div id="div_codeform0" style="height: 100%; border: 0px solid blue;">
         <form id="codeform0" style="height: 100%; 0px solid red;">
           <textarea id="codearea0" style="margin: 0px; border: 0px solid green; display: none;" aria-label="Source code">Choose a file to load from the Files menu on the left</textarea><div class="CodeMirror cm-s-neat CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px;"><textarea style="position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;" wrap="off" autocorrect="off" autocapitalize="none" spellcheck="false" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" cm-not-content="true" style="display: block; bottom: 0px;"><div style="min-width: 1px; height: 41px;"></div></div><div class="CodeMirror-hscrollbar" cm-not-content="true"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1" draggable="true"><div class="CodeMirror-sizer" style="margin-left: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative;"><div class="CodeMirror-lines" role="presentation"><div style="position: relative; outline: none;" role="presentation"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>1</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"></div><div class="CodeMirror-code" role="presentation"></div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; border-bottom: 0px solid transparent;"></div><div class="CodeMirror-gutters"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 1px;"></div></div></div></div>
         </form>
       </div>
  
  </div> 
      <div class="ui-draggable ui-draggable-handle" id="vmp-framedivider2" style="border: 0px solid red; width: auto; height: 5px; background-color: lightgray; margin: 0px; cursor: row-resize; display: none;"></div>
      <div id="vmp-panel2-2" tabindex="0" style="display: block; background-color: rgb(255, 255, 255); height: 862px;">
<div id="panel1-div" class="" style="height: auto; margin: 0px,5px,0px,5px; border: 0px solid green; overflow: auto; z-index: 20; background-color: white">
<div id="panel1-divhdr" class="" style="display: block; border-bottom: 0px solid gray; background-color:#EEEEEE">
<!--
<span id="panel1-hide" onclick="panel1_hide()" style="float: right; cursor: pointer; padding: 2px 5px 8px 5px; line-height: 20%; margin-right: 0px; font-size: 200%; border: 0px solid red;" role="button" aria-label="minimize">-</span>
-->
<i id="panel1-spin" class="" style="display: none; float: left; cursor: pointer; margin-left:3px;" onclick="readmeBtnClicked()"></i>
    <span id="readmeframelang" style="cursor: pointer;">
      <select style="margin: 5px; font-size: 12px; width: 150px; height: 30px;" id="localeLangReadmeSelect" onchange="lang_select()">
<option value="ar-sa">AR-SA</option><option value="de-de">DE-DE</option><option value="en-us" selected="selected">EN-US</option><option value="es-es">ES-ES</option><option value="fr-fr">FR-FR</option><option value="id-id">ID-ID</option><option value="it-it">IT-IT</option><option value="ko-kr">KO-KR</option><option value="pt-br">PT-BR</option><option value="th-th">TH-TH</option><option value="uk-ua">UK-UA</option><option value="vi-vn">VI-VN</option><option value="zh-tw">ZH-TW</option>
      </select>
    </span>

<div style="clear: right;"></div>
</div>
<div id="panel1-content" style="display: block; overflow: hidden; border: 0px solid red;">
<!--
<div id="panel1-info" class="vmp-overlay" style="overflow: scroll; border: 1px solid red;"></div>
-->
<iframe id="panel1-iframe" name="panel3-iframe" title="README" src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/README.htm" style="width: 100%; height: 100vh; padding-bottom: 0px; border: 0px solid blue;"></iframe>
</div>
</div>
</div> 
    </div>
    <div id="vmp-panel3" tabindex="0" style="display: none; overflow-y: auto; height: 863px;">
<div id="panel3-div" class="" style="height: auto; margin: 0px,5px,0px,5px; border: 0px solid green; overflow: auto; z-index: 20; background-color: white">
<div id="panel3-divhdr" class="" style="display: block; border-bottom: 0px solid gray; background-color:#EEEEEE">
<span id="panel3-hide" onclick="panel3_hide()" style="float: right; cursor: pointer; padding: 2px 5px 8px 5px; line-height: 20%; margin-right: 0px; font-size: 200%; border: 0px solid red;">-</span>
<i id="panel3-spin" class="" style="display: none; float: left; cursor: pointer; margin-left:3px;" onclick="refreshFileTreeHtml()"></i>
    

<div style="clear: right;"></div>
</div>
<div id="panel3-content" style="display: block; overflow: hidden; border: 0px solid red; height: 843px;">
<!--
<div id="panel3-info" class="vmp-overlay" style="overflow: scroll; border: 1px solid red;"></div>
-->
<iframe id="panel3-iframe" name="panel3-iframe" title="README" src="" style="width: 100%; height: 843px; padding-bottom: 0px; border: 0px solid blue;"></iframe>
</div>
</div>
</div>
    <div id="vmp-panel4" style="height: 863px; width: 936px;"><img src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/vocpacifier.gif"></div>
    <div class="ui-draggable ui-draggable-handle" id="vmp-framedivider3" style="float: right; border-left: 1px solid lightgray; width: 5px; height: 863px; margin: 0px; background: transparent url(&quot;../shared/img/vocdivider-v.png&quot;) 3px 50% no-repeat; padding: 0px; cursor: col-resize; display: none;"></div>
    <div style="clear:both;"></div>
  </div>
  
  <!----------------------------------------------->
  <!--     If the New Layout is to be used       -->
  <!----------------------------------------------->
      
</div>



<!-- script type="text/javascript" src="../shared/slick/slick.min.js"></script -->
<script type="text/javascript">

var panel1_fs_height = 0;
var panel1_fs_width = 0;
var panel1_hidden = false;
var panel3_fs_height = 0;
var panel3_fs_width = 0;
var panel3_hidden = false;
var vmp_panel1 = true;
var vmp_panel3 = true;
var vmp_panel2_1 = true;
var vmp_panel2_2 = true;
var vmp_ideheader = true;

vmp_ideheader = $('#vmp-header').is(':visible') ? true : false;

var hasSubmissions = false;

var vocdomain = document.domain.split('.').slice(-2).join('.');
document.domain = vocdomain;

// if a student workspace is  being accessed, then we need to show the student's name in tab title


var terminalIframeContent = null;
var terminalIframe = null;
// When window is loaded, add global escape hatch
$(window).load(function () {
    document.addEventListener('keydown', forceTabHandler);
    try {
      // adds the force tab escape hatch
      terminalIframe = $('#panel2-iframe');
      if (typeof terminalIframe[0] !== 'undefined') {
        terminalIframeContent = $('#panel2-iframe')[0].contentWindow;      
        if (typeof terminalIframeContent !== 'undefined') {
          //var terminal_el = (terminalIframe.document.body); //getElementsByClassName("terminal"))[1];
          terminalIframeContent.addEventListener("keydown", forceTabHandler);
        }
      }
    } catch(e) {
      console.error("Escape hatch not added to terminal");
    }
});

// Adds ctrl + ` and ctrl + shift + ` as force escape hatches for keyboard-only
function forceTabHandler(e) {
  // if escape + tab is pressed
  if((e.ctrlKey) && !e.shiftKey && (e.keyCode == 192 || e.keyCode == 27)) e.preventDefault(), console.log(document.activeElement), focusNextElement();
  else if(e.ctrlKey && e.shiftKey && (e.keyCode == 192 || e.keyCode == 27)) e.preventDefault(), console.log(document.activeElement), focusPrevElement();
}

function focusNextElement () {
  //add all elements we want to include in our selection
  var focussableElements = 'a:not([disabled]), button:not([disabled]), input[type=text]:not([disabled]), [tabindex]:not([disabled]):not([tabindex="-1"]), iframe:not([disabled]):not([tabindex="-1"])';
  if (document.activeElement) {
      var focussable = Array.prototype.filter.call(document.querySelectorAll(focussableElements),
      function (element) {
          //check for visibility while always include the current activeElement 
          return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement
    }); 
      
      var index = focussable.indexOf(document.activeElement);
      
      if(index > -1) {        
         var nextElement = focussable[index + 1] || focussable[0];
         try {
           if($(nextElement).attr('id') == 'panel2-iframe') {
             nextElement = $(nextElement)[0].contentDocument.getElementsByClassName('xterm-helper-textarea')[0];
           }
         } catch (e) {
           console.log("Could not set inner terminal eleemnt is focusabl element");
         }
        nextElement.focus();
      } else {
        var nextElement = focussable[0];
        nextElement.focus();
      }         
  }
}

function focusPrevElement () {
  //add all elements we want to include in our selection
  var focussableElements = 'a:not([disabled]), button:not([disabled]), input[type=text]:not([disabled]), [tabindex]:not([disabled]):not([tabindex="-1"]), iframe:not([disabled]):not([tabindex="-1"])';
  if (document.activeElement) {
      var focussable = Array.prototype.filter.call(document.querySelectorAll(focussableElements),
      function (element) {
          //check for visibility while always include the current activeElement 
          return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement
      });
      var index = focussable.indexOf(document.activeElement);
      
      if(index > -1) {
         var prevElement = focussable[index - 1] || focussable[focussable.length - 1];
         try {
           if($(prevElement).attr('id') == 'panel2-iframe') {
             prevElement = $(prevElement)[0].contentDocument.getElementsByClassName('xterm-helper-textarea')[0];
           }
         } catch (e) {
           console.log("Could not set inner terminal eleemnt is focusabl element");
         }
         
         prevElement.focus();
      }                    
  }
}

</script>



<script type="text/javascript">
// =============================================================================
//        Normal Vocareum Elite Functions
// =============================================================================
  
  //----------------------------------------------------------------------
  //        Normal Vocareum Elite Functions
  //----------------------------------------------------------------------
  var addEvent = function(object, type, callback) {
      if (object == null || typeof(object) == 'undefined') return;
      if (object.addEventListener) {
          object.addEventListener(type, callback, false);
      } else if (object.attachEvent) {
          object.attachEvent("on" + type, callback);
      } else {
          object["on"+type] = callback;
      }
  };
  
  addEvent(window, "resize", function(event) {
      //$('#vmp-panel1').css('pointer-events', 'none');
      var xoffset = 0;
      var yoffset = 0;
      var rightwidth = 0;
  
      if (document.mozFullScreen || document.webkitFullScreen) 
      {
        //need to set this if we float panel 1
        //document.getElementById('vmp-framedivider1').style.display = 'none';
        xoffset = 15;
        yoffset = 8;
      }
      else
      {
      }
      
      vmp_resize();
      return;
      
  		if (!vmp_panel1 && !vmp_panel3) //
      {
    	  rightwidth = $('#vmp-idebox').width() - 2;
  	    document.getElementById("vmp-panel2").style.borderLeftWidth = "0px";
      }
      else if (!vmp_panel1) //(document.getElementById('vmp-panel1').style.display == 'none')
      {
        rightwidth = $('#vmp-idebox').width() - $('#vmp-panel3').width() - 10;
        document.getElementById("vmp-panel2").style.borderLeftWidth = "0px";
      }
      else if (!vmp_panel3) //(document.getElementById('vmp-panel3').style.display == 'none')
      {
        xoffset = (document.getElementById('vmp-framedivider1').offsetLeft == 0)? 8 : 0;
        rightwidth = $('#vmp-idebox').width() - document.getElementById('vmp-framedivider1').offsetLeft + 3 - xoffset - 10; //10: fix for chrome
      }
      else // 3 panels
      {
        rightwidth = $('#vmp-idebox').width() - $('#vmp-panel1').width() - 13 - $('#vmp-panel3').width() - 5;
        if (panel1_hidden || document.mozFullScreen || document.webkitFullScreen) rightwidth += 5;
        if (panel3_hidden) rightwidth += 5;
      } 
      
  	  //$('#vmp-panel2').width(rightwidth);
  	  if (panel1_hidden)
  	  {
  		  $('#vmp-panel2').width(rightwidth - 13);
  	  }
  	  else
  	  {
  	    $('#vmp-panel2').width(rightwidth);
  	  }
  
  	  var hdroffset = (vmp_ideheader)? 31 : 0;
  	  var ht = window.innerHeight - document.getElementById('vmp-idebox').offsetTop - 10 - hdroffset + yoffset - $('#vmp-header').height(); //50
  	  
  	  $('#vmp-panel1').height(ht);
  	  $('#vmp-panel2').height(ht);
  	  $('#vmp-panel3').height(ht);
  	  $('#vmp-panel4').height(ht);
  	  $('#vmp-panel4').width($('#vmp-idebox').width() - 2);
  	  
  	  $('#vmp-framedivider1').height(ht);
  	  $('#vmp-framedivider3').height(ht);
  
  	  $('#panel3-content').height(ht-20);
  	  $('#panel3-iframe').height(ht-20);
  
  	  var ft = document.getElementById("filelisting");
  	  if (ft)
  	  {
  		  $('#filelisting').height(ht-20);
  	  }
  	  
    	$('#vmp-panel1').css('pointer-events', 'auto');
  
    	if (!vmp_panel2_1)
    	{
    		$('#vmp-panel2-2').height($('#vmp-idebox').height() - 3 - hdroffset - $('#vmp-header').height());
    	}
    	else if (vmp_panel2_2)
    	{
  		  $('#vmp-panel2-1').height($('#vmp-idebox').height() - $('#vmp-panel2-2').height() - 7 - hdroffset - $('#vmp-header').height());
    	}
  	  else
  	  {
  		  $('#vmp-panel2-1').height($('#vmp-idebox').height() - 3 - hdroffset - $('#vmp-header').height());
  	  }
  	  
  });
  
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  $('#vmp-framedivider1').draggable({
  	axis: 'x',
  	containment: 'parent',
  	helper: 'clone',
  	iframeFix: true,
  	drag: function (event, ui) {
  	    
  	    var leftwidth = ui.offset.left - 13;
  	    var rightwidth = 0;
  
  	    if (leftwidth < 15) return;
  	    
  	    if (document.getElementById('vmp-panel3').style.display == 'none')
  	    {
  	      rightwidth = $('#vmp-idebox').width() - ui.offset.left + 2;
  	    }
  	    else
  	    {
  	      rightwidth = $('#vmp-idebox').width() - ui.offset.left - $('#vmp-panel3').width() - 5;
  	      if (panel3_hidden) rightwidth += 6;
  	    } 
  	    $('#vmp-panel1').width(leftwidth);
  	    $('#vmp-panel2').width(rightwidth);
  	},
  
  	start: function() {
      	$('#vmp-panel1').css('pointer-events', 'none');
      	$('#vmp-panel2').css('pointer-events', 'none');
  	},
  
  	stop: function() {
      	$('#vmp-panel1').css('pointer-events', 'auto');
      	$('#vmp-panel2').css('pointer-events', 'auto');
  	}
  
  });
  	
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  $('#vmp-framedivider3').draggable({
  	axis: 'x',
  	containment: 'parent',
  	helper: 'clone',
  	iframeFix: true,
  	drag: function (event, ui) {
  	    
  	    var rightwidth = $('#vmp-idebox').width() - ui.offset.left - 0;
  	    var leftwidth = 0;
  
  	    if (rightwidth < 15) return;
  	    
  	    if (document.getElementById('vmp-panel1').style.display == 'none')
  	    {
  	    	leftwidth = ui.offset.left - 11;
  	    }
  	    else
  	    {
  	    	leftwidth = ui.offset.left - $('#vmp-panel1').width() - 18;
  	    	if (panel1_hidden || document.mozFullScreen || document.webkitFullScreen) leftwidth += 5;
  	    } 
  	    $('#vmp-panel3').width(rightwidth);
  	    $('#vmp-panel2').width(leftwidth);
  	},
  
  	start: function() {
      	$('#vmp-panel2').css('pointer-events', 'none');
      	$('#vmp-panel3').css('pointer-events', 'none');
  	},
  
  	stop: function() {
      	$('#vmp-panel2').css('pointer-events', 'auto');
      	$('#vmp-panel3').css('pointer-events', 'auto');
  	}
  
  });
  
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  $('#vmp-framedivider2').draggable({
  	axis: 'y',
  	containment: 'parent',
  	helper: 'clone',
  	iframeFix: true,
  	drag: function (event, ui) {
  
  		  var hdroffset = (vmp_ideheader)? 31 : 0;
  		  
  		  if (($('#vmp-idebox').height() - ui.offset.top + hdroffset) <= 0) return;
  		  offset = (document.mozFullScreen || document.webkitFullScreen)? -5 : 40;
  	    $('#vmp-panel2-1').height(ui.offset.top - 38 - hdroffset - offset); 
  	    $('#vmp-panel2-2').height($('#vmp-idebox').height() - $('#vmp-panel2-1').height() - hdroffset - 7 - $('#vmp-header').height());
  	},
  
  	start: function() {
      	$('#vmp-panel2-1').css('pointer-events', 'none');
      	$('#vmp-panel2-2').css('pointer-events', 'none');
  	},
  
  	stop: function() {
      	$('#vmp-panel2-1').css('pointer-events', 'auto');
      	$('#vmp-panel2-2').css('pointer-events', 'auto');
  	}
  
  });
  
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  function vmp_panel1_float()
  {
      $('#vmp-panel1').width(0);
      document.getElementById('vmp-framedivider1').style.display = 'none';
      
      document.getElementById('panel1-div').style.position = "absolute";
      document.getElementById('panel1-div').style.border = '1px solid gray';
      document.getElementById('panel1-div').style.resize = 'both';
      document.getElementById('panel1-divhdr').style.cursor = 'move';
      
      if (panel1_fs_height) 
      {
        $('#panel1-div').height(panel1_fs_height);
        $('#panel1-div').width(panel1_fs_width);
      }
      
      // make readme panel1 draggable
      dragElement(document.getElementById("panel1-div"));
  }
  
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  function vmp_panel1_unfloat()
  {
  	if (document.getElementById('panel1-content').style.display == 'block')
  	{
  	  panel1_fs_height = $('#panel1-div').height();
  	}
  	
  	panel1_fs_width = $('#panel1-div').width();
  
    if (vmp_panel1) //(document.getElementById('vmp-panel1').style.display == 'block')
  	{
  	  panel1_hidden = false;
      $('#vmp-panel1').width(200);
      document.getElementById('vmp-framedivider1').style.display = 'block';
  	}
  
    document.getElementById('panel1-div').style.position = "static";
    document.getElementById('panel1-div').style.border = '0px solid gray';
    document.getElementById('panel1-div').style.resize = 'none';
    document.getElementById('panel1-divhdr').style.cursor = 'auto';
    
    $('#panel1-div').width('auto');
    $('#panel1-div').height('auto');
    
    document.getElementById('panel1-content').style.display = "block";
  }
  
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  $('.vmp-showfullscreen').on('click', function()
  {
      var fullbox = document.getElementById("vmp-idebox");
  
      if (!document.mozFullScreen && !document.webkitFullScreen) 
      {
        if (fullbox.mozRequestFullScreen) 
        {
          fullbox.mozRequestFullScreen();
        } 
        else 
        {
          fullbox.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
        }
  
        if (vmp_panel1)
        {
      	  //vmp_panel1_float();
        }
  
      }
      else 
      {
        if (vmp_panel1)
        {
      	  //vmp_panel1_unfloat();
        }
        if (document.mozCancelFullScreen) 
        {
          document.mozCancelFullScreen();
        } 
        else 
        {
          document.webkitCancelFullScreen();
        }
      }
  });
  
  
  // Fixes keyboard events not working within container iframe
  if(cnlab) {
    var el = document.getElementById("vmp-panel2-2");
    el.addEventListener('mouseenter',(event) => {
      var ifr = document.getElementById("panel2-iframe");
      if (ifr) ifr.focus();
    });
  }
  
  // Once all display elements are loaded, make them visible
  $(document).ready(function() {
    $('#vmp-idebox').css('opacity', '100');
    $('#vmp-panels').css('opacity', '100');
    
    removeSpinner();
    
    initializeLabStatusIndicator();
  });
  
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  //$('#panel1-hide').on('click', function()
  function panel1_hide()
  {
  	var leftwidth, rightwidth;
  	
      if (true) //(!document.mozFullScreen && !document.webkitFullScreen) 
      {
        if (document.getElementById('panel1-div').style.position == "absolute")
        {
          vmp_panel1_unfloat();
        }
        
      	if (!panel1_hidden)
      	{
      		panel1_fs_width = $('#vmp-panel1').width();
      		document.getElementById('vmp-framedivider1').style.left = '33px'; //33
      		
      	  leftwidth = 33 - 13;
      	  rightwidth = 0;
    	    if (document.getElementById('vmp-panel3').style.display == 'none')
  	      {
  	        rightwidth = $('#vmp-idebox').width() - 26;
  	      }
  	      else
  	      {
  	        rightwidth = $('#vmp-idebox').width() - 27 - $('#vmp-panel3').width() - 6;
  	        if (panel3_hidden) rightwidth += 6;
  	      } 
      	      
      	  $('#vmp-panel1').width(leftwidth);
      	  $('#vmp-panel2').width(rightwidth);
      	  
          document.getElementById('vmp-framedivider1').style.display = 'none';
    	    	  
      	  panel1_hidden = true;
      	}
      	else
      	{
        	$('#vmp-panel1').width(panel1_fs_width);
        	
        	if (document.getElementById('vmp-panel3').style.display == 'none')
  	      {
        		rightwidth = $('#vmp-idebox').width() - panel1_fs_width - 11;
  	      }
        	else
        	{
        		rightwidth = $('#vmp-idebox').width() - panel1_fs_width - 13 - $('#vmp-panel3').width() - 5;
        		if (panel3_hidden) rightwidth += 6;
        	}
  
        	$('#vmp-panel2').width(rightwidth);
        	
        	document.getElementById('vmp-framedivider1').style.left = panel1_fs_width + 13 + 'px';
        	document.getElementById('vmp-framedivider1').style.display = 'block';
  
    		  panel1_hidden = false;
      	}
      }
      else
      {
      	if (document.getElementById('panel1-content').style.display == 'block')
      	{
      		panel1_fs_height = $('#panel1-div').height();
      		panel1_fs_width = $('#panel1-div').width();
      	  $('#panel1-div').height(40);
          document.getElementById('panel1-div').style.resize = 'none';
      	  
          document.getElementById('panel1-content').style.display = "none";
          
      	}
      	else
      	{
      	  document.getElementById('panel1-content').style.display = "block";
      	  document.getElementById('panel1-div').style.resize = 'both';
      	  
      	  $('#panel1-div').height(panel1_fs_height);
      	}
      }
    
  //});
  }
  
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  function panel3_hide()
  {
  	var leftwidth, rightwidth;
  	
    if (true) //(!document.mozFullScreen && !document.webkitFullScreen) 
    {
    	if (!panel3_hidden)
    	{
    		panel3_fs_width = $('#vmp-panel3').width();
    		document.getElementById('vmp-framedivider3').style.left = '33px';
    		
    	  leftwidth = 33 - 13;
    	  rightwidth = 0;
  	    if (document.getElementById('vmp-panel1').style.display == 'none')
        {
          rightwidth = $('#vmp-idebox').width() - 27;
        }
        else
        {
          rightwidth = $('#vmp-idebox').width() - 33 - $('#vmp-panel1').width() - 1;
          if (panel1_hidden || document.mozFullScreen || document.webkitFullScreen)  rightwidth += 6;
        } 
    	      
    	  $('#vmp-panel3').width(leftwidth);
    	  $('#vmp-panel2').width(rightwidth);
        document.getElementById('vmp-framedivider3').style.display = 'none';
  	    	  
    	  panel3_hidden = true;
    	}
    	else
    	{
      	$('#vmp-panel3').width(panel3_fs_width);
      	
      	if (document.getElementById('vmp-panel1').style.display == 'none')
        {
      		rightwidth = $('#vmp-idebox').width() - panel3_fs_width - 13;
        }
      	else
      	{
      		rightwidth = $('#vmp-idebox').width() - panel3_fs_width - 13 - $('#vmp-panel1').width() - 5;
      		if (panel1_hidden || document.mozFullScreen || document.webkitFullScreen)  rightwidth += 5;
      	}
      	$('#vmp-panel2').width(rightwidth);
      	
      	document.getElementById('vmp-framedivider3').style.left = panel3_fs_width + 13 + 'px';
      	document.getElementById('vmp-framedivider3').style.display = 'block';
  
  		  panel3_hidden = false;
    	}
    }
  }
  
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  function panel3_close()
  {
  	if ((!canSubmit && awsconsole) || !readme) //readme is in panel 2, just close panel 3
  	{
  	  document.getElementById('vmp-panel3').style.display = 'none';
  	  document.getElementById('vmp-framedivider3').style.display = 'none';
  	  vmp_panel3 = false;
  	  panel3_hidden = false;
  	}
  	else
  	{
  		$('#vmp-panel3').html(' <div id="panel3-div" class="" style="height: auto; margin: 0px,5px,0px,5px; border: 0px solid green; overflow: auto; z-index: 20; background-color: white"> <div id="panel3-divhdr" class="" style="display: block; border-bottom: 0px solid gray; background-color:#EEEEEE"> <span id="panel3-hide" onclick="panel3_hide()" style="float: right; cursor: pointer; padding: 2px 5px 8px 5px; line-height: 20%; margin-right: 0px; font-size: 200%; border: 0px solid red;">-</span> <i id="panel3-spin" class="" style="display: none; float: left; cursor: pointer; margin-left:3px;" onclick="refreshFileTreeHtml()"></i> <div style="clear: right;"></div> </div> <div id="panel3-content" style="display: block; overflow: hidden; border: 0px solid red;"> <!-- <div id="panel3-info" class="vmp-overlay" style="overflow: scroll; border: 1px solid red;"></div> --> <iframe id="panel3-iframe" name="panel3-iframe" title="README"  src=""        style="width: 100%; height: 80vh; padding-bottom:0px; border: 0px solid blue;"></iframe> </div> </div> ');
  		panel3_hidden = false;
  	}
  	
  	// Opens readme if it's active on panel3 close
  	if(readme) {
  	  readmeBtnClicked();
  	}
  	
  	vmp_resize();
  }
  
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  function showPanel3(url, opt) 
  {
  	// panel3 can be used to display other info, init the dom again just in case.
  	$('#vmp-panel3').html("\n<div id=\"panel3-div\" class=\"\" style=\"height: auto; margin: 0px,5px,0px,5px; border: 0px solid green; overflow: auto; z-index: 20; background-color: white\">\n<div id=\"panel3-divhdr\" class=\"\" style=\"display: block; border-bottom: 0px solid gray; background-color:#EEEEEE\">\n<span id=\"panel3-hide\" onclick=\"panel3_hide()\" style=\"float: right; cursor: pointer; padding: 2px 5px 8px 5px; line-height: 20%; margin-right: 0px; font-size: 200%; border: 0px solid red;\">-<\/span>\n<i id=\"panel3-spin\" class=\"\" style=\"display: none; float: left; cursor: pointer; margin-left:3px;\" onclick=\"refreshFileTreeHtml()\"><\/i>\n<div style=\"clear: right;\"><\/div>\n<\/div>\n<div id=\"panel3-content\" style=\"display: block; overflow: hidden; border: 0px solid red;\">\n<!--\n<div id=\"panel3-info\" class=\"vmp-overlay\" style=\"overflow: scroll; border: 1px solid red;\"><\/div>\n-->\n<iframe id=\"panel3-iframe\" name=\"panel3-iframe\" title=\"README\"\n src=\"\" \n      style=\"width: 100%; height: 80vh; padding-bottom:0px; border: 0px solid blue;\"><\/iframe>\n<\/div>\n<\/div>\n").focus();
  	
    if (!vmp_panel3)
    {
      document.getElementById('vmp-panel3').style.display = 'block';
      document.getElementById('vmp-framedivider3').style.display = 'block';
      vmp_panel3 = true;
      vmp_resize();
      document.getElementById('vmp-panel3').focus();
    }
    
    if (panel3_hidden)
    {
      $('#vmp-panel3').width(panel3_fs_width);
        	
      if (document.getElementById('vmp-panel1').style.display == 'none')
  	  {
        rightwidth = $('#vmp-idebox').width() - panel3_fs_width - 13;
  	  }
      else
      {
        rightwidth = $('#vmp-idebox').width() - panel3_fs_width - 13 - $('#vmp-panel1').width() - 5;
        if (panel1_hidden || document.mozFullScreen || document.webkitFullScreen)  rightwidth += 5;
      }
      $('#vmp-panel2').width(rightwidth);
        	
      document.getElementById('vmp-framedivider3').style.left = panel3_fs_width + 13 + 'px';
      document.getElementById('vmp-framedivider3').style.display = 'block';
  
      panel3_hidden = false;
    }
  
    if (opt == 1)
    {
  	  document.getElementById('panel3-spin').style.display = 'block';
    }
    else
    {
  	  document.getElementById('panel3-spin').style.display = 'none';
    }
  
    $('#panel3-spin').removeClass('icon-refresh');
    $('#panel3-spin').addClass('icon-spin');
  	$('#panel3-spin').addClass('icon-spinner');
  	
  	var instrpinbox =  document.getElementById('instrpinbox');
  	if ((typeof(instrpinbox) !== 'undefined') 
              && (instrpinbox != null))
  	{
  	  $('#instrpinbox').removeClass('icon-info');
  	  $('#instrpinbox').addClass('icon-spin');
      $('#instrpinbox').addClass('icon-spinner');
  	}
  	
  	
  
    $('#panel3-iframe').prop('src', url).focus();
    
    $('#panel3-iframe').on('load', function() {
        document.getElementById('panel3-spin').style.display = 'none';
  	    $('#panel3-spin').removeClass('icon-spin');
  	  	$('#panel3-spin').removeClass('icon-spinner');
  	  	$('#panel3-spin').addClass('icon-refresh');
  	  	if ((typeof(instrpinbox) !== 'undefined') 
  	            && (instrpinbox != null))
  		{
  		  $('#instrpinbox').removeClass('icon-spin');
  		  $('#instrpinbox').removeClass('icon-spinner');
  	    $('#instrpinbox').addClass('icon-info');
  		}
    });
  }
  
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  function showPanel3Info() 
  {
  	//console.log('showPanel3Info');
  	$('#vmp-panel3').css('overflow', 'auto');
  	document.getElementById('vmp-panel3').style.display = 'block';
  	document.getElementById('vmp-framedivider3').style.display = 'block';
  	vmp_panel3 = true;
  	panel3_hidden = false;
  	vmp_resize();
  }
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  function dragElement(elmnt) {
  	  var pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0;
  	  if (document.getElementById(elmnt.id + "hdr")) {
  	    // if present, the header is where you move the DIV from:
  	    document.getElementById(elmnt.id + "hdr").onmousedown = dragMouseDown;
  	  } else {
  	    // otherwise, move the DIV from anywhere inside the DIV:
  	    elmnt.onmousedown = dragMouseDown;
  	  }
  
  	  function dragMouseDown(e) {
  	    e = e || window.event;
  	    e.preventDefault();
  	    $('#vmp-panel2').css('pointer-events', 'none');
  	    $('#vmp-panel3').css('pointer-events', 'none');
  	    $('#panel1-content').css('pointer-events', 'none');
  	    // get the mouse cursor position at startup:
  	    pos3 = e.clientX;
  	    pos4 = e.clientY;
  	    document.onmouseup = closeDragElement;
  	    // call a function whenever the cursor moves:
  	    document.onmousemove = elementDrag;
  	  }
  
  	  function elementDrag(e) {
  	    e = e || window.event;
  	    e.preventDefault();
  	    // calculate the new cursor position:
  	    pos1 = pos3 - e.clientX;
  	    pos2 = pos4 - e.clientY;
  	    pos3 = e.clientX;
  	    pos4 = e.clientY;
  	    // set the element's new position:
  	    elmnt.style.top = (elmnt.offsetTop - pos2) + "px";
  	    elmnt.style.left = (elmnt.offsetLeft - pos1) + "px";
  	  }
  
  	  function closeDragElement() {
  	    // stop moving when mouse button is released:
  	    document.onmouseup = null;
  	    document.onmousemove = null;
  	    $('#vmp-panel2').css('pointer-events', 'auto');
  	    $('#vmp-panel3').css('pointer-events', 'auto');
  	    $('#panel1-content').css('pointer-events', 'auto');
  	  }
  }
  
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  function vmp_resize ()
  {
  	  var leftwidth = document.getElementById('vmp-framedivider1').offsetLeft - 13;
  	  var rightwidth = 0;
  
  	  if (document.getElementById('vmp-panel1').style.display == 'none' &&
  			  document.getElementById('vmp-panel3').style.display == 'none')
  	  {
  		  rightwidth = $('#vmp-idebox').width() - 2;
  		  document.getElementById("vmp-panel2").style.borderLeftWidth = "0px";
  	  }
  	  else if (document.getElementById('vmp-panel1').style.display == 'none')
  	  {
  	    rightwidth = $('#vmp-idebox').width() - $('#vmp-panel3').width() - 10;
  	    document.getElementById("vmp-panel2").style.borderLeftWidth = "0px";
  	  }
  	  else if (document.getElementById('vmp-panel3').style.display == 'none')
  	  {
  		  leftwidth = document.getElementById('vmp-framedivider1').offsetLeft - 13;
  	    rightwidth = $('#vmp-idebox').width() - document.getElementById('vmp-framedivider1').offsetLeft + 3;
  	  }
  	  else // 3 panels
  	  {
  		  leftwidth = document.getElementById('vmp-framedivider1').offsetLeft - 13;
  	    rightwidth = $('#vmp-idebox').width() - document.getElementById('vmp-framedivider1').offsetLeft - $('#vmp-panel3').width() - 5;
  	  } 
  	  if (leftwidth < 0) {leftwidth *= -1; leftwidth += 2; }
  	  
  	  $('#vmp-panel1').width(leftwidth);
  	  if (panel1_hidden)
  	  {
  		  $('#vmp-panel2').width(rightwidth - 15); //23
  	  }
  	  else
  	  {
  	    $('#vmp-panel2').width(rightwidth - 2); // 10: fix for chrome
  	  }
  
  	  var hdroffset = (vmp_ideheader)? 31 : 0;
  	  var ht = window.innerHeight - document.getElementById('vmp-idebox').offsetTop - 10 - hdroffset - $('#vmp-header').height();
  	  
  	  $('#vmp-panel1').height(ht);
  	  $('#vmp-panel2').height(ht);
  	  $('#vmp-panel3').height(ht);
  	  $('#vmp-panel4').height(ht);
  	  $('#vmp-panel4').width($('#vmp-idebox').width() - 2);
  	  
  	  $('#vmp-framedivider1').height(ht);
  	  $('#vmp-framedivider3').height(ht);
  
  	  $('#panel3-content').height(ht-20);
  	  $('#panel3-iframe').height(ht-20);
  
  	  var ft = document.getElementById("filelisting");
  	  if (ft)
  	  {
  		  $('#filelisting').height(ht-20);
  	  }
  
  	  if (!vmp_panel2_1)
  		{
  			$('#vmp-panel2-2').height($('#vmp-idebox').height() - 3 - hdroffset - $('#vmp-header').height());
  		}
  		else if (vmp_panel2_2)
  	  {
  	    $('#vmp-panel2-2').height($('#vmp-idebox').height() - $('#vmp-panel2-1').height() - 7 - hdroffset - $('#vmp-header').height());
  	  }
  		else
  		{
  			$('#vmp-panel2-1').height($('#vmp-idebox').height() - 3 - hdroffset - $('#vmp-header').height());
  		}
  }
  
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  function vmp_1_2_3_filetree ()
  {
    console.log("vmp_1_2_3_filetree");
    
  	$('#vmp-panel1').width(250);
  	
    document.getElementById('vmp-ideheader').style.display = 'block';
    document.getElementById('vmp-panel1').style.display = 'block';
    document.getElementById('vmp-framedivider1').style.display = 'block';
    document.getElementById('vmp-panel3').style.display = 'block';
    document.getElementById('vmp-framedivider3').style.display = 'block';
    document.getElementById('vmp-panel2-1').style.display = 'block';
    document.getElementById('vmp-panel2-2').style.display = 'block';
    document.getElementById('vmp-framedivider2').style.display = 'block';
    
    vmp_panel1 = true;
    vmp_panel3 = true;
    vmp_panel2_1 = true;
    vmp_panel2_2 = true;
    vmp_ideheader = true;
  }
  
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  function vmp_1_2_filetree ()
  {
    console.log("vmp_1_2_filetree");
  	//
    // resize panels
    //
    $('#vmp-panel1').width(250);
    
    document.getElementById('vmp-ideheader').style.display = 'block';
    document.getElementById('vmp-panel1').style.display = 'block';
    document.getElementById('vmp-framedivider1').style.display = 'block';
    document.getElementById('vmp-panel3').style.display = 'none';
    document.getElementById('vmp-framedivider3').style.display = 'none';
    document.getElementById('vmp-panel2-1').style.display = 'block';
    document.getElementById('vmp-panel2-2').style.display = 'block';
    document.getElementById('vmp-framedivider2').style.display = 'block';
    
    vmp_panel1 = true;
    vmp_panel3 = false;
    vmp_panel2_1 = true;
    vmp_panel2_2 = true;
    vmp_ideheader = true;
  }
  
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  function vmp_1_22_3 ()
  {
    console.log("vmp_1_22_3");
  	//
    // resize panels
    //
    document.getElementById('vmp-ideheader').style.display = 'block';
    document.getElementById('vmp-panel1').style.display = 'block';
    document.getElementById('vmp-framedivider1').style.display = 'block';
    document.getElementById('vmp-panel3').style.display = 'block';
    document.getElementById('vmp-framedivider3').style.display = 'block';
    document.getElementById('vmp-panel2-1').style.display = 'none';
    document.getElementById('vmp-panel2-2').style.display = 'block';
    document.getElementById('vmp-framedivider2').style.display = 'none';
    
    vmp_panel1 = true;
    vmp_panel3 = true;
    vmp_panel2_1 = false;
    vmp_panel2_2 = true;
    vmp_ideheader = true;
  }
  
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  function vmp_1_22 ()
  {
    console.log("vmp_1_22");
  	//
    // resize panels
    //
    if (!canSubmit) { document.getElementById('vmp-ideheader').style.display = 'none';}
    document.getElementById('vmp-panel1').style.display = 'block';
    document.getElementById('vmp-framedivider1').style.display = 'block';
    document.getElementById('vmp-panel3').style.display = 'none';
    document.getElementById('vmp-framedivider3').style.display = 'none';
    document.getElementById('vmp-panel2-1').style.display = 'none';
    document.getElementById('vmp-panel2-2').style.display = 'block';
    document.getElementById('vmp-framedivider2').style.display = 'none';
    
    vmp_panel1 = true;
    vmp_panel3 = false;
    vmp_panel2_1 = false;
    vmp_panel2_2 = true;
    if (!canSubmit) { vmp_ideheader = false;}
  }
  
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  function vmp_22_3 ()
  {
  	console.log('vmp_22_3');
  	
  	$('#vmp-panel3').width('44%');
  	//
    // resize panels
    //
    if (!canSubmit) { document.getElementById('vmp-ideheader').style.display = 'none';}
    document.getElementById('vmp-panel1').style.display = 'none';
    document.getElementById('vmp-framedivider1').style.display = 'none';
    document.getElementById('vmp-panel3').style.display = 'block';
    document.getElementById('vmp-framedivider3').style.display = 'block';
    document.getElementById('vmp-panel2-1').style.display = 'none';
    document.getElementById('vmp-panel2-2').style.display = 'block';
    document.getElementById('vmp-framedivider2').style.display = 'none';
    
    vmp_panel1 = false;
    vmp_panel3 = true;
    vmp_panel2_1 = false;
    vmp_panel2_2 = true;
    if (!canSubmit) { vmp_ideheader = false;}
  }
  
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  function vmp_22 ()
  {
  	console.log('vmp_22');
  	//
    // resize panels
    //
    if (!canSubmit) { document.getElementById('vmp-ideheader').style.display = 'none';}
    document.getElementById('vmp-panel1').style.display = 'none';
    document.getElementById('vmp-framedivider1').style.display = 'none';
    document.getElementById('vmp-panel3').style.display = 'none';
    document.getElementById('vmp-framedivider3').style.display = 'none';
    document.getElementById('vmp-panel2-1').style.display = 'none';
    document.getElementById('vmp-panel2-2').style.display = 'block';
    document.getElementById('vmp-framedivider2').style.display = 'none';
    
    vmp_panel1 = false;
    vmp_panel3 = false;
    vmp_panel2_1 = false;
    vmp_panel2_2 = true;
    if (!canSubmit) { vmp_ideheader = false;}
  }
  
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  function vmp_3 ()
  {
  	console.log('vmp_3');
  	//
    // resize panels
    //
    if (!canSubmit) { document.getElementById('vmp-ideheader').style.display = 'none';}
    document.getElementById('vmp-panel1').style.display = 'none';
    document.getElementById('vmp-framedivider1').style.display = 'none';
    document.getElementById('vmp-panel3').style.display = 'block';
    document.getElementById('vmp-framedivider3').style.display = 'none';
    document.getElementById('vmp-panel2-1').style.display = 'none';
    document.getElementById('vmp-panel2-2').style.display = 'none';
    document.getElementById('vmp-framedivider2').style.display = 'none';
    
    vmp_panel1 = false;
    vmp_panel3 = true;
    vmp_panel2_1 = false;
    vmp_panel2_2 = false;
    if (!canSubmit) { vmp_ideheader = false;}
  
    //document.getElementById('panel3-divhdr').style.display = 'none';
    $('#panel3-divhdr').find('span:eq(0)').addClass('hidden');
    $('#vmp-panel3').width('100%');
  }
  
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  function vmp_copy_3_to_22 ()
  {
    console.log("vmp_copy_3_to_22");
    
  	var p3 = $('#vmp-panel3').html();
  	$('#vmp-panel3').html('');
  	$('#vmp-panel3').css('overflow-y', 'auto');
  	$('#vmp-panel2-2').html(p3);
  	$('#vmp-panel2-2').css('background-color', 'white');
  	$('#panel3-divhdr').addClass ('hidden');
  }
  
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  function vmp_copy_1_to_22 ()
  {
  	console.log('vmp_copy_1_to_22');
  
  	$('#readmeframelang').remove();
  	$('#panel3-iframe').prop('src', '');
  	$('#vmp-panel3').css('overflow-y', 'auto');
  	
  	$('#vmp-panel2-2').html("\n<div id=\"panel1-div\" class=\"\" style=\"height: auto; margin: 0px,5px,0px,5px; border: 0px solid green; overflow: auto; z-index: 20; background-color: white\">\n<div id=\"panel1-divhdr\" class=\"\" style=\"display: block; border-bottom: 0px solid gray; background-color:#EEEEEE\">\n<!--\n<span id=\"panel1-hide\" onclick=\"panel1_hide()\" style=\"float: right; cursor: pointer; padding: 2px 5px 8px 5px; line-height: 20%; margin-right: 0px; font-size: 200%; border: 0px solid red;\" role=\"button\" aria-label=\"minimize\">-<\/span>\n-->\n<i id=\"panel1-spin\" class=\"\" style=\"display: none; float: left; cursor: pointer; margin-left:3px;\" onclick=\"readmeBtnClicked()\"><\/i>\n    <span id=\"readmeframelang\" style=\"cursor: pointer;\">\n      <select style=\"margin: 5px; font-size: 12px; width: 150px; height: 30px;\" id=\"localeLangReadmeSelect\" onchange=\"lang_select()\">\n<option value=\"ar-sa\" >AR-SA<\/option><option value=\"de-de\" >DE-DE<\/option><option value=\"en-us\"  selected>EN-US<\/option><option value=\"es-es\" >ES-ES<\/option><option value=\"fr-fr\" >FR-FR<\/option><option value=\"id-id\" >ID-ID<\/option><option value=\"it-it\" >IT-IT<\/option><option value=\"ko-kr\" >KO-KR<\/option><option value=\"pt-br\" >PT-BR<\/option><option value=\"th-th\" >TH-TH<\/option><option value=\"uk-ua\" >UK-UA<\/option><option value=\"vi-vn\" >VI-VN<\/option><option value=\"zh-tw\" >ZH-TW<\/option>\n      <\/select>\n    <\/span>\n\n<div style=\"clear: right;\"><\/div>\n<\/div>\n<div id=\"panel1-content\" style=\"display: block; overflow: hidden; border: 0px solid red;\">\n<!--\n<div id=\"panel1-info\" class=\"vmp-overlay\" style=\"overflow: scroll; border: 1px solid red;\"><\/div>\n-->\n<iframe id=\"panel1-iframe\" name=\"panel3-iframe\" title=\"README\"\n src=\"..\/web\/3209731\/2792000.0\/ASNLIB\/public\/docs\/lang\/en-us\/README.html?vockey=92b04c35873bd949b37ad2d5305bdc08d94a5d6ff8998372748bc9b283f4c299\" \n      style=\"width: 100%; height: 80vh; padding-bottom:0px; border: 0px solid blue;\"><\/iframe>\n<\/div>\n<\/div>\n");
  	$('#vmp-panel2-2').css('background-color', 'white');
  	
  	//document.getElementById('panel1-divhdr').style.display = 'none';
  	var element = document.getElementById("readmeBtn");
  	if(typeof(element) != 'undefined' && element != null)
    {
  		document.getElementById('readmeBtn').style.display = 'none';
    } 
  	
  }
  //----------------------------------------------------------------------
  //
  //----------------------------------------------------------------------
  
  
  function toggleFiletreeView(display) {
    if(display) {
      refreshFileTreeIde(false, true);
      $('#expandFiletree').removeClass('icon-chevron-right').addClass('icon-chevron-left');
      $('#viewSubmissionTree').attr("onclick",'toggleFiletreeView(false)');
      
      // Open/Display Filetree
      $('#vmp-framedivider1').show();
      $('#vmp-panel1').show().css("width", "200px");
      vmp_resize();
    } else {
      $('#expandFiletree').removeClass('icon-chevron-left').addClass('icon-chevron-right');
      $('#viewSubmissionTree').attr("onclick",'toggleFiletreeView(true)');
    
      // Hide Filetree
      $('#vmp-framedivider1').hide();
      $('#vmp-panel1').css("width", "0px").hide();
      vmp_resize();
      hideAllFileBtn();
    }
  }




$(document).ready(function() {
    if (!fromGraderIde && !vocNotebookIde) {
    $.ajax({
      'url': '../util/vcput.php',
      'type': 'post',
      'data': {
        'a': 'addActivityLogEntry',
        'stepid': "2792000",
        'asnuserid': "3209731",
        'msg': 'clabide ui ready',
        'type': "18"
      }
    });
    }
    
    if(!newLayout) {
      vmp_init();
          }
    
    // Connect to the Vocareum websocket server
    // Maybe we should move this code to a shared file if we're going to include it in multiple places?
    var retries = 1;
    function wsConnect() {
      const ws = new WebSocket('wss://message.vocareum.com');

      ws.onopen = function (event) {
        // console.log('Websocket connection success');
        wsTimeout = 0;
        ws.send('{"encrypted":"H1Ky1fLsST9HYqN4LUGvlkxCtiKn9knKhTakIVuwgSLIV9MZLmln0jLpgxTFYWfhqaiBmkYd7mlDZRlNrvtxkeP4Dnnkyr3ZtcfLVaPfth0=","iv":"46d4a96c704e9f6fdb805b0c35719c25","salt":"a75c4070d3fcfb559ec22603f1ae77eb2d230650856966dba385e1387ffecfebf4205442498390f7a2061901214f47b6418a0fd8ca28b3baedba27bbe39bd4d9bfa61e630e63d40b18291218d65c3ab8d1fd53aae2c0fb4069049f40955bde917f046ee3d6a149cc838a224383621676fae0405884ae5221afaa49fd06c1c9357886387f2ec4dc2eca95ab2b3696017babed7ae23f63d0597ff9640d2981b1fb6beeeac88571336606b648a5086e0d1df86008ba23048b85faf6b7ad55079e91b8fec27d07801b2872152bf4b14346c2b9e4fd663827b6ed23506100a432f1268bb79d232f3c4298fcb5c6928035c262d7d3a436816802baaf7a64935c97feb2"}');
      }
      ws.onmessage = function (event) {
        //console.log('Received: %s', event.data);
        let data = JSON.parse(event.data);

        if (data.state == "END" && data.status == "SUCCESS" && (data.type == "Container" || data.type == "VM")) {
          displayContainerPanelFiller();
          updateLabStatusIndicator();
        } else if (((data.state == "START" || data.state == "LAUNCH") && data.status == "SUCCESS" && data.type == "Container")) {
          if ($('#open').is(':visible')) {
            StartLabs();
          } else if (vocNotebookIde && interactiveEnabled) {
            startGpuBudgetTimer();
          }
        } else if ((data.state == "INIT" && data.status == "SUCCESS" && data.type == "VM")) {
          if ($('#open').is(':visible')) {
            $('#panel2-div').remove();
            $('#vmp-panel2-2').append(`
      <div id="panel2-div" style="overflow:hidden; height:100%; padding: 0px; margin-bottom: 0px; margin-left:0px; border:0px solid lightblue;">
        <iframe id="panel2-iframe" name="panel2-iframe" title="Desktop" src="" width="100%" height="100%" style="overflow:none;border:0px solid red;" onload="terminalLoaded()"></iframe>
      </div>`);
            $('#panel2-iframe').attr('src', '');
          }
          vmBtnClicked(0, '', 0);
        }
        // Message sent from voc-oai-lambda
        if (data.action === "updateOpenaiBudget") {
          updateBudgetValues('genai');
        }
        if (data.action === 'executionEvent') {
          // alert("========== EVENT!!: " + data.message.report);
          // console.log(data);
          console.log("== Execution Event ==");
          //console.log(data.message);
          //console.log(data.message.cellReport);
          //console.log(data.message.grades);
          
                    // Here, update the Notebook with the newly recieved data
          
          try {
            const scores = {};
            let totalScoreAchieved = 0;
            let totalScorePossible = 0;
            const gradesReceived = JSON.parse(data.message.grades);
            const rubrics = {"1 - Hello World":"0","10 - Analyze with Python":"0","11 - String Sequence and Numeric Weight":"0","12 - Lists and Loops":"0","13 - Caesar Cipher":"0","14 - File Handlers":"0","15 - System Administration":"0","16 - Debugger":"0","17 - Debugging the Caesar Cipher Program":"0","2 - Numeric Data Types":"0","3 - String Data Types":"0","4 - List, Tuple, Dictionary":"0","5 - Categorize Values":"0","6 - Composite Data Types":"0","7 - Conditionals":"0","8 - Loops":"0","9 - Git":"0"};
            for (const name in gradesReceived) {
              if (name in rubrics) {
                const score = (gradesReceived[name] === 'VOC_MAX' ? (rubrics[name]) : (!isNaN(gradesReceived[name]) ? gradesReceived[name] : 0));
                totalScoreAchieved += parseFloat(score);
                totalScorePossible += parseFloat(rubrics[name]);
                scores[name] = score;
              }
            }
            scores['voc-total'] = totalScoreAchieved;


          var notebookEntity = vocFileViewer.getActiveFile();
          if (notebookEntity) notebookEntity.updateFileData(data.message.feedback, data.message.grades);

          // display grades immediatesly if received through websocket
          if (Object.keys(gradesReceived).length > 0) {
            refreshAndDisplayGrades(scores);
          } else {
            // if no grades received through websocket, go through grading script status checking
            // to display grades when available
            getGradingStatus();
          }

          

          } catch (error) {
            console.debug(error);
          }
          
                  }
        if (data.action === "alert") {
          let message = data.message;
          show_voc_gritter(true, message, true);
        }
        if (data.action === 'GoogleOAuth') {
          $('span[name="Google Drive"] span.appLabel').html('Colab');
          $('span[name="Google Drive"]').attr('onclick', 'goToColab(this)');
        }
      }
      ws.onclose = function (event) {
        // console.log("Code: " + event.code + " | Reason: " + event.reason);
        // Automatic reconnect, note that onclose also gets called after onerror
        if (retries <= 5) {
          // console.log(`Websocket reconnect attempt ${retries} after 1 second...`);
          retries++;
          setTimeout(() => wsConnect(), (Math.random() * 1000) + 1000);
        } else {
          show_voc_gritter(true, "Unable to connect to Vocareum notification service, please refresh the page to try again", true);
        }
      }
      ws.onerror = function (event) {
        // console.log('Websocket connection error');
      }
    }
    
    wsConnect();

    // Run getBatchJobStatus() once to get current status of job on page load
        
    // if IDE is VNB and container isn't already running, start it
      });

</script>


<script>
    let ping_arrTimes = [];
  let ping_i = 0;
  let ping_timesToTest = 10;
  let ping_testImage = "../shared/img/vocdivider-v.png";
  let ping_dummyImage = new Image();
  let updateMyLabStatus = true;
  let total_min = 0;
  let total_max = 0;
  (function measurePing() {
    testLatency(function(avg) {
      updateMyLabStatus = (total_max == 0 || parseInt((avg.toFixed(0))) > total_max)
                          || (total_min == 0 || parseInt(avg.toFixed(0)) < total_min);
      $.ajax({
        url: '../util/vcput.php',
        type: 'post',
        data: {
          'a': 'addActivityLogEntry',
          'stepid': "2792000",
          'asnuserid': "3209731",
          'msg': avg.toFixed(0) + ' ms',
          'type': "42",
          'updatemylabstatus': updateMyLabStatus
        },
        success: function(data) {
          if (data) {
            let res = JSON.parse(data);
            if (res) {
              total_max = res.max_latency;
              total_min = res.min_latency;
            }
          }
        }
      });
      // reset vars for repeated calls
      ping_i = 0;
      ping_arrTimes = [];
      ping_dummyImage = new Image();
      setTimeout(measurePing, 900000);
    });
  })();

  function testLatency(cb) {
    let tStart = new Date().getTime();
    if (ping_i < ping_timesToTest) {
      ping_dummyImage.src = ping_testImage + '?t=' + tStart;
      ping_dummyImage.onload = function() {
        let tEnd = new Date().getTime();
        let tTimeTook = tEnd - tStart;
        ping_arrTimes.push(tTimeTook);
        testLatency(cb);
        ping_i++;
      };
    } else {
      // calculate average of array items then callback
      let sum = ping_arrTimes.reduce(function(a, b) { return a + b; });
      let avg = sum / ping_arrTimes.length;
      cb(avg);
    }
  }
  </script>

                </div>
            </div>
        </div>
                
        

        <div id="push" tabindex="0"></div>

        <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/ace-elements.js"></script>
        <script src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/jquery.colorbox-min.js"></script>

        <!-- functions start : remove unused ones -->
        <!-- PCHECK -->
        <script type="text/javascript">

            /*
                This section handles auto-hiding the sections in the user dropdown menu.
            */
            let nav_dropdown_sections = $(".nav-dropdown-section");
            let nav_dropdown_sections_count = 0;
            nav_dropdown_sections.each(function() {
                let licount = $(this).find("li").length;

                if (licount < 2) { //1 default <li> element per section for section header
                    // Hide the current section
                    $(this).hide();
                } else {
                    nav_dropdown_sections_count++;
                }
            });
            if(nav_dropdown_sections_count == 1) $("#account_section_bar").hide();


            function voc_set_tabindex() {
                $(".vocelem").each(function (i) {
                    $(this).attr('tabindex', i + 1);
                });
            }

            $('#navbar-inner-div').off('keydown');
            $('#navbar-inner-div').attach_accesible_handler();

            //when user acknowledges the msg banner, remove it from URL so it
            //doesn't reappear on page refresh
            $(".close_msg_banner").on("click", function() {
                switch($(this).data('msg-banner')) {
                    case "error":
                        removeUrlParam(["e", "e_hash"]);
                        break;
                    case "warn":
                        removeUrlParam(["w", "w_hash"]);
                        break;
                    case "success":
                        removeUrlParam(["success", "s_hash"]);
                        break;
                }
            });

            $(function () {

                
                $('textarea[class*=autosize]').autosize({append: "\n"});

                $('#accordion2').on('hide', function (e) {
                    $(e.target).prev().children(0).addClass('collapsed');
                })
                $('#accordion2').on('hidden', function (e) {
                    $(e.target).prev().children(0).addClass('collapsed');
                })
                $('#accordion2').on('show', function (e) {
                    $(e.target).prev().children(0).removeClass('collapsed');
                })
                $('#accordion2').on('shown', function (e) {
                    $(e.target).prev().children(0).removeClass('collapsed');
                })

                $('#accordion-style').on('click', function (ev) {
                    var target = $('input', ev.target);
                    var which = parseInt(target.val());
                    if (which == 2) $('#accordion').addClass('accordion-style2');
                    else $('#accordion').removeClass('accordion-style2');
                });

                var oldie = /msie\s*(8|7|6)/.test(navigator.userAgent.toLowerCase());
                $('.easy-pie-chart.percentage').each(function () {
                    $(this).easyPieChart({
                        barColor: $(this).data('color'),
                        trackColor: '#EEEEEE',
                        scaleColor: false,
                        lineCap: 'butt',
                        lineWidth: 8,
                        animate: oldie ? false : 1000,
                        size: 75
                    }).css('color', $(this).data('color'));
                });

                $('[data-rel=tooltip]').tooltip();
                $('[data-rel=popover]').popover({html: true});
                $('#spinner-opts small').css({display: 'inline-block', width: '60px'});

                var slide_styles = ['', 'green', 'red', 'purple', 'orange', 'dark'];
                var ii = 0;
                $("#spinner-opts input[type=text]").each(function () {
                    var $this = $(this);
                    $this.hide().after('<span />');
                    $this.next().addClass('ui-slider-small').addClass("inline ui-slider-" + slide_styles[ii++ % slide_styles.length]).css({'width': '125px'}).slider({
                        value: parseInt($this.val()),
                        range: "min",
                        animate: true,
                        min: parseInt($this.data('min')),
                        max: parseInt($this.data('max')),
                        step: parseFloat($this.data('step')),
                        slide: function (event, ui) {
                        $this.attr('value', ui.value);
                        spinner_update();
                        }
                    });
                });


                $.fn.spin = function (opts) {
                    this.each(function () {
                        var $this = $(this),
                        data = $this.data();

                        if (data.spinner) {
                            data.spinner.stop();
                            delete data.spinner;
                        }
                        if (opts !== false) {
                            data.spinner = new Spinner($.extend({color: $this.css('color')}, opts)).spin(this);
                        }
                    });
                    return this;
                };

                function spinner_update() {
                    var opts = {};
                    $('#spinner-opts input[type=text]').each(function () {
                        opts[this.name] = parseFloat(this.value);
                    });
                    $('#spinner-preview').spin(opts);
                }


                $('#id-pills-stacked').removeAttr('checked').on('click', function () {
                    $('.nav-pills').toggleClass('nav-stacked');
                });


            });
        </script>
        <!-- functions end -->


        <!-- it might be used by both TA and grader so putting it under main.php -->
        <script>
        function hideNamesOnDashboard() {
            $('.studentNameDashboard').addClass('hidden-1');
            $('.anonymousInfoDashboard').removeClass('hidden-1');
        }

        function showNamesOnDashboard() {
            $('.studentNameDashboard').removeClass('hidden-1');
            $('.anonymousInfoDashboard').addClass('hidden-1');
        }

        $('#showHideStudentNameDashboard').on('click', function () {
            if ($(this).text() == 'Hide Names') {
                hideNamesOnDashboard();
                $(this).html('Show Names');
                hideNamesDashboard = 1;
            } else {
                showNamesOnDashboard();
                $(this).html('Hide Names');
                hideNamesDashboard = 0;
            }
        });
        </script>

    <script defer="defer" src="111-[PF]-Lab%20-%20List,%20tuple,%20dictionary_files/vedd3670a3b1c4e178fdfb0cc912d969e1713874337387" integrity="sha512-EzCudv2gYygrCcVhu65FkAxclf3mYM6BCwiGUm6BEuLzSb5ulVhgokzCZED7yMIkzYVg65mxfIBNdNra5ZFNyQ==" data-cf-beacon="{&quot;rayId&quot;:&quot;88550e8b9e553695&quot;,&quot;version&quot;:&quot;2024.4.1&quot;,&quot;token&quot;:&quot;a73834a4a1444e9ab89e8da06da41720&quot;}" crossorigin="anonymous"></script>


<div id="cboxOverlay" style="display: none;"></div><div id="colorbox" class="" role="dialog" tabindex="-1" style="display: none;"><div id="cboxWrapper"><div><div id="cboxTopLeft" style="float: left;"></div><div id="cboxTopCenter" style="float: left;"></div><div id="cboxTopRight" style="float: left;"></div></div><div style="clear: left;"><div id="cboxMiddleLeft" style="float: left;"></div><div id="cboxContent" style="float: left;"><div id="cboxTitle" style="float: left;"></div><div id="cboxCurrent" style="float: left;"></div><button type="button" id="cboxPrevious"></button><button type="button" id="cboxNext"></button><button id="cboxSlideshow"></button><div id="cboxLoadingOverlay" style="float: left;"></div><div id="cboxLoadingGraphic" style="float: left;"></div></div><div id="cboxMiddleRight" style="float: left;"></div></div><div style="clear: left;"><div id="cboxBottomLeft" style="float: left;"></div><div id="cboxBottomCenter" style="float: left;"></div><div id="cboxBottomRight" style="float: left;"></div></div></div><div style="position: absolute; width: 9999px; visibility: hidden; display: none;"></div></div><textarea tabindex="-1" style="position: absolute; inset: -999px auto auto 0px; border: 0px; box-sizing: content-box; overflow-wrap: break-word; height: 0px !important; min-height: 0px !important; overflow: hidden; transition: none;"></textarea></body></html>