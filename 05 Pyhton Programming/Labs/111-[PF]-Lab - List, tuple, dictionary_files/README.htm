<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"></head><body style="padding-left: 10px;"><header>
    <link href="README_data/bootstrap.min.css" rel="stylesheet">
    <script src="README_data/jquery-3.5.1.slim.min.js" integrity="sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs=" crossorigin="anonymous"></script>
    <script src="README_data/bootstrap.min.js"></script>
    <script type="text/javascript" src="README_data/savedata.js"></script>
</header>

<div class="tab-content" style="padding-top: 10px; padding-bottom: 100px;">
<header>
<link rel="stylesheet" href="README_data/mcq-invisible-radio-buttons.css" crossorigin="anonymous">
<link rel="stylesheet" href="README_data/all.css" integrity="sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU" crossorigin="anonymous">
<!-- Latest compiled and minified CSS -->
<link rel="stylesheet" href="README_data/bootstrap.min.css" integrity="sha384-BVYiiSIFeK1dGmJRAkycuHAHRg32OmUcww7on3RYdg4Va+PmSTsz/K68vbdEjh4u" crossorigin="anonymous">
<link rel="stylesheet" href="README_data/bootstrap.css" media="screen">
<link rel="stylesheet" href="README_data/custom.min.css">
<link rel="stylesheet" href="README_data/vocareum_restart.css" crossorigin="anonymous">
<!-- Latest compiled and minified JavaScript -->
<script src="README_data/bootstrap.min.js" integrity="sha384-Tc5IQib027qvyjSMfHjOMaLkfuWVxZxUPnCJA7l2mCWNIpG9mGCD8wGNIcPD7Txa" crossorigin="anonymous"></script>
<script type="text/javascript" src="README_data/vocareum.js" crossorigin="anonymous"></script>
</header>
<div id="grp-1" class="tab-pane">
<h1>Creating a Hello, World Program</h1>
<h2>Lab overview</h2>
<p>Welcome to Introduction to Programming. For the labs, you will use the Python programming language.</p>
<p>In this lab, you will write your first Python program</p>
<hr>
<h2>Estimated completion time</h2>
<p>45 minutes</p>
<hr>
<h2>Accessing the AWS Cloud9 IDE</h2>
<ol>
<li>
<p>Start your lab environment by going to the top of these instructions and choosing <strong>Start Lab</strong>.</p>
<p>A <strong>Start Lab</strong> panel opens, displaying the lab status.</p>
</li>
<li>
<p>Wait until you see the message <em>Lab status: ready</em>, and then close the <strong>Start Lab</strong> panel by choosing the <strong>X</strong>.</p>
</li>
<li>
<p>At the top of these instructions, choose <strong>AWS</strong>.</p>
<p>The AWS Management Console opens in a new browser tab. The system automatically logs you in.</p>
<blockquote>
<p><strong>Note:</strong> If a new browser tab does not open, a banner 
or icon at the top of your browser typically indicates that your browser
 is preventing the site from opening pop-up windows. Choose the banner 
or icon, and choose <strong>Allow pop ups</strong>.</p>
</blockquote>
</li>
<li>
<p>In the AWS Management Console, choose <strong>Services</strong> &gt; <strong>Cloud9</strong>. In the <strong>Your environments</strong> panel, locate the <strong>reStart-python-cloud9</strong> card, and choose <strong>Open IDE</strong>.</p>
<p>The AWS Cloud9 environment opens.</p>
<blockquote>
<p><strong>Note:</strong> If a pop-up window opens with the message <em>.c9/project.settings have been changed on disk</em>, choose <strong>Discard</strong> to ignore it. Likewise, if a dialog window prompts you to <em>Show third-party content</em>, choose <strong>No</strong> to decline.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Creating your Python exercise file</h2>
<ol start="5">
<li>
<p>From the menu bar of the AWS Cloud9 IDE, choose <strong>File &gt; New From Template &gt; Python File</strong>.</p>
<p>This action creates an untitled file.</p>
</li>
<li>
<p>Delete the sample code provided to you in the template file.</p>
</li>
<li>
<p>Choose <strong>File &gt; Save As...</strong>, and provide a suitable name for the exercise file (for example, <em>hello-world.py</em>) and save it under the  <strong>/home/ec2-user/environment</strong> directory.</p>
<blockquote>
<p><strong>Note:</strong> The <em>.py</em> is the extension for Python files.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Accessing the terminal session</h2>
<ol start="8">
<li>
<p>In your AWS Cloud9 IDE, choose the <strong>+</strong> icon and select <strong>New Terminal</strong>.</p>
<p>A terminal session opens.</p>
</li>
<li>
<p>To display the present working directory, enter <code>pwd</code>. This command points to <strong>/home/ec2-user/environment</strong>.</p>
</li>
<li>
<p>In this directory, you should also be able to locate the file you created in the previous section.</p>
</li>
</ol>
<hr>
<h2>Exercise 1: Introducing Python</h2>
<p>Python is a high-level, general-purpose programming language. <em>Programming languages</em> are used to write instructions for computers. <em>High-level</em> means that Python commands are written with a combination of English words and special symbols. <em>General-purpose</em> means that Python is used by many people for different types of applications, such as desktop applications and websites.</p>
<p>Python has two major releases in use today, which are known as Python version 2.<em>x</em> and Python version 3.<em>x</em>. For <em>Introduction to Programming</em>, you will use Python version 3.6.<em>x</em>.
 Backward compatibility means that legacy code continues to work in new 
versions of the language. Generally, Python remains backward compatible 
within minor version releases. However, the major versions have syntax 
incompatibilities between them, such as between Python version 2.<em>x</em> and Python version 3.<em>x</em>.</p>
<p>The <span style="cursor:pointer; color:blue" onclick="parent.open('https://www.python.org')"><b>python.org</b></span> website has installers and general documentation for Python.</p>
<p>Most systems will have one or more versions of Python installed, with Python version 2.7 as the default.</p>
<ol start="11">
<li>
<p>To confirm the default version of Python that is installed in your lab, in the open terminal tab, enter:</p>
<pre><code class="language-bash">python --version</code></pre>
</li>
<li>
<p>To check other available versions of Python, enter the following commands:</p>
<pre><code class="language-bash">python2 --version
python3 --version</code></pre>
<p>You might see results similar to the following examples:</p>
<pre><code class="language-bash">~ $ python --version                                                                      Python 3.6.12                                                                                    
~ $ python2 --version                                                                     Python 2.7.18                                                                                    
~ $ python3 --version                                                                     Python 3.6.12 </code></pre>
</li>
</ol>
<p>​                                                    </p>
<hr>
<h2>Exercise 2: Writing your first Python program</h2>
<p>When someone learns how to program, it is traditional to start with the <em>Hello, World</em> program. This simple program verifies that you have installed the Python tools correctly.</p>
<ol start="13">
<li>
<p>From the navigation pane of the IDE, choose the file that you created in the previous <em>Creating your Python exercise file</em> section.  </p>
</li>
<li>
<p>In the file, enter the following code:</p>
<pre><code class="language-python">print("Hello, World")</code></pre>
</li>
<li>
<p>To save your file, choose <strong>File &gt; Save</strong>.</p>
</li>
<li>
<p>Near the top of the IDE window, choose the <strong>Run</strong> (Play) button.</p>
</li>
<li>
<p>In the bottom pane of the IDE, confirm that the program prints the words <em>Hello World</em>.</p>
</li>
</ol>
<p>Congratulations! You have written your first Python program.</p>
<hr>
<h2>End Lab</h2>
<p><i class="fas fa-flag-checkered"></i> Congratulations! You have completed the lab.</p>
<ol start="18">
<li>
<p>Choose <i class="fas fa-square-full fa-xs"></i> <strong>End Lab</strong> at the top of this page, and then select <span id="ssb_blue">Yes</span> to confirm that you want to end the lab.</p>
<p>A panel indicates that <em>DELETE has been initiated... You may close this message box now.</em></p>
</li>
<li>
<p>A message <em>Ended AWS Lab Successfully</em> is briefly displayed, indicating that the lab has ended.
​</p>
</li>
</ol>
<h2>Additional Resources</h2>
<p>For more information about AWS Training and Certification, see <a href="https://aws.amazon.com/training/">https://aws.amazon.com/training/</a>.</p>
<p><em>Your feedback is welcome and appreciated.</em>
If you would like to share any suggestions or corrections, please provide the details in our <a href="https://support.aws.amazon.com/#/contacts/aws-training">AWS Training and Certification Contact Form</a>.</p>
<p><em>© 2022 Amazon Web Services, Inc. and its affiliates. All rights 
reserved. This work may not be reproduced or redistributed, in whole or 
in part, without prior written permission from Amazon Web Services, Inc.
 Commercial copying, lending, or selling is prohibited.</em></p>
<!-- IMPORTANT: Do not delete the radio buttons below. They are required in order for the mulitple tabs at the bottom of the generated HTML page to work properly and will be rendered invisible through the mcq-invisible-radio-buttons.css style sheet. -->
<input class="voc_radio" type="radio" id="grp-1-1" value="1 - Hello World-1" name="grp-1" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-1-1" style="font-weight: 400">Yes</label><br>
<input class="voc_radio" type="radio" id="grp-1-2" value="1 - Hello World-2" name="grp-1" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-1-2" style="font-weight: 400">No</label><br>
<div class="voc_rubric">&lt; Rubric: 1 - Hello World | Points: 0 &gt;</div><br><div id="grp-1-hint" hidden=""></div><br><a class="btn btn-primary btnNext">Next</a></div>
<div id="grp-2" class="tab-pane">
<h1>Working with Numeric Data Types</h1>
<hr>
<h2>Lab overview</h2>
<p>Python makes it easier to do math. In fact, Python is a popular 
language among data scientists, who must analyze large amounts of data. 
In this lab, you will explore the basic data types that are used to 
store numeric values.</p>
<p>In this lab, you will:</p>
<ul>
<li>Use the Python shell</li>
<li>Use the int data type</li>
<li>Use the float data type</li>
<li>Use the complex data type</li>
<li>Use the bool data type</li>
</ul>
<hr>
<h2>Estimated completion time</h2>
<p>60 minutes</p>
<hr>
<h2>Accessing the AWS Cloud9 IDE</h2>
<ol>
<li>
<p>Start your lab environment by going to the top of these instructions and choosing <strong>Start Lab</strong>.</p>
<p>A <strong>Start Lab</strong> panel opens, displaying the lab status.</p>
</li>
<li>
<p>Wait until you see the message <em>Lab status: ready</em>, and then close the <strong>Start Lab</strong> panel by choosing the <strong>X</strong>.</p>
</li>
<li>
<p>At the top of these instructions, choose <strong>AWS</strong>.</p>
<p>The AWS Management Console opens in a new browser tab. The system automatically logs you in.</p>
<blockquote>
<p><strong>Note:</strong> If a new browser tab does not open, a banner 
or icon at the top of your browser typically indicates that your browser
 is preventing the site from opening pop-up windows. Choose the banner 
or icon, and choose <strong>Allow pop ups</strong>.</p>
</blockquote>
</li>
<li>
<p>In the AWS Management Console, choose <strong>Services</strong> &gt; <strong>Cloud9</strong>. In the <strong>Your environments</strong> panel, locate the <strong>reStart-python-cloud9</strong> card, and choose <strong>Open IDE</strong>.</p>
<p>The AWS Cloud9 environment opens.</p>
<blockquote>
<p><strong>Note:</strong> If a pop-up window opens with the message <em>.c9/project.settings have been changed on disk</em>, choose <strong>Discard</strong> to ignore it. Likewise, if a dialog window prompts you to <em>Show third-party content</em>, choose <strong>No</strong> to decline.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Creating your Python exercise file</h2>
<ol start="5">
<li>
<p>From the menu bar, choose <strong>File &gt; New From Template &gt; Python File</strong>.</p>
<p>This action creates an untitled file.</p>
</li>
<li>
<p>Delete the sample code from the template file.</p>
</li>
<li>
<p>Choose <strong>File &gt; Save As...</strong>, and provide a suitable name for the exercise file (for example, <em>numeric-data.py</em>) and save it under the  <strong>/home/ec2-user/environment</strong> directory.</p>
</li>
</ol>
<hr>
<h2>Accessing the terminal session</h2>
<ol start="8">
<li>
<p>In your AWS Cloud9 IDE, choose the <strong>+</strong> icon and select <strong>New Terminal</strong>.</p>
<p>A terminal session opens.</p>
</li>
<li>
<p>To display the present working directory, enter <code>pwd</code>. This command points to <strong>/home/ec2-user/environment</strong>.</p>
</li>
<li>
<p>In this directory, you should also be able to locate the file you created in the previous section.</p>
</li>
</ol>
<hr>
<h2>Exercise 1: Using the Python shell</h2>
<p>In the terminal tab, a Python shell can be started by entering the following command:</p>
<pre><code class="language-bash">python3</code></pre>
<p>The Python shell should look similar to the following example.</p>
<pre><code class="language-bash">Python 3.6.12 (default, Aug 31 2020, 18:56:18)
[GCC 4.8.5 20150623 (Red Hat 4.8.5-28)] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;                                                </code></pre>
<p>The three greater-than symbols (<code>&gt;&gt;&gt;</code>) represent 
the prompt where the user can enter Python commands. In the following 
activities, you will practice using the Python shell by issuing some 
numeric commands.</p>
<h3>Adding</h3>
<ol start="11">
<li>
<p>Enter the following input:</p>
<pre><code class="language-python">2 + 2</code></pre>
</li>
<li>
<p>Press ENTER.</p>
</li>
<li>
<p>Confirm that you get <em>4</em> as output.</p>
</li>
</ol>
<h3>Subtracting</h3>
<ol start="14">
<li>
<p>Enter the following input</p>
<pre><code class="language-python">4 - 2</code></pre>
</li>
<li>
<p>Press ENTER.</p>
</li>
<li>
<p>Confirm that you get <em>2</em> as output.</p>
</li>
</ol>
<h3>Multiplying</h3>
<p>To multiply, you use the <b>*</b> symbol:</p>
<ol start="17">
<li>
<p>Enter the following input:</p>
<pre><code class="language-python">2 + 2</code></pre>
</li>
<li>
<p>Press ENTER.</p>
</li>
<li>
<p>Confirm that you get <em>4</em> as output.</p>
</li>
</ol>
<h3>Dividing</h3>
<p>To divide, use the <strong>/</strong> symbol:</p>
<ol start="20">
<li>
<p>Enter the following input:</p>
<pre><code class="language-python">4 / 2</code></pre>
</li>
<li>
<p>Press ENTER.</p>
</li>
<li>
<p>Confirm that you get <em>2.0</em> as output.</p>
</li>
</ol>
<h3>Exiting the Python shell</h3>
<ol start="23">
<li>
<p>To exit the Python shell, enter the following command:</p>
<pre><code class="language-python">quit()</code></pre>
</li>
</ol>
<hr>
<h2>Exercise 2: Introducing the int data type</h2>
<p>To learn more about data types, you will use some built-in functions. A <em>function</em> is a piece of reusable code with a name. You use a function by:</p>
<ul>
<li>Calling by its name</li>
<li>Including a list of one or more inputs called <em>arguments</em>, which are enclosed in parentheses</li>
</ul>
<p>Python has several built-in functions that you can use to help you write more useful programs.</p>
<p>A collection of functions is called a <em>library</em>. Python’s collection of built-in functions is called the <em>Python Standard Library</em>.</p>
<h3>Editing a Python file</h3>
<p>Instead of entering commands one by one in the Python shell, you will edit a text file that contains a sequence of commands:</p>
<ol start="24">
<li>
<p>From the navigation pane of the IDE, choose the file that you created in the previous <em>Creating your Python exercise file</em> section.  </p>
</li>
<li>
<p>In the file, enter the following code:</p>
<pre><code class="language-python">print("Python has three numeric types: int, float, and complex")</code></pre>
</li>
<li>
<p>To save the file, choose <strong>File &gt; Save</strong>.</p>
</li>
<li>
<p>At the top of the IDE window, choose <strong>Run</strong> (the <strong>Play</strong> button).</p>
</li>
<li>
<p>In the bottom (console) pane of the IDE, confirm that the program prints the message: <em>Python has three numeric types: int, float, and complex</em></p>
<p><strong>Note</strong>: You might need to scroll up to see the console output.</p>
</li>
<li>
<p>In the terminal tab, you can also run the program by entering the following command, where &lt;<em>lab-python-file-name</em>&gt; is the name of the file that you created for this lab:</p>
<pre><code class="language-bash">python3 &lt;lab-python-file-name&gt;.py</code></pre>
</li>
<li>
<p>Confirm that the text you wrote is written to standard output.</p>
<pre><code class="language-bash">~ $ python3 &lt;lab-python-file-name&gt;.py                          
Python has three numeric types: int, float, and complex      </code></pre>
</li>
</ol>
<h3>Creating a variable</h3>
<p>A variable is like a labeled box that stores information. You can 
change the contents of the box, but the label stays the same. In this 
activity, you will use the variable name <em>myValue</em>, but will store different data types in that labeled box.</p>
<ol start="31">
<li>
<p>Return to the Python file and on a new line, enter the following code:</p>
<pre><code class="language-python">myValue=1</code></pre>
</li>
<li>
<p>Use the <code>print()</code> function to write the value of the variable to the shell. In the context of programming, <em>writing</em> means to add information to the shell.</p>
<pre><code class="language-python">print(myValue)</code></pre>
</li>
<li>
<p>To get the data type of the variable, use the <code>type()</code> built-in function:</p>
<pre><code class="language-python">print(type(myValue))</code></pre>
</li>
<li>
<p>To combine numbers and text, use the <code>str()</code> built-in function, which converts an argument into a collection of letters called a <em>string</em>. In this instance, you are converting the int (integer) data type into the <em>string</em> data type:</p>
<pre><code class="language-python">print(str(myValue) + " is of the data type " + str(type(myValue)))</code></pre>
</li>
<li>
<p>Save the file.</p>
</li>
<li>
<p>To run the file, choose <strong>Run</strong>.</p>
</li>
<li>
<p>In the bottom pane of the IDE, confirm that you have the following output:</p>
<pre><code class="language-python">Python has three numeric types: int, float, and complex              
1                                                            
&lt;class 'int'&gt;                                                
1 is of the data type &lt;class 'int'&gt;                              
~ $</code></pre>
<blockquote>
<p><strong>Note:</strong> You might need to scroll up to see the output.                                                        </p>
</blockquote>
</li>
</ol>
<hr>
<h2>Exercise 3: Introducing the float data type</h2>
<p>The int data type only stores whole numbers. If you want to store a number with a decimal, like <em>3.14</em>, you need a new data type called a <em>float</em>.</p>
<ol start="38">
<li>
<p>Return to the Python file and on a new line, enter the following code:</p>
<pre><code class="language-python">myValue=3.14</code></pre>
</li>
<li>
<p>To write the value of the variable to the shell, use the <code>print()</code> function:</p>
<pre><code class="language-python">print(myValue)</code></pre>
</li>
<li>
<p>Get the data type of the variable by using the <code>type()</code> built-in function:</p>
<pre><code class="language-python">print(type(myValue))</code></pre>
</li>
<li>
<p>To combine numbers and text, use the <code>str()</code> built-in function:</p>
<pre><code class="language-python">print(str(myValue) + " is of the data type " + str(type(myValue)))</code></pre>
</li>
<li>
<p>Save the file.</p>
</li>
<li>
<p>To run the file, choose <strong>Run</strong>.</p>
</li>
<li>
<p>In the bottom pane of the IDE, confirm that you see the following output:</p>
<pre><code class="language-python">Python has three numeric types: int, float, and complex              
1                                                            
&lt;class 'int'&gt;                                                
1 is of the data type &lt;class 'int'&gt;                              
3.14                                                         
&lt;class 'float'&gt;                                              
3.14 is of the data type &lt;class 'float'&gt;                         
~ $ </code></pre>
<blockquote>
<p><strong>Note:</strong> Recall that you might need to scroll up to see the output.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Exercise 4: Introducing the complex data type</h2>
<p>In advanced math, an imaginary number is a complex number that can be
 written as a real number that is multiplied by the imaginary unit <em>i</em>. This complex data type is complicated because it must represent a letter and a number, such as <em>5j</em>.</p>
<ol start="45">
<li>
<p>Return to the Python file and enter the following code:</p>
<pre><code class="language-python">myValue=5j</code></pre>
</li>
<li>
<p>Write the value of the variable with the <code>print()</code> function:</p>
<pre><code class="language-python">print(myValue)</code></pre>
</li>
<li>
<p>Get the data type of the variable with the <code>type()</code> function:</p>
<pre><code class="language-python">print(type(myValue))</code></pre>
</li>
<li>
<p>To combine numbers and text, use the <code>str()</code> built-in function:</p>
<pre><code class="language-python">print(str(myValue) + " is of the data type " + str(type(myValue)))</code></pre>
</li>
<li>
<p>Save the file.</p>
</li>
<li>
<p>To run the file, choose <strong>Run</strong>.</p>
</li>
<li>
<p>In the bottom pane of the IDE, confirm that you have the following output:</p>
<pre><code class="language-python">Python has three numeric types: int, float, and complex              
1                                                            
&lt;class 'int'&gt;                                                
1 is of the data type &lt;class 'int'&gt;                              
3.14                                                         
&lt;class 'float'&gt;                                              
3.14 is of the data type &lt;class 'float'&gt;                         
5j                                                           
&lt;class 'complex'&gt;                                            
5j is of the data type &lt;class 'complex'&gt;                         
~ $ </code></pre>
<blockquote>
<p><strong>Note:</strong> Recall that you might need to scroll up to see the output.                                                           </p>
</blockquote>
</li>
</ol>
<hr>
<h2>Exercise 5: Introducing the bool data type</h2>
<p>The bool (Boolean) data type comprises the permanent names <em>True</em> and <em>False</em>, which are represented by the numerals <em>1</em> and <em>0</em>, where <em>1 = True</em> and <em>0 = False</em>.
 The bool data type is implemented as a subset of int and is not 
considered a real data type. However, in some programming languages, it 
is implemented as a different data type. These exercises call the Python
 bool a <em>fake data type</em>.</p>
<ol start="52">
<li>
<p>Return to your text file, and enter the following code:</p>
<pre><code class="language-python">myValue=True</code></pre>
</li>
<li>
<p>Write the value of the variable to the shell by using the <code>print()</code> function:</p>
<pre><code class="language-python">print(myValue)</code></pre>
</li>
<li>
<p>Get the data type of the variable by using the <code>type()</code> built-in function:</p>
<pre><code class="language-python">print(type(myValue))</code></pre>
</li>
<li>
<p>To combine numbers and text, use the <code>str()</code> built-in function:</p>
<pre><code class="language-python">print(str(myValue) + " is of the data type " + str(type(myValue)))</code></pre>
</li>
<li>
<p>Save the file.</p>
</li>
<li>
<p>Choose <strong>Run</strong> (the <strong>Play</strong> button).</p>
</li>
<li>
<p>In the bottom pane of the IDE, confirm that it displays the correct output.</p>
</li>
<li>
<p>Return to your <strong>.py</strong> file and enter the following code:</p>
<pre><code class="language-python">myValue=False</code></pre>
</li>
<li>
<p>Use the <code>print()</code> function to write the value of the variable to the shell:</p>
<pre><code class="language-python">print(myValue)</code></pre>
</li>
<li>
<p>To get the data type of the variable, use the <code>type()</code> built-in function:</p>
<pre><code class="language-python">print(type(myValue))</code></pre>
</li>
<li>
<p>To combine numbers and text, use the <code>str()</code> built-in function:</p>
<pre><code class="language-python">print(str(myValue) + " is of the data type " + str(type(myValue)))</code></pre>
</li>
<li>
<p>Save the file.</p>
</li>
<li>
<p>Choose <strong>Run</strong> (the <strong>Play</strong> button).</p>
</li>
<li>
<p>In the bottom pane of the IDE, confirm that you have the following output:</p>
<pre><code class="language-python">Python has three numeric types: int, float, and complex              
1                                                            
&lt;class 'int'&gt;                                                
1 is of the data type &lt;class 'int'&gt;                              
3.14                                                         
&lt;class 'float'&gt;                                              
3.14 is of the data type &lt;class 'float'&gt;                         
5j                                                           
&lt;class 'complex'&gt;                                            
5j is of the data type &lt;class 'complex'&gt;                         
True                                                         
&lt;class 'bool'&gt;                                               
True is of the data type &lt;class 'bool'&gt;
False                                                         
&lt;class 'bool'&gt;                                               
False is of the data type &lt;class 'bool'&gt;                           
~ $</code></pre>
</li>
</ol>
<p>Congratulations! You have learned about Python’s three numeric data 
types: int, float, and complex. Additionally, you were introduced to the
 Python fake data type that is called <em>bool</em>. Note that bool is actually the numerals <em>0</em> and <em>1</em>, which represent the values of <em>True</em> and <em>False</em>.___</p>
<hr>
<h2>End Lab</h2>
<p><i class="fas fa-flag-checkered"></i> Congratulations! You have completed the lab.</p>
<ol start="66">
<li>
<p>Choose <i class="fas fa-square-full fa-xs"></i> <strong>End Lab</strong> at the top of this page, and then select <span id="ssb_blue">Yes</span> to confirm that you want to end the lab.</p>
<p>A panel indicates that <em>DELETE has been initiated... You may close this message box now.</em></p>
</li>
<li>
<p>A message <em>Ended AWS Lab Successfully</em> is briefly displayed, indicating that the lab has ended.
​</p>
</li>
</ol>
<h2>Additional Resources</h2>
<p>For more information about AWS Training and Certification, see <a href="https://aws.amazon.com/training/">https://aws.amazon.com/training/</a>.</p>
<p><em>Your feedback is welcome and appreciated.</em>
If you would like to share any suggestions or corrections, please provide the details in our <a href="https://support.aws.amazon.com/#/contacts/aws-training">AWS Training and Certification Contact Form</a>.</p>
<p><em>© 2022 Amazon Web Services, Inc. and its affiliates. All rights 
reserved. This work may not be reproduced or redistributed, in whole or 
in part, without prior written permission from Amazon Web Services, Inc.
 Commercial copying, lending, or selling is prohibited.</em></p>
<!-- IMPORTANT: Do not delete the radio buttons below. They are required in order for the mulitple tabs at the bottom of the generated HTML page to work properly and will be rendered invisible through the mcq-invisible-radio-buttons.css style sheet. -->
<input class="voc_radio" type="radio" id="grp-2-1" value="2 - Numeric Data Types-1" name="grp-2" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-2-1" style="font-weight: 400">Yes</label><br>
<input class="voc_radio" type="radio" id="grp-2-2" value="2 - Numeric Data Types-2" name="grp-2" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-2-2" style="font-weight: 400">No</label><br>
<div class="voc_rubric">&lt; Rubric: 2 - Numeric Data Types | Points: 0 &gt;</div><br><div id="grp-2-hint" hidden=""></div><br><a class="btn btn-primary btnPrevious">Previous</a><a class="btn btn-primary btnNext" style="margin-left: 4px">Next</a></div>
<div id="grp-3" class="tab-pane">
<h1>Working with the String Data Type</h1>
<hr>
<h2>Lab overview</h2>
<p>In Python, a collection of letters and symbols is called a <em>string</em>. Strings are used often in Python for input and output.</p>
<p>In this lab, you will:</p>
<ul>
<li>Write Python code that uses the <em>string</em> data type</li>
<li>Concatenate strings</li>
<li>Use the string to get input</li>
<li>Format strings for output</li>
</ul>
<hr>
<h2>Estimated completion time</h2>
<p>45 minutes</p>
<hr>
<h2>Accessing the AWS Cloud9 IDE</h2>
<ol>
<li>
<p>Start your lab environment by going to the top of these instructions and choosing <strong>Start Lab</strong>.</p>
<p>A <strong>Start Lab</strong> panel opens, displaying the lab status.</p>
</li>
<li>
<p>Wait until you see the message <em>Lab status: ready</em>, and then close the <strong>Start Lab</strong> panel by choosing the <strong>X</strong>.</p>
</li>
<li>
<p>At the top of these instructions, choose <strong>AWS</strong>.</p>
<p>The AWS Management Console opens in a new browser tab. The system automatically logs you in.</p>
<blockquote>
<p><strong>Note:</strong> If a new browser tab does not open, a banner 
or icon at the top of your browser typically indicates that your browser
 is preventing the site from opening pop-up windows. Choose the banner 
or icon, and choose <strong>Allow pop ups</strong>.</p>
</blockquote>
</li>
<li>
<p>In the AWS Management Console, choose <strong>Services</strong> &gt; <strong>Cloud9</strong>. In the <strong>Your environments</strong> panel, locate the <strong>reStart-python-cloud9</strong> card, and choose <strong>Open IDE</strong>.</p>
<p>The AWS Cloud9 environment opens.</p>
<blockquote>
<p><strong>Note:</strong> If a pop-up window opens with the message <em>.c9/project.settings have been changed on disk</em>, choose <strong>Discard</strong> to ignore it. Likewise, if a dialog window prompts you to <em>Show third-party content</em>, choose <strong>No</strong> to decline.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Creating your Python exercise file</h2>
<ol start="5">
<li>
<p>From the menu bar, choose <strong>File &gt; New From Template &gt; Python File</strong>. </p>
<p>This action creates an untitled file.</p>
</li>
<li>
<p>Delete the sample code provided from the template file.</p>
</li>
<li>
<p>Choose <strong>File &gt; Save As...</strong>, provide a suitable name for the exercise file (for example, <em>string-data-type.py</em>) and save it under the  <strong>/home/ec2-user/environment</strong> directory.</p>
<blockquote>
<p><strong>Note</strong>: Recall that <em>.py</em> is the extension for Python files.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Accessing the terminal session</h2>
<ol start="8">
<li>
<p>In your AWS Cloud9 IDE, choose the <strong>+</strong> icon and select <strong>New Terminal</strong>.</p>
<p>A terminal session opens.</p>
</li>
<li>
<p>To display the present working directory, enter <code>pwd</code>. This command points to <strong>/home/ec2-user/environment</strong>.</p>
</li>
<li>
<p>In this directory, you should also be able to locate the file you created in the previous section.</p>
</li>
</ol>
<hr>
<h2>Exercise 1: Introducing the string data type</h2>
<p>A text file containing a logical sequence of commands is a script.</p>
<ol start="11">
<li>
<p>From the navigation pane of the IDE, choose the <strong>.py</strong> file that you created in the previous <em>Creating your Python exercise file</em> section.</p>
</li>
<li>
<p>In the file, enter the following code:</p>
<pre><code class="language-python">myString = "This is a string."
print(myString)</code></pre>
</li>
<li>
<p>Save the file.</p>
</li>
<li>
<p>Run the file.</p>
</li>
<li>
<p>Confirm that the script runs correctly and that the output displays as you expect it to.</p>
<pre><code class="language-python">This is a string.</code></pre>
</li>
<li>
<p>Extend the Python script by using the built-in function <code>type()</code> to get the data type of the variable. Enter the following code:</p>
<pre><code class="language-python">print(type(myString))</code></pre>
</li>
<li>
<p>To convert the return value of type into a string, use the <code>str()</code> built-in function:</p>
<pre><code class="language-python">print(myString + " is of the data type " + str(type(myString)))</code></pre>
</li>
<li>
<p>Save the file.</p>
</li>
<li>
<p>Run the file.</p>
</li>
<li>
<p>Confirm that the script runs correctly and that the output displays as you expect it to.</p>
<pre><code class="language-python">This is a string.
&lt;class 'str'&gt;
This is a string. is of the data type &lt;class 'str'&gt;</code></pre>
</li>
</ol>
<hr>
<h2>Exercise 2: Working with string concatenation</h2>
<p>String concatenation is the process of combining two strings into one
 string. You have actually been doing string concatenation since lab 1, 
but you didn’t call this process by that term. The plus sign (+) is used
 to concatenate strings. When the plus sign (+) is used with strings, it
 behaves differently than when you use it for numbers. In lab 1, you 
used the plus sign (+) to add numbers. Now, you will use the plus sign 
(+) to combine, or concatenate, strings.</p>
<ol start="21">
<li>
<p>Return to the Python script.</p>
</li>
<li>
<p>Create two strings and then concatenate them by entering the following code:</p>
<pre><code class="language-python">firstString = "water"
secondString = "fall"
thirdString = firstString + secondString
print(thirdString)</code></pre>
</li>
<li>
<p>Save the file.</p>
</li>
<li>
<p>Run the file.</p>
</li>
<li>
<p>Confirm that the script runs correctly and that the output displays as you expect it to.</p>
<pre><code class="language-python">This is a string.                                            
&lt;class 'str'&gt;                                                
This is a string. is of the data type &lt;class 'str'&gt;
waterfall</code></pre>
</li>
</ol>
<hr>
<p>​                                                                                                            </p>
<h2>Exercise 3: Working with input strings</h2>
<p>In coding, information that a user enters is known as <em>input</em>. You will use a built-in function named <code>input()</code> to get information from the user. The <code>input()</code> function will pause the code until a user enters a string and presses ENTER. Return to the Python script:</p>
<ol start="26">
<li>
<p>Enter the following code:</p>
<pre><code class="language-python">name = input("What is your name? ")</code></pre>
</li>
<li>
<p>Use the <code>print()</code> function to write the value of the variable to the shell:</p>
<pre><code class="language-python">print(name)</code></pre>
</li>
<li>
<p>Save the file.</p>
</li>
<li>
<p>Run the file.</p>
</li>
<li>
<p>Confirm that the script runs correctly and that the output displays as you expect it to.</p>
<pre><code class="language-python">This is a string.                                            
&lt;class 'str'&gt;                                                
This is a string. is of the data type &lt;class 'str'&gt;              
waterfall                                                    
What is your name? Maria                                     
Maria   </code></pre>
<pre><code></code></pre>
</li>
</ol>
<hr>
<p>​                                                                                                            </p>
<h2>Exercise 4: Formatting output strings</h2>
<p>When your script wants to communicate information back to the user, it is called <em>output</em>. You have been using the <code>print()</code> function to write output to the shell. You will create a survey and output the information that it collects back to the user.</p>
<ol start="31">
<li>
<p>Return to the Python script and enter the following code:</p>
<pre><code class="language-python">color = input("What is your favorite color?  ")
animal = input("What is your favorite animal?  ")</code></pre>
</li>
<li>
<p>You have been using the <code>print()</code> function with only one variable, but you can also use it with multiple variables to format a string. Enter the following code:</p>
<pre><code class="language-python">print("{}, you like a {} {}!".format(name,color,animal))</code></pre>
</li>
<li>
<p>Save the file.</p>
</li>
<li>
<p>Run the file.</p>
<p>The Python shell has stopped and is waiting for your input.</p>
</li>
<li>
<p>Enter a name and press ENTER.</p>
</li>
<li>
<p>Next, you are asked for your favorite color. Enter a color and press ENTER.</p>
</li>
<li>
<p>Next, you are asked for your favorite animal. Enter an animal and press ENTER.</p>
</li>
<li>
<p>Finally, the script prints a formatted string to the user by using 
the three pieces of information that you provided. Confirm that the 
output in the shell looks like the following output.</p>
<pre><code class="language-python">This is a string.                                            
&lt;class 'str'&gt;                                                
This is a string. is of the data type &lt;class 'str'&gt;              
waterfall                                                    
What is your name? Maria                                     
Maria                                                        
What is your favorite color?  blue                           
What is your favorite animal?  dog                           
Maria, you like a blue dog!  </code></pre>
<blockquote>
<p><strong>Note:</strong> The final <code>print()</code> statement uses the <code>format()</code> function. In the <code>format()</code> function, the opening and closing braces ({}) act as placeholders for the variables that will be <em>passed to</em> (that is, put between) the function's parentheses.                                </p>
</blockquote>
</li>
</ol>
<p>Congratulations! You have used Python to concatenate strings, take input from the user, and output a formatted string.</p>
<hr>
<h2>End Lab</h2>
<p><i class="fas fa-flag-checkered"></i> Congratulations! You have completed the lab.</p>
<ol start="39">
<li>
<p>Choose <i class="fas fa-square-full fa-xs"></i> <strong>End Lab</strong> at the top of this page, and then select <span id="ssb_blue">Yes</span> to confirm that you want to end the lab.</p>
<p>A panel indicates that <em>DELETE has been initiated... You may close this message box now.</em></p>
</li>
<li>
<p>A message <em>Ended AWS Lab Successfully</em> is briefly displayed, indicating that the lab has ended.
​</p>
</li>
</ol>
<h2>Additional Resources</h2>
<p>For more information about AWS Training and Certification, see <a href="https://aws.amazon.com/training/">https://aws.amazon.com/training/</a>.</p>
<p><em>Your feedback is welcome and appreciated.</em>
If you would like to share any suggestions or corrections, please provide the details in our <a href="https://support.aws.amazon.com/#/contacts/aws-training">AWS Training and Certification Contact Form</a>.</p>
<p><em>© 2022 Amazon Web Services, Inc. and its affiliates. All rights 
reserved. This work may not be reproduced or redistributed, in whole or 
in part, without prior written permission from Amazon Web Services, Inc.
 Commercial copying, lending, or selling is prohibited.</em></p>
<!-- IMPORTANT: Do not delete the radio buttons below. They are required in order for the mulitple tabs at the bottom of the generated HTML page to work properly and will be rendered invisible through the mcq-invisible-radio-buttons.css style sheet. -->
<input class="voc_radio" type="radio" id="grp-3-1" value="3 - String Data Types-1" name="grp-3" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-3-1" style="font-weight: 400">Yes</label><br>
<input class="voc_radio" type="radio" id="grp-3-2" value="3 - String Data Types-2" name="grp-3" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-3-2" style="font-weight: 400">No</label><br>
<div class="voc_rubric">&lt; Rubric: 3 - String Data Types | Points: 0 &gt;</div><br><div id="grp-3-hint" hidden=""></div><br><a class="btn btn-primary btnPrevious">Previous</a><a class="btn btn-primary btnNext" style="margin-left: 4px">Next</a></div>
<div id="grp-4" class="tab-pane active">
<h1>Working with Lists, Tuples, and Dictionaries</h1>
<hr>
<h2>Lab overview</h2>
<p>In Python, string and numeric data types are often used in groups called <em>collections</em>. Three such collections that Python supports are the list, the tuple, and the dictionary.</p>
<p>In this lab, you will:</p>
<ul>
<li>Use the list data type</li>
<li>Use the tuple data type</li>
<li>Use the dictionary data type___</li>
</ul>
<h2>Estimated completion time</h2>
<p>45 minutes</p>
<hr>
<h2>Exercise 1: Introducing the list data type</h2>
<h2>Accessing the AWS Cloud9 IDE</h2>
<ol>
<li>
<p>Start your lab environment by going to the top of these instructions and choosing <strong>Start Lab</strong>.</p>
<p>A <strong>Start Lab</strong> panel opens, displaying the lab status.</p>
</li>
<li>
<p>Wait until you see the message <em>Lab status: ready</em>, and then close the <strong>Start Lab</strong> panel by choosing the <strong>X</strong>.</p>
</li>
<li>
<p>At the top of these instructions, choose <strong>AWS</strong>.</p>
<p>The AWS Management Console opens in a new browser tab. The system automatically logs you in.</p>
<blockquote>
<p><strong>Note:</strong> If a new browser tab does not open, a banner 
or icon at the top of your browser typically indicates that your browser
 is preventing the site from opening pop-up windows. Choose the banner 
or icon, and choose <strong>Allow pop ups</strong>.</p>
</blockquote>
</li>
<li>
<p>In the AWS Management Console, choose <strong>Services</strong> &gt; <strong>Cloud9</strong>. In the <strong>Your environments</strong> panel, locate the <strong>reStart-python-cloud9</strong> card, and choose <strong>Open IDE</strong>.</p>
<p>The AWS Cloud9 environment opens.</p>
<blockquote>
<p><strong>Note:</strong> If a pop-up window opens with the message <em>.c9/project.settings have been changed on disk</em>, choose <strong>Discard</strong> to ignore it. Likewise, if a dialog window prompts you to <em>Show third-party content</em>, choose <strong>No</strong> to decline.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Creating your Python exercise file</h2>
<ol start="5">
<li>
<p>From the menu bar, choose <strong>File &gt; New From Template &gt; Python File</strong>.</p>
<p>This action creates an untitled file.</p>
</li>
<li>
<p>Delete the sample code provided from the template file.</p>
</li>
<li>
<p>Choose <strong>File &gt; Save As...</strong>, and provide a suitable name for the exercise file (for example, <em>collections.py</em> and save it under the  <strong>/home/ec2-user/environment</strong> directory.</p>
</li>
</ol>
<hr>
<h2>Accessing the terminal session</h2>
<ol start="8">
<li>
<p>In your AWS Cloud9 IDE, choose the <strong>+</strong> icon and select <strong>New Terminal</strong>.</p>
<p>A terminal session opens.</p>
</li>
<li>
<p>To display the present working directory, enter <code>pwd</code>. This command points to <strong>/home/ec2-user/environment</strong>.</p>
</li>
<li>
<p>In this directory, you should also be able to locate the file you created in the previous section.</p>
</li>
</ol>
<hr>
<h3>Defining a list</h3>
<p>In this activity, you will edit a Python script to hold a collection of fruit names, or a list of fruit.</p>
<ol start="11">
<li>
<p>From the navigation pane of the IDE, choose the <strong>.py</strong> file that you created in the previous <em>Creating your Python exercise file</em> section. </p>
</li>
<li>
<p>In the file, enter the following code:</p>
<pre><code class="language-python">myFruitList = ["apple", "banana", "cherry"]
print(myFruitList)
print(type(myFruitList))</code></pre>
</li>
<li>
<p>Save and run the file.</p>
</li>
<li>
<p>Confirm that the script runs correctly and that the output displays as you expect it to.</p>
</li>
</ol>
<h3>Accessing a list by position</h3>
<p>You can access the contents of a list by position. In this activity, you will print out each item in our list by their position:</p>
<ol start="15">
<li>
<p>In programming languages, the list position starts at zero (0). The 
brackets tell Python which position in the list you want. To access the <code>apple</code> string, enter the following code:</p>
<pre><code class="language-python">print(myFruitList[0])</code></pre>
</li>
<li>
<p>To access the <code>banana</code> string, enter the following:</p>
<pre><code class="language-python">print(myFruitList[1])</code></pre>
</li>
<li>
<p>To access the  <code>cherry</code> string, enter the following code:</p>
<pre><code class="language-python">print(myFruitList[2])</code></pre>
</li>
<li>
<p>Save and run the file.</p>
</li>
<li>
<p>Confirm that the script runs correctly and that the output displays as you expect it to.</p>
</li>
</ol>
<h3>Changing the values in a list</h3>
<p>The values of a list can be changed. In this activity, you will change <code>cherry</code> to <code>orange</code>.</p>
<ol start="20">
<li>
<p>In Python, list position starts at zero (0), so you must use the numeral <em>2</em> to access the third position. Enter the following code:</p>
<pre><code class="language-python">myFruitList[2] = "orange"</code></pre>
</li>
<li>
<p>Print the updated list:</p>
<pre><code class="language-python">print(myFruitList)</code></pre>
</li>
<li>
<p>Save and run the file.</p>
</li>
<li>
<p>Confirm that the script runs correctly and that the output displays as you expect it to.</p>
<pre><code class="language-python">['apple', 'banana', 'cherry']                                
&lt;class 'list'&gt;                                               
apple                                                        
banana                                                       
cherry                                                       
['apple', 'banana', 'orange'] </code></pre>
</li>
</ol>
<hr>
<h2>Exercise 2: Introducing the tuple data type</h2>
<h3>Defining a tuple</h3>
<p>The tuple is like a list, but it can't be changed. A data type that can't be changed after it's created is said to be <em>immutable</em>. To define a tuple, you use parentheses instead of brackets ([]).</p>
<ol start="24">
<li>
<p>Create a tuple by entering the following code:</p>
<pre><code class="language-python">myFinalAnswerTuple = ("apple", "banana", "pineapple")
print(myFinalAnswerTuple)
print(type(myFinalAnswerTuple))</code></pre>
</li>
<li>
<p>Save and run the file.</p>
</li>
<li>
<p>Confirm that the script runs correctly and that the output displays as you expect it to.</p>
</li>
</ol>
<h3>Accessing a tuple by position</h3>
<p>Like a list, the items of a tuple can also be accessed by position:</p>
<ol start="27">
<li>
<p>To access the <code>apple</code> string, enter the following code:</p>
<pre><code class="language-python">print(myFinalAnswerTuple[0])</code></pre>
</li>
<li>
<p>To access the <code>banana</code> string, enter the following code:</p>
<pre><code class="language-python">print(myFinalAnswerTuple[1])</code></pre>
</li>
<li>
<p>To access the <code>pineapple</code> string, enter the following code:</p>
<pre><code class="language-python">print(myFinalAnswerTuple[2])</code></pre>
</li>
<li>
<p>Save and run the file.</p>
</li>
<li>
<p>Near the top of the IDE window, choose the <strong>Run</strong> (Play) button.</p>
</li>
<li>
<p>Confirm that the script runs correctly and that the output displays as you expect it to.</p>
<pre><code class="language-python">['apple', 'banana', 'cherry']                                
&lt;class 'list'&gt;                                               
apple                                                        
banana                                                       
cherry                                                       
['apple', 'banana', 'orange']                                
('apple', 'banana', 'pineapple')                             
&lt;class 'tuple'&gt;                                              
apple                                                        
banana                                                       
pineapple</code></pre>
</li>
</ol>
<hr>
<h2>Exercise 3: Introducing the dictionary data type</h2>
<h3>Defining a dictionary</h3>
<p>A dictionary is a list with named positions (keys). Imagine that your list shows people’s favorite fruit.</p>
<!-- JY: Changed the original names in the dictionary to names from the safe fictitious names list -->
<ol start="33">
<li>
<p>Return to the Python script, and enter the following code:</p>
<pre><code class="language-python">myFavoriteFruitDictionary = {
  "Akua" : "apple",
  "Saanvi" : "banana",
  "Paulo" : "pineapple"
}</code></pre>
</li>
<li>
<p>Use the <code>print()</code> function to write the dictionary to the shell:</p>
<pre><code class="language-python">print(myFavoriteFruitDictionary)</code></pre>
</li>
<li>
<p>Use the <code>type()</code> function to write the data type to the shell:</p>
<pre><code class="language-python">print(type(myFavoriteFruitDictionary))</code></pre>
</li>
<li>
<p>Save and run the file.</p>
</li>
<li>
<p>Confirm that the script runs correctly and that the output displays as you expect it to.</p>
</li>
</ol>
<h3>Accessing a dictionary by name</h3>
<p>In this activity, you will use the name of the individuals to get their favorite fruit, instead of numbers.</p>
<ol start="38">
<li>
<p>To access Akua's favorite fruit, enter the following code:</p>
<pre><code class="language-python">print(myFavoriteFruitDictionary["Akua"])</code></pre>
</li>
<li>
<p>To access Saanvi's favorite fruit, enter the following code:</p>
<pre><code class="language-python">print(myFavoriteFruitDictionary["Saanvi"])</code></pre>
</li>
<li>
<p>To access Paulo's favorite fruit, enter the following code:</p>
<pre><code class="language-python">print(myFavoriteFruitDictionary["Paulo"])</code></pre>
</li>
<li>
<p>Save and run the file.</p>
</li>
<li>
<p>Confirm that the script runs correctly and that the output displays as you expect it to.</p>
<pre><code class="language-python">['apple', 'banana', 'cherry']                                
&lt;class 'list'&gt;                                               
apple                                                        
banana                                                       
cherry                                                       
['apple', 'banana', 'orange']                                
('apple', 'banana', 'pineapple')                             
&lt;class 'tuple'&gt;                                              
apple                                                        
banana                                                       
pineapple                                                    
{'Akua': 'apple', 'Saanvi': 'banana', 'Paulo': 'pineapple'}     
&lt;class 'dict'&gt;                                               
apple                                                        
banana                                                       
pineapple                                                   </code></pre>
</li>
</ol>
<p>Congratulations! You have worked with the list, tuple, and dictionary data types in Python.</p>
<hr>
<h2>End Lab</h2>
<p><i class="fas fa-flag-checkered"></i> Congratulations! You have completed the lab.</p>
<ol start="43">
<li>
<p>Choose <i class="fas fa-square-full fa-xs"></i> <strong>End Lab</strong> at the top of this page, and then select <span id="ssb_blue">Yes</span> to confirm that you want to end the lab.</p>
<p>A panel indicates that <em>DELETE has been initiated... You may close this message box now.</em></p>
</li>
<li>
<p>A message <em>Ended AWS Lab Successfully</em> is briefly displayed, indicating that the lab has ended.
​</p>
</li>
</ol>
<h2>Additional Resources</h2>
<p>For more information about AWS Training and Certification, see <a href="https://aws.amazon.com/training/">https://aws.amazon.com/training/</a>.</p>
<p><em>Your feedback is welcome and appreciated.</em>
If you would like to share any suggestions or corrections, please provide the details in our <a href="https://support.aws.amazon.com/#/contacts/aws-training">AWS Training and Certification Contact Form</a>.</p>
<p><em>© 2022 Amazon Web Services, Inc. and its affiliates. All rights 
reserved. This work may not be reproduced or redistributed, in whole or 
in part, without prior written permission from Amazon Web Services, Inc.
 Commercial copying, lending, or selling is prohibited.</em></p>
<!-- IMPORTANT: Do not delete the radio buttons below. They are required in order for the mulitple tabs at the bottom of the generated HTML page to work properly and will be rendered invisible through the mcq-invisible-radio-buttons.css style sheet. -->
<input class="voc_radio" type="radio" id="grp-4-1" value="4 - List, Tuple, Dictionary-1" name="grp-4" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-4-1" style="font-weight: 400">Yes</label><br>
<input class="voc_radio" type="radio" id="grp-4-2" value="4 - List, Tuple, Dictionary-2" name="grp-4" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-4-2" style="font-weight: 400">No</label><br>
<div class="voc_rubric">&lt; Rubric: 4 - List, Tuple, Dictionary | Points: 0 &gt;</div><br><div id="grp-4-hint" hidden=""></div><br><a class="btn btn-primary btnPrevious">Previous</a><a class="btn btn-primary btnNext" style="margin-left: 4px">Next</a></div>
<div id="grp-5" class="tab-pane">
<h1>Categorizing Values</h1>
<hr>
<h2>Lab overview</h2>
<p>With Python, you can mix types in a list. In this lab, you will create a list with different types and print the values.</p>
<p>In this lab, you will:</p>
<ul>
<li>Use numeric data types</li>
<li>Use string data types</li>
<li>Use the list data type</li>
<li>Use a <code>for</code> loop</li>
<li>Use the <code>print()</code> function</li>
</ul>
<hr>
<h2>Estimated completion time</h2>
<p>30 minutes</p>
<hr>
<h2>Accessing the AWS Cloud9 IDE</h2>
<ol>
<li>
<p>Start your lab environment by going to the top of these instructions and choosing <strong>Start Lab</strong>.</p>
<p>A <strong>Start Lab</strong> panel opens, displaying the lab status.</p>
</li>
<li>
<p>Wait until you see the message <em>Lab status: ready</em>, and then close the <strong>Start Lab</strong> panel by choosing the <strong>X</strong>.</p>
</li>
<li>
<p>At the top of these instructions, choose <strong>AWS</strong>.</p>
<p>The AWS Management Console opens in a new browser tab. The system automatically logs you in.</p>
<blockquote>
<p><strong>Note:</strong> If a new browser tab does not open, a banner 
or icon at the top of your browser typically indicates that your browser
 is preventing the site from opening pop-up windows. Choose the banner 
or icon, and choose <strong>Allow pop ups</strong>.</p>
</blockquote>
</li>
<li>
<p>In the AWS Management Console, choose <strong>Services</strong> &gt; <strong>Cloud9</strong>. In the <strong>Your environments</strong> panel, locate the <strong>reStart-python-cloud9</strong> card, and choose <strong>Open IDE</strong>.</p>
<p>The AWS Cloud9 environment opens.</p>
<blockquote>
<p><strong>Note:</strong> If a pop-up window opens with the message <em>.c9/project.settings have been changed on disk</em>, choose <strong>Discard</strong> to ignore it. Likewise, if a dialog window prompts you to <em>Show third-party content</em>, choose <strong>No</strong> to decline.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Creating your Python exercise file</h2>
<ol start="5">
<li>
<p>From the menu bar, choose <strong>File &gt; New From Template &gt; Python File</strong></p>
</li>
<li>
<p>Delete the sample code from the template file.</p>
</li>
<li>
<p>Choose <strong>File &gt; Save As...</strong>, and provide a suitable name for the exercise file (for example, <em>categorize-values.py)</em> and save it under the  <strong>/home/ec2-user/environment</strong> directory.</p>
</li>
</ol>
<hr>
<h2>Accessing the terminal session</h2>
<ol start="8">
<li>
<p>In your AWS Cloud9 IDE, choose the <strong>+</strong> icon and select <strong>New Terminal</strong>.</p>
<p>A terminal session opens.</p>
</li>
<li>
<p>To display the present working directory, enter <code>pwd</code>. This command points to <strong>/home/ec2-user/environment</strong>.</p>
</li>
<li>
<p>In this directory, you should also be able to locate the file you created in the previous section.</p>
</li>
</ol>
<hr>
<h2>Exercise 1: Creating a mixed-type list</h2>
<p>You can mix data types in a Python list. In other languages, this 
capability is not a feature of lists. In this exercise, you will explore
 this capability.</p>
<ol start="11">
<li>
<p>From the navigation pane of the IDE, choose the <strong>.py</strong> file that you created in the previous <em>Creating your Python exercise file</em> section.</p>
</li>
<li>
<p>Define a list with different types, like the following example:</p>
<pre><code class="language-python">myMixedTypeList = [45, 290578, 1.02, True, "My dog is on the bed.", "45"]</code></pre>
</li>
<li>
<p>Use a <code>for</code> loop statement to traverse the list and print the data type for each item in the list:</p>
<pre><code class="language-python">for item in myMixedTypeList:
    print("{} is of the data type {}".format(item,type(item)))</code></pre>
</li>
<li>
<p>Save and run the file.</p>
</li>
<li>
<p>Confirm that the script runs correctly and that the output displays as you expect it to.</p>
<pre><code class="language-python">45 is of the data type &lt;class 'int'&gt;                             
290578 is of the data type &lt;class 'int'&gt;                         
1.02 is of the data type &lt;class 'float'&gt;                         
True is of the data type &lt;class 'bool'&gt;                          
My dog is on the bed. is of the data type &lt;class 'str'&gt;          
45 is of the data type &lt;class 'str'&gt;                                                        </code></pre>
</li>
</ol>
<p>This exercise reinforced the Python programming concepts that were 
covered in labs 1–6. Although the code has only a few lines, it is 
powerful. Take some time to review the code and make sure you understand
 everything that happens in it.</p>
<p>Congratulations! You have worked with the list data type and learned 
about Python support for mixing data types in a list declaration.</p>
<hr>
<h2>End Lab</h2>
<p><i class="fas fa-flag-checkered"></i> Congratulations! You have completed the lab.</p>
<ol start="16">
<li>
<p>Choose <i class="fas fa-square-full fa-xs"></i> <strong>End Lab</strong> at the top of this page, and then select <span id="ssb_blue">Yes</span> to confirm that you want to end the lab.</p>
<p>A panel indicates that <em>DELETE has been initiated... You may close this message box now.</em></p>
</li>
<li>
<p>A message <em>Ended AWS Lab Successfully</em> is briefly displayed, indicating that the lab has ended.
​</p>
</li>
</ol>
<h2>Additional Resources</h2>
<p>For more information about AWS Training and Certification, see <a href="https://aws.amazon.com/training/">https://aws.amazon.com/training/</a>.</p>
<p><em>Your feedback is welcome and appreciated.</em>
If you would like to share any suggestions or corrections, please provide the details in our <a href="https://support.aws.amazon.com/#/contacts/aws-training">AWS Training and Certification Contact Form</a>.</p>
<p><em>© 2022 Amazon Web Services, Inc. and its affiliates. All rights 
reserved. This work may not be reproduced or redistributed, in whole or 
in part, without prior written permission from Amazon Web Services, Inc.
 Commercial copying, lending, or selling is prohibited.</em></p>
<!-- IMPORTANT: Do not delete the radio buttons below. They are required in order for the mulitple tabs at the bottom of the generated HTML page to work properly and will be rendered invisible through the mcq-invisible-radio-buttons.css style sheet. -->
<input class="voc_radio" type="radio" id="grp-5-1" value="5 - Categorize Values-1" name="grp-5" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-5-1" style="font-weight: 400">Yes</label><br>
<input class="voc_radio" type="radio" id="grp-5-2" value="5 - Categorize Values-2" name="grp-5" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-5-2" style="font-weight: 400">No</label><br>
<div class="voc_rubric">&lt; Rubric: 5 - Categorize Values | Points: 0 &gt;</div><br><div id="grp-5-hint" hidden=""></div><br><a class="btn btn-primary btnPrevious">Previous</a><a class="btn btn-primary btnNext" style="margin-left: 4px">Next</a></div>
<div id="grp-6" class="tab-pane">
<h1>Working with Composite Data Types</h1>
<hr>
<h2>Lab overview</h2>
<p>A <em>composite</em> data type is any data type that comprises 
primitive data types. If you like food, you can visualize a composite 
data type as a turducken, which is a dish that consists of a chicken 
that is stuffed into a duck, which is stuffed into a turkey. In this 
lab, you will create a data type that consists of a string that is in a 
dictionary, which is in a list.</p>
<p>In this lab, you will:</p>
<ul>
<li>Use numeric data types</li>
<li>Use string data types</li>
<li>Use the dictionary data type</li>
<li>Use the list data type</li>
<li>Use a <code>for</code> loop</li>
<li>Use the <strong>print()</strong> function</li>
<li>Use the <code>if</code> statement</li>
<li>Use the <code>else</code> statement</li>
<li>Use the <code>import</code> statement</li>
</ul>
<hr>
<h2>Estimated completion time</h2>
<p>45 minutes</p>
<hr>
<h2>Accessing the AWS Cloud9 IDE</h2>
<ol>
<li>
<p>Start your lab environment by going to the top of these instructions and choosing <strong>Start Lab</strong>.</p>
<p>A <strong>Start Lab</strong> panel opens, displaying the lab status.</p>
</li>
<li>
<p>Wait until you see the message <em>Lab status: ready</em>, and then close the <strong>Start Lab</strong> panel by choosing the <strong>X</strong>.</p>
</li>
<li>
<p>At the top of these instructions, choose <strong>AWS</strong>.</p>
<p>The AWS Management Console opens in a new browser tab. The system automatically logs you in.</p>
<blockquote>
<p><strong>Note:</strong> If a new browser tab does not open, a banner 
or icon at the top of your browser typically indicates that your browser
 is preventing the site from opening pop-up windows. Choose the banner 
or icon, and choose <strong>Allow pop ups</strong>.</p>
</blockquote>
</li>
<li>
<p>In the AWS Management Console, choose <strong>Services</strong> &gt; <strong>Cloud9</strong>. In the <strong>Your environments</strong> panel, locate the <strong>reStart-python-cloud9</strong> card, and choose <strong>Open IDE</strong>.</p>
<p>The AWS Cloud9 environment opens.</p>
<blockquote>
<p><strong>Note:</strong> If a pop-up window opens with the message <em>.c9/project.settings have been changed on disk</em>, choose <strong>Discard</strong> to ignore it. Likewise, if a dialog window prompts you to <em>Show third-party content</em>, choose <strong>No</strong> to decline.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Creating your Python exercise file</h2>
<ol start="5">
<li>
<p>From the menu bar, choose <strong>File &gt; New From Template &gt; Python File</strong>.</p>
<p>This action creates an untitled file.</p>
</li>
<li>
<p>Delete the sample code provided from the template file.</p>
</li>
<li>
<p>Choose <strong>File &gt; Save As...</strong>, provide a suitable name for the exercise file (for example, <strong>composite-data.py</strong>), and save it under the  <strong>/home/ec2-user/environment</strong> directory.</p>
</li>
</ol>
<hr>
<h2>Accessing the terminal session</h2>
<ol start="8">
<li>
<p>In your AWS Cloud9 IDE, choose the <strong>+</strong> icon and select <strong>New Terminal</strong>.</p>
<p>A terminal session opens.</p>
</li>
<li>
<p>To display the present working directory, enter <code>pwd</code>. This command points to <strong>/home/ec2-user/environment</strong>.</p>
</li>
<li>
<p>In this directory, locate the file that you created in the previous section.</p>
</li>
</ol>
<hr>
<h2>Creating a car inventory data</h2>
<p>Comma-separated values (CSV) is a file format that's used to store 
tabular data, such as data from a spreadsheet. You will work with the 
CSV file from the following block.</p>
<ol start="11">
<li>
<p>From the menu bar, choose <strong>File &gt; New File</strong>.</p>
<p>This action creates an untitled file.</p>
</li>
<li>
<p>Choose <strong>File &gt; Save As...</strong>, and save the file as <code>car_fleet.csv</code></p>
</li>
<li>
<p>Copy and paste the following text block into the <strong>car_fleet.csv</strong> file and save the file.</p>
<pre><code class="language-sql">vin,make,model,year,range,topSpeed,zeroSixty,mileage
TMX20122,AnyCompany Motors, Coupe, 2012, 335, 155, 4.1, 50000
TM320163,AnyCompany Motors, Sedan, 2016, 240, 140, 5.2, 20000
TMX20121,AnyCompany Motors, SUV, 2012, 295, 155, 4.7, 100000
TMX20204,AnyCompany Motors, Truck, 2020, 300, 155, 3.5, 0</code></pre>
<p><strong>Tip</strong>: If a pop-up window opens with the message <em>Native Clipboard Unavailable</em>,
 use the keyboard, not the browser menu, to perform copy and paste 
actions. For example, on Windows, use CTRL+C and CTRL+V to copy and 
paste, respectively. On Mac, use Command+C and Command+V.</p>
</li>
</ol>
<hr>
<h2>Creating a car inventory program</h2>
<h3>Defining the dictionary</h3>
<p>You will read in the file by using a module called <code>csv</code>. Additionally, you will make a deep copy of the data to store in memory by using a module called <code>copy</code>.</p>
<ol start="14">
<li>
<p>From the navigation pane of the IDE, choose (double-click) the <strong>.py</strong> file that you created in the previous <em>Creating your Python exercise file</em> section.</p>
</li>
<li>
<p>First, import the modules that you will use:</p>
<pre><code class="language-python">import csv
import copy</code></pre>
</li>
<li>
<p>Next, define a dictionary that will serve as your composite type for reading the tabular data:</p>
<pre><code class="language-python">myVehicle = {
    "vin" : "&lt;empty&gt;",
    "make" : "&lt;empty&gt;" ,
    "model" : "&lt;empty&gt;" ,
    "year" : 0,
    "range" : 0,
    "topSpeed" : 0,
    "zeroSixty" : 0.0,
    "mileage" : 0
}</code></pre>
</li>
<li>
<p>You will use a <code>for</code> loop to iterate over the initial keys and values of the dictionary.</p>
<pre><code class="language-python">for key, value in myVehicle.items():
    print("{} : {}".format(key,value))</code></pre>
<blockquote>
<p><strong>Note:</strong> The <strong>items()</strong> function belongs to the dictionary data type. The <strong>items()</strong> function tells the <code>for</code> loop to traverse the collection owned by the dictionary data type.</p>
</blockquote>
</li>
<li>
<p>Define an empty list to hold the car inventory that you will read:</p>
<pre><code class="language-python">myInventoryList = []</code></pre>
</li>
<li>
<p>Save the file.</p>
</li>
</ol>
<h3>Copying the CSV file into memory</h3>
<p>You will read in the data from disk (hard drive) and make an in-memory (random access memory, or RAM) copy. In a computer, a <em>hard drive</em>
 stores data long term, including when the power is turned off. RAM 
refers to temporary memory that is faster, but it is erased when the 
computer's power is turned off.</p>
<p>You will be introduced to the <code>with open</code> syntax 
statement, which keeps a file open while you read data. It will 
automatically close the CSV file when the code inside the <code>with</code> block is finished running.</p>
<p>You will also use a new way of formatting a string. Instead of using double quotation marks and <strong>.format</strong> to pass in the variables, you can use a single quotation mark and write in the variables between the "{}" symbols.</p>
<p>Finally, <strong>csv.reader()</strong> is a function that you are using from the <code>csv</code> library that you imported with the <code>import csv</code> statement.</p>
<p>Most of the rest of the code should be familiar.</p>
<p>Now, return to the Python file:</p>
<ol start="20">
<li>
<p>Enter the following code:</p>
<pre><code class="language-python">with open('car_fleet.csv') as csvFile:
    csvReader = csv.reader(csvFile, delimiter=',')  
    lineCount = 0  
    for row in csvReader:
        if lineCount == 0:
            print(f'Column names are: {", ".join(row)}')  
            lineCount += 1  
        else:  
            print(f'vin: {row[0]} make: {row[1]}, model: {row[2]}, year: {row[3]}, range: {row[4]}, topSpeed: {row[5]}, zeroSixty: {row[6]}, mileage: {row[7]}')  
            currentVehicle = copy.deepcopy(myVehicle)  
            currentVehicle["vin"] = row[0]  
            currentVehicle["make"] = row[1]  
            currentVehicle["model"] = row[2]  
            currentVehicle["year"] = row[3]  
            currentVehicle["range"] = row[4]  
            currentVehicle["topSpeed"] = row[5]  
            currentVehicle["zeroSixty"] = row[6]  
            currentVehicle["mileage"] = row[7]  
            myInventoryList.append(currentVehicle)  
            lineCount += 1  
    print(f'Processed {lineCount} lines.')</code></pre>
<p>Though this code seems like a large amount of code to process, it 
mostly comprises statements that you saw in earlier labs. You have a <code>for</code> loop with an <code>if-else</code> statement followed by a <code>print()</code> statement at the end.</p>
<p>However, the following line needs further explanation:</p>
<pre><code class="language-python">currentVehicle = copy.deepcopy(myVehicle)</code></pre>
<p>By default, Python does a <em>shallow copy</em> of complex data types. A shallow copy refers, or points, to the storage location of the <em>myVehicle</em>
 dictionary variable. Without this line, you would have only one storage
 box, and only the last item in the list would be copied into memory. 
This line makes sure that new storage boxes are created in memory to 
store the new tabular data that is being read.</p>
</li>
</ol>
<h3>Printing the car inventory</h3>
<p>You will finish the Python script by printing the car inventory from the <em>myInventoryList</em> variable.</p>
<ol start="21">
<li>
<p>Return to the Python script, and enter the following code:</p>
<pre><code class="language-python">for myCarProperties in myInventoryList:
    for key, value in myCarProperties.items():
        print("{} : {}".format(key,value))
        print("-----")</code></pre>
</li>
<li>
<p>Save the file.</p>
</li>
<li>
<p>Choose the <strong>Run</strong> button in the menu bar to run the program.</p>
</li>
<li>
<p>Confirm that the script runs correctly and that the output displays as you expect it to.</p>
</li>
<li>
<p>Review the code for reading in the tabular data from the CSV file one
 more time. Understanding this section of the code is key to this lab.</p>
</li>
</ol>
<p>Congratulations! You have worked with composite data types in Python.</p>
<hr>
<h2>End Lab</h2>
<p><i class="fas fa-flag-checkered"></i> Congratulations! You have completed the lab.</p>
<ol start="26">
<li>
<p>Choose <i class="fas fa-square-full fa-xs"></i> <strong>End Lab</strong> at the top of this page, and then select <span id="ssb_blue">Yes</span> to confirm that you want to end the lab.</p>
<p>A panel indicates that <em>DELETE has been initiated... You may close this message box now.</em></p>
</li>
<li>
<p>A message <em>Ended AWS Lab Successfully</em> is briefly displayed, indicating that the lab has ended.
​</p>
</li>
</ol>
<h2>Additional Resources</h2>
<p>For more information about AWS Training and Certification, see <a href="https://aws.amazon.com/training/">https://aws.amazon.com/training/</a>.</p>
<p><em>Your feedback is welcome and appreciated.</em>
If you would like to share any suggestions or corrections, please provide the details in our <a href="https://support.aws.amazon.com/#/contacts/aws-training">AWS Training and Certification Contact Form</a>.</p>
<p><em>© 2022 Amazon Web Services, Inc. and its affiliates. All rights 
reserved. This work may not be reproduced or redistributed, in whole or 
in part, without prior written permission from Amazon Web Services, Inc.
 Commercial copying, lending, or selling is prohibited.</em></p>
<!-- IMPORTANT: Do not delete the radio buttons below. They are required in order for the mulitple tabs at the bottom of the generated HTML page to work properly and will be rendered invisible through the mcq-invisible-radio-buttons.css style sheet. -->
<input class="voc_radio" type="radio" id="grp-6-1" value="6 - Composite Data Types-1" name="grp-6" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-6-1" style="font-weight: 400">Yes</label><br>
<input class="voc_radio" type="radio" id="grp-6-2" value="6 - Composite Data Types-2" name="grp-6" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-6-2" style="font-weight: 400">No</label><br>
<div class="voc_rubric">&lt; Rubric: 6 - Composite Data Types | Points: 0 &gt;</div><br><div id="grp-6-hint" hidden=""></div><br><a class="btn btn-primary btnPrevious">Previous</a><a class="btn btn-primary btnNext" style="margin-left: 4px">Next</a></div>
<div id="grp-7" class="tab-pane">
<h1>Working with Conditionals</h1>
<hr>
<h2>Lab overview</h2>
<p>A section of code that compares two pieces of information is called a <em>conditional statement</em>.
 You can use conditionals to create different paths through the program.
 Using comparative operators, you will write a program that makes 
decisions.</p>
<p>In this lab, you will:</p>
<ul>
<li>Use the <code>if</code> statement</li>
<li>Use the <code>else</code> statement</li>
<li>Use the <code>elif</code> statement</li>
</ul>
<hr>
<h2>Estimated completion time</h2>
<p>45 minutes</p>
<hr>
<h2>Accessing the AWS Cloud9 IDE</h2>
<ol>
<li>
<p>Start your lab environment by going to the top of these instructions and choosing <strong>Start Lab</strong>.</p>
<p>A <strong>Start Lab</strong> panel opens, displaying the lab status.</p>
</li>
<li>
<p>Wait until you see the message <em>Lab status: ready</em>, and then close the <strong>Start Lab</strong> panel by choosing the <strong>X</strong>.</p>
</li>
<li>
<p>At the top of these instructions, choose <strong>AWS</strong>.</p>
<p>The AWS Management Console opens in a new browser tab. The system automatically logs you in.</p>
<blockquote>
<p><strong>Note:</strong> If a new browser tab does not open, a banner 
or icon at the top of your browser typically indicates that your browser
 is preventing the site from opening pop-up windows. Choose the banner 
or icon, and choose <strong>Allow pop ups</strong>.</p>
</blockquote>
</li>
<li>
<p>In the AWS Management Console, choose <strong>Services</strong> &gt; <strong>Cloud9</strong>. In the <strong>Your environments</strong> panel, locate the <strong>reStart-python-cloud9</strong> card, and choose <strong>Open IDE</strong>.</p>
<p>The AWS Cloud9 environment opens.</p>
<blockquote>
<p><strong>Note:</strong> If a pop-up window opens with the message <em>.c9/project.settings have been changed on disk</em>, choose <strong>Discard</strong> to ignore it. Likewise, if a dialog window prompts you to <em>Show third-party content</em>, choose <strong>No</strong> to decline.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Creating your Python exercise file</h2>
<ol start="5">
<li>
<p>From the menu bar, choose <strong>File &gt; New From Template &gt; Python File</strong>.</p>
<p>This action creates an untitled file.</p>
</li>
<li>
<p>Delete the sample code provided from the template file.</p>
</li>
<li>
<p>Choose <strong>File &gt; Save As...</strong>, and provide a suitable name for the exercise file (for example, <em>conditionals.py</em>) and save it under the <strong>/home/ec2-user/environment</strong> directory.</p>
</li>
</ol>
<hr>
<h2>Accessing the terminal session</h2>
<ol start="8">
<li>
<p>In your AWS Cloud9 IDE, choose the <strong>+</strong> icon and select <strong>New Terminal</strong>.</p>
<p>A terminal session opens.</p>
</li>
<li>
<p>To display the present working directory, enter <code>pwd</code>. This command points to <strong>/home/ec2-user/environment</strong>.</p>
</li>
<li>
<p>In this directory, you should also be able to locate the file you created in the previous section.</p>
</li>
</ol>
<hr>
<h2>Exercise 1: Working with the if statement</h2>
<p>In this exercise, you will edit a Python script to ship packages.</p>
<ol start="11">
<li>
<p>From the navigation pane of the IDE, choose the <strong>.py</strong> file that you created in the previous <em>Creating your Python exercise file</em> section.</p>
</li>
<li>
<p>Use the <code>input()</code> function to get information from the user:</p>
<pre><code class="language-python">userReply = input("Do you need to ship a package? (Enter yes or no) ")</code></pre>
</li>
<li>
<p>Use the <code>if</code> statement to print a response.</p>
<p>The statements in an <code>if</code> statement are one tab indented from the <code>if</code>
 statement. In other programming languages, brackets are often used to 
indicate the start and end of a logic block, but Python uses spacing:</p>
<pre><code class="language-python">if userReply == "yes":
    print("We can help you ship that package!")</code></pre>
<p><strong>Note</strong>: The <code>==</code> symbol is a comparative operator. It means <em>is equal to</em>.</p>
</li>
<li>
<p>Save and run the file.</p>
</li>
<li>
<p>At the prompt, enter <code>yes</code> and press ENTER.</p>
</li>
<li>
<p>Confirm that you see a response.</p>
</li>
<li>
<p>Run the file again.</p>
</li>
<li>
<p>At the prompt, enter <code>no</code> and press ENTER. Confirm that the program exits and nothing id displayed.</p>
</li>
</ol>
<hr>
<h2>Exercise 2: Working with the else statement</h2>
<p>To improve customer service, it would be nice to provide a reply even
 if the user doesn't want to ship a package. In this exercise, you will 
improve the Python script by using the <code>else</code> statement:</p>
<ol start="19">
<li>
<p>To handle the condition where the user doesn't want to ship a package, use the <code>else</code> statement:</p>
<pre><code class="language-python">else:
    print("Please come back when you need to ship a package. Thank you.")</code></pre>
</li>
<li>
<p>Save and run the file.</p>
</li>
<li>
<p>At the prompt, enter <code>no</code> and press ENTER.</p>
</li>
<li>
<p>Confirm that you see a response.</p>
</li>
<li>
<p>Run the file again.</p>
</li>
<li>
<p>At the prompt, enter <code>yes</code> and press ENTER.</p>
</li>
<li>
<p>Confirm that you see a response.</p>
</li>
</ol>
<hr>
<h2>Exercise 3: Working with the elif statement</h2>
<p>In this exercise, you will improve the Python script by offering the 
user additional services. When you have multiple conditions, you can use
 the <code>elif</code> statement, which is short for <em>else-if</em>.</p>
<blockquote>
<p><strong>Note:</strong> The <code>elif</code> statement always comes after an <code>if</code> statement and before the <code>else</code> statement.</p>
</blockquote>
<ol start="26">
<li>
<p>In the Python script, enter the following code:</p>
<pre><code class="language-python">userReply = input("Would you like to buy stamps, buy an envelope, or make a copy? (Enter stamps, envelope, or copy) ")
if userReply == "stamps":
    print("We have many stamp designs to choose from.")
elif userReply == "envelope":
    print("We have many envelope sizes to choose from.")
elif userReply == "copy":
    copies = input("How many copies would you like? (Enter a number) ")
    print("Here are {} copies.".format(copies))
else:
    print("Thank you, please come again.")</code></pre>
</li>
<li>
<p>Save and run the file.</p>
</li>
<li>
<p>At the prompt, enter <code>no</code> and press ENTER.</p>
</li>
<li>
<p>Confirm that you see a response.</p>
</li>
<li>
<p>At the prompt, enter <code>stamps</code> and press ENTER.</p>
</li>
<li>
<p>Confirm that you see a response.</p>
</li>
<li>
<p>Run the file again.</p>
</li>
<li>
<p>At the prompt, enter <code>yes</code> and press ENTER.</p>
</li>
<li>
<p>Confirm that you see a response.</p>
</li>
<li>
<p>At the prompt, enter <code>envelope</code> and press ENTER.</p>
</li>
<li>
<p>Confirm that you see a response.</p>
</li>
<li>
<p>Run the file again.</p>
</li>
<li>
<p>At the prompt, enter <code>no</code> and press ENTER.</p>
</li>
<li>
<p>Confirm that you see a response.</p>
</li>
<li>
<p>At the prompt, enter <code>copy</code> and press ENTER.</p>
</li>
<li>
<p>Confirm that you see a response.</p>
</li>
<li>
<p>At the prompt, enter <code>2</code> and press ENTER.</p>
</li>
<li>
<p>Confirm that you see a response.</p>
<!--JY: It might be useful to also run the else condition so learners can see what happens with all other conditions that don't match if or elif.  -->
<blockquote>
<p><strong>Note:</strong> The <code>if</code>, <code>elif</code>, and <code>else</code>
 statements allow only one path to run at a time. The program doesn’t 
check the other statements after it finds a condition that is true.</p>
</blockquote>
<p>As you can see, each time through the program had slightly different 
results. These differences demonstrate the power of conditionals.</p>
</li>
</ol>
<p>Congratulations! You have written a Python script that uses <code>if</code>, <code>elif</code>, and <code>else</code> statements.</p>
<hr>
<h2>End Lab</h2>
<p><i class="fas fa-flag-checkered"></i> Congratulations! You have completed the lab.</p>
<ol start="44">
<li>
<p>Choose <i class="fas fa-square-full fa-xs"></i> <strong>End Lab</strong> at the top of this page, and then select <span id="ssb_blue">Yes</span> to confirm that you want to end the lab.</p>
<p>A panel indicates that <em>DELETE has been initiated... You may close this message box now.</em></p>
</li>
<li>
<p>A message <em>Ended AWS Lab Successfully</em> is briefly displayed, indicating that the lab has ended.
​</p>
</li>
</ol>
<h2>Additional Resources</h2>
<p>For more information about AWS Training and Certification, see <a href="https://aws.amazon.com/training/">https://aws.amazon.com/training/</a>.</p>
<p><em>Your feedback is welcome and appreciated.</em>
If you would like to share any suggestions or corrections, please provide the details in our <a href="https://support.aws.amazon.com/#/contacts/aws-training">AWS Training and Certification Contact Form</a>.</p>
<p><em>© 2022 Amazon Web Services, Inc. and its affiliates. All rights 
reserved. This work may not be reproduced or redistributed, in whole or 
in part, without prior written permission from Amazon Web Services, Inc.
 Commercial copying, lending, or selling is prohibited.</em></p>
<!-- IMPORTANT: Do not delete the radio buttons below. They are required in order for the mulitple tabs at the bottom of the generated HTML page to work properly and will be rendered invisible through the mcq-invisible-radio-buttons.css style sheet. -->
<input class="voc_radio" type="radio" id="grp-7-1" value="7 - Conditionals-1" name="grp-7" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-7-1" style="font-weight: 400">Yes</label><br>
<input class="voc_radio" type="radio" id="grp-7-2" value="7 - Conditionals-2" name="grp-7" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-7-2" style="font-weight: 400">No</label><br>
<div class="voc_rubric">&lt; Rubric: 7 - Conditionals | Points: 0 &gt;</div><br><div id="grp-7-hint" hidden=""></div><br><a class="btn btn-primary btnPrevious">Previous</a><a class="btn btn-primary btnNext" style="margin-left: 4px">Next</a></div>
<div id="grp-8" class="tab-pane">
<h1>Working with Loops</h1>
<hr>
<h2>Lab overview</h2>
<p>A loop is a segment of code that repeats. You will be introduced to two types of loops: the <code>while</code> loop and the <code>for</code> loop.</p>
<p>In this lab, you will:</p>
<ul>
<li>Use a <code>while</code> loop</li>
<li>Use a <code>for</code> loop</li>
</ul>
<hr>
<h2>Estimated completion time</h2>
<p>45 minutes</p>
<hr>
<h2>Accessing the AWS Cloud9 IDE</h2>
<ol>
<li>
<p>Start your lab environment by going to the top of these instructions and choosing <strong>Start Lab</strong>.</p>
<p>A <strong>Start Lab</strong> panel opens, displaying the lab status.</p>
</li>
<li>
<p>Wait until you see the message <em>Lab status: ready</em>, and then close the <strong>Start Lab</strong> panel by choosing the <strong>X</strong>.</p>
</li>
<li>
<p>At the top of these instructions, choose <strong>AWS</strong>.</p>
<p>The AWS Management Console opens in a new browser tab. The system automatically logs you in.</p>
<blockquote>
<p><strong>Note:</strong> If a new browser tab does not open, a banner 
or icon at the top of your browser typically indicates that your browser
 is preventing the site from opening pop-up windows. Choose the banner 
or icon, and choose <strong>Allow pop ups</strong>.</p>
</blockquote>
</li>
<li>
<p>In the AWS Management Console, choose <strong>Services</strong> &gt; <strong>Cloud9</strong>. In the <strong>Your environments</strong> panel, locate the <strong>reStart-python-cloud9</strong> card, and choose <strong>Open IDE</strong>.</p>
<p>The AWS Cloud9 environment opens.</p>
<blockquote>
<p><strong>Note:</strong> If a pop-up window opens with the message <em>.c9/project.settings have been changed on disk</em>, choose <strong>Discard</strong> to ignore it. Likewise, if a dialog window prompts you to <em>Show third-party content</em>, choose <strong>No</strong> to decline.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Creating your Python exercise file</h2>
<ol start="5">
<li>
<p>From the menu bar, choose <strong>File &gt; New From Template &gt; Python File</strong>.</p>
<p>This action creates an untitled file.</p>
</li>
<li>
<p>Delete the sample code from the template file.</p>
</li>
<li>
<p>Choose <strong>File &gt; Save As...</strong>, and provide a suitable name for the exercise file (for example, <em>while-loop.py</em>) and save it under the <strong>/home/ec2-user/environment</strong> directory.</p>
</li>
</ol>
<hr>
<h2>Accessing the terminal session</h2>
<ol start="8">
<li>
<p>In your AWS Cloud9 IDE, choose the <strong>+</strong> icon and select <strong>New Terminal</strong>.</p>
<p>A terminal session opens.</p>
</li>
<li>
<p>To display the present working directory, enter <code>pwd</code>. This command points to <strong>/home/ec2-user/environment</strong>.</p>
</li>
<li>
<p>In this directory, you should also be able to locate the file you created in the previous section.</p>
</li>
</ol>
<hr>
<h2>Exercise 1: Working with a while loop</h2>
<p>A <code>while</code> loop makes a section of code repeat until a 
certain condition is met. In this exercise, you will create a Python 
script that asks the user to correctly guess a number.</p>
<h3>Printing the game rules</h3>
<ol start="11">
<li>
<p>From the navigation pane of the IDE, choose the <strong>.py</strong> file that you created in the previous <em>Creating your Python exercise file</em> section.</p>
</li>
<li>
<p>Use the <code>print()</code> function to inform the user about your game:</p>
<pre><code class="language-python">print("Welcome to Guess the Number!")
print("The rules are simple. I will think of a number, and you will try to guess it.")</code></pre>
</li>
<li>
<p>Save and run the file.</p>
</li>
<li>
<p>Confirm that the script runs correctly and that the output displays as you expect it to.</p>
</li>
</ol>
<h3>Importing random and writing a while loop</h3>
<p>You will use the <code>import</code> command to include code that 
someone else wrote. Up to now, you have been using built-in functions. 
Recall that a function is a piece of reusable code.</p>
<ol start="15">
<li>
<p>At the top of the file, include the Python module (which is a type of library) called <code>random</code>.</p>
<blockquote>
<p><strong>Note:</strong> By convention, <code>import</code> statements are placed at the top of the script.</p>
</blockquote>
<pre><code class="language-python">import random</code></pre>
</li>
<li>
<p>Place the cursor on the next line after the second <code>print()</code> statement. Next, enter a statement that will generate a random number between 1 and 10 by using the <code>randint()</code> function of the <code>random</code> module.</p>
<pre><code class="language-python">number = random.randint(1,10)</code></pre>
</li>
<li>
<p>Track whether the user guessed your number by creating a variable called <em>isGuessRight</em>:</p>
<pre><code class="language-python">isGuessRight = False</code></pre>
</li>
<li>
<p>To handle the game logic, create a <code>while</code> loop:</p>
<pre><code class="language-python">while isGuessRight != True:
    guess = input("Guess a number between 1 and 10: ")
    if int(guess) == number:
        print("You guessed {}. That is correct! You win!".format(guess))
        isGuessRight = True
    else:
        print("You guessed {}. Sorry, that isn’t it. Try again.".format(guess))</code></pre>
<blockquote>
<p><strong>Note:</strong> The <code>while</code> loop will repeat the code inside the loop until the number is guessed correctly, which is represented by the condition <code>isGuessRight != True</code>
 in the code. Additionally, Python uses indentation to determine logic 
blocks, or what statements are considered to be part of the <code>while</code> loop. You can indent a line by placing the cursor next to a statement and pressing TAB.</p>
</blockquote>
</li>
<li>
<p>Save the file.</p>
</li>
</ol>
<h3>Writing pseudocode</h3>
<p>Before you run the Python script, write out the logic of the <code>while</code> loop in written (non-code) sentences. This technique is called <em>pseudocoding</em>.</p>
<p>For example:</p>
<ul>
<li>
<p>If the user has not guessed the correct answer, enter the loop.</p>
</li>
<li>
<p>Ask the user for a guess.</p>
</li>
<li>
<p>Is the guess the correct number?</p>
</li>
<li>
<p>If the correct guess, tell the user it was the correct guess and exit the loop.</p>
</li>
<li>
<p>If the wrong guess, tell the user it was the wrong guess and continue the loop.</p>
</li>
</ul>
<h3>Running the script</h3>
<p>Now run the Python script and see if it works.</p>
<ol start="20">
<li>
<p>Run the file.</p>
</li>
<li>
<p>Confirm that the script runs correctly and that the output displays as you expect it to.</p>
</li>
</ol>
<h3>Adding comments</h3>
<p>It is helpful to write comments in the code. A comment line is 
ignored by Python, and it starts with a pound sign (#). On most 
keyboards, you can create this symbol by pressing SHIFT+3. Add your own 
comments to the code to help you remember what the code does.</p>
<!-- JY: This section mentions comments, but the learner doesn't add comments to any of the files. Is this correct? -->
<h3>Informing the user about the script</h3>
<p>In this activity, you will start a new Python script by creating the 
initial output that informs the user about what the script will do.</p>
<ol start="22">
<li>
<p>From the menu bar, choose <strong>File &gt; New From Template &gt; Python File</strong>.</p>
</li>
<li>
<p>Delete the provided sample code from the template file.</p>
</li>
<li>
<p>Choose <strong>File &gt; Save As...</strong> and save it as <em>for-loop.py</em>.</p>
</li>
<li>
<p>To inform the user about your script, use the <code>print()</code> function:</p>
<pre><code class="language-python">print("Count to 10!")</code></pre>
</li>
<li>
<p>Save and run the file.</p>
</li>
<li>
<p>Confirm that the script runs correctly and that the output displays as you expect it to.</p>
</li>
</ol>
<h3>Writing the for loop</h3>
<p>In Python, you can include a large amount of functionality in a few 
words. This feature makes Python relatively easy to write compared to 
other programming languages, but it can also make Python code more 
difficult to read. In this activity, you will use the <code>for</code> statement, but you will also spend some time analyzing it after you see it run.</p>
<ol start="28">
<li>
<p>Return to the Python script. To count to 10, enter the following code.</p>
<blockquote>
<p><strong>Note:</strong> Python uses indentation to determine that the <code>print</code> statement is inside the <code>for</code> loop statement.):</p>
</blockquote>
<pre><code class="language-python">for x in range (0, 11):
    print(x)</code></pre>
</li>
<li>
<p>Save and run the file.</p>
</li>
<li>
<p>Confirm that the script runs correctly and that the output displays as you expect it to.</p>
<p>Here is an explanation of what happened in those two lines. The <code>for</code> statement uses the <code>for … in</code> keywords to tell the computer to go through the list. A list is generated by the <code>range()</code> function. The <code>range()</code> function takes a starting number and an ending number, but the ending number is not inclusive. Therefore, you pass in <code>11</code> to have the function stop counting at 10. The letter <em>x</em> acts as a variable. Each time through the loop, the variable <em>x</em> is assigned to the next variable in the loop and is printed out to the screen.</p>
</li>
</ol>
<p>Congratulations! You have worked with <code>while</code> and <code>for</code> loops in Python.</p>
<hr>
<h2>End Lab</h2>
<p><i class="fas fa-flag-checkered"></i> Congratulations! You have completed the lab.</p>
<ol start="31">
<li>
<p>Choose <i class="fas fa-square-full fa-xs"></i> <strong>End Lab</strong> at the top of this page, and then select <span id="ssb_blue">Yes</span> to confirm that you want to end the lab.</p>
<p>A panel indicates that <em>DELETE has been initiated... You may close this message box now.</em></p>
</li>
<li>
<p>A message <em>Ended AWS Lab Successfully</em> is briefly displayed, indicating that the lab has ended.
​</p>
</li>
</ol>
<h2>Additional Resources</h2>
<p>For more information about AWS Training and Certification, see <a href="https://aws.amazon.com/training/">https://aws.amazon.com/training/</a>.</p>
<p><em>Your feedback is welcome and appreciated.</em>
If you would like to share any suggestions or corrections, please provide the details in our <a href="https://support.aws.amazon.com/#/contacts/aws-training">AWS Training and Certification Contact Form</a>.</p>
<p><em>© 2022 Amazon Web Services, Inc. and its affiliates. All rights 
reserved. This work may not be reproduced or redistributed, in whole or 
in part, without prior written permission from Amazon Web Services, Inc.
 Commercial copying, lending, or selling is prohibited.</em></p>
<!-- IMPORTANT: Do not delete the radio buttons below. They are required in order for the mulitple tabs at the bottom of the generated HTML page to work properly and will be rendered invisible through the mcq-invisible-radio-buttons.css style sheet. -->
<input class="voc_radio" type="radio" id="grp-8-1" value="8 - Loops-1" name="grp-8" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-8-1" style="font-weight: 400">Yes</label><br>
<input class="voc_radio" type="radio" id="grp-8-2" value="8 - Loops-2" name="grp-8" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-8-2" style="font-weight: 400">No</label><br>
<div class="voc_rubric">&lt; Rubric: 8 - Loops | Points: 0 &gt;</div><br><div id="grp-8-hint" hidden=""></div><br><a class="btn btn-primary btnPrevious">Previous</a><a class="btn btn-primary btnNext" style="margin-left: 4px">Next</a></div>
<div id="grp-9" class="tab-pane">
<h1>Creating a Git Repository</h1>
<hr>
<h2>Lab overview</h2>
<p>GitHub runs an instance of git, which is version-control software 
that runs in the cloud. GitHub is popular among open source projects and
 businesses.</p>
<p>In this lab, you will:</p>
<ul>
<li>Download solutions for the earlier labs</li>
<li>Create a GitHub account</li>
<li>Read the GitHub <em>Hello World</em> guide</li>
<li>Create a private repository for your labs</li>
<li>Download your repository</li>
</ul>
<hr>
<h2>Estimated completion time</h2>
<p>45 minutes</p>
<hr>
<h2>Accessing the AWS Cloud9 IDE</h2>
<ol>
<li>
<p>Start your lab environment by going to the top of these instructions and choosing <strong>Start Lab</strong>.</p>
<p>A <strong>Start Lab</strong> panel opens, displaying the lab status.</p>
</li>
<li>
<p>Wait until you see the message <em>Lab status: ready</em>, and then close the <strong>Start Lab</strong> panel by choosing the <strong>X</strong>.</p>
</li>
<li>
<p>At the top of these instructions, choose <strong>AWS</strong>.</p>
<p>The AWS Management Console opens in a new browser tab. The system automatically logs you in.</p>
<blockquote>
<p><strong>Note:</strong> If a new browser tab does not open, a banner 
or icon at the top of your browser typically indicates that your browser
 is preventing the site from opening pop-up windows. Choose the banner 
or icon, and choose <strong>Allow pop ups</strong>.</p>
</blockquote>
</li>
<li>
<p>In the AWS Management Console, choose <strong>Services</strong> &gt; <strong>Cloud9</strong>. In the <strong>Your environments</strong> panel, locate the <strong>reStart-python-cloud9</strong> card, and choose <strong>Open IDE</strong>.</p>
<p>The AWS Cloud9 environment opens.</p>
<blockquote>
<p><strong>Note:</strong> If a pop-up window opens with the message <em>.c9/project.settings have been changed on disk</em>, choose <strong>Discard</strong> to ignore it. Likewise, if a dialog window prompts you to <em>Show third-party content</em>, choose <strong>No</strong> to decline.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Exercise 1: Downloading your Python files from the previous labs</h2>
<ol start="5">
<li>
<p>From the menu bar, choose <strong>File &gt; Download Project</strong>.</p>
<p>This action creates an untitled file.</p>
</li>
<li>
<p>This action downloads a compressed file onto your local machine. Extract the contents of this file.</p>
</li>
</ol>
<hr>
<h2>Exercise 2: Creating a GitHub account</h2>
<p>At the time of this writing, GitHub offered a free account for individuals.</p>
<ol start="7">
<li>
<p>Visit <a href="https://www.github.com/"><span style="color:blue">GitHub</span></a> at <a href="https://www.github.com/">https://www.github.com</a> and create an account.</p>
<img src="README_data/image4-23.png" width="40%" alt="github">
</li>
</ol>
<hr>
<h2>Exercise 3: Reading the GitHub Hello World Guide</h2>
<p>After you log in to GitHub, you can access to the <em>Hello World</em> guide for creating a repository.</p>
<img src="README_data/image5-25.png" width="40%" alt="hello world">
<p>At the time of this writing, the GitHub Guides page hosted the <a href="https://guides.github.com/activities/hello-world">Hello World guide</a> at <a href="https://guides.github.com/activities/hello-world/"><span style="color:blue"></span></a><a href="https://guides.github.com/activities/hello-world/">https://guides.github.com/activities/hello-world/</a>.</p>
<ol start="8">
<li>Read the GitHub <em>Hello World</em> guide.</li>
</ol>
<hr>
<h2>Exercise 4: Creating a private repository</h2>
<ol start="9">
<li>
<p>After you read the GitHub <em>Hello World</em> guide, make sure that you are logged in to GitHub and choose the <strong>New</strong> button.</p>
<p>The <strong>Create a new repository form</strong> (see the screen capture) should open.</p>
</li>
<li>
<p>Give your repository a name, such as <em>aws_restart</em>.</p>
<img src="README_data/image6-27.png" width="40%" alt="create new repo form">
<blockquote>
<p><strong>Note:</strong> You can make your repository public or private. Choose to create a <strong>private</strong> repository. Also, select the <strong>Initialize this repository with a README</strong> option.</p>
</blockquote>
<p>If your repository is created successfully, you should see a default 
repository with a README file that is similar to this example.</p>
<img src="README_data/image7-29.png" width="40%" alt="example repo">
<p>Choose the <strong>Upload files</strong> button to get to the <strong>Upload files</strong> page.</p>
<img src="README_data/image0-4.png" width="40%" alt="upload">
</li>
<li>
<p>Upload all the files that you previously extracted in Exercise 1.</p>
</li>
</ol>
<hr>
<h2>Exercise 5: Downloading a repository</h2>
<p>To download your repository, complete the following steps.</p>
<ol start="12">
<li>
<p>Choose the <strong>Clone or download</strong> button.</p>
</li>
<li>
<p>Select the <strong>Download Zip</strong> option.</p>
<p><img src="README_data/image10-35.png" alt="download zip"></p>
</li>
<li>
<p>On your local machine, create an <strong>aws_restart</strong> folder and save your .zip file to it.</p>
</li>
<li>
<p>To verify that the files were downloaded, extract the .zip file.</p>
</li>
</ol>
<p>Congratulations! You have used some basic features of GitHub.</p>
<hr>
<h2>End Lab</h2>
<p><i class="fas fa-flag-checkered"></i> Congratulations! You have completed the lab.</p>
<ol start="16">
<li>
<p>Choose <i class="fas fa-square-full fa-xs"></i> <strong>End Lab</strong> at the top of this page, and then select <span id="ssb_blue">Yes</span> to confirm that you want to end the lab.</p>
<p>A panel indicates that <em>DELETE has been initiated... You may close this message box now.</em></p>
</li>
<li>
<p>A message <em>Ended AWS Lab Successfully</em> is briefly displayed, indicating that the lab has ended.
​</p>
</li>
</ol>
<h2>Additional Resources</h2>
<p>For more information about AWS Training and Certification, see <a href="https://aws.amazon.com/training/">https://aws.amazon.com/training/</a>.</p>
<p><em>Your feedback is welcome and appreciated.</em>
If you would like to share any suggestions or corrections, please provide the details in our <a href="https://support.aws.amazon.com/#/contacts/aws-training">AWS Training and Certification Contact Form</a>.</p>
<p><em>© 2022 Amazon Web Services, Inc. and its affiliates. All rights 
reserved. This work may not be reproduced or redistributed, in whole or 
in part, without prior written permission from Amazon Web Services, Inc.
 Commercial copying, lending, or selling is prohibited.</em></p>
<!-- IMPORTANT: Do not delete the radio buttons below. They are required in order for the mulitple tabs at the bottom of the generated HTML page to work properly and will be rendered invisible through the mcq-invisible-radio-buttons.css style sheet. -->
<input class="voc_radio" type="radio" id="grp-9-1" value="9 - Git-1" name="grp-9" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-9-1" style="font-weight: 400">Yes</label><br>
<input class="voc_radio" type="radio" id="grp-9-2" value="9 - Git-2" name="grp-9" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-9-2" style="font-weight: 400">No</label><br>
<div class="voc_rubric">&lt; Rubric: 9 - Git | Points: 0 &gt;</div><br><div id="grp-9-hint" hidden=""></div><br><a class="btn btn-primary btnPrevious">Previous</a><a class="btn btn-primary btnNext" style="margin-left: 4px">Next</a></div>
<div id="grp-10" class="tab-pane">
<h1>Preparing to Analyze Insulin with Python</h1>
<hr>
<h2>Lab overview</h2>
<p>In information technology, Python works well as the programming 
language of choice for manipulating strings, sequences, and numbers. 
Python is especially preferred in scientific computing applications such
 as physics, chemistry, and biology.</p>
<p>In some of the labs for the Python modules, you will perform simple 
sequence manipulations and calculations on human insulin, which is a 
well-known hormone in the human body that is responsible for regulating 
sugars.</p>
<p>In this lab, you will:</p>
<ul>
<li>Retrieve the protein sequence of human insulin from human preproinsulin</li>
</ul>
<!-- JY: Will all learners know what preproinsulin is? (Its relationship to insulin is partly explained in a later exercise in this lab, but it might be helpful to include an explanation of what it is). It might also be useful to explain to learners why using insulin as a real-world example is helpful for learning Python. I don't know if there's time now to add this information, so it might be something to consider for a later lab. -->
<hr>
<h2>Estimated completion time</h2>
<p>30 minutes</p>
<hr>
<h2>Accessing the AWS Cloud9 IDE</h2>
<ol>
<li>
<p>Start your lab environment by going to the top of these instructions and choosing <strong>Start Lab</strong>.</p>
<p>A <strong>Start Lab</strong> panel opens, displaying the lab status.</p>
</li>
<li>
<p>Wait until you see the message <em>Lab status: ready</em>, and then close the <strong>Start Lab</strong> panel by choosing the <strong>X</strong>.</p>
</li>
<li>
<p>At the top of these instructions, choose <strong>AWS</strong>.</p>
<p>The AWS Management Console opens in a new browser tab. The system automatically logs you in.</p>
<blockquote>
<p><strong>Note:</strong> If a new browser tab does not open, a banner 
or icon at the top of your browser typically indicates that your browser
 is preventing the site from opening pop-up windows. Choose the banner 
or icon, and choose <strong>Allow pop ups</strong>.</p>
</blockquote>
</li>
<li>
<p>In the AWS Management Console, choose <strong>Services</strong> &gt; <strong>Cloud9</strong>. In the <strong>Your environments</strong> panel, locate the <strong>reStart-python-cloud9</strong> card, and choose <strong>Open IDE</strong>.</p>
<p>The AWS Cloud9 environment opens.</p>
<blockquote>
<p><strong>Note:</strong> If a pop-up window opens with the message <em>.c9/project.settings have been changed on disk</em>, choose <strong>Discard</strong> to ignore it. Likewise, if a dialog window prompts you to <em>Show third-party content</em>, choose <strong>No</strong> to decline.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Creating your Python exercise file</h2>
<ol start="5">
<li>
<p>From the menu bar, choose <strong>File &gt; New From Template &gt; Python File</strong>.</p>
<p>This action creates an untitled file.</p>
</li>
<li>
<p>Delete the sample code from the template file.</p>
</li>
<li>
<p>Choose <strong>File &gt; Save As...</strong>, and provide a suitable name for the exercise file (for example, <em>analyze-insulin.py</em> and save it under the  <strong>/home/ec2-user/environment</strong> directory.</p>
</li>
</ol>
<hr>
<h2>Accessing the terminal session</h2>
<ol start="8">
<li>
<p>In your AWS Cloud9 IDE, choose the <strong>+</strong> icon and select <strong>New Terminal</strong>.</p>
<p>A terminal session opens.</p>
</li>
<li>
<p>To display the present working directory, enter <code>pwd</code>. This command points to <strong>/home/ec2-user/environment</strong>.</p>
</li>
<li>
<p>In this directory, you should also be able to locate the file you created in the previous section.</p>
</li>
</ol>
<hr>
<h2>Exercise 1: Retrieving the protein sequence of human preproinsulin</h2>
<!-- JY: Some of the terminology in these exercises use scientific terminology that it might be good to explain (biological sequences, amino acids, proinsulin, how amino acids make up the sequence they are using, and others). Not all learners might be familiar with these terms and concepts. Not sure if there's enough time to add this information now, so it might be something to consider for the next update. -->
<p>The National Center for Biotechnology Information (NCBI) has information on many biological sequences.</p>
<ol start="11">
<li>
<p>Access <a href="https://www.ncbi.nlm.nih.gov/" target="_blank">NCBI</a> at <a href="https://www.ncbi.nlm.nih.gov/" target="_blank"></a><a href="https://ncbi.nlm.nih.gov/">https://ncbi.nlm.nih.gov</a>.</p>
</li>
<li>
<p>Next to the search bar, choose the dropdown menu and select <strong>Protein</strong>. Next, in the search bar, enter <code>human insulin</code> and choose <strong>Search</strong>.</p>
<img src="README_data/homepage_search_insuling.png" alt="search">
</li>
<li>
<p>Choose the following search result: <strong>insulin [Homo sapiens]</strong>.</p>
<img src="README_data/insulin_homosapiens.png" alt="search result">
</li>
<li>
<p>At the bottom of the search record, copy the insulin sequence, which starts with the word <code>ORIGIN</code> and ends with <code>//</code>.</p>
<img src="README_data/insulin.png" alt="search result">
</li>
<li>
<p>In the AWS Cloud9 IDE, on the navigation pane, choose <strong>File &gt; New File</strong> and save the file as <em>preproinsulin-seq.txt</em>. </p>
</li>
<li>
<p>Paste the insulin sequence into <strong>preproinsulin-seq.txt</strong>:</p>
<pre><code>ORIGIN      
        1 malwmrllpl lallalwgpd paaafvnqhl cgshlvealy lvcgergffy tpktrreaed
       61 lqvgqvelgg gpgagslqpl alegslqkrg iveqcctsic slyqlenycn
//</code></pre>
</li>
</ol>
<h3>Bonus: Cleaning preproinsulin-seq.txt programmatically</h3>
<p>Cleaning source data files is a common task in computer programming. 
You could programmatically clean preproinsulin-seq.txt in several 
ways—for example, by using Bash, Python, or another programming language
 of choice. Try using regex to programmatically strip the file of <em>ORIGIN</em>,
 its numbers, the two slashes (//), spaces, and line breaks or return 
carriages. You could also confirm programmatically that the file has 110
 characters.</p>
<hr>
<h2>Exercise 2: Obtaining the protein sequence of human insulin</h2>
<p>Insulin is obtained from preproinsulin through a series of 
cut-and-paste procedures. Preproinsulin contains a 24aa signal sequence 
and an 86aa proinsulin molecule. Amino acids 25–54 and amino acids 
90–110 are the processed insulin molecule. Use Python, Bash, or manual 
manipulation to retrieve only those amino acids in the sequence that 
compose insulin.</p>
<!-- JY: Just an FYI, in the next lab, using amino acids 24-54 (bInsulin) and 90-110 (aInsulin) results in a different result for the molecular weight of insulin than the one reported in the lab instructions. Please review these values and confirm accuracy. -->
<ol start="17">
<li>
<p>Manually or programmatically delete <em>ORIGIN</em>, <em>1</em>, <em>61</em>, <em>//</em>, and the spaces and return carriages.</p>
</li>
<li>
<p>In the AWS Cloud9 IDE, on the navigation pane, choose <strong>File &gt; New File</strong> and save the file as <em>preproinsulin-seq-clean.txt</em>.</p>
</li>
<li>
<p>In the file <strong>preproinsulin-seq-clean.txt</strong>, copy your results.</p>
</li>
<li>
<p>Confirm that your file has 110 characters of lowercase letters, which
 represent the amino acids in the sequence of human preproinsulin.</p>
</li>
<li>
<p>In the AWS Cloud9 IDE, on the navigation pane, choose <strong>File &gt; New File</strong> and save the file as <em>lsinsulin-seq-clean.txt</em>.</p>
</li>
<li>
<p>In <strong>lsinsulin-seq-clean.txt</strong>, save amino acids 1–24. Verify that your file has 24 characters.</p>
</li>
<li>
<p>In the AWS Cloud9 IDE, on the navigation pane, choose <strong>File &gt; New File</strong> and save the file as <em>binsulin-seq-clean.txt</em>.</p>
</li>
<li>
<p>In <strong>binsulin-seq-clean.txt</strong>, save amino acids 25–54. Verify that your file has 30 characters.</p>
</li>
<li>
<p>In the AWS Cloud9 IDE, on the navigation pane, choose <strong>File &gt; New File</strong> and save the file as <em>cinsulin-seq-clean.txt</em>.</p>
</li>
<li>
<p>In <strong>cinsulin-seq-clean.txt</strong>, save amino acids 55–89. Verify that your file has 35 characters.</p>
</li>
<li>
<p>In the AWS Cloud9 IDE, on the navigation pane, choose <strong>File &gt; New File</strong> and save the file as <em>ainsulin-seq-clean.txt</em>.</p>
</li>
<li>
<p>In <strong>ainsulin-seq-clean.txt</strong>, save amino acids 90–110. Verify that your file has 21 characters.</p>
</li>
</ol>
<h3>Deciding when to automate and when to work manually: A discussion about scope versus time</h3>
<p>Automating your work versus working manually is a dilemma for 
computer programmers. Too much automation wastes time on coding, whereas
 too little restricts the scope of your program. Try to balance your 
automation with working manually in an effort to create a program with 
the most scope for the least time spent coding. In this case, it is 
probably not worth the extra coding time to programmatically clean 
insulin-seq.txt to insulin-seq-clean.txt. However, if you needed to 
download thousands or millions of files and do the same task, automation
 would be good to explore.</p>
<!-- JY: This lab didn't have a "Congratulations!" message, so I added one for consistency. I also merged the comment about manually preparing files to it. Feel free to change the message I added. -->
<p>Congratulations! You have prepared data for further processing. 
Manually preparing these files should help you appreciate the automation
 that Python can provide.</p>
<hr>
<h2>End Lab</h2>
<p><i class="fas fa-flag-checkered"></i> Congratulations! You have completed the lab.</p>
<ol start="29">
<li>
<p>Choose <i class="fas fa-square-full fa-xs"></i> <strong>End Lab</strong> at the top of this page, and then select <span id="ssb_blue">Yes</span> to confirm that you want to end the lab.</p>
<p>A panel indicates that <em>DELETE has been initiated... You may close this message box now.</em></p>
</li>
<li>
<p>A message <em>Ended AWS Lab Successfully</em> is briefly displayed, indicating that the lab has ended.
​</p>
</li>
</ol>
<h2>Additional Resources</h2>
<p>For more information about AWS Training and Certification, see <a href="https://aws.amazon.com/training/">https://aws.amazon.com/training/</a>.</p>
<p><em>Your feedback is welcome and appreciated.</em>
If you would like to share any suggestions or corrections, please provide the details in our <a href="https://support.aws.amazon.com/#/contacts/aws-training">AWS Training and Certification Contact Form</a>.</p>
<p><em>© 2022 Amazon Web Services, Inc. and its affiliates. All rights 
reserved. This work may not be reproduced or redistributed, in whole or 
in part, without prior written permission from Amazon Web Services, Inc.
 Commercial copying, lending, or selling is prohibited.</em></p>
<!-- IMPORTANT: Do not delete the radio buttons below. They are required in order for the mulitple tabs at the bottom of the generated HTML page to work properly and will be rendered invisible through the mcq-invisible-radio-buttons.css style sheet. -->
<input class="voc_radio" type="radio" id="grp-10-1" value="10 - Analyze with Python-1" name="grp-10" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-10-1" style="font-weight: 400">Yes</label><br>
<input class="voc_radio" type="radio" id="grp-10-2" value="10 - Analyze with Python-2" name="grp-10" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-10-2" style="font-weight: 400">No</label><br>
<div class="voc_rubric">&lt; Rubric: 10 - Analyze with Python | Points: 0 &gt;</div><br><div id="grp-10-hint" hidden=""></div><br><a class="btn btn-primary btnPrevious">Previous</a><a class="btn btn-primary btnNext" style="margin-left: 4px">Next</a></div>
<div id="grp-11" class="tab-pane">
<h1>Working with the String Sequence and Numeric Weight of Insulin in Python</h1>
<hr>
<h2>Lab overview</h2>
<p>In the Python Basics module, you learned about variables, comments, 
math, concatenations, and exceptions. Now, you will apply what you have 
learned to the real-world application of human insulin.</p>
<p>You will store the protein sequence of human preproinsulin in a 
string variable and the weight of preproinsulin in int and float 
variables. Next, you will print these variables to the console, with 
comments that explain the code. You will do basic math and string 
concatenations.</p>
<p>In this lab, you will:</p>
<ul>
<li>Add comments that explain the intention and flow of your code</li>
<li>Use <code>print()</code> to print elements of your Python code to the console</li>
<li>Use string manipulations to get the sequence of insulin from preproinsulin</li>
<li>Do basic math on the molecular weight and sequence of insulin</li>
<li>Assign string, int, and float variables to numbers that represent the weight of insulin</li>
<li>Explore Python exceptions</li>
</ul>
<hr>
<h2>Estimated completion time</h2>
<p>30 minutes</p>
<hr>
<h2>Accessing the AWS Cloud9 IDE</h2>
<ol>
<li>
<p>Start your lab environment by going to the top of these instructions and choosing <strong>Start Lab</strong>.</p>
<p>A <strong>Start Lab</strong> panel opens, displaying the lab status.</p>
</li>
<li>
<p>Wait until you see the message <em>Lab status: ready</em>, and then close the <strong>Start Lab</strong> panel by choosing the <strong>X</strong>.</p>
</li>
<li>
<p>At the top of these instructions, choose <strong>AWS</strong>.</p>
<p>The AWS Management Console opens in a new browser tab. The system automatically logs you in.</p>
<blockquote>
<p><strong>Note:</strong> If a new browser tab does not open, a banner 
or icon at the top of your browser typically indicates that your browser
 is preventing the site from opening pop-up windows. Choose the banner 
or icon, and choose <strong>Allow pop ups</strong>.</p>
</blockquote>
</li>
<li>
<p>In the AWS Management Console, choose <strong>Services</strong> &gt; <strong>Cloud9</strong>. In the <strong>Your environments</strong> panel, locate the <strong>reStart-python-cloud9</strong> card, and choose <strong>Open IDE</strong>.</p>
<p>The AWS Cloud9 environment opens.</p>
<blockquote>
<p><strong>Note:</strong> If a pop-up window opens with the message <em>.c9/project.settings have been changed on disk</em>, choose <strong>Discard</strong> to ignore it. Likewise, if a dialog window prompts you to <em>Show third-party content</em>, choose <strong>No</strong> to decline.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Creating your Python exercise file</h2>
<ol start="5">
<li>
<p>From the menu bar, choose <strong>File &gt; New From Template &gt; Python File</strong>.</p>
<p>This action creates an untitled file.</p>
</li>
<li>
<p>Delete the sample code from the template file.</p>
</li>
<li>
<p>Choose <strong>File &gt; Save As...</strong>, and provide a suitable name for the exercise file (for example, <em>string-insulin.py</em>) and save it under the  <strong>/home/ec2-user/environment</strong> directory.</p>
</li>
</ol>
<hr>
<h2>Accessing the terminal session</h2>
<ol start="8">
<li>
<p>In your AWS Cloud9 IDE, choose the <strong>+</strong> icon and select <strong>New Terminal</strong>.</p>
<p>A terminal session opens.</p>
</li>
<li>
<p>To display the present working directory, enter <code>pwd</code>. This command points to <strong>/home/ec2-user/environment</strong>. In this directory, you should also be able to locate the file you created in the previous section.</p>
</li>
</ol>
<hr>
<h2>Exercise 1: Assigning variables to the sequence elements of human insulin</h2>
<p>In this exercise, you will create variables and assign a string value to them.</p>
<ol start="10">
<li>
<p>From the navigation pane of the IDE, choose the file that you created in the previous <em>Creating your Python exercise file</em> section.</p>
<blockquote>
<p><strong>How to start your .py file</strong></p>
<p>You should always start your Python file with comments. Recall that Python comments start with a pound sign (#).</p>
<p>Your first comments should provide:</p>
<ul>
<li>The Python version (<em>python3.6</em>) with a path to the executable, if possible</li>
<li>The encoding of the file (typically, <em>coding: utf-8</em>)</li>
</ul>
</blockquote>
</li>
<li>
<p>Write the following note on the next line:</p>
<pre><code class="language-python"># Store the human preproinsulin sequence in a variable called preproinsulin:</code></pre>
</li>
<li>
<p>Create the first variable in the Python file by entering <code>preproInsulin =</code> as the name of the variable, and with the equals sign (=) as the assignment operator.</p>
</li>
<li>
<p>After the equal sign (=), enter the following input:</p>
<pre><code class="language-python">"malwmrllpllallalwgpdpaaafvnqhlcgshlvealylvcgergffytpktr" \
"reaedlqvgqvelgggpgagslqplalegslqkrgiveqcctsicslyqlenycn"</code></pre>
</li>
<li>
<p>To finalize the first variable on that line, press ENTER.</p>
<p><strong>Maximum length of lines in Python files and other PEP standards</strong></p>
<p>The trailing backslash (\) in variable value from the previous step 
is used to maintain compliance with the Python Enhancement Proposals 
(PEP) 8 style guide. The PEP 8 style guide recommends a maximum of 79 
characters per line. PEPs are standards for Python best practices. 
Though the file still runs with longer line lengths, sticking to the 
suggested limit increases simplicity and readability. By using a 
backslash (\), you can split variables and code into smaller blocks, 
thereby maintaining the 79-character limit.</p>
</li>
<li>
<p>Write a note in the file:</p>
<pre><code class="language-python"># Store the remaining sequence elements of human insulin in variables:</code></pre>
</li>
<li>
<p>Repeat the steps to define a variable and assign a value to it by 
using the information from the following chart. Use an equal sign (=) 
between the variable name and string.</p>
<table cellspacing="0" cellpadding="0" style="width:100%">
<tbody>
<tr>
<td valign="top">
<p><span><b>Variable Name</b></span></p>
</td>
<td valign="top">
<p><span><b>String to Save to Variable</b></span></p>
</td>
</tr>
<tr>
<td valign="top">
<p><span>lsInsulin</span></p>
</td>
<td valign="top">
<p><span>"malwmrllpllallalwgpdpaaa"</span></p>
</td>
</tr>
<tr>
<td valign="top">
<p><span>bInsulin</span></p>
</td>
<td valign="top">
<p><span>"fvnqhlcgshlvealylvcgergffytpkt"</span></p>
</td>
</tr>
<tr>
<td valign="top">
<p><span>aInsulin</span></p>
</td>
<td valign="top">
<p><span>"giveqcctsicslyqlenycn"</span></p>
</td>
</tr>
<tr>
<td valign="top">
<p><span>cInsulin</span></p>
</td>
<td valign="top">
<p><span>"rreaedlqvgqvelgggpgagslqplalegslqkr"</span></p>
</td>
</tr>
</tbody>
</table>
<blockquote>
<p><strong>Note</strong>: Variable names in Python usually begin with a 
lowercase first word, and then uppercase for each following word, 
without underscores or spaces. Be consistent when you name your 
variables.</p>
</blockquote>
<!-- JY: Using the values of bInsulin and aInsulin to calculate the molecular weight results in a different result than the one stated in the lab instructions (8181.9299 vs. 6696.42). To get the weight in the lab instructions,you need to concatenate bInsulin and cInsulin for the value of the insulin variable. I also noted this later when the molecular weight is calculated. Please review for accuracy. -->
</li>
<li>
<p>Finally, you will merge the results of the smaller insulin groupings into a single variable called <em>insulin</em>. To do this, on a new line, enter: <code>insulin = bInsulin + aInsulin</code></p>
</li>
</ol>
<hr>
<h2>Exercise 3: Using print() to display sequences of human insulin to the console</h2>
<p>In this exercise, you will use the <code>print()</code> built-in method to display sequence elements of human insulin in the console.</p>
<ol start="18">
<li>
<p>Write a note on the next line:</p>
<pre><code class="language-python"># Printing "the sequence of human insulin" to console using successive print() commands:</code></pre>
</li>
<li>
<p>On a new line of the Python file, enter: <code>print("The sequence of human preproinsulin:")</code></p>
</li>
<li>
<p>Press ENTER.</p>
<p>This <code>print()</code> statement prints the direct representation of the provided string, with no formatting.</p>
</li>
<li>
<p>To print a string that is contained in a variable from your script, enter: <code>print(preproInsulin)</code></p>
</li>
<li>
<p>Press ENTER.</p>
</li>
<li>
<p>Enter the following comment:</p>
<pre><code class="language-python"># Printing to console using concatenated strings inside the print function (one-liner):</code></pre>
</li>
<li>
<p>To concatenate strings, use the plus sign (+) in the <code>print()</code> statement:</p>
<pre><code class="language-python">print("The sequence of human insulin, chain a: " + aInsulin)</code></pre>
</li>
<li>
<p>Press ENTER.</p>
<blockquote>
<p><strong>Note:</strong> The built-in <code>print()</code> function accepts multiple arguments that can accomplish the same task in step 5. For example:</p>
<p><code>print("The sequence of human insulin, chain a:", aInsulin)</code></p>
</blockquote>
</li>
<li>
<p>Save and run the file.</p>
</li>
</ol>
<hr>
<h2>Exercise 4: Calculating the rough molecular weight of human insulin using the given code</h2>
<p>In this lab, you will calculate the molecular weight of insulin, which you will work with in later labs.</p>
<!-- JY: Please double-check the learning sequence in the course here, since previous labs covered the basic aspects of lists and loops. Is the previous paragraph correct? I also noticed that the next lab talks about using Python lists and loops, but it seems that this topic was already covered in an introductory form earlier. -->
<ol start="27">
<li>
<p>Ensure that your <strong>.py</strong> file is open</p>
</li>
<li>
<p>Copy the following code, and at the end of the <strong>.py</strong> file, paste it.</p>
<pre><code class="language-python"># Calculating the molecular weight of insulin  
# Creating a list of the amino acid (AA) weights  
aaWeights = {'A': 89.09, 'C': 121.16, 'D': 133.10, 'E': 147.13, 'F': 165.19,
'G': 75.07, 'H': 155.16, 'I': 131.17, 'K': 146.19, 'L': 131.17, 'M': 149.21,
'N': 132.12, 'P': 115.13, 'Q': 146.15, 'R': 174.20, 'S': 105.09, 'T': 119.12,
'V': 117.15, 'W': 204.23, 'Y': 181.19}  
# Count the number of each amino acids  
aaCountInsulin = ({x: float(insulin.upper().count(x)) for x in ['A', 'C',
'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T',
'V', 'W', 'Y']})  
# Multiply the count by the weights  
molecularWeightInsulin = sum({x: (aaCountInsulin[x]*aaWeights[x]) for x in
['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R',
'S', 'T', 'V', 'W', 'Y']}.values())  
print("The rough molecular weight of insulin: " +
str(molecularWeightInsulin))</code></pre>
</li>
<li>
<p>Save and run the file.</p>
</li>
<li>
<p>Notice the resulting output. You will use elements of this code to 
work with loops and functions in other labs, so observe how the code is 
written and try to follow the expected output.</p>
<blockquote>
<p><strong>Note:</strong> The actual molecular weight of human insulin 
is 5807.63, but the program delivers 6696.42 because it ignores certain 
bonds and post-translational processing. To calculate the error 
percentage:<em>error percentage = (| measured – accepted | / accepted)*100%</em></p>
</blockquote>
</li>
<li>
<p>Enter or copy the example into your script.</p>
<pre><code class="language-python">molecularWeightInsulinActual = 5807.63
print("Error percentage: " + str(((molecularWeightInsulin - molecularWeightInsulinActual)/molecularWeightInsulinActual)*100))</code></pre>
</li>
<li>
<p>To see the error percentage, run and save the file.</p>
<blockquote>
<p><strong>Note:</strong> When you use string concatenation with floating point calculations, the <code>print()</code> function returns an error. This error is handled by a method called <em>casting</em>, which tells Python to use a certain data type. The previous use of the <code>str()</code> function is an example of casting.</p>
</blockquote>
</li>
</ol>
<p>Congratulations! You have worked with variables and different data types in a Python function.</p>
<hr>
<h2>End Lab</h2>
<p><i class="fas fa-flag-checkered"></i> Congratulations! You have completed the lab.</p>
<ol start="33">
<li>
<p>Choose <i class="fas fa-square-full fa-xs"></i> <strong>End Lab</strong> at the top of this page, and then select <span id="ssb_blue">Yes</span> to confirm that you want to end the lab.</p>
<p>A panel indicates that <em>DELETE has been initiated... You may close this message box now.</em></p>
</li>
<li>
<p>A message <em>Ended AWS Lab Successfully</em> is briefly displayed, indicating that the lab has ended.
​</p>
</li>
</ol>
<h2>Additional Resources</h2>
<p>For more information about AWS Training and Certification, see <a href="https://aws.amazon.com/training/">https://aws.amazon.com/training/</a>.</p>
<p><em>Your feedback is welcome and appreciated.</em>
If you would like to share any suggestions or corrections, please provide the details in our <a href="https://support.aws.amazon.com/#/contacts/aws-training">AWS Training and Certification Contact Form</a>.</p>
<p><em>© 2022 Amazon Web Services, Inc. and its affiliates. All rights 
reserved. This work may not be reproduced or redistributed, in whole or 
in part, without prior written permission from Amazon Web Services, Inc.
 Commercial copying, lending, or selling is prohibited.</em></p>
<!-- IMPORTANT: Do not delete the radio buttons below. They are required in order for the mulitple tabs at the bottom of the generated HTML page to work properly and will be rendered invisible through the mcq-invisible-radio-buttons.css style sheet. -->
<input class="voc_radio" type="radio" id="grp-11-1" value="11 - String Sequence and Numeric Weight-1" name="grp-11" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-11-1" style="font-weight: 400">Yes</label><br>
<input class="voc_radio" type="radio" id="grp-11-2" value="11 - String Sequence and Numeric Weight-2" name="grp-11" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-11-2" style="font-weight: 400">No</label><br>
<div class="voc_rubric">&lt; Rubric: 11 - String Sequence and Numeric Weight | Points: 0 &gt;</div><br><div id="grp-11-hint" hidden=""></div><br><a class="btn btn-primary btnPrevious">Previous</a><a class="btn btn-primary btnNext" style="margin-left: 4px">Next</a></div>
<div id="grp-12" class="tab-pane">
<h1>Calculating the Net Charge of Insulin by Using Python Lists and Loops</h1>
<hr>
<h2>Lab overview</h2>
<p>In the Flow Control module, you learned about <code>if-else</code> statements, <code>while</code> loops, lists, and <code>for</code> loops. Now you will apply what you have learned to the real-world application of human insulin.</p>
<p>Here, you will use <code>lists</code>, <code>for</code> and <code>while</code> loops, and basic math to calculate the net charge of insulin from pH 0 to pH 14.</p>
<p>In this lab, you will:</p>
<ul>
<li>Create a dictionary of pKa values (which indicate the strength of an acid) that will be used in the net charge calculations</li>
<li>Use the <code>count()</code> method to get a count of amino acids</li>
<li>Use a <code>while</code> loop to calculate the net charge of insulin from pH 0 to pH 14</li>
</ul>
<!-- JY: Will all learners know about net charge, pKA, and pH? They might need some explanation of these concepts. Not sure if there's time to add this info for this time, so it might be something to consider for the next revision.  -->
<hr>
<h2>Estimated completion time</h2>
<p>25 minutes</p>
<hr>
<h2>Accessing the AWS Cloud9 IDE</h2>
<ol>
<li>
<p>Start your lab environment by going to the top of these instructions and choosing <strong>Start Lab</strong>.</p>
<p>A <strong>Start Lab</strong> panel opens, displaying the lab status.</p>
</li>
<li>
<p>Wait until you see the message <em>Lab status: ready</em>, and then close the <strong>Start Lab</strong> panel by choosing the <strong>X</strong>.</p>
</li>
<li>
<p>At the top of these instructions, choose <strong>AWS</strong>.</p>
<p>The AWS Management Console opens in a new browser tab. The system automatically logs you in.</p>
<blockquote>
<p><strong>Note:</strong> If a new browser tab does not open, a banner 
or icon at the top of your browser typically indicates that your browser
 is preventing the site from opening pop-up windows. Choose the banner 
or icon, and choose <strong>Allow pop ups</strong>.</p>
</blockquote>
</li>
<li>
<p>In the AWS Management Console, choose <strong>Services</strong> &gt; <strong>Cloud9</strong>. In the <strong>Your environments</strong> panel, locate the <strong>reStart-python-cloud9</strong> card, and choose <strong>Open IDE</strong>.</p>
<p>The AWS Cloud9 environment opens.</p>
<blockquote>
<p><strong>Note:</strong> If a pop-up window opens with the message <em>.c9/project.settings have been changed on disk</em>, choose <strong>Discard</strong> to ignore it. Likewise, if a dialog window prompts you to <em>Show third-party content</em>, choose <strong>No</strong> to decline.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Creating your Python exercise file</h2>
<ol start="5">
<li>
<p>From the menu bar, choose <strong>File &gt; New From Template &gt; Python File</strong>.</p>
<p>This action creates an untitled file.</p>
</li>
<li>
<p>Delete the sample code from the template file.</p>
</li>
<li>
<p>Choose <strong>File &gt; Save As...</strong>, and provide a suitable name for the exercise file (for example, <em>net-charge.py</em>) and save it under the  <strong>/home/ec2-user/environment</strong> directory.</p>
</li>
</ol>
<hr>
<h2>Accessing the terminal session</h2>
<ol start="8">
<li>
<p>In your AWS Cloud9 IDE, choose the <strong>+</strong> icon and select <strong>New Terminal</strong>.</p>
<p>A terminal session opens.</p>
</li>
<li>
<p>To display the present working directory, enter <code>pwd</code>. This command points to <strong>/home/ec2-user/environment</strong>.</p>
</li>
<li>
<p>In this directory, you should also be able to locate the file you created in the previous section.</p>
</li>
</ol>
<hr>
<h2>Exercise 1: Assigning variables, lists, and dictionaries</h2>
<ol start="11">
<li>
<p>From the navigation pane of the IDE, choose the file that you created in the previous <em>Creating your Python exercise file</em> section.  </p>
</li>
<li>
<p>Copy the following code, paste it into the file, and save the file:</p>
<pre><code class="language-python"># Python3.6  
# Coding: utf-8  
# Store the human preproinsulin sequence in a variable called preproinsulin:  
preproInsulin = "malwmrllpllallalwgpdpaaafvnqhlcgshlvealylvcgergffytpktrreaedlqvgqvelgggpgagslqplalegslqkrgiveqcctsicslyqlenycn"  
# Store the remaining sequence elements of human insulin in variables:  
lsInsulin = "malwmrllpllallalwgpdpaaa"  
bInsulin = "fvnqhlcgshlvealylvcgergffytpkt"  
aInsulin = "giveqcctsicslyqlenycn"  
cInsulin = "rreaedlqvgqvelgggpgagslqplalegslqkr"  
insulin = bInsulin + aInsulin</code></pre>
<!-- JY: It might help the learner to know what pKR stands for--I don't know if there's enough time to add explanatory information, so maybe it's something to consider for next time. -->
</li>
<li>
<p>On the next line, create a new dictionary by entering: <code>pKR = {}</code></p>
</li>
<li>
<p>To fill the dictionary with key-value pairs, insert the first key of <em>y</em> with a value of <em>10.07</em>. Place the cursor inside the braces, and enter: <code>'y': 10.07,</code></p>
<blockquote>
<p><strong>Note:</strong> You included a comma after the value so that you can add the remaining key-value pairs.</p>
</blockquote>
</li>
<li>
<p>To match the code segment, add the following key-value pairs into the dictionary.</p>
<ul>
<li><code>'c': 8.18</code></li>
<li><code>'k': 10.53</code></li>
<li><code>'h': 6.00</code></li>
<li><code>'r': 12.48</code></li>
<li><code>'d': 3.65</code></li>
<li><code>'e': 4.25</code></li>
</ul>
<p>The dictionary should look like the following code:</p>
<pre><code class="language-python">pKR = {'y':10.07,'c': 8.18,'k':10.53,'h':6.00,'r':12.48,'d':3.65,'e':4.25}</code></pre>
<blockquote>
<p><strong>Note:</strong> <em>Y</em>, <em>C</em>, <em>K</em>, <em>H</em>, <em>R</em>, <em>D</em>, and <em>E</em> are the only amino acids that contribute to the net-charge calculation.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Exercise 2: Using count() to count the numbers of each amino acid</h2>
<p>In this exercise, you will use the <code>count()</code> method and 
list comprehension to count the number of Y, C, K, H, R, D, and E amino 
acids. These amino acids contribute to the net charge.</p>
<ol start="16">
<li>
<p>To identify a count of an item within a list, you can use the <code>count()</code> method. To see how many amino acids in insulin are <em>Y</em>, use the <code>count()</code> method by entering: <code>insulin.count("Y")</code></p>
</li>
<li>
<p>Next, update the <code>insulin.count()</code> line by casting the variable returned by the <code>count()</code> method as a float: <code>float(insulin.count("Y"))</code></p>
</li>
<li>
<p>Now that you have the basis for identifying a single entity, you can 
use this method to find all entities from a list. This process can be 
done by using list comprehension. For the entire line, enter:
<code>seqCount = ({x: float(insulin.count(x)) for x in ['y','c','k','h','r','d','e']})</code></p>
<blockquote>
<p><strong>Note:</strong> The first two steps in this exercise are predecessors to the third step.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Exercise 3: Writing the net charge formula</h2>
<p>In this exercise, you will construct the net charge formula. You will
 use the provided netCharge variable in a Python-based net charge 
formula. The function for the formula includes a <code>while</code> loop that will print the net charge while the pH variable is equal to or below 14.</p>
<!-- JY: I moved the netCharge variable and its definition to the step where the learner first starts constructing the while loop. If the learner first copies and pastes netCharge in the file, it will show an error because pH hasn't been defined yet. Hope this is ok. -->
<ol start="19">
<li>
<p>Create a variable called <em>pH</em> and initialize it to zero by entering <code>pH = 0</code> and pressing ENTER.</p>
</li>
<li>
<p>Create the <code>while</code> loop by entering <code>while (pH &lt;= 14):</code> and pressing ENTER.</p>
</li>
<li>
<p>Copy the following <em>netCharge</em> variable and paste it at the beginning of the <code>while</code> loop.</p>
<pre><code class="language-python">netCharge = (
    +(sum({x: ((seqCount[x]*(10**pKR[x]))/((10**pH)+(10**pKR[x]))) \
    for x in ['k','h','r']}.values()))
    -(sum({x: ((seqCount[x]*(10**pH))/((10**pH)+(10**pKR[x]))) \
    for x in ['y','c','d','e']}.values())))</code></pre>
</li>
<li>
<p>To print the <em>netCharge</em> variable with the <em>pH</em>, use a format string for better readability. Enter <code>print('{0:.2f}'.format(pH), netCharge)</code> and press ENTER.</p>
</li>
<li>
<p>Finally, increment the <em>pH</em> variable by entering <code>pH +=1</code> and pressing ENTER.</p>
</li>
<li>
<p>Save and run the file.</p>
</li>
</ol>
<p><strong>Be careful about indentation and spacing in Python</strong></p>
<p>Subsets of Python code are organized by indentation and spaces. In 
Python, even one misplaced indentation or space can throw an exception 
or other error. For example, be sure that every item within your <code>while</code> loop is properly indented so the code will work.</p>
<!-- JY: This lab didn't have a "congratulations!" message, so I added one to be consistent. Please feel free to change it. -->
<p>Congratulations! You have worked with lists and loops in a Python function.</p>
<hr>
<h2>End Lab</h2>
<p><i class="fas fa-flag-checkered"></i> Congratulations! You have completed the lab.</p>
<ol start="25">
<li>
<p>Choose <i class="fas fa-square-full fa-xs"></i> <strong>End Lab</strong> at the top of this page, and then select <span id="ssb_blue">Yes</span> to confirm that you want to end the lab.</p>
<p>A panel indicates that <em>DELETE has been initiated... You may close this message box now.</em></p>
</li>
<li>
<p>A message <em>Ended AWS Lab Successfully</em> is briefly displayed, indicating that the lab has ended.
​</p>
</li>
</ol>
<h2>Additional Resources</h2>
<p>For more information about AWS Training and Certification, see <a href="https://aws.amazon.com/training/">https://aws.amazon.com/training/</a>.</p>
<p><em>Your feedback is welcome and appreciated.</em>
If you would like to share any suggestions or corrections, please provide the details in our <a href="https://support.aws.amazon.com/#/contacts/aws-training">AWS Training and Certification Contact Form</a>.</p>
<p><em>© 2022 Amazon Web Services, Inc. and its affiliates. All rights 
reserved. This work may not be reproduced or redistributed, in whole or 
in part, without prior written permission from Amazon Web Services, Inc.
 Commercial copying, lending, or selling is prohibited.</em></p>
<!-- IMPORTANT: Do not delete the radio buttons below. They are required in order for the mulitple tabs at the bottom of the generated HTML page to work properly and will be rendered invisible through the mcq-invisible-radio-buttons.css style sheet. -->
<input class="voc_radio" type="radio" id="grp-12-1" value="12 - Lists and Loops-1" name="grp-12" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-12-1" style="font-weight: 400">Yes</label><br>
<input class="voc_radio" type="radio" id="grp-12-2" value="12 - Lists and Loops-2" name="grp-12" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-12-2" style="font-weight: 400">No</label><br>
<div class="voc_rubric">&lt; Rubric: 12 - Lists and Loops | Points: 0 &gt;</div><br><div id="grp-12-hint" hidden=""></div><br><a class="btn btn-primary btnPrevious">Previous</a><a class="btn btn-primary btnNext" style="margin-left: 4px">Next</a></div>
<div id="grp-13" class="tab-pane">
<h1>Using Functions to Implement a Caesar Cipher</h1>
<hr>
<h2>Lab overview</h2>
<!-- JY: Because the lab title includes the term "Caesar cipher," I moved the description of writing a Caesar cipher as a user-defined function to the introduction, and provided a new, shorter introduction to Exercise 1. Please review these changes. -->
<p>In programming, a function is a named section of a program that performs a specific task. Python has built-in functions like <code>print()</code> that are provided by the language. Additionally, you can use functions provided by other developers through the <code>import</code> statement. For example, you can use <code>import math</code> if you want to use the <code>math.floor()</code> function. In Python, you can make your own functions, which are called <em>user-defined functions</em>.</p>
<p>To drive the discussion of user-defined functions, you will write a 
program that implements a Caesar cipher, which is a simple method of 
encryption. A Caesar cipher takes the letters of a message and shifts 
each letter along the alphabet by a certain number of places.</p>
<p>In this lab, you will:</p>
<ul>
<li>Create user-defined functions</li>
<li>Use several functions to implement a Caesar cipher encryption program</li>
</ul>
<hr>
<h2>Estimated completion time</h2>
<p>60 minutes</p>
<hr>
<h2>Accessing the AWS Cloud9 IDE</h2>
<ol>
<li>
<p>Start your lab environment by going to the top of these instructions and choosing <strong>Start Lab</strong>.</p>
<p>A <strong>Start Lab</strong> panel opens, displaying the lab status.</p>
</li>
<li>
<p>Wait until you see the message <em>Lab status: ready</em>, and then close the <strong>Start Lab</strong> panel by choosing the <strong>X</strong>.</p>
</li>
<li>
<p>At the top of these instructions, choose <strong>AWS</strong>.</p>
<p>The AWS Management Console opens in a new browser tab. The system automatically logs you in.</p>
<blockquote>
<p><strong>Note:</strong> If a new browser tab does not open, a banner 
or icon at the top of your browser typically indicates that your browser
 is preventing the site from opening pop-up windows. Choose the banner 
or icon, and choose <strong>Allow pop ups</strong>.</p>
</blockquote>
</li>
<li>
<p>In the AWS Management Console, choose <strong>Services</strong> &gt; <strong>Cloud9</strong>. In the <strong>Your environments</strong> panel, locate the <strong>reStart-python-cloud9</strong> card, and choose <strong>Open IDE</strong>.</p>
<p>The AWS Cloud9 environment opens.</p>
<blockquote>
<p><strong>Note:</strong> If a pop-up window opens with the message <em>.c9/project.settings have been changed on disk</em>, choose <strong>Discard</strong> to ignore it. Likewise, if a dialog window prompts you to <em>Show third-party content</em>, choose <strong>No</strong> to decline.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Creating your Python exercise file</h2>
<ol start="5">
<li>
<p>From the menu bar, choose <strong>File &gt; New From Template &gt; Python File</strong>.</p>
<p>This action creates an untitled file.</p>
</li>
<li>
<p>Delete the sample code from the template file.</p>
</li>
<li>
<p>Choose <strong>File &gt; Save As...</strong>, provide a suitable name for the exercise file (for example, <em>caesar-cipher.py</em>), and save it under the <strong>/home/ec2-user/environment</strong> directory.</p>
</li>
</ol>
<hr>
<h2>Accessing the terminal session</h2>
<ol start="8">
<li>
<p>In your AWS Cloud9 IDE, choose the <strong>+</strong> icon and select <strong>New Terminal</strong>.</p>
<p>A terminal session opens.</p>
</li>
<li>
<p>To display the present working directory, enter <code>pwd</code>. This command points to <strong>/home/ec2-user/environment</strong>.</p>
</li>
<li>
<p>In this directory, locate the file that you created in the previous section.</p>
</li>
</ol>
<hr>
<h2>Exercise 1: Creating a user-defined function</h2>
<p>To start the process of implementing a Caesar cipher in Python, you will create a simple user-defined function.</p>
<ol start="11">
<li>
<p>From the navigation pane of the IDE, choose the file that you created in the previous <em>Creating your Python exercise file</em> section.</p>
</li>
<li>
<p>Define a function called <code>getDoubleAlphabet</code> that takes a string argument and concatenates, or combines, the given string with itself as follows:</p>
<pre><code class="language-python">def getDoubleAlphabet(alphabet):
    doubleAlphabet = alphabet + alphabet
    return doubleAlphabet</code></pre>
<blockquote>
<p><strong>Note:</strong> The required parts of the function statement are the keyword <code>def</code>,
 a name, and the colon (:). Additionally, in Python, variables don't 
need to be declared, and their data types are inferred from the 
assignment statement.</p>
</blockquote>
<!-- JY: Throughout this lab I added instructions to save the file because if the learner adds the code but doesn't save the file, it won't run. Hope this is ok. -->
</li>
<li>
<p>Save the file.</p>
</li>
<li>
<p>To understand what the function does, take a sample input of <code>alphabet="ABC"</code>. The return string for this input would be <code>"ABC" + "ABC" = "ABCABC"</code>. The plus sign (+) concatenates the strings into one string.</p>
</li>
</ol>
<p>Across the following exercises, you will define more functions that 
perform a simple task. You will then combine these functions to make a 
Caesar cipher program.</p>
<hr>
<h2>Exercise 2: Encrypting a message</h2>
<p>The next function you define will request a message to encrypt from the user. You will use the built-in function called <code>input()</code>.</p>
<ol start="15">
<li>
<p>In the text editor, enter the following code, and save the file:</p>
<pre><code class="language-python">def getMessage():
    stringToEncrypt = input("Please enter a message to encrypt: ")
    return stringToEncrypt</code></pre>
<blockquote>
<p><strong>Note:</strong> Functions should perform a specific task. 
Usually, because functions perform a specific task, your functions will 
also probably be short. Though this function returns a string, it 
doesn’t take an argument like the <code>getDoubleAlphabet()</code> function.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Exercise 3: Getting a cipher key</h2>
<p>The <em>cipher key</em> is how far you will shift the letters. By 
using two alphabets, you can have a cipher key that is any integer from 1
 to 25. Don’t count the key at index 26 because that key would shift you
 back to the original message.</p>
<ol start="16">
<li>
<p>Define a function to request a cipher key from the user by entering the following code:</p>
<pre><code class="language-python">def getCipherKey():
    shiftAmount = input( "Please enter a key (whole number from 1-25): ")
    return shiftAmount</code></pre>
</li>
<li>
<p>Save the file.</p>
</li>
</ol>
<hr>
<h2>Exercise 4: Encrypting a message</h2>
<p>So far, the functions have been short and simple. That is usually the
 case when you keep to a specific task inside a function. The <code>encryptMessage</code> function will be a little longer.</p>
<ol start="18">
<li>
<p>Before writing the code, you should plan out the algorithm for encryption as follows:</p>
<blockquote>
<ol>
<li>
<p>Take three arguments: the message, the cipherKey, and the alphabet.</p>
</li>
<li>
<p>Initialize variables.</p>
</li>
<li>
<p>Use a <code>for</code> loop to traverse each letter in the message.</p>
</li>
<li>
<p>For a specific letter, find the position.</p>
</li>
<li>
<p>For a specific letter, determine the new position given the cipher key.</p>
</li>
<li>
<p>If current letter is in the alphabet, append the new letter to the encrypted message.</p>
</li>
<li>
<p>If current letter is not in the alphabet, append the current letter.</p>
</li>
<li>
<p>Return the encrypted message after exhausting all the letters in the message.</p>
</li>
</ol>
</blockquote>
</li>
<li>
<p>In the exercise file, enter the following code, and follow the logic by reviewing the steps of the previous algorithm:</p>
<pre><code class="language-python">def encryptMessage(message, cipherKey, alphabet):
    encryptedMessage = ""
    uppercaseMessage = ""
    uppercaseMessage = message.upper()
    for currentCharacter in uppercaseMessage:
        position = alphabet.find(currentCharacter)
        newPosition = position + int(cipherKey)
        if currentCharacter in alphabet:
            encryptedMessage = encryptedMessage + alphabet[newPosition]
        else:
            encryptedMessage = encryptedMessage + currentCharacter
    return encryptedMessage</code></pre>
</li>
<li>
<p>Save the file.</p>
</li>
</ol>
<hr>
<h2>Exercise 5: Decrypting a message</h2>
<p>Functions are useful because you can reuse them. You will write a <code>decryptMessage()</code> function by reusing the <code>encryptMessage()</code>
 function. For this simple encryption, you can undo the encryption by 
shifting each letter back. Thus, instead of adding the cipher key, you 
will subtract the cipher key. To avoid rewriting most of the logic, you 
will pass in a negative cipher key.</p>
<ol start="21">
<li>
<p>Next, enter the following code, and save the file:</p>
<pre><code class="language-python">def decryptMessage(message, cipherKey, alphabet):
    decryptKey = -1 * int(cipherKey)
    return encryptMessage(message, decryptKey, alphabet)</code></pre>
</li>
</ol>
<hr>
<h2>Exercise 6: Creating a main function</h2>
<p>You have built a collection of user-defined functions that will help 
you write a Caesar cipher program. The main logic of the program will, 
of course, also be contained in a function.</p>
<ol start="22">
<li>
<p>Before you look at the code, plan out your logic:</p>
<blockquote>
<ol>
<li>
<p>Define a string variable to contain the English alphabet.</p>
</li>
<li>
<p>To be able to shift letters, double your alphabet string.</p>
</li>
<li>
<p>Get a message to encrypt from the user.</p>
</li>
<li>
<p>Get a cipher key from the user.</p>
</li>
<li>
<p>Encrypt the message.</p>
</li>
<li>
<p>Decrypt the message.</p>
</li>
</ol>
</blockquote>
</li>
<li>
<p>In the exercise file, enter the following code, and follow the logic by reviewing the steps of the previous algorithm:</p>
<pre><code class="language-python">def runCaesarCipherProgram():
    myAlphabet="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    print(f'Alphabet: {myAlphabet}')
    myAlphabet2 = getDoubleAlphabet(myAlphabet)
    print(f'Alphabet2: {myAlphabet2}')
    myMessage = getMessage()
    print(myMessage)
    myCipherKey = getCipherKey()
    print(myCipherKey)
    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)
    print(f'Encrypted Message: {myEncryptedMessage}')
    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)
    print(f'Decypted Message: {myDecryptedMessage}')</code></pre>
<p>To help with debugging and understanding the program, <code>print()</code> statements were added, but they are not strictly necessary for the program to operate correctly.</p>
</li>
<li>
<p>Save and run the file, and then view the results.</p>
<p>Nothing happens. Why? Recall that a function is a named section of a 
program that performs a specific task. You have not called your 
function.</p>
</li>
<li>
<p>To call the function, add the following line to your <strong>.py</strong> file and save the file:</p>
<pre><code class="language-python">runCaesarCipherProgram()</code></pre>
</li>
<li>
<p>Run the program again. The output should be similar to the following:</p>
<pre><code class="language-python">Alphabet: ABCDEFGHIJKLMNOPQRSTUVWXYZ
Alphabet2: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ
Please enter a message to encrypt: new message
new message
Please enter a key (whole number from 1-25): 4
4
Encrypted Message: RIA QIWWEKI
Decypted Message: NEW MESSAGE</code></pre>
</li>
<li>
<p>Re-run the program with different inputs.</p>
</li>
</ol>
<p>Congratulations! You have worked with user-defined functions and implemented an encryption program!</p>
<hr>
<h2>End Lab</h2>
<p><i class="fas fa-flag-checkered"></i> Congratulations! You have completed the lab.</p>
<ol start="28">
<li>
<p>Choose <i class="fas fa-square-full fa-xs"></i> <strong>End Lab</strong> at the top of this page, and then select <span id="ssb_blue">Yes</span> to confirm that you want to end the lab.</p>
<p>A panel indicates that <em>DELETE has been initiated... You may close this message box now.</em></p>
</li>
<li>
<p>A message <em>Ended AWS Lab Successfully</em> is briefly displayed, indicating that the lab has ended.
​</p>
</li>
</ol>
<h2>Additional Resources</h2>
<p>For more information about AWS Training and Certification, see <a href="https://aws.amazon.com/training/">https://aws.amazon.com/training/</a>.</p>
<p><em>Your feedback is welcome and appreciated.</em>
If you would like to share any suggestions or corrections, please provide the details in our <a href="https://support.aws.amazon.com/#/contacts/aws-training">AWS Training and Certification Contact Form</a>.</p>
<p><em>© 2022 Amazon Web Services, Inc. and its affiliates. All rights 
reserved. This work may not be reproduced or redistributed, in whole or 
in part, without prior written permission from Amazon Web Services, Inc.
 Commercial copying, lending, or selling is prohibited.</em></p>
<!-- IMPORTANT: Do not delete the radio buttons below. They are required in order for the mulitple tabs at the bottom of the generated HTML page to work properly and will be rendered invisible through the mcq-invisible-radio-buttons.css style sheet. -->
<input class="voc_radio" type="radio" id="grp-13-1" value="13 - Caesar Cipher-1" name="grp-13" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-13-1" style="font-weight: 400">Yes</label><br>
<input class="voc_radio" type="radio" id="grp-13-2" value="13 - Caesar Cipher-2" name="grp-13" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-13-2" style="font-weight: 400">No</label><br>
<div class="voc_rubric">&lt; Rubric: 13 - Caesar Cipher | Points: 0 &gt;</div><br><div id="grp-13-hint" hidden=""></div><br><a class="btn btn-primary btnPrevious">Previous</a><a class="btn btn-primary btnNext" style="margin-left: 4px">Next</a></div>
<div id="grp-14" class="tab-pane">
<h1>Creating File Handlers and Modules for Retrieving Information about Insulin</h1>
<hr>
<h2>Lab overview</h2>
<p>In this lab, you will:</p>
<ul>
<li>Create a module</li>
<li>Open a file and load the JSON data it contains using the built-in JSON module of Python</li>
<li>Parse the JSON structure to access insulin data</li>
<li>Calculate the rough molecular weight of human insulin using given code (similar to the lab <strong>Working with the String Sequence and Numeric Weight of Insulin in Python</strong>)</li>
</ul>
<hr>
<h2>Estimated completion time</h2>
<p>25 minutes</p>
<hr>
<h2>Accessing the AWS Cloud9 IDE</h2>
<ol>
<li>
<p>Start your lab environment by going to the top of these instructions and choosing <strong>Start Lab</strong>.</p>
<p>A <strong>Start Lab</strong> panel opens, displaying the lab status.</p>
</li>
<li>
<p>Wait until you see the message <em>Lab status: ready</em>, and then close the <strong>Start Lab</strong> panel by choosing the <strong>X</strong>.</p>
</li>
<li>
<p>At the top of these instructions, choose <strong>AWS</strong>.</p>
<p>The AWS Management Console opens in a new browser tab. The system automatically logs you in.</p>
<blockquote>
<p><strong>Note:</strong> If a new browser tab does not open, a banner 
or icon at the top of your browser typically indicates that your browser
 is preventing the site from opening pop-up windows. Choose the banner 
or icon, and choose <strong>Allow pop ups</strong>.</p>
</blockquote>
</li>
<li>
<p>In the AWS Management Console, choose <strong>Services</strong> &gt; <strong>Cloud9</strong>. In the <strong>Your environments</strong> panel, locate the <strong>reStart-python-cloud9</strong> card, and choose <strong>Open IDE</strong>.</p>
<p>The AWS Cloud9 environment opens.</p>
<blockquote>
<p><strong>Note:</strong> If a pop-up window opens with the message <em>.c9/project.settings have been changed on disk</em>, choose <strong>Discard</strong> to ignore it. Likewise, if a dialog window prompts you to <em>Show third-party content</em>, choose <strong>No</strong> to decline.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Creating your Python exercise File</h2>
<ol start="5">
<li>
<p>From the menu bar, choose <strong>File -&gt; New from template -&gt; Python File</strong>.</p>
<p>This action creates an untitled file.</p>
</li>
<li>
<p>Delete the sample code from the template file.</p>
</li>
<li>
<p>Choose <strong>File -&gt; Save As...</strong>, provide a suitable name for the exercise file (for example, calc_weight_json.py), and save it under the <strong>/home/ec2-user/environment</strong> directory.</p>
</li>
<li>
<p>Create a second file and name it jsonFileHandler.py.</p>
<blockquote>
<p><strong>Note</strong>: The <strong>.py</strong> is the extension for Python files.</p>
</blockquote>
</li>
<li>
<p>Create a directory called <strong>files</strong>.</p>
</li>
</ol>
<hr>
<h2>Accessing the terminal session</h2>
<ol start="10">
<li>
<p>In your AWS Cloud9 IDE, choose the <strong>+</strong> icon and select <strong>New Terminal</strong>.</p>
<p>A terminal session opens.</p>
</li>
<li>
<p>To display the present working directory, enter <code>pwd</code>. This command points to <strong>/home/ec2-user/environment</strong>.</p>
</li>
<li>
<p>In this directory, locate the file that you created in the previous section.</p>
</li>
</ol>
<hr>
<h2>Exercise 1: Creating the JSON molecules data file</h2>
<!-- KB: Is there some text missing below? If not, let's adjust to the following so that it's a complete sentence rather than ending with the ellipses:-->
<!--This JSON document stores all the information of previous lab, such as the insulin molecules and the numeric weights of insulin.-->
<p>This JSON document stores all the information of previous lab, such 
as the insulin molecules, the numeric weights of the amino acids and the
 actual weight of the insulin molecule  </p>
<ol start="13">
<li>
<p>From the menu bar, choose <strong>File -&gt; New File</strong>.</p>
</li>
<li>
<p>Copy and paste the following code into this newly created file:</p>
<pre><code class="language-python">{
   "molecules":{
      "lsInsulin":"malwmrllpllallalwgpdpaaa",
      "bInsulin":"fvnqhlcgshlvealylvcgergffytpkt",
      "aInsulin":"giveqcctsicslyqlenycn",
      "cInsulin":"rreaedlqvgqvelgggpgagslqplalegslqkr"
   },
   "weights":{
      "A":89.09,
      "C":121.16,
      "D":133.10,
      "E":147.13,
      "F":165.19,
      "G":75.07,
      "H":155.16,
      "I":131.17,
      "K":146.19,
      "L":131.17,
      "M":149.21,
      "N":132.12,
      "P":115.13,
      "Q":146.15,
      "R":174.20,
      "S":105.09,
      "T":119.12,
      "V":117.15,
      "W":204.23,
      "Y":181.19
   },
   "molecularWeightInsulinActual":5807.63
}</code></pre>
</li>
<li>
<p>To save the file as <strong>insulin.json</strong> in the <strong>files</strong> folder, select <strong>File  -&gt; Save As...</strong>.</p>
</li>
<li>
<p>In the <strong>Save As</strong> pop-up window for <strong>Filename:</strong>, enter <code>insulin.json</code></p>
</li>
<li>
<p>For <strong>Folder:</strong> enter <code>files</code> or choose the <strong>files</strong> folder.</p>
</li>
</ol>
<hr>
<h2>Exercise 2: Creating the JSON file handler module</h2>
<p>In this task, you create a module that reads the JSON file and returns the JSON document.</p>
<ol start="18">
<li>
<p>Choose the <strong>jsonFileHandler.py</strong> file.  </p>
</li>
<li>
<p>Import JSON to begin your work:</p>
<pre><code class="language-python">import json</code></pre>
</li>
<li>
<p>Define the function that will read the file:</p>
<pre><code class="language-python">def readJsonFile(fileName):</code></pre>
</li>
<li>
<p>Below the file definition, add a data variable as an empty string:</p>
<pre><code class="language-python">data=""         </code></pre>
</li>
<li>
<p>For the body of the function, open the json file using the <strong>open</strong> function, and parse the file using <strong>json.load</strong>.</p>
<pre><code class="language-python">def readJsonFile(fileName):
    data = ""
    with open('files/insulin.json') as json_file:
        data = json.load(json_file)
    return data</code></pre>
<p><strong>open</strong> returns a file handler to the <strong>files/insulin.json</strong> file.</p>
<p><strong>json.load</strong> reads the JSON file and returns the content as a Python dictionary.</p>
</li>
<li>
<p>Add a <strong>try/except</strong> block to make this function more reliable:</p>
<pre><code class="language-python">import json

def readJsonFile(fileName):
    data = ""
    try:
        with open(fileName) as json_file:
            data = json.load(json_file)
    except IOError:
        print("Could not read file")
    return data</code></pre>
<p>In case the file cannot be opened, the program will display the error <em>Could not read file</em>.</p>
<p>The returned <strong>data</strong> string is empty in case the open file method fails.</p>
<p>You created a <strong>jsonFileHandle</strong> module that you can import in other Python files to access the <strong>readJsonFile</strong> function.</p>
</li>
</ol>
<hr>
<h2>Exercise 3: Creating the main program</h2>
<p>You create the main program that parses the JSON data and calculates the molecular weight as you did in a previous lab.</p>
<ol start="24">
<li>
<p>First, import the <strong>jsonFileHandle</strong> module. Open the <strong>calc_weight_json.py</strong> file and add the following:</p>
<pre><code class="language-python">import jsonFileHandler</code></pre>
</li>
<li>
<p>Retrieve the the JSON data and store it in a <strong>data</strong> variable.</p>
<pre><code class="language-python">data = jsonFileHandler.readJsonFile('files/insulin.json')</code></pre>
</li>
<li>
<p>Test if the returned data is not empty and obtain the insulin data.</p>
<pre><code class="language-python">if data != "" :
    bInsulin = data['molecules']['bInsulin']
    aInsulin = data['molecules']['aInsulin']
    insulin = bInsulin + aInsulin
    molecularWeightInsulinActual = data['molecularWeightInsulinActual']
    print('bInsulin: ' + bInsulin)
    print('aInsulin: ' + aInsulin)
    print('molecularWeightInsulinActual: ' + str(molecularWeightInsulinActual))
else:
    print("Error. Exiting program")</code></pre>
</li>
<li>
<p>You can run the program to see if the data is well retrieved. The results should be as follows:</p>
<pre><code class="language-python">bInsulin: fvnqhlcgshlvealylvcgergffytpkt
aInsulin: giveqcctsicslyqlenycn
molecularWeightInsulinActual: 5807.63</code></pre>
</li>
<li>
<p>You can also test what happens if the file is not found. For example, change the name of the file to <strong>'files/insuline.json'</strong>, and run the program. You will get the following message:</p>
<pre><code class="language-python">Could not read file
Error. Exiting program</code></pre>
</li>
<li>
<p>Undo the last change so that the file is named <strong>files/insulin.json</strong> again.</p>
</li>
<li>
<p>In the <strong>if</strong> section of the code below the last <strong>print</strong>, add the following code:</p>
<pre><code class="language-python"># Calculating the molecular weight of insulin  
# Getting a list of the amino acid (AA) weights  
aaWeights = data['weights']
# Count the number of each amino acids  
aaCountInsulin = ({x: float(insulin.upper().count(x)) for x in ['A','C','D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R','S', 'T','V', 'W', 'Y']})  
# Multiply the count by the weights  
molecularWeightInsulin = sum({x: (aaCountInsulin[x]*aaWeights[x]) for x in
['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R','S', 'T', 'V', 'W', 'Y']}.values())  
print("The rough molecular weight of insulin: " +
str(molecularWeightInsulin))
print("Percent error: " + str(((molecularWeightInsulin - molecularWeightInsulinActual)/molecularWeightInsulinActual)*100))</code></pre>
<p><img src="README_data/program_full_cloud9.png" alt=""></p>
</li>
<li>
<p>Run the program. You will get the following:</p>
<pre><code class="language-python">bInsulin: fvnqhlcgshlvealylvcgergffytpkt
aInsulin: giveqcctsicslyqlenycn
molecularWeightInsulinActual: 5807.63
The rough molecular weight of insulin: 6696.420000000001
Percent error: 15.30383306099047</code></pre>
</li>
</ol>
<hr>
<h2>End Lab</h2>
<p><i class="fas fa-flag-checkered"></i> Congratulations! You have completed the lab.</p>
<ol start="32">
<li>
<p>Choose <i class="fas fa-square-full fa-xs"></i> <strong>End Lab</strong> at the top of this page, and then select <span id="ssb_blue">Yes</span> to confirm that you want to end the lab.</p>
<p>A panel indicates that <em>DELETE has been initiated... You may close this message box now.</em></p>
</li>
<li>
<p>A message <em>Ended AWS Lab Successfully</em> is briefly displayed, indicating that the lab has ended.
​</p>
</li>
</ol>
<h2>Additional Resources</h2>
<p>For more information about AWS Training and Certification, see <a href="https://aws.amazon.com/training/">https://aws.amazon.com/training/</a>.</p>
<p><em>Your feedback is welcome and appreciated.</em>
If you would like to share any suggestions or corrections, please provide the details in our <a href="https://support.aws.amazon.com/#/contacts/aws-training">AWS Training and Certification Contact Form</a>.</p>
<p><em>© 2022 Amazon Web Services, Inc. and its affiliates. All rights 
reserved. This work may not be reproduced or redistributed, in whole or 
in part, without prior written permission from Amazon Web Services, Inc.
 Commercial copying, lending, or selling is prohibited.</em></p>
<!-- IMPORTANT: Do not delete the radio buttons below. They are required in order for the mulitple tabs at the bottom of the generated HTML page to work properly and will be rendered invisible through the mcq-invisible-radio-buttons.css style sheet. -->
<input class="voc_radio" type="radio" id="grp-14-1" value="14 - File Handlers-1" name="grp-14" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-14-1" style="font-weight: 400">Yes</label><br>
<input class="voc_radio" type="radio" id="grp-14-2" value="14 - File Handlers-2" name="grp-14" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-14-2" style="font-weight: 400">No</label><br>
<div class="voc_rubric">&lt; Rubric: 14 - File Handlers | Points: 0 &gt;</div><br><div id="grp-14-hint" hidden=""></div><br><a class="btn btn-primary btnPrevious">Previous</a><a class="btn btn-primary btnNext" style="margin-left: 4px">Next</a></div>
<div id="grp-15" class="tab-pane">
<h1>Introducing System Administration with Python</h1>
<hr>
<h2>Lab overview</h2>
<p>You can use Linux to do many administrative tasks from the terminal, 
or the Bash command line. Python provides several modules that you can 
also use to run commands on the command line. In this lab, you will use <code>os.system()</code> and <code>subprocess.run()</code> to run Bash commands from Python.</p>
<p><strong>In this lab, you will:</strong></p>
<ul>
<li>Use <code>os.system()</code> to run a Bash command</li>
<li>Use <code>subprocess.run()</code> to run Bash commands</li>
</ul>
<hr>
<h2>Estimated completion time</h2>
<p>30 minutes</p>
<hr>
<h2>Accessing the AWS Cloud9 IDE</h2>
<ol>
<li>
<p>Start your lab environment by going to the top of these instructions and choosing <strong>Start Lab</strong>.</p>
<p>A <strong>Start Lab</strong> panel opens, displaying the lab status.</p>
</li>
<li>
<p>Wait until you see the message <em>Lab status: ready</em>, and then close the <strong>Start Lab</strong> panel by choosing the <strong>X</strong>.</p>
</li>
<li>
<p>At the top of these instructions, choose <strong>AWS</strong>.</p>
<p>The AWS Management Console opens in a new browser tab. The system automatically logs you in.</p>
<blockquote>
<p><strong>Note:</strong> If a new browser tab does not open, a banner 
or icon at the top of your browser typically indicates that your browser
 is preventing the site from opening pop-up windows. Choose the banner 
or icon, and choose <strong>Allow pop ups</strong>.</p>
</blockquote>
</li>
<li>
<p>In the AWS Management Console, choose <strong>Services</strong> &gt; <strong>Cloud9</strong>. In the <strong>Your environments</strong> panel, locate the <strong>reStart-python-cloud9</strong> card, and choose <strong>Open IDE</strong>.</p>
<p>The AWS Cloud9 environment opens.</p>
<blockquote>
<p><strong>Note:</strong> If a pop-up window opens with the message <em>.c9/project.settings have been changed on disk</em>, choose <strong>Discard</strong> to ignore it. Likewise, if a dialog window prompts you to <em>Show third-party content</em>, choose <strong>No</strong> to decline.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Creating your Python exercise file</h2>
<ol start="5">
<li>
<p>From the menu bar, choose <strong>File &gt; New From Template &gt; Python File</strong>.</p>
<p>This action creates an untitled file.</p>
</li>
<li>
<p>Delete the sample code from the template file.</p>
</li>
<li>
<p>Choose <strong>File &gt; Save As...</strong>, and provide a suitable name for the exercise file (for example, <em>sys-admin.py</em>) and save it under the <strong>/home/ec2-user/environment</strong> directory.</p>
</li>
</ol>
<hr>
<h2>Accessing the terminal session</h2>
<ol start="8">
<li>
<p>In your AWS Cloud9 IDE, choose the <strong>+</strong> icon and select <strong>New Terminal</strong>.</p>
<p>A terminal session opens.</p>
</li>
<li>
<p>To display the present working directory, enter <code>pwd</code>. This command points to <strong>/home/ec2-user/environment</strong>.</p>
</li>
<li>
<p>In this directory, you should also be able to locate the file you created in the previous section.</p>
</li>
</ol>
<hr>
<h2>Exercise 1: Using os.system</h2>
<p>Python has several modules to allow you to run Bash commands from Python. In this exercise, you will use <code>os.system()</code> to run the Bash command <code>ls</code>, which shows the directory contents.</p>
<ol start="11">
<li>
<p>From the navigation pane of the IDE, choose the file that you created in the previous <strong>Creating your Python exercise file</strong> section.</p>
</li>
<li>
<p>Import the <code>os</code> module:</p>
<pre><code class="language-python">import os</code></pre>
</li>
<li>
<p>Recall that a module contains functions that other developers have written. The function <code>os.system()</code> takes a string argument. To run a Bash command, enter the following command:</p>
<pre><code class="language-python">os.system("ls")</code></pre>
</li>
<li>
<p>Save the file in the Cloud 9 IDE and select <strong>Run</strong> <i class="fas fa-play-circle" style="color:#ADE422;"></i> to run the file.</p>
</li>
<li>
<p>The output should show the contents of your current directory. Verify
 that your output is similar to the following example. Note that the 
contents of your directory might be different.</p>
<pre><code class="language-python">sys-admin.py README.md</code></pre>
</li>
</ol>
<hr>
<h2>Exercise 2: Using subprocess.run</h2>
<p>Though <code>os.system()</code> is simple to use because it takes a string argument, it is recommended that you use the more powerful <code>subprocess.run()</code> function. You can use the <code>subprocess</code> module to spawn new processes, connect to input/output/error pipes, and obtain error codes. The <code>subprocess.run()</code> function can take many new arguments, but those additional arguments are optional.</p>
<p>The full list of arguments for <code>subprocess.run()</code> looks like the following list:</p>
<pre><code class="language-python">subprocess.run(args, *, stdin=None, input=None, stdout=None, stderr=None, capture_output=False, shell=False, cwd=None, timeout=None, check=False, encoding=None, errors=None, text=None, env=None, universal_newlines=None)</code></pre>
<ol start="16">
<li>
<p>For this lab, you will keep the code simple.</p>
</li>
<li>
<p>In the file that you created for this lab, import the <code>subprocess</code> module:</p>
<pre><code class="language-python">import subprocess</code></pre>
</li>
<li>
<p>To run the <code>ls</code> Bash command, enter the following command:</p>
<pre><code class="language-python">subprocess.run(["ls"])</code></pre>
</li>
<li>
<p>Save the file in the Cloud 9 IDE and select <strong>Run</strong> <i class="fas fa-play-circle" style="color:#ADE422;"></i> to run the file.</p>
</li>
<li>
<p>Confirm that your output lists the file in the directory, similar to 
the following example. (The contents of your directory might be 
different.)</p>
<pre><code class="language-python">sys-admin.py  sys-admin_2.py  README.md</code></pre>
<blockquote>
<p>Note that the output looks the same as the output of <code>os.system()</code> in Exercise 1, but you are using the <code>subprocess</code> module instead of the <code>os</code> module.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Exercise 3: Using subprocess.run with two arguments</h2>
<p>In Python, the square brackets are list data types, which means that <code>run()</code> can take a list of arguments. Continue to add to the Python script.</p>
<ol start="21">
<li>
<p>In the lab file for this exercise, modify the final line of the script to include an additional argument:</p>
<pre><code class="language-python">subprocess.run(["ls","-l"])</code></pre>
</li>
<li>
<p>The <code>"-l"</code> is an argument that tells the <code>ls</code> command to use a long-listing format.</p>
</li>
<li>
<p>Save the file in the Cloud 9 IDE and select <strong>Run</strong> <i class="fas fa-play-circle" style="color:#ADE422;"></i> to run the file again.</p>
</li>
<li>
<p>Confirm that your output is similar to the following example.</p>
<pre><code class="language-python">total 12
-rw-r--r-- 1 ec2-user ec2-user  55 Apr 16 20:20 sys-admin.py
-rw-r--r-- 1 ec2-user ec2-user 343 Apr 16 19:07 sys-admin_2.py
-rw-r--r-- 1 ec2-user ec2-user 569 Apr  6 02:17 README.md</code></pre>
</li>
</ol>
<hr>
<h2>Exercise 4: Using subprocess.run with three arguments</h2>
<p>You will now call <code>subprocess.run()</code> with three arguments. The third argument will be a directory name.</p>
<ol start="25">
<li>
<p>Return to your Python file and modify the final line of the script:</p>
<pre><code class="language-python">subprocess.run(["ls","-l","README.md"])</code></pre>
</li>
<li>
<p>Save the file in the Cloud 9 IDE and select <strong>Run</strong> <i class="fas fa-play-circle" style="color:#ADE422;"></i> the file.</p>
</li>
<li>
<p>Confirm that the expected output is similar to the following example.</p>
<pre><code class="language-bash">-rw-r--r-- 1 ec2-user ec2-user 569 Apr  6 02:17 README.md</code></pre>
</li>
</ol>
<hr>
<h2>Exercise 5: Retrieving system information</h2>
<p>The <code>subprocess.run()</code> function is powerful because you can use it to run any Bash command. In this exercise, you will call the <code>uname</code> command to get system information.</p>
<ol start="28">
<li>
<p>Return to your Python file and enter the following code:</p>
<pre><code class="language-python">command="uname"
commandArgument="-a"
print(f'Gathering system information with command: {command} {commandArgument}')
subprocess.run([command,commandArgument])</code></pre>
</li>
<li>
<p>Save the file in the Cloud 9 IDE and select <strong>Run</strong> <i class="fas fa-play-circle" style="color:#ADE422;"></i> to run the file.</p>
</li>
<li>
<p>Confirm that the expected output is similar to the following example.</p>
<pre><code class="language-python">Gathering system information with command: uname -a                          
Linux ip-172-31-29-181 4.4.0-139-generic #165-Ubuntu SMP Wed Oct 24 10:58:50
UTC 2018 x86_64 x86_64 x86_64 GNU/Linux </code></pre>
</li>
</ol>
<hr>
<h2>Exercise 6: Retrieving information about disk space</h2>
<p>To emphasize that <code>subprocess.run()</code> allows you to run any command, you will run the <strong>df</strong> command to get disk information.</p>
<ol start="31">
<li>
<p>Return to your Python file and enter the following code:</p>
<pre><code class="language-python">command="ps"
commandArgument="-x"
print(f'Gathering active process information with command: {command} {commandArgument}')
subprocess.run([command,commandArgument])</code></pre>
</li>
<li>
<p>Save the file in the Cloud 9 IDE and select <strong>Run</strong> <i class="fas fa-play-circle" style="color:#ADE422;"></i> to run the file.</p>
</li>
<li>
<p>Confirm that the expected output is similar to the following example.</p>
<pre><code class="language-python">Gathering active process information with command: ps -x                       
  PID TTY      STAT   TIME COMMAND                                           
18976 pts/459  S+     0:00 python3.6 lab_15_2.py                               
18977 pts/459  R+     0:00 ps -x                                             
21139 pts/459  S      0:00 /bin/bash -c export OLD_HOME=/home/ccc_4dfa91ec5a_
21164 pts/459  S      0:00 bash --rcfile /home/ccc_4dfa91ec5a_45122/.termrc -</code></pre>
<p><i class="fas fa-flag-checkered"></i> Congratulations! You have called Bash commands from Python.</p>
</li>
</ol>
<hr>
<h2>End Lab</h2>
<p><i class="fas fa-flag-checkered"></i> Congratulations! You have completed the lab.</p>
<ol start="34">
<li>
<p>Choose <i class="fas fa-square-full fa-xs"></i> <strong>End Lab</strong> at the top of this page, and then select <span id="ssb_blue">Yes</span> to confirm that you want to end the lab.</p>
<p>A panel indicates that <em>DELETE has been initiated... You may close this message box now.</em></p>
</li>
<li>
<p>A message <em>Ended AWS Lab Successfully</em> is briefly displayed, indicating that the lab has ended.
​</p>
</li>
</ol>
<h2>Additional Resources</h2>
<p>For more information about AWS Training and Certification, see <a href="https://aws.amazon.com/training/">https://aws.amazon.com/training/</a>.</p>
<p><em>Your feedback is welcome and appreciated.</em>
If you would like to share any suggestions or corrections, please provide the details in our <a href="https://support.aws.amazon.com/#/contacts/aws-training">AWS Training and Certification Contact Form</a>.</p>
<p><em>© 2022 Amazon Web Services, Inc. and its affiliates. All rights 
reserved. This work may not be reproduced or redistributed, in whole or 
in part, without prior written permission from Amazon Web Services, Inc.
 Commercial copying, lending, or selling is prohibited.</em></p>
<!-- IMPORTANT: Do not delete the radio buttons below. They are required in order for the mulitple tabs at the bottom of the generated HTML page to work properly and will be rendered invisible through the mcq-invisible-radio-buttons.css style sheet. -->
<input class="voc_radio" type="radio" id="grp-15-1" value="15 - System Administration-1" name="grp-15" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-15-1" style="font-weight: 400">Yes</label><br>
<input class="voc_radio" type="radio" id="grp-15-2" value="15 - System Administration-2" name="grp-15" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-15-2" style="font-weight: 400">No</label><br>
<div class="voc_rubric">&lt; Rubric: 15 - System Administration | Points: 0 &gt;</div><br><div id="grp-15-hint" hidden=""></div><br><a class="btn btn-primary btnPrevious">Previous</a><a class="btn btn-primary btnNext" style="margin-left: 4px">Next</a></div>
<div id="grp-16" class="tab-pane">
<!-- KB: In the file with June's edits, the title of the lab is "Using the Python Debugger." Should the title be changed here or be left as is? -->
<h1>Using the Debugger</h1>
<hr>
<h2>Lab overview</h2>
<!-- JY: The original introductory content for this lab seems out of sequence with the final lab, which explains what a debugger is. I added that introductory information here, and then recapitulated it in the final lab.-->
<p>A <em>software bug</em> refers to an error, flaw, or failure in a computer program that causes an incorrect or unexpected result. A <em>debugger</em>
 is a computer program that is used to test and find bugs (debug) other 
programs. You can use a debugger to step through the code. The Python 
Debugger (pdb) is an interactive source code debugger for Python 
programs. In this lab, you will use the pdb to step through the scripts 
you wrote in previous labs.</p>
<p>In this lab, you will:</p>
<ul>
<li>Explore the basic features of the Python Debugger</li>
<li>Use the Python Debugger to step through Python scripts</li>
</ul>
<hr>
<h2>Estimated completion time</h2>
<p>30 minutes</p>
<hr>
<h2>Accessing the AWS Cloud9 IDE</h2>
<ol>
<li>
<p>Start your lab environment by going to the top of these instructions and choosing <strong>Start Lab</strong>.</p>
<p>A <strong>Start Lab</strong> panel opens, displaying the lab status.</p>
</li>
<li>
<p>Wait until you see the message <em>Lab status: ready</em>, and then close the <strong>Start Lab</strong> panel by choosing the <strong>X</strong>.</p>
</li>
<li>
<p>At the top of these instructions, choose <strong>AWS</strong>.</p>
<p>The AWS Management Console opens in a new browser tab. The system automatically logs you in.</p>
<blockquote>
<p><strong>Note:</strong> If a new browser tab does not open, a banner 
or icon at the top of your browser typically indicates that your browser
 is preventing the site from opening pop-up windows. Choose the banner 
or icon, and choose <strong>Allow pop ups</strong>.</p>
</blockquote>
</li>
<li>
<p>In the AWS Management Console, choose <strong>Services</strong> &gt; <strong>Cloud9</strong>. In the <strong>Your environments</strong> panel, locate the <strong>reStart-python-cloud9</strong> card, and choose <strong>Open IDE</strong>.</p>
<p>The AWS Cloud9 environment opens.</p>
<blockquote>
<p><strong>Note:</strong> If a pop-up window opens with the message <em>.c9/project.settings have been changed on disk</em>, choose <strong>Discard</strong> to ignore it. Likewise, if a dialog window prompts you to <em>Show third-party content</em>, choose <strong>No</strong> to decline.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Creating your Python exercise File</h2>
<ol start="5">
<li>
<p>From the menu bar, choose <strong>File -&gt; New from template -&gt; Python File</strong>.</p>
<p>This actions creates an untitled file.</p>
</li>
<li>
<p>Delete the sample code from the template file.</p>
</li>
<li>
<p>Choose <strong>File -&gt; Save As...</strong>, provide a suitable name for the exercise file (for example, <em>debugger.py</em>), and save it under the <strong>/home/ec2-user/environment</strong> directory.</p>
<blockquote>
<p><strong>Note</strong>: The <strong>.py</strong> is the extension for Python files.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Accessing the terminal session</h2>
<ol start="8">
<li>
<p>In your AWS Cloud9 IDE, choose the <strong>+</strong> icon and select <strong>New Terminal</strong>.</p>
<p>A terminal session opens.</p>
</li>
<li>
<p>To display the present working directory, enter <code>pwd</code>. This command points to <strong>/home/ec2-user/environment</strong>.</p>
</li>
<li>
<p>In this directory, locate the file that you created in the previous section.</p>
</li>
</ol>
<hr>
<h2>Exercise 1: Exploring the basic features of the AWS Cloud9 Python Debugger</h2>
<p>Cloud9 offers an interactive source code debugger for several 
languages, including Python. In this exercise, you cover some of the 
basic commands for debugging the <strong>debugger.py</strong> file.</p>
<p>Complete the following steps to explore the basic features of the Python Debugger.</p>
<ol start="11">
<li>
<p>From the navigation pane of the IDE, choose the <strong>.py</strong> file that you created in the previous <em>Creating your Python exercise file</em> section. Copy the following code and paste it in the file:</p>
<pre><code class="language-python">name = "John"
print("Hello " + name + ".")
age = 40
print(name + " is " + str(age) + " years old.")</code></pre>
</li>
<li>
<p>On the right of the interface, choose the <strong>Debugger</strong> tab to open the debugger.</p>
<p><img src="README_data/open_debugger.png" alt="Open Debugger"></p>
</li>
<li>
<p>Choose the gutter to the left of the number 1 to add a break point, 
and choose the gutter to the left of the number 4 to add another break 
point.</p>
<p>Your console should look similar to the following figure.</p>
<p><img src="README_data/add_bp.png" alt="Add_Break points"></p>
</li>
<li>
<p>In the <strong>Debugger</strong> window, add two watch expressions: <strong>name</strong> and <strong>age</strong>.</p>
<p><img src="README_data/watch_expressions.png" alt="Watch Expressions"></p>
</li>
<li>
<p>To run the program, choose the <strong>Run</strong> button. This opens a runner tab and runs the program.</p>
</li>
<li>
<p>On the runner tab, choose the <strong>Run in Debug Mode</strong> button.</p>
<p><img src="README_data/debug_mode.png" alt="Activate Debug"></p>
</li>
<li>
<p>Run the program again. The program stops at the break point.</p>
<p><img src="README_data/program_stops_step1.png" alt="Stop break point"></p>
</li>
<li>
<p>Choose the <strong>Step Over</strong> icon at the top of the <strong>Debugger</strong> window.</p>
</li>
<li>
<p>Line 1 is run, and the value of the <strong>name</strong> variable is displayed in the <strong>Debugger</strong> window.</p>
<p><img src="README_data/name_variable_value.png" alt="Name Variable Value"></p>
</li>
<li>
<p>Choose the blue arrow at the top of the <strong>Debugger</strong> window. The program resumes and stops at line 4 where the other break point is set. The value of the <strong>age</strong> variable is displayed.</p>
<p><img src="README_data/variables_values.png" alt="variables_values"></p>
</li>
<li>
<p>Choose the blue arrow at the top of the <strong>Debugger</strong> window to resume and end the program.</p>
</li>
</ol>
<hr>
<h2>Exercise 2: Using the Python Debugger</h2>
<p>Using the debugging basics you learned in Exercise 1, try stepping 
through some of the other labs to practice using the Python Debugger.</p>
<p>Congratulations! You have used some of the basic features of the Python Debugger.</p>
<hr>
<h2>End Lab</h2>
<p><i class="fas fa-flag-checkered"></i> Congratulations! You have completed the lab.</p>
<ol start="22">
<li>
<p>Choose <i class="fas fa-square-full fa-xs"></i> <strong>End Lab</strong> at the top of this page, and then select <span id="ssb_blue">Yes</span> to confirm that you want to end the lab.</p>
<p>A panel indicates that <em>DELETE has been initiated... You may close this message box now.</em></p>
</li>
<li>
<p>A message <em>Ended AWS Lab Successfully</em> is briefly displayed, indicating that the lab has ended.
​</p>
</li>
</ol>
<h2>Additional Resources</h2>
<p>For more information about AWS Training and Certification, see <a href="https://aws.amazon.com/training/">https://aws.amazon.com/training/</a>.</p>
<p><em>Your feedback is welcome and appreciated.</em>
If you would like to share any suggestions or corrections, please provide the details in our <a href="https://support.aws.amazon.com/#/contacts/aws-training">AWS Training and Certification Contact Form</a>.</p>
<p><em>© 2022 Amazon Web Services, Inc. and its affiliates. All rights 
reserved. This work may not be reproduced or redistributed, in whole or 
in part, without prior written permission from Amazon Web Services, Inc.
 Commercial copying, lending, or selling is prohibited.</em></p>
<!-- IMPORTANT: Do not delete the radio buttons below. They are required in order for the mulitple tabs at the bottom of the generated HTML page to work properly and will be rendered invisible through the mcq-invisible-radio-buttons.css style sheet. -->
<input class="voc_radio" type="radio" id="grp-16-1" value="16 - Debugger-1" name="grp-16" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-16-1" style="font-weight: 400">Yes</label><br>
<input class="voc_radio" type="radio" id="grp-16-2" value="16 - Debugger-2" name="grp-16" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-16-2" style="font-weight: 400">No</label><br>
<div class="voc_rubric">&lt; Rubric: 16 - Debugger | Points: 0 &gt;</div><br><div id="grp-16-hint" hidden=""></div><br><a class="btn btn-primary btnPrevious">Previous</a><a class="btn btn-primary btnNext" style="margin-left: 4px">Next</a></div>
<div id="grp-17" class="tab-pane">
<h1>Debugging the Caesar Cipher Program</h1>
<hr>
<h2>Lab overview</h2>
<p>Recall that a debugger is a computer program that is used to test and
 find bugs (debug) other programs. In this lab, you will use the Python 
Debugger (pdb) to find and fix bugs in a Python program.</p>
<p>In this lab, you will:</p>
<ul>
<li>Use the Python Debugger</li>
<li>Debug the different versions of the Caesar cipher program that you created in a previous lab</li>
</ul>
<hr>
<h2>Estimated completion time</h2>
<p>60 minutes</p>
<hr>
<h2>Accessing the AWS Cloud9 IDE</h2>
<ol>
<li>
<p>Start your lab environment by going to the top of these instructions and choosing <strong>Start Lab</strong>.</p>
<p>A <strong>Start Lab</strong> panel opens, displaying the lab status.</p>
</li>
<li>
<p>Wait until you see the message <em>Lab status: ready</em>, and then close the <strong>Start Lab</strong> panel by choosing the <strong>X</strong>.</p>
</li>
<li>
<p>At the top of these instructions, choose <strong>AWS</strong>.</p>
<p>The AWS Management Console opens in a new browser tab. The system automatically logs you in.</p>
<blockquote>
<p><strong>Note:</strong> If a new browser tab does not open, a banner 
or icon at the top of your browser typically indicates that your browser
 is preventing the site from opening pop-up windows. Choose the banner 
or icon, and choose <strong>Allow pop ups</strong>.</p>
</blockquote>
</li>
<li>
<p>In the AWS Management Console, choose <strong>Services</strong> &gt; <strong>Cloud9</strong>. In the <strong>Your environments</strong> panel, locate the <strong>reStart-python-cloud9</strong> card, and choose <strong>Open IDE</strong>.</p>
<p>The AWS Cloud9 environment opens.</p>
<blockquote>
<p><strong>Note:</strong> If a pop-up window opens with the message <em>.c9/project.settings have been changed on disk</em>, choose <strong>Discard</strong> to ignore it. Likewise, if a dialog window prompts you to <em>Show third-party content</em>, choose <strong>No</strong> to decline.</p>
</blockquote>
</li>
</ol>
<hr>
<h2>Creating your Python exercise file</h2>
<ol start="5">
<li>From the menu bar, choose <strong>File &gt; New From Template &gt; Python File</strong></li>
<li>Delete the sample code from the template file.</li>
<li>Choose <strong>File &gt; Save As...</strong>, and provide a suitable name for the exercise file (for example, <em>debug-caesar-1.py</em>) and save it under the  <strong>/home/ec2-user/environment</strong> directory.</li>
</ol>
<hr>
<h2>Accessing the terminal session</h2>
<ol start="8">
<li>
<p>In your AWS Cloud9 IDE, choose the <strong>+</strong> icon and select <strong>New Terminal</strong>.</p>
<p>A terminal session opens.</p>
</li>
<li>
<p>To display the present working directory, enter <code>pwd</code>. This command points to <strong>/home/ec2-user/environment</strong>.</p>
</li>
<li>
<p>In this directory, locate the file you created in the previous section.</p>
</li>
</ol>
<hr>
<h2>Exercise 1: Working with the buggy Caesar cipher program - Part 1</h2>
<p>In the Functions lab, you created a Caesar cipher program to encrypt 
and decrypt a message. In this lab, you will use the Python Debugger 
(pdb) to find and fix errors in buggy versions of the program.</p>
<ol start="11">
<li>
<p>From the navigation pane of the IDE, choose the <strong>.py</strong> file that you created in the previous <em>Creating your Python exercise file</em> section. Copy the following code and paste it in the file:</p>
<pre><code class="language-python"># Module Lab: Caesar Cipher Program Bug #1
#
# In a previous lab, you created a Caesar cipher program. This version of
# the program is buggy. Use a debugger to find the bug and fix it.

# Double the given alphabet
def getDoubleAlphabet(alphabet):
    doubleAlphabet = alphabet + alphabet
    return doubleAlphabet

# Get a message to encrypt
def getMessage():
    stringToEncrypt = input("Please enter a message to encrypt: ")
    return stringToEncrypt

# Get a cipher key
def getCipherKey():
    shiftAmount = input("Please enter a key (whole number from 1-25): ")
    return shiftAmount

# Encrypt message
def encryptMessage(message, cipherKey, alphabet):
    encryptedMessage = ""
    uppercaseMessage = ""
    uppercaseMessage = message.upper()
    for currentCharacter in uppercaseMessage:
        position = alphabet.find(currentCharacter)
        newPosition = position + cipherKey
        if currentCharacter in alphabet:
            encryptedMessage = encryptedMessage + alphabet[newPosition]
        else:
            encryptedMessage = encryptedMessage + currentCharacter
    return encryptedMessage

# Decrypt message
def decryptMessage(message, cipherKey, alphabet):
    decryptKey = -1 * int(cipherKey)
    return encryptMessage(message, decryptKey, alphabet)

# Main program logic
def runCaesarCipherProgram():
    myAlphabet="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    print(f'Alphabet: {myAlphabet}')
    myAlphabet2 = getDoubleAlphabet(myAlphabet)
    print(f'Alphabet2: {myAlphabet2}')
    myMessage = getMessage()
    print(myMessage)
    myCipherKey = getCipherKey()
    print(myCipherKey)
    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)
    print(f'Encrypted Message: {myEncryptedMessage}')
    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)
    print(f'Decrypted Message: {myDecryptedMessage}')

# Main logic
runCaesarCipherProgram()</code></pre>
</li>
<li>
<p>Save the file.</p>
</li>
<li>
<p>Try running the first buggy Caesar cipher program. You should receive an error similar to the one in the following example.</p>
<pre><code class="language-python">Alphabet: ABCDEFGHIJKLMNOPQRSTUVWXYZ
Alphabet2: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ
Please enter a message to encrypt: AWS Restart rocks
AWS Restart rocks
Please enter a key (whole number from 1-25): 2
2
Traceback (most recent call last):
  File "/home/ec2-user/environment/caesar_cipher_program_bug_1.py", line 56, in &lt;module&gt;
    runCaesarCipherProgram()
  File "/home/ec2-user/environment/caesar_cipher_program_bug_1.py", line 50, in runCaesarCipherProgram
    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)
  File "/home/ec2-user/environment/caesar_cipher_program_bug_1.py", line 28, in encryptMessage
    newPosition = position + cipherKey
TypeError: unsupported operand type(s) for +: 'int' and 'str'

Process exited with code: 0</code></pre>
<p>The program ends in a <em>traceback</em>. A traceback is a stack 
trace that starts from the point of an exception handler. It then goes 
down the call chain to the point where the exception was raised. In 
other words, an error occurred.</p>
</li>
<li>
<p>Use the debugger to find and fix the bug in the first lab file for the buggy Caesar cipher.</p>
</li>
</ol>
<hr>
<h2>Exercise 2: Working with the buggy Caesar cipher program - Part 2</h2>
<p>Errors that result in a traceback are usually easier to fix because the traceback provides helpful clues, like line numbers.</p>
<ol start="15">
<li>
<p>From the menu bar, choose <strong>File &gt; New From Template &gt; Python File</strong></p>
</li>
<li>
<p>Delete the sample code from the template file.</p>
</li>
<li>
<p>Choose <strong>File &gt; Save As...</strong>, and provide a suitable name for the exercise file (for example, <em>debug-caesar-2.py</em>) and save it under the <strong>/home/ec2-user/environment</strong> directory.</p>
</li>
<li>
<p>Copy the following code and paste it into the newly created Python file:</p>
<pre><code class="language-python"># Module Lab: Caesar Cipher Program Bug #2
#
# In a previous lab, you created a Caesar cipher program. This version of
# the program is buggy. Use a debugger to find the bug and fix it.

# Double the given alphabet
def getDoubleAlphabet(alphabet):
    doubleAlphabet = alphabet + alphabet
    return doubleAlphabet

# Get a message to encrypt
def getMessage():
    stringToEncrypt = input("Please enter a message to encrypt: ")
    return stringToEncrypt

# Get a cipher key
def getCipherKey():
    shiftAmount = input("Please enter a key (whole number from 1-25): ")
    return shiftAmount

# Encrypt message
def encryptMessage(message, cipherKey, alphabet):
    encryptedMessage = ""
    uppercaseMessage = ""
    uppercaseMessage = message
    for currentCharacter in uppercaseMessage:
        position = alphabet.find(currentCharacter)
        newPosition = position + int(cipherKey)
        if currentCharacter in alphabet:
            encryptedMessage = encryptedMessage + alphabet[newPosition]
        else:
            encryptedMessage = encryptedMessage + currentCharacter
    return encryptedMessage

# Decrypt message
def decryptMessage(message, cipherKey, alphabet):
    decryptKey = -1 * int(cipherKey)
    return encryptMessage(message, decryptKey, alphabet)

# Main program logic
def runCaesarCipherProgram():
    myAlphabet="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    print(f'Alphabet: {myAlphabet}')
    myAlphabet2 = getDoubleAlphabet(myAlphabet)
    print(f'Alphabet2: {myAlphabet2}')
    myMessage = getMessage()
    print(myMessage)
    myCipherKey = getCipherKey()
    print(myCipherKey)
    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)
    print(f'Encrypted Message: {myEncryptedMessage}')
    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)
    print(f'Decrypted Message: {myDecryptedMessage}')

# Main logic
runCaesarCipherProgram()</code></pre>
</li>
<li>
<p>Save the file.</p>
</li>
<li>
<p>Run the second buggy Caesar cipher program. The program seems to end 
correctly, but double-check the output. The message is only partially 
encrypted, as shown in the example.</p>
<pre><code class="language-python">Alphabet: ABCDEFGHIJKLMNOPQRSTUVWXYZ
Alphabet2: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ
Please enter a message to encrypt: AWS Restart rocks!
AWS Restart rocks!
Please enter a key (whole number from 1-25): 2
2
Encrypted Message: CYU Testart rocks!
Decrypted Messgae: AWS Restart rocks!

Process exited with code: 0</code></pre>
</li>
<li>
<p>Step through the program by using the debugger, and try to find the bug.</p>
</li>
<li>
<p>To see if you can get clues about the bug, run the program several times with different inputs. What do you notice?</p>
</li>
<li>
<p>When you find the bug, fix it, and validate your fix by running the program and entering different inputs.</p>
</li>
</ol>
<hr>
<h2>Exercise 3: Working with the buggy Caesar cipher program - Part 3</h2>
<p>In this exercise, you will debug a third buggy version of the Caesar cipher program.</p>
<ol start="24">
<li>
<p>From the menu bar, choose <strong>File &gt; New From Template &gt; Python File</strong></p>
</li>
<li>
<p>Delete the sample code from the template file.</p>
</li>
<li>
<p>Choose <strong>File &gt; Save As...</strong>, and provide a suitable name for the exercise file (such as <em>caesar_debug-3.py</em>) and save it under the  <strong>/home/ec2-user/environment</strong> directory.</p>
</li>
<li>
<p>Copy the following code and paste it into the newly created Python file:</p>
<pre><code class="language-python"># Module Lab: Caesar Cipher Program Bug #3
#
# In a previous lab, you created a Caesar cipher program. This version of
# the program is buggy. Use a debugger to find the bug and fix it.

# Double the given alphabet
def getDoubleAlphabet(alphabet):
    doubleAlphabet = alphabet + alphabet
    return doubleAlphabet

# Get a message to encrypt
def getMessage():
    stringToEncrypt = input("Please enter a message to encrypt: ")
    return stringToEncrypt

# Get a cipher key
def getCipherKey():
    shiftAmount = input("Please enter a key (whole number from 1-25): ")
    return shiftAmount

# Encrypt message
def encryptMessage(message, cipherKey, alphabet):
    encryptedMessage = ""
    uppercaseMessage = ""
    uppercaseMessage = message.upper()
    for currentCharacter in uppercaseMessage:
        position = alphabet.find(currentCharacter)
        newPosition = position + int(cipherKey)
        if currentCharacter in alphabet:
            encryptedMessage = encryptedMessage + alphabet[newPosition]
        else:
            encryptedMessage = encryptedMessage + currentCharacter
    return encryptedMessage

# Decrypt message
def decryptMessage(message, cipherKey, alphabet):
    decryptKey = -1 * int(cipherKey)
    return encryptMessage(message, cipherKey, alphabet)

# Main program logic
def runCaesarCipherProgram():
    myAlphabet="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    print(f'Alphabet: {myAlphabet}')
    myAlphabet2 = getDoubleAlphabet(myAlphabet)
    print(f'Alphabet2: {myAlphabet2}')
    myMessage = getMessage()
    print(myMessage)
    myCipherKey = getCipherKey()
    print(myCipherKey)
    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)
    print(f'Encrypted Message: {myEncryptedMessage}')
    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)
    print(f'Decrypted Message: {myDecryptedMessage}')

# Main logic
runCaesarCipherProgram()</code></pre>
</li>
<li>
<p>Save the file.</p>
</li>
<li>
<p>Run the third buggy Caesar cipher program. The output looks almost correct. However, the decryption of the message <em>AWS Restart</em> message is incorrect, as shown in the following example:</p>
<pre><code class="language-python">Alphabet: ABCDEFGHIJKLMNOPQRSTUVWXYZ
Alphabet2: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ
Please enter a message to encrypt: AWS Restart rocks!
AWS Restart rocks!
Please enter a key (whole number from 1-25): 2
2
Encrypted Message: CYU TGUVCTV TQEMU!
Decrypted Message: EAW VIWXEVX VSGOW!

Process exited with code: 0</code></pre>
</li>
<li>
<p>It’s time to start the debugger again! Find and fix the bug.</p>
</li>
</ol>
<hr>
<h2>Exercise 4: Working with the buggy Caesar cipher program - Part 4</h2>
<p>In this exercise, you will debug the fourth (and final) buggy version of the Caesar cipher program.</p>
<ol start="31">
<li>
<p>From the menu, choose <strong>File &gt; New From Template &gt; Python File</strong></p>
</li>
<li>
<p>Delete the sample code from the template file.</p>
</li>
<li>
<p>Choose <strong>File &gt; Save As...</strong>, provide a suitable name for the exercise file (such as <em>debug-caesar-4.py</em>), and save it under the  <strong>/home/ec2-user/environment</strong> directory.</p>
</li>
<li>
<p>Copy the following into this file:</p>
<pre><code class="language-python"># Module Lab: Caesar Cipher Program Bug #4
#
# In a previous lab, you created a Caesar cipher program. This version of
# the program is buggy. Use a debugger to find the bug and fix it.

# Double the given alphabet
def getDoubleAlphabet(alphabet):
    doubleAlphabet = alphabet + alphabet
    return doubleAlphabet

# Get a message to encrypt
def getMessage():
    stringToEncrypt = input("Please enter a message to encrypt: ")
    return stringToEncrypt

# Get a cipher key
def getCipherKey():
    shiftAmount = input("Please enter a key (whole number from 1-25): ")
    return shiftAmount

# Encrypt message
def encryptMessage(message, cipherKey, alphabet):
    encryptedMessage = ""
    uppercaseMessage = ""
    uppercaseMessage = message.upper()
    for currentCharacter in uppercaseMessage:
        position = alphabet.find(currentCharacter)
        newPosition = position + int(cipherKey)
        if currentCharacter in alphabet:
            encryptedMessage = encryptedMessage + alphabet[newPosition]
        else:
            encryptedMessage = encryptedMessage + currentCharacter
    return encryptedMessage

# Decrypt message
def decryptMessage(message, cipherKey, alphabet):
    decryptKey = -1 * int(cipherKey)
    return encryptMessage(message, decryptKey, alphabet)

# Main program logic
def runCaesarCipherProgram():
    myAlphabet="ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    print(f'Alphabet: {myAlphabet}')
    myAlphabet2 = getDoubleAlphabet(myAlphabet)
    print(f'Alphabet2: {myAlphabet2}')
    myMessage = getMessage()
    print(myMessage)
    myCipherKey = getCipherKey()
    print(myCipherKey)
    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)
    print(f'Encrypted Message: {myEncryptedMessage}')
    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)
    print(f'Decrypted Message: {myEncryptedMessage}')

# Main logic
runCaesarCipherProgram()</code></pre>
</li>
<li>
<p>Save the file.</p>
</li>
<li>
<p>Run the fourth buggy Caesar cipher program. The output should be similar to the following example:</p>
<pre><code class="language-python">Alphabet: ABCDEFGHIJKLMNOPQRSTUVWXYZ
Alphabet2: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ
Please enter a message to encrypt: AWS Restart rocks!
AWS Restart rocks!
Please enter a key (whole number from 1-25): 2
2
Encrypted Message: CYU TGUVCTV TQEMU!
Decrypted Message: CYU TGUVCTV TQEMU!

Process exited with code: 0</code></pre>
</li>
<li>
<p>The output seems buggy. Find and fix the final bug.</p>
</li>
</ol>
<p>Congratulations! You have debugged four programs, and you have completed all the labs for this course.</p>
<hr>
<h2>End Lab</h2>
<p><i class="fas fa-flag-checkered"></i> Congratulations! You have completed the lab.</p>
<ol start="38">
<li>
<p>Choose <i class="fas fa-square-full fa-xs"></i> <strong>End Lab</strong> at the top of this page, and then select <span id="ssb_blue">Yes</span> to confirm that you want to end the lab.</p>
<p>A panel indicates that <em>DELETE has been initiated... You may close this message box now.</em></p>
</li>
<li>
<p>A message <em>Ended AWS Lab Successfully</em> is briefly displayed, indicating that the lab has ended.
​</p>
</li>
</ol>
<h2>Additional Resources</h2>
<p>For more information about AWS Training and Certification, see <a href="https://aws.amazon.com/training/">https://aws.amazon.com/training/</a>.</p>
<p><em>Your feedback is welcome and appreciated.</em>
If you would like to share any suggestions or corrections, please provide the details in our <a href="https://support.aws.amazon.com/#/contacts/aws-training">AWS Training and Certification Contact Form</a>.</p>
<p><em>© 2022 Amazon Web Services, Inc. and its affiliates. All rights 
reserved. This work may not be reproduced or redistributed, in whole or 
in part, without prior written permission from Amazon Web Services, Inc.
 Commercial copying, lending, or selling is prohibited.</em></p>
<!-- IMPORTANT: Do not delete the radio buttons below. They are required in order for the mulitple tabs at the bottom of the generated HTML page to work properly and will be rendered invisible through the mcq-invisible-radio-buttons.css style sheet. -->
<input class="voc_radio" type="radio" id="grp-17-1" value="17 - Debugging the Caesar Cipher Program-1" name="grp-17" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-17-1" style="font-weight: 400">Yes</label><br>
<input class="voc_radio" type="radio" id="grp-17-2" value="17 - Debugging the Caesar Cipher Program-2" name="grp-17" style="margin-right: 5px; margin-left: 15px" onblur="VocData.saveAllData();">
<label class="voc_radio_label" for="grp-17-2" style="font-weight: 400">No</label><br>
<div class="voc_rubric">&lt; Rubric: 17 - Debugging the Caesar Cipher Program | Points: 0 &gt;</div><br><div id="grp-17-hint" hidden=""></div><br><a class="btn btn-primary btnPrevious">Previous</a></div></div>
<ul class="nav nav-tabs navbar-default navbar-fixed-bottom">
<li class=""><a class="nav-item nav-link active" data-toggle="tab" href="#grp-1" aria-expanded="false">1</a></li>
<li class=""><a class="nav-item nav-link" data-toggle="tab" href="#grp-2" aria-expanded="false">2</a></li>
<li class=""><a class="nav-item nav-link" data-toggle="tab" href="#grp-3" aria-expanded="false">3</a></li>
<li class="active"><a class="nav-item nav-link" data-toggle="tab" href="#grp-4" aria-expanded="true">4</a></li>
<li><a class="nav-item nav-link" data-toggle="tab" href="#grp-5">5</a></li>
<li><a class="nav-item nav-link" data-toggle="tab" href="#grp-6">6</a></li>
<li><a class="nav-item nav-link" data-toggle="tab" href="#grp-7">7</a></li>
<li><a class="nav-item nav-link" data-toggle="tab" href="#grp-8">8</a></li>
<li><a class="nav-item nav-link" data-toggle="tab" href="#grp-9">9</a></li>
<li><a class="nav-item nav-link" data-toggle="tab" href="#grp-10">10</a></li>
<li><a class="nav-item nav-link" data-toggle="tab" href="#grp-11">11</a></li>
<li><a class="nav-item nav-link" data-toggle="tab" href="#grp-12">12</a></li>
<li><a class="nav-item nav-link" data-toggle="tab" href="#grp-13">13</a></li>
<li><a class="nav-item nav-link" data-toggle="tab" href="#grp-14">14</a></li>
<li><a class="nav-item nav-link" data-toggle="tab" href="#grp-15">15</a></li>
<li><a class="nav-item nav-link" data-toggle="tab" href="#grp-16">16</a></li>
<li><a class="nav-item nav-link" data-toggle="tab" href="#grp-17">17</a></li>
</ul>
<script>
    function checkSelection(page) {
        var grp = 'grp-' + page;
        var options = $('[name=' + grp + ']');
        var checked = false;
        options.each(function(i) {
            if ($(this).is(':checked')) {
                checked = true;
            }
        });
        return checked;
    }
    $('.nav-tabs').click(function() {
        var page = $('.nav-tabs > .active > a').text();
        if (checkSelection(page)) {
            $('.nav-tabs > .active > a').css({'color': 'white', 'background-color': 'green' });
        } else {
            $('.nav-tabs > .active > a').css({'color': '', 'background-color': '' });
        }
        window.scrollTo(0, 0);
    });
    $('.btnNext').click(function() {
        $('.nav-tabs > .active').next('li').find('a').trigger('click');
    });
    $('.btnPrevious').click(function() {
        $('.nav-tabs > .active').prev('li').find('a').trigger('click');
    });
    $('.voc_radio, .voc_checkbox').click(function() {
        $(this).focus();
    });
    window.onload = function() {
        window.VocData.retrieveData();
    };
</script>
<script defer="defer" src="vedd3670a3b1c4e178fdfb0cc912d969e1713874337387" integrity="sha512-EzCudv2gYygrCcVhu65FkAxclf3mYM6BCwiGUm6BEuLzSb5ulVhgokzCZED7yMIkzYVg65mxfIBNdNra5ZFNyQ==" data-cf-beacon="{&quot;rayId&quot;:&quot;88550e965fb73695&quot;,&quot;version&quot;:&quot;2024.4.1&quot;,&quot;token&quot;:&quot;a73834a4a1444e9ab89e8da06da41720&quot;}" crossorigin="anonymous"></script>
</body></html>