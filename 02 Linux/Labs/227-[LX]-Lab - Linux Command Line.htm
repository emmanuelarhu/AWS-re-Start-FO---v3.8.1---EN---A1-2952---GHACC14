<!DOCTYPE html>
<html lang="en"><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8"><script type="text/javascript">
    var vocdomain = document.domain.split('.').slice(-2).join('.');
    document.domain = vocdomain;
</script>
    

    
        <meta charset="utf-8">
        <title>Workbench - Vocareum</title>
        <meta name="description" content="">
        <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=3.0, user-scalable=yes">
        <meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate">
        <meta http-equiv="Pragma" content="no-cache">
        <meta http-equiv="Expires" content="0">
        <!-- imported -->
        <!--basic styles-->
        <link href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/bootstrap.min.css" rel="stylesheet">
        <link href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/bootstrap-responsive.min.css" rel="stylesheet">
        <link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/font-awesome.min.css">
        <!--[if IE 7]>
        <link rel="stylesheet" href="../shared/ace/assets/css/font-awesome-ie7.min.css"/>
        <![endif]-->
        <!--page specific plugin styles-->
        <!-- <link rel="stylesheet" href="../shared/ace/assets/css/jquery-ui-1.10.3.custom.min.css"/> -->
        <link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/jquery-ui.min.css">
        <link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/jquery.gritter.css">
        <link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/colorbox.css">
        <!--fonts-->
        <link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/ace-fonts.css">
        <!--ace styles-->
        <link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/chosen.css">
        <link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/ace.css">
        <link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/ace-responsive.min.css">
        <link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/ace-skins.min.css">
        <link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/datepicker.css">
        <link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/jsPanel.css">
        <!-- Add the slick-theme.css if you want default styling -->
        <link rel="stylesheet" type="text/css" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/slick.css">
        <link rel="stylesheet" type="text/css" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/slick-theme.css"> 
        <!--[if lte IE 8]>
        <link rel="stylesheet" href="../shared/ace/assets/css/ace-ie.min.css"/>
        <![endif]-->
        <!-- Vocareum styles -->
        <link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/vocareum.css">
                <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/localStorage.js"></script>
        <!-- js start -->
        <!-- jquery start -->
        <!--[if !IE]>-->
        
        <!-- <script type="text/javascript">
          window.jQuery || document.write("<script src='../shared/ace/assets/js/jquery-2.0.3.min.js'>" + "<" + "/script>");
        </script> -->
        <script type="text/javascript" src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/jquery-2.2.4.min.js"></script>
        <!--<![endif]-->
        <!--[if IE]>
        <script type="text/javascript">
            window.jQuery || document.write("<script src='../shared/ace/assets/js/jquery-1.10.2.min.js'>" + "<" + "/script>");
        </script>
        <![endif]-->
        <script type="text/javascript">
          if ("ontouchend" in document) document.write("<script src='../shared/ace/assets/js/jquery.mobile.custom.min.js'>" + "<" + "/script>");
        </script>
        <!-- <script src="../shared/ace/assets/js/jquery-ui-1.10.3.custom.min.js"></script> -->
        <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/jquery-ui.min.js"></script>
        <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/jquery.ui.touch-punch.min.js"></script>
        <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/jquery.easy-pie-chart.min.js"></script>
        <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/fuelux.wizard.min.js"></script>
        <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/jquery.jspanel.js"></script>
        <!-- jquery end -->
        <!-- js end -->
        <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/bootstrap.min.js"></script>
        <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/ace.js"></script>
        <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/ace-extra.min.js"></script>
        <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/bootbox.min.js"></script>
        <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/jquery.autosize-min.js"></script>
        <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/chosen.jquery.min.js"></script>
        <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/bootstrap-datepicker.min.js"></script>
        <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/bootstrap-tag.min.js"></script>
        <!-- <script src="../shared/ace/assets/js/jquery-validation-1.11.1/jquery.validate.min.js"></script>
        <script src="../shared/ace/assets/js/jquery-validation-1.11.1/additional-methods.min.js"></script> -->
        <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/jquery.validate.min.js"></script>
        <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/additional-methods.min.js"></script>
        <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/jquery.tmpl.min.js"></script>
        <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/jquery.cookie.js"></script>
        <!-- Golden Layout Dependencies -->
        <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/goldenlayout.js" type="text/javascript"></script>
        <link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/goldenlayout-base.css">
        <link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/goldenlayout-light-theme.css">
        <link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/pseudoBS5.css">


        <!-- Load sitewide icons CSS from file: Flaticons UIcons -->
        <!-- 
            To use an icon, look up available icons "Flaticons UIcons
            example: <i class="fi fi-sr-camera"></i>
            The "rr" is regular-rounded. Replace with "br" for bold-rounded, and "sr" for solid-rounded
        -->
        <link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/uicons-regular-rounded.css">
        <!-- <link type="text/css" href="../shared/flaticons/uicons-regular-rounded/css/uicons-regular-rounded.css" rel="stylesheet"> -->
        <link type="text/css" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/uicons-bold-rounded.css" rel="stylesheet">
        <link type="text/css" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/uicons-solid-rounded.css" rel="stylesheet">

        <!-- Vocareum JS Funcs -->
        <script type="text/javascript" src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/jsfuncs.js"></script>
        
        <style>
            html,
            body {
                height: 100%;
                font-size: 95%;
                background-color: rgb(255, 255, 255) !important;
            }

            .vocbtn-round-corner {
                border-radius: 3px !important;
                margin: 0 5px 2px 0px !important;
            }

            #wrap {
                min-height: 100%;
                height: auto !important;
                height: 100%;
                /* Negative indent footer by it's height */
                margin: 0 auto -30px;
            }

            /* Set the fixed height of the footer here */
            #push,
            #footer {
                height: 30px;
                position: fixed;
            }

            #footer {
                background-color: #333;
                color: #ccc;
            }

            /* Lastly, apply responsive CSS fixes as necessary */
            @media (max-width: 767px) {
                #footer {
                    margin-left: -20px;
                    margin-right: -20px;
                    padding-left: 20px;
                    padding-right: 20px;
                }
            }

            /* one more CSS fixes as necessary */
            @media (max-width: 979px) {
                #page-content {
                }
            }


            /* Custom page CSS
            -------------------------------------------------- */
            /* Not required for template or sticky footer method. */

            #wrap > .container {
                padding-top: 60px;
            }

            .container .credit {
                margin: 20px 0;
            }

            code {
                font-size: 80%;
            }

            .dropdown-menu > li > div:hover,
            .dropdown-menu > li > div:focus {
                color: #ffffff;
                text-decoration: none;
                background-color: #0081c2;
                background-image: -moz-linear-gradient(top, #0088cc, #0077b3);
                background-image: -webkit-gradient(linear, 0 0, 0 100%, from(#0088cc), to(#0077b3));
                background-image: -webkit-linear-gradient(top, #0088cc, #0077b3);
                background-image: -o-linear-gradient(top, #0088cc, #0077b3);
                background-image: linear-gradient(to bottom, #0088cc, #0077b3);
                background-repeat: repeat-x;
                filter: progid:DXImageTransform.Microsoft.gradient(startColorstr='#ff0088cc', endColorstr='#ff0077b3', GradientType=0);
            }

            .dropdown-menu > li > div {
                display: block;
                padding: 3px 20px;
                clear: both;
                font-weight: normal;
                line-height: 20px;
                color: #333333;
                white-space: nowrap;
            }

            .ace-nav > li > div {
                position: relative;
                color: #EEE;
                display: block;
                height: 100%;
                padding: 0 8px !important;
                background-color: transparent;
            }

            .ace-nav > li > div > [class*="icon-"] {
                font-size: 16px;
                color: #EEE;
                display: inline-block;
                width: 20px;
                text-align: center;
            }

            .tree .tree-selected > [class*="icon-"]:first-child {
                color: 0 !important;
            }

            #navbar-logo {
                margin: -3px 0 -5px 5px;
                padding-left:0;
                padding-right:0;
            }

            /* accessibility contrast */
            .alert-success > * > .icon-remove {
                color: #155724;
            }
            .alert-warning > * > .icon-remove {
                color: #856404;
            }
            .alert-error > * > .icon-remove {
                color: #721c24;
            }


        </style>

        <style>
            .spinner-preview {
                width: 100px;
                height: 100px;
                text-align: center;
                margin-top: 60px;
            }

            .dropdown-preview {
                margin: 0 5px;
                display: inline-block;
            }

            .dropdown-preview > .dropdown-menu {
                display: block;
                position: static;
                margin-bottom: 5px;
            }

            .btn-group > .btn,
            .btn-group + .btn {
                margin: 0 1px 0 0;
                border-width: 1px !important;
            }

            /*
            .alert {
              color: black;
            }
            */

            .alert-success {
                color: #155724 !important;
            }

            .alert-error, .alert-danger {
                color: #721c24 !important;
            }

            .alert-warning {
                color: #856404 !important;
            }

            .chosen-container-single .chosen-default {
                color: black;
            }

            .vocbtn-ac {
                border-radius: 3px !important;
                padding: 1px 12px !important;
                margin: 0 8px 5px 0px !important;
                min-width: 60px !important;
                line-height: 30px !important;
                border-width: 1px !important;
            }

            .vocbtn2 {
                border-radius: 3px !important;
                padding: 1px 8px !important;
                margin: 0 8px 5px 0px !important;
                margin: 0 0px 0 0px !important;
                min-width: 40px !important;
                line-height: 30px !important;
                border-width: 1px !important;
            }

            .vocbtn-action {
                background: none repeat scroll 0% 0% rgb(0, 109, 204) !important;
                border-color: rgb(0, 109, 204) !important;
            }

            .vocbtn-action:hover, .vocbtn-primary:focus {
                background: none repeat scroll 0% 0% rgb(0, 109, 204) !important;
                border-color: rgb(0, 109, 204) !important;
            }

            .vocbtn-status {
                background: #f5f5f5 !important;
                text-shadow: 0 0 0 !important;
                color: #2D3B45 !important;
                border: 1px solid !important;
                border-color: #C7CDD1 !important;
            }

            .vocbtn-status:hover, .vocbtn-default:focus {
                background: #C7CDD1 !important;
            }

            .table-header {
                background-color: #394B58 !important;
            }

            .tree .tree-item, .tree .tree-folder .tree-folder-header {
                color: black;
            }

            .voc-link, .breadcrumb li a {
                color: rgb(32, 57, 157);
            }

            .table thead tr {
                color: #000 !important;
            }

            .breadcrumb li, .breadcrumb li .divider {
                color: #000 !important;
            }

            .loadinggif {
                display: block;
                position: absolute;
                flex: none;
                top: 0;
                margin-top: 45px;
                padding-top: -45px;
                left: 0;
                z-index: 50;
                width: 100vw;
                height: 90vh;
                background-color: #fff;
                background-image: url("../shared/img/vocpacifier.gif");
                background-size: 20%;
                background-repeat: no-repeat;
                background-position: center;
            }

            .nav-header {
                color: black !important;
            }

            .nav-dropdown-section {
                color: black !important;
            }

            .nav-section-header {
                color: black;
                background-color: #ecf2f7;
            }

            /* because bootstrap styling isn't expecting the
                <section> element, I just copied all the CSS rules here
            */
            .dropdown-menu > section > li > a {
                font-size: 13px;
                padding-left: 11px;
                padding-right: 11px;
                padding-top: 3px;
                padding-bottom: 3px;
                margin-bottom: 1px;
                margin-top: 1px;
                text-decoration: none;
                color: #333;
                display: block;
                line-height: 20px;
                white-space: nowrap;
            }
            .dropdown-menu > section > li > a:hover {
                background-color: transparent;
            }

            /* .navbar-inner {
                background-color: #394b58 !important;
            } */
        </style>
        <script>
    // Function to handle the POST request
    function postToUrl(href, token) {
        // Create a form element
        var form = document.createElement('form');
        form.method = 'POST';
        form.action = href;

        // Create hidden input elements for each data field - token and new session
        var data = { vockey: token, newtab: true };
        for (var key in data) {
          // Create a new hidden input element
          var hiddenField = document.createElement('input');
          hiddenField.type = 'hidden';
          hiddenField.name = key; // Set the name of the input
          hiddenField.value = data[key]; //set the token passed
          // Append the new input to the form
          form.appendChild(hiddenField);
        }

        // Append the form to the body and submit it
        document.body.appendChild(form);
        //console.log("Calling submit for form");
        form.submit();
    }

    function postToUrlInNewTab(href, token) {
        // Create a form element
        var form = document.createElement('form');
        form.method = 'POST';
        form.action = href;
        form.setAttribute("target", "_blank");

        // Create hidden input elements for each data field - token and new session
        var data = { vockey: token, newtab: true };
        for (var key in data) {
          // Create a new hidden input element
          var hiddenField = document.createElement('input');
          hiddenField.type = 'hidden';
          hiddenField.name = key; // Set the name of the input
          hiddenField.value = data[key]; //set the token passed
          // Append the new input to the form
          form.appendChild(hiddenField);
        }

        // Append the form to the body and submit it
        document.body.appendChild(form);
        //console.log("Calling submit for form href: " + href + " and token : " + token);
        form.submit();
        form.remove();
    }

    function areCookiesEnabled() {
        var cookieEnabled = false;
        
        if (!cookieEnabled) {
            document.cookie = "voctestcookie=1;path=/;SameSite=None;Secure";
            cookieEnabled = document.cookie.indexOf("voctestcookie") !== -1;
        }

        // Delete the test cookie
        if (cookieEnabled) {
            document.cookie = "voctestcookie=;path=/;SameSite=None;Secure;expires=Thu, 01 Jan 1970 00:00:00 GMT";
        }

        //console.log("Cookies enabled: " + cookieEnabled);
        return cookieEnabled;
    }

    function removeSpinner(){
      $("#loader").remove();
    }

    // Function to add a parameter to a URL
    function addParamToUrl(url, paramName, paramValue) {
        var urlObj = new URL(url, window.location.href);
        urlObj.searchParams.set(paramName, paramValue);
        return urlObj.toString();
    }

    // Function to update all iframes
    function updateIframeSources(paramName, paramValue) {
        var iframes = document.getElementsByTagName('iframe');

        for (var i = 0; i < iframes.length; i++) {
            var originalSrc = iframes[i].src;
            var newSrc = addParamToUrl(originalSrc, paramName, paramValue);
            iframes[i].src = newSrc;
        }
    }

    function callPostIfCookiesDisabled(href, token) {
        //console.log("Calling callPostIfCookiesDisabled for href: " + href);
        if (areCookiesEnabled()) {
            location.href=href;
        } else {
            //console.log("Cookies are disabled");
            //console.log("token used: " + token);
            //console.log("href: " + href);
            postToUrl(href, token);
        }
    }

    function replaceHrefIfCookiesDisabled(href, token) {
        if (areCookiesEnabled()) {
            location.href=href;
        } else {
            href = addParamToUrl(href, 'vockey', token);
            //console.log("Cookies are disabled call href");
            //console.log("token used: " + token);
            //console.log("href: " + href);
            location.href=href;
        }
    }

</script>
<script>
        var vocCookiesDisabled = false;
    if (!areCookiesEnabled()) {
      //console.log("areCookiesEnabled - false");
      vocCookiesDisabled = true;
    }
    window.addEventListener('load', function() {
        //console.log("window onload cookies");
        function vocChangeGetLinksToPost() {
            //console.log("Iterating all href a links ");
            // Attach event listeners to all hyperlinks
            var links = document.getElementsByTagName('a');
            //console.log("Total: " + links.length);
            for (var i = 0; i < links.length; i++) {
                //console.log("0. Iterating i: " + i + "href: " + links[i].href);
                var href = links[i].getAttribute('href');
                //console.log("1. Iterating i: " + i + "href: " + href);
                if (href == null || href == undefined || href.startsWith('#') || href.startsWith('http://') || href.startsWith('https://')) {
                    continue;
                }
                //console.log("2. Iterating i: " + i + "link: " + href);
                links[i].addEventListener('click', function(event) {
                    event.preventDefault(); // Prevent the default GET request
                    postToUrl(this.href, '4ccbd337cdcd897ff6a099c76e4f2b078b7e9ebecc0431f932b05a84a2ce13d8'); // Call the POST function
                });
            }
        }

        //Add token to all iframes
        //can not be used now - as there are iFrames for terminal/containers which uses
        //proxy.vocareum.com and this is messing things up
        //updateIframeSources('vockey', '4ccbd337cdcd897ff6a099c76e4f2b078b7e9ebecc0431f932b05a84a2ce13d8');


        if (vocCookiesDisabled) {
          //console.log("Cookies are disabled");
          vocChangeGetLinksToPost(); 
        } else {
          //console.log("Cookies are enabled");
        }
        removeSpinner();
        //console.log("Done");
    });
</script>
<!--
        <script type="text/javascript">
          function removeSpinner(){
            $("#loader").remove();
          }
        </script>
-->
    </head>
    <!-- body onload="removeSpinner()" -->
    <body>
                
                <!-- placeholder
        <div id="opennewtab" class="alert alert-block alert-warning hidden" role="alert">
          <p><b>It seems that third-party cookies are disabled in your browser, preventing Vocareum from being iframed. Please click this button to open Vocareum in a new tab.</b></p>
          <br/>
          <button type='button' onclick='makePostRequestInNewTab()' 
                style='cursor: pointer; background-color: #394B58;border: none;color: white;padding: 15px 32px;text-align: center;text-decoration: none;display: inline-block;font-size: 16px;'>
                Open in a New Tab
          </button>
        </div>
        -->
        <script type="text/javascript">
            function escapeHtml(unsafe) {
                return unsafe
                .replace(/&/g, "&amp;")
                .replace(/</g, "&lt;")
                .replace(/>/g, "&gt;")
                .replace(/"/g, "&quot;")
                .replace(/'/g, "&#039;");
            }
            var postUrlCall = '';

            function makePostRequestInNewTab() {
                postToUrlInNewTab(postUrlCall, '4ccbd337cdcd897ff6a099c76e4f2b078b7e9ebecc0431f932b05a84a2ce13d8');
            }

            /*
            //if 3rd party cookies are disabled - give an option to open in a new tab
            if (self !== top && !areCookiesEnabled()) {
                postUrlCall = window.location.href;
                window.stop();
                removeSpinner();
                $('#opennewtab').removeClass("hidden");
            }
            */

            
            /* for CSRF tokens */
            /* NOTE: ajaxPreFilter works better than the ajaxSetup where ajax happens when form.serialize is called */
            var csrfToken = "4ccbd337cdcd897ff6a099c76e4f2b078b7e9ebecc0431f932b05a84a2ce13d8";
            $.ajaxPrefilter(function (options, originalData, xhr) {
                if (options.data) {
                if (options.data instanceof FormData) {
                    //let the form send the vockey
                } else {
                    try {
                    pdata = JSON.parse(options.data);
                    pdata['vockey'] = csrfToken;
                    options.data = JSON.stringify(pdata);
                    } catch (e) {
                    options.data += "&vockey=" + csrfToken;
                    }
                }
                } else {
                options.data = "vockey=" + csrfToken;
                }
            });

            function refreshNewSessionPage() {
                var url = window.location.href;
                var msg = 'Redirected+to+newly+logged+in+session.+Please+retry+the+operation';
                if (url.indexOf('?') > -1) {
                url += '&w=' + msg;
                } else {
                url += '?w=' + msg;
                }
                window.location.href = url;
            }
        </script>

        
        <div class="clearfix">
            
            
            <div id="page-content" class="clearfix" style="background-color:rgb(255,255,255);margin: 5px 10px 0px 10px;">
                <div class="row-fluid">
                    
                    
                    
                    
                    
                    <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/jquery.gritter.min.js"></script>

                    <!-- Displays Maintenance Banner on top of page -->
                    
                    <!-- PAGE CONTENT BEGINS HERE -->

                    <!--  script type="text/javascript" src="https://www.google.com/jsapi"></script -->
<script type="text/javascript">

var vcUploadMaxSize = 104857600; // 100MB
var vcUploadChunkSize = 1048576; // 1MB
function vcUploadCheckMsg(status, msg)
{
   var progressFile = document.createElement('div');
   var meterFile = document.createElement('span');
   status.appendChild(progressFile);
   progressFile.appendChild(meterFile);
   meterFile.textContent = msg;
   return false;
}
function vcUploadCheckDone(status, buckets, cnt, args, endFP)
{
   buckets[0] = buckets[0] - cnt;
   if( buckets[0]<1 ){
     if( endFP ){
       var msg = endFP(args);
       if( msg && msg.length>0 ){
         vcUploadCheckMsg(status, 'NOTE: ' + msg);
       }
     }
     vcUploadCheckMsg(status, 'NOTE: All files were processed, you may close the window and proceed.');
   }
   return false;
}
function vcUploadFileCheckStatus(status, buckets, path, meterFile, fn, args, endFP)
{
  'use strict';
  var xhr = new XMLHttpRequest();
  xhr.open('GET', '../util/vcput.php?vockey=4ccbd337cdcd897ff6a099c76e4f2b078b7e9ebecc0431f932b05a84a2ce13d8&a=checkUpload&fn=' + encodeURIComponent(fn) + '&path=' + encodeURIComponent(path) + args, true);
  xhr.onreadystatechange = function () {
    if (xhr.readyState!=4) return false;
    if (xhr.status!=200 || !xhr.responseText ){
      meterFile.textContent += ' failed';
      vcUploadCheckDone(status, buckets, 1, args, endFP)
      return false;
    }
    var arr = xhr.responseText.split('VOC::');
    if(arr.length != 3){
       meterFile.textContent += ' failed';
       vcUploadCheckDone(status, buckets, 1, args, endFP)
       return false;
    }
    meterFile.textContent += arr[1];
    if( arr[1] != '.' ) {
      if (typeof refreshFileTree !== 'undefined' && $.isFunction(refreshFileTree)){
        refreshFileTree(true, true);
      }
      vcUploadCheckDone(status, buckets, 1, args, endFP)
      return false;
    }
    //mhui
    if (typeof(appsIde) != 'undefined' && appsIde)
		{
    	meterFile.textContent += ' Done';
		  refreshS3HomeTree(0);
		  return false;
		}
    setTimeout(function(){ vcUploadFileCheckStatus(status, buckets, path, meterFile, fn, args, endFP);}, 
               1000);
    return false;
  }
  xhr.send();
  return false;
}
function vcUploadFile(status, path, meterFile, blobOrFile, fn, st, sz, file_size, args, buckets, endFP)
{
     'use strict';
     var successful = false;

     var xhr = new XMLHttpRequest();
     if(!path){
       // need a path to store the uploaded file.
       xhr.open('GET', '../util/vcput.php?vockey=4ccbd337cdcd897ff6a099c76e4f2b078b7e9ebecc0431f932b05a84a2ce13d8&a=getPath&fn=' + encodeURIComponent(fn), true);
       xhr.onreadystatechange = function () {
         if (xhr.readyState!=4) return false;
         if (xhr.status!=200 || !xhr.responseText ){
            meterFile.textContent = '    ' + fn + ' : terminating due to failure to obtain file path in the server';
            vcUploadCheckDone(status, buckets, 1, args, endFP);
            return false;
         }
         var arr = xhr.responseText.split('VOC::');
         if(arr.length != 3){
            meterFile.textContent = '    ' + fn + ' : terminating due to failure to obtain unique file path in the server';
            vcUploadCheckDone(status, buckets, 1, args, endFP);
            return false;
         }
         path = arr[1];
         if( !path || path.length<1 ){
            meterFile.textContent = '    ' + fn + ' : terminating due to empty file path in the server';
            vcUploadCheckDone(status, buckets, 1, args, endFP);
            return false;
         }
         vcUploadFile(status, path, meterFile, blobOrFile, fn, st, sz, file_size, args, buckets, endFP);
         return false;
       }
       xhr.send();
       return false;
     }
         xhr.open('POST', '../util/vcput.php?vockey=4ccbd337cdcd897ff6a099c76e4f2b078b7e9ebecc0431f932b05a84a2ce13d8&a=batchUpload&fn=' + encodeURIComponent(fn) + '&path=' + encodeURIComponent(path) + args, true);
     // report chunk progress
         xhr.upload.onprogress = function (e) {
             if (e.lengthComputable) {
                 var msz = file_size - st;
                 if( sz<msz ) msz = sz;
                 if( file_size>0 ){
                   meterFile.value = Math.round((( (e.loaded/e.total)*msz + st) / file_size) * 100);
                 } else {
                   meterFile.value = '100';
                 }
                 var val = parseFloat(meterFile.value);
                 if( val>=100 ){
                   meterFile.textContent = '    ' + fn + ' (' + file_size + ' bytes) : ' + val + '% uploaded. Processing ...';
                 } else {
                   meterFile.textContent = '    ' + fn + ' (' + file_size + ' bytes) : ' + val + '%';
                 }
             }
         };
     // upload stopped
        xhr.onloadend = function (e) {
           if( successful ){
             // next chunk, if any
             if( (st+sz)<file_size ){
               vcUploadFile(status, path, meterFile, blobOrFile, fn, st+sz, sz, file_size, args, buckets, endFP);
             } else {
               vcUploadFileCheckStatus(status, buckets, path, meterFile, fn, args, endFP);
             }
           } else {
             vcUploadCheckDone(status, buckets, 1, args, endFP);
             meterFile.textContent += ' failed';
           }
         };
     // upload chunk successful
         xhr.onload = function (e) {
           meterFile.textContent += '.';
           successful = true;
         };
     // report chunk error
         xhr.ontimeout = function (e) {
            meterFile.textContent += '... terminating due to timeout';
            successful = false;
         };
         xhr.onerror = function (e) {
            meterFile.textContent += '... terminating due to error in fetching file';
            successful = false;
         };
         xhr.onabort = function (e) {
            meterFile.textContent += '... terminating due to aborting event';
            successful = false;
         };
     // 
     // send this chunk fn[st, st+sz-1]    
     var data = new FormData();
         data.append("file", blobOrFile.slice(st, st+sz));
         xhr.overrideMimeType('application/octet-stream');
         xhr.setRequestHeader('Content-Range', 'bytes ' + st + '-' + (st+sz) + '/' + file_size);
         xhr.send(data);
         successful = true;
     // return value
     return false;
}
function vcUploadFiles(modalStr, divStatus, validateFP, inputFile, maxsz, args, endFP)
{
  'use strict';
  var status = document.getElementById(divStatus);
  var listFile = document.getElementById(inputFile);
  var buckets = [];
  var filesz = maxsz<=0? vcUploadMaxSize : (maxsz*1024*1024);
  var listener = function (e) {
     var self = e.currentTarget;
     // disable the listener right-away
     listFile.removeEventListener('change', listener, false);
     (typeof vocNotebookIde != 'undefined' && vocNotebookIde) ? ($('#'+modalStr).css('z-index', '1000').css('opacity', '1')) : $('#' + modalStr).modal('show');
     status.innerHTML = ' Processing <b>' + self.files.length + '</b> file' + (self.files.length>1? 's' : '') + ':<br>';
     buckets = [ self.files.length ];
     for(var i=0; i<self.files.length; ++i){
       var blob = self.files[i];
       var progressFile = document.createElement('div');
       var meterFile = document.createElement('span');
       status.appendChild(progressFile);
       progressFile.appendChild(meterFile);
       if( !validateFP || validateFP(blob['name']) ){
         if( filesz < blob.size ){
           meterFile.textContent = '    ' + blob['name'] + ' : size (' + blob.size + ' bytes) exceeded the maximum file size (' + filesz + ')' +
                                   '. To increase the allowed size, please contact your TA or Vocareum for assistance.';
           --buckets[0];
         } else {
           vcUploadFile(status, false, meterFile, blob, blob['name'], 0, vcUploadChunkSize, blob.size, args, buckets, endFP);
         }
       } else {
         --buckets[0];
         meterFile.textContent = '    ' + blob['name'] + ' : skipped as it is not valid for this operation';
       }
     }
     status.scrollTop = status.scrollHeight;
     vcUploadCheckDone(status, buckets, 0, args, endFP);
   };
  listFile.addEventListener('change', listener, false);
  return listener;
}
</script>



<script>
     function showdbDetail(host,port,name,pwd){
       var target = document.getElementById("report_db_msg_box");
       target.innerHTML = "<strong>Host:</strong>" + host + '<br>' +
                          "<strong>Port:</strong>" + port + '<br>';
       if(name!='') target.innerHTML +=
                          "<strong>Name:</strong>" + name + '<br>';
        target.innerHTML += pwd;
       $("#modal-table-report-db").modal("show");
     }
	function show_voc_gritter($sticky, $msg, failed) {
		if (failed) {
			color_string = "gritter-error gritter-light";

		} else {
			color_string = "gritter-note gritter-light";
		}
		var duration = 2000;
		// if ($sticky) $duration = 10000;
		
		$.extend($.gritter.options, {
			position: 'bottom-right'
		});
		$.gritter.add({
			title: $msg,
			time: 2000,
			sticky: $sticky,
			class_name: color_string	
		});
	}

	function show_voc_gritter_duration($sticky, $msg, failed, duration) {
		if (failed) {
			color_string = "gritter-error gritter-light";

		} else {
			color_string = "gritter-note gritter-light";
		}
		$.extend($.gritter.options, {
			position: 'bottom-right'
		});
		$.gritter.add({
			title: $msg,
			time: duration,
			sticky: $sticky,
			class_name: color_string	
		});
	}

        var advance_features = "1";

        function show_grades(panel, fullwidth) {
            // mhui
            var jde = false;
            var rde = false;

            if (panel == 0)
            {
            	$('#grades-modal').modal('show');
            	return;
            }
            var element =  document.getElementById('gradeframe');
        	if (element == null || typeof(element) == 'undefined')
        	{
        		$('#grades-modal').modal('show');
        		return;
        	}

            // show the grade panel
            document.getElementById('gradeframe').style.display = "block";
            document.getElementById('gradeframedivider').style.display = "block";

            if (fullwidth) {
              document.getElementById('gradeframe').style.width = "100%";
              document.getElementById('gradeframe').style.height = "100vh";
              document.getElementById('gradeframedivider').style.display = "none";
              document.getElementById('gradeframehide').style.display = "none";
              document.getElementById('gradedetails').style.display = "block";
            }

            // mhui
            if (jde || rde) {
              $('#jupyterIframeParent').width(document.getElementById('gradeframedivider').offsetLeft-5);

           	  // hack to fix the grade panel height in jidebox
              $('#gradeframe').height($('#jidebox').height()-50);
              $('#gradeframedivider').height($('#jidebox').height()-50);
            }

              var gradesPanel = $('#grades-panel'),
                  gradesPanelIframe = gradesPanel.find('iframe'),
                  gradesSpinner = gradesPanel.find('#gradespinner');

              gradesSpinner.removeClass('hidden-1');
              var url = 'main.php?m=grades_review&modalMode=1&asnId=2791721&stepid=2791722&userid=3209731';
                                              url += "&vockey=4ccbd337cdcd897ff6a099c76e4f2b078b7e9ebecc0431f932b05a84a2ce13d8";
              gradesPanelIframe.prop('src', url);

              gradesPanelIframe.on('load', function() {
                gradesSpinner.addClass('hidden-1');
              });
          }
</script>





<script type="text/javascript">	
  var vocdomain = document.domain.split('.').slice(-2).join('.')
  document.domain = vocdomain;

  //mhui
  var clabsamis = [];

  function updateClusterAMIs()
  {
	  $('#clabstbl tr').each(function (i, row) {
          var myrow = $('#clabstbl tr:eq(' + i + ')');
          if (i > 0)
          {
              myrow.find('td:eq(7)').html('<select style="width:100px;margin-bottom:0px;" onchange="chgvm(' + i + ')">'+ $('#clabsamis').html()+'</select>');
              myrow.find('td:eq(7) select').val(clabsobj[i-1]['ami']);
          }
        });  
  }
  
  function retrieveOrgAMIs()
  {
    var orgid = 269;
    var labtype = "ct";

    $.post({
      url: '../util/vcput.php',
      data: {
        a: 'getClusterAmisForOrg',
        orgid: orgid,
        region: us-west-2      }
    })
    .done(function(data) {
      //console.log(data);
      try {
      var result = JSON.parse(data);
        if (result['status'] == 'Error') {
          //alert("Unable to retrieve ami list: " + result['msg'])
        }
        else {
          var foundSelected = false;
          if (typeof(result['amis']) !== undefined)
          {
            clabsamis = result['amis']
            var select = document.getElementById("clabsamis");
            select.options.length = 0;
            select.options[select.options.length] = new Option('', '');
            for (index in clabsamis)
            {
              select.options[select.options.length] = new Option(clabsamis[index], index);
              if (index == "")
              {
                //console.log("Index = " + index);
                select.value = index;
                foundSelected = true;
              }
            }              
          }
          if (foundSelected === false)
          {
            select.value = '';
          }
          if (labtype == 'cl') // update the AMI dropdowns
          {
            chgvmtype();
            //updateClusterAMIs();
          }
        }
      }
      catch (err) {
        //alert("Exception retrieving ami list: " + err)
      }
    })
    .fail(function() {
      //alert("Error retrieving ami list");
    });
  }


  function endawslabconfirmed(v) {
       //awslabtimer('');
     if(v) $('#endawslab').html('End Lab <i id="awsbtnspinbox" class="icon-spin icon-spinner"></i>');
     $.ajax({
        url: "../util/vcput.php?a=endaws&stepid=2791722&version=0&mode=s&type=1",
     })
     .done(function(ret_val) {
        var result = JSON.parse(ret_val);
        var end_lab_status = result['status'];
        ret_val = result['msg'];
         
         if(end_lab_status == 'success') {awslabtimer('');}
         
         var lb = document.getElementById("aws-modal-label");
         lb.innerHTML = 'End Lab';
         var target = document.getElementById("report_aws_msg_box");
         target.innerHTML = ret_val;
         var progress = document.getElementById('report_aws_progress_box');
         progress.innerHTML = '';
         $('#modal-table-report-aws').appendTo("#editordiv");
         $('#modal-table-report-aws').modal('show');
         $('#detailspinbox').hide();
         if(v) $('#endawslab').html('End Lab');
      })
     .fail(function(ret_val) {
       alert('failed to end the lab');
       $('#detailspinbox').hide();
       if(v) $('#endawslab').html('End Lab');
     });
     }
  function endawslab(v) {
        bootbox.dialog('Are you sure you want to end the lab?',
        [
          {
            "label" : "Yes",
            "class" : "btn vocbtn-ac vocbtn-action",
            "callback": function() {
              endawslabconfirmed(v);
            }
          },
          {
            "label" : "No",
            "class" : "btn vocbtn-ac vocbtn-status"
          }
        ]);
    }
  function awslabchkdone() {
         $.ajax({
        url: "../util/vcput.php?a=labready&stepid=2791722&version=0&mode=s&type=1",
     })
     .done(function(ret_val) {
         var target = document.getElementById('report_aws_progress_box');
         target.innerHTML = ret_val;
         if( ret_val.search(/ready/)>=0 ){
           $('#detailspinbox').hide();
           $('#startawslab').html('Start Lab');
         } else if (ret_val.search(/in creation/)>=0 ) {
           target.innerHTML = '<i class="icon-spin icon-spinner"></i>' + target.innerHTML;
           window.setTimeout(awslabchkdone, 10000); 
         } else {
           $('#detailspinbox').hide();
           $('#startawslab').html('Start Lab');
           if (ret_val.search(/failed/)>=0 ) {
             show_voc_gritter(true, ret_val, true);
           }
         }
      })
     .fail(function(ret_val) {
       alert('failed to check the lab status');
       $('#detailspinbox').hide();
       $('#startawslab').html('Start Lab');
     }); 
     }
  function startawslab(v) {
        if(v) $('#startawslab').html('Start Lab <i id="awsbtnspinbox" class="icon-spin icon-spinner"></i>');
     $.ajax({
        url: "../util/vcput.php?a=startaws&stepid=2791722&version=0&mode=s&type=1",
     })
     .done(function(ret_val) {
         var result = JSON.parse(ret_val);
         var lab_status = result['status'];
         ret_val = result['msg'];

         var lb = document.getElementById("aws-modal-label");
         lb.innerHTML = 'Start Lab';
         var target = document.getElementById("report_aws_msg_box");
         target.innerHTML = ret_val;
         document.getElementById('report_aws_progress_box').innerHTML = '';
         var progress = document.getElementById('report_aws_progress_box');
         progress.innerHTML = '';
         $('#modal-table-report-aws').appendTo("#editordiv");
         $('#modal-table-report-aws').modal('show');
         $('#detailspinbox').hide();
         awslabtimer(ret_val);
                  if(awsscnt>0 && v ) window.setTimeout(awslabchkdone, 1000);
         if(!awsscnt && v) $('#startawslab').html('Start Lab');
      })
     .fail(function(ret_val) {
       alert('failed to start the lab');
       $('#detailspinbox').hide();
       if(v) $('#startawslab').html('Start Lab');
     });
     }
         // awssX -- session
       // awsbX -- budget
       // awscX -- credential
       var awsstatus = [];
       var awsscnt = false;
       var awsccnt = false;
       var awsbcnt = false;
       var awstype = 'S';
       var awshandle = false;
       var awsstime = new Date().getTime();
       awsstime = Math.round( awsstime/1000 );
       function vcInsertSpace(s, type)
       { // make sure we have 11 chars;
         var str = '';
         str+='&nbsp;';
         return str;
       }
       function awscoundown()
       {
         if( awsscnt===false ){
           awsscnt = 0;
                    $.ajax({
               url: "../util/vcput.php?a=getaws&nores=1&stepid=2791722&version=0&mode=s&type=1",
             })
             .done(function(ret_val) {
                var emid = document.getElementById('vocuseremail');
                if( emid ){
                  emid.innerHTML = "emmanuelarhu706@gmail.com";
                }
                if( ret_val.search(/(Cloud|VM) (Lab|Access)/)>=0 ){
                  awslabtimer(ret_val);
                } else if( ret_val.search(/Remaining session time: /)>=0 ){
                  var tv = ret_val.match(/Remaining session time: ([0-9]+h)?([0-9]+m)?([0-9]+s)/);
                  awsscnt = 0;
                  if( tv ){
                    if( tv[1] ) awsscnt = 3600 * parseInt(tv[1]);
                    if( tv[2] ) awsscnt += 60*parseInt(tv[2]);
                    if( tv[3] ) awsscnt += parseInt(tv[3]);
                  }
                  if( awshandle ) clearTimeout(awshandle);
                  awshandle = window.setTimeout(awscoundown , 300);
                }
                // get the startercode term
                if( ret_val.search(/Term: /) >= 0 ){
                  var tv = ret_val.match(/Term: ([0-9]+ day[s]? )?([0-9]+):([0-9]+):([0-9]+)/);
                  awsccnt = 0;
                  if( ret_val.search(/Remaining credit: /)>=0 ){
                    var cr = ret_val.match(/Remaining credit: \$<\/strong>(.*)\//);
                    awsbcnt = parseFloat(cr[1]);
                    if( tv ){
                      if( tv[1] ) awsccnt = 3600*24*parseInt(tv[1]);
                      if( tv[2] ) awsccnt += 3600*parseInt(tv[2]);
                      if( tv[3] ) awsccnt += 60*parseInt(tv[3]);
                      if( tv[4] ) awsccnt += parseInt(tv[4]);
                    }
                  }
                }
                // mhui: display the status
                if( ret_val.search(/Status: /)>=0 ){
                    var mst = ret_val.match(/Status: ([^<]+)</);
                    var st = mst[1];
                    	awsstatus = st.split(":");
                        var e = document.getElementById("awsstatus");
                        if( e ) e.innerHTML = awsstatus[0];
                    	if (awsstatus.length>1) {
                          var e = document.getElementById("awsstatusdetails");
                          if(e) e.innerHTML = awsstatus[1];
                    	}
                        if(awsstatus[0]=='Deactivated') {
                           $('#awsbtn').attr("disabled", true);
                           if( $("#c9btn").length ){
                             $('#c9btn').attr("disabled", true);
                           }
                        }
                  }
              })
             .fail(function(ret_val) {
               alert('failed to retrieve AWS credentials');
             }); 
                    return false;
         }
         var tnow = new Date().getTime();
         tnow = Math.round(tnow/1000);
         // Budget ('B')
         tstr = '$' + (awsbcnt? awsbcnt : '0.00');
         var e = document.getElementById("awsstimetxtB");
         if( e ) e.innerHTML = vcInsertSpace(tstr, 'B') +  tstr;
         var types = {"0":"T", "1":"S"};
         for( var v in types ){ 
           var type = types[v];
           var left = (type=='S'? awsscnt : awsccnt) - (tnow-awsstime);
           if(left<0){
             left = 0;
           }
           var tstr = '';
           var tms = 0;
           if( left<=0 ) tstr = '00:00:00';
           else {
             if( left>=(24*3600) ){
               var tday = Math.floor(left/(24*3600));
               tstr += tday + 'd ';
               left = left - tday*24*3600;
             }
             if( left>=3600 ){
               var thr = Math.floor(left/3600);
               tstr += thr + ':';
               tms = left - thr * 3600;
             } else {
               tms = left;
               tstr = '0:';
             }
             var tm = type!='S'? Math.floor(tms/60) : Math.ceil(tms/60);
             var ts = tms - tm*60;
             tstr += (tm<10? '0' : '') + tm; // + ':' + (ts<10? '0' : '') + ts; 
             if( type!='S' ){
               tstr += ':' + (ts<10? '0' : '') + ts;
             }
           }
           if( left>0 ){
             awshandle = window.setTimeout(awscoundown , 60000); //3000
           }
           var e = document.getElementById("awsstimetxt" + type);
           if( e ) e.innerHTML =  vcInsertSpace(tstr, type) +  tstr;
         }
         return false;
       }
       function awslabtimer(ret_val)
       {
         awsstime = new Date().getTime();
         awsstime = Math.round( awsstime/1000 );
         awsscnt = 0;
         if( ret_val.search(/Remaining session time:/)>=0 ){
           var tv = ret_val.match(/Remaining session time: ([0-9]+ day[s]? )?([0-9]+):([0-9]+):([0-9]+)\(/);
           if( tv ){
             if( tv[1] ) awsscnt = 24*3600 * parseInt(tv[1]);
             if( tv[2] ) awsscnt += 3600*parseInt(tv[2]);
             if( tv[3] ) awsscnt += 60*parseInt(tv[3]);
             if( tv[4] ) awsscnt += parseInt(tv[4]);
           }
         }
         if( awshandle ) clearTimeout(awshandle);
         awshandle = window.setTimeout(awscoundown , 300);
       }
       awshandle = window.setTimeout(awscoundown , 300);
    function showawsact(v){
        $('#detailspinbox').show();
     if(v==1) $('#showawsdetail').html('Account Details <i id="awsbtnspinbox" class="icon-spin icon-spinner"></i>');
     $.ajax({
        url: "../util/vcput.php?a=getaws&type=1&stepid=2791722&version=0&v="+v,
     })
     .done(function(ret_val) {
         var lb = document.getElementById("aws-modal-label");
         lb.innerHTML = 'Credentials';
         var target = document.getElementById("report_aws_msg_box");
         target.innerHTML = ret_val;
         var progress = document.getElementById('report_aws_progress_box');
         progress.innerHTML = '';
         $('#modal-table-report-aws').appendTo("#editordiv");
         $('#modal-table-report-aws').modal('show');
         $('#detailspinbox').hide();
         if(v) $('#showawsdetail').html('Account Details');

         if( ret_val.search(/(Cloud|VM) (Lab|Access)/)>=0 ){
           awslabtimer(ret_val);
         } else if( ret_val.search(/Remaining session time: /)>=0 ){
           var tv = ret_val.match(/Remaining session time: ([0-9]+h)?([0-9]+m)?([0-9]+s)/);
           awsscnt = 0;
           if( tv[1] ) awsscnt = 3600 * parseInt(tv[1]);
           if( tv[2] ) awsscnt += 60*parseInt(tv[2]);
           if( tv[3] ) awsscnt += parseInt(tv[3]);
           if( awshandle ) clearTimeout(awshandle);
           awshandle = window.setTimeout(awscoundown , 300);
         }
      })
     .fail(function(ret_val) {
       alert('failed to retrieve AWS credentials');
       $('#detailspinbox').hide();
       if(v==1) $('#showawsdetail').html('Account Details');
     });
     }
  function showclabs(str){
     $('#detailspinbox').show();
     $.ajax({
        url: "../util/vcput.php?a=getclabs&stepid=2791722&version=0&labworkdir=/home/nowhere",
     })
     .done(function(ret_val) {
         var target = document.getElementById("report_clabs_msg_box");
         target.innerHTML = (str? str : '');
         try {
           resp = jQuery.parseJSON(ret_val);
           target.innerHTML += resp.message;
         } catch(err) {
           target.innerHTML += 'Failed to obtain lab status. If the problem persists, please report this problem to support@vocareum.com.';
         }
         //$('#modal-table-report-clabs').appendTo("#editordiv");
         $('#modal-table-report-clabs').modal('show');
         $('#detailspinbox').hide();
      })
     .fail(function(ret_val) {
       alert('failed to retrieve Labs credentials');
       $('#detailspinbox').hide();
     });
  }
  function cdbtime(resp)
  {
    if( (typeof resp['session_time'] != 'undefined') && resp['session_time'] ){
      awsstime = new Date().getTime();
      awsstime = Math.round( awsstime/1000 );
      awsscnt = resp['session_time'];
      if( awshandle ) clearTimeout(awshandle);
      awshandle = window.setTimeout(awscoundown , 300);
    }
  }
  function showcdbdetails(dbtype){
    str = false;
     $('#detailspinbox').show();
     $.ajax({
        url: "../util/vcput.php?a=getcdb&stepid=2791722&version=0&labworkdir=/home/nowhere&dbtype="+dbtype,
     })
     .done(function(ret_val) {
         var target = document.getElementById("report_cdb_msg_box");
         target.innerHTML = (str? str : '');
         try {
           resp = jQuery.parseJSON(ret_val);
           cdbtime(resp);
           target.innerHTML += resp.message;
         } catch(err) {
           target.innerHTML += 'Failed to obtain DB status. If the problem persists, please report this problem to support@vocareum.com.';
         }
         //$('#modal-table-report-cdb').appendTo("#editordiv");
         $('#modal-table-report-cdb').modal('show');
         $('#detailspinbox').hide();
      })
     .fail(function(ret_val) {
       alert('failed to retrieve DB credentials');
       $('#detailspinbox').hide();
     });
  }
  function launchclabs_confirmed(ischk)
  {
    if (true) {
      changeClabsState("Start", 'Starting', $('#labspinbox'), ischk);
    }
    else {
      launchclabs_confirmed_1(ischk);
    }
  }

  var clabshandle = false;
  function launchclabs_confirmed_1(ischk){
    if(clabshandle) clearTimeout(clabshandle);
    clabshandle = false;
    if( !ischk ) $('#labspinbox').show();

     $.ajax({
        url: "../util/vcput.php?a=" + (ischk? 'getclabs' : 'launchclabs') + "&stepid=2791722&version=0&labworkdir=/home/nowhere",
     })
     .done(function(ret_val) {
         if( !ischk && ret_val.indexOf('success')<0 ){
           var target = document.getElementById("report_clabs_msg_box");
           target.innerHTML = '<br>Failed to launch your lab. If the problem persists, please report to support@vocareum.com for assistance.';
           $('#modal-table-report-clabs').modal('show');
         } else if ( ischk && ret_val.indexOf('NotReady')>=0 ){
           clabshandle = setTimeout(function() { launchclabs_confirmed(1); }, 1000);
         } else if ( ischk && ret_val.indexOf('Ready')>=0 ){
           $('#labspinbox').hide();
           var target = document.getElementById("report_clabs_msg_box");
           target.innerHTML = '<br>Lab is ready';
         } else if ( ischk && (ret_val.indexOf('Terminated')>=0 || ret_val.indexOf('Stopped')>=0) ){
           $('#labspinbox').hide();
           var target = document.getElementById("report_clabs_msg_box");
           target.innerHTML = '<br>Please re-launch the lab through Start Lab.';
         } else {
           clabshandle = setTimeout(function() { launchclabs_confirmed(1); }, 1000);
         }
      })
     .fail(function(ret_val) {
       alert('failed to launch Lab');
       $('#labspinbox').hide();
     });
  }


  var clabsStateData = null;
  function showEmptyClabsStateModal()
  {
    $('#clabsStateModal_vms').hide();
    $('#clabsStateModal_body').hide();
    $('#clabsStateModal_ta').text('Retrieving lab information...');
    $('#clabsStateModal_ta').show();
    $("#clabsStateModal").css('height', 'auto');
    $('#clabsStateModal').modal();
  }

  function clabsStateModalSetMsg(msg)
  {
    $('#clabsStateModal_ta').text(msg);
    $('#clabsStateModal_ta').show();
    $("#clabsStateModal").css('height', 'auto');
    $('#clabsStateModal').modal();
  }

  function clabsStateModalSetFinalState(state, msg)
  {
    var status = "";

    vms = clabsStateData['vms'];
    for (var i = 0; i < vms.length; i++)
    {
      $('#clabs_modal_vm_' + i).hide();
      $('#clabs_modal_vm_spinner_' + i).hide();
      var vm = vms[i];
      var mc = vm['machine'];
      if (mc)
      {
        if (mc['state'] == "Failed")
        {
          if (mc['status'] != "")
          {
            status += "\n  " + mc['hostname'] + ': ' + mc['status'];
          }
        }
      }
    }

    clabsStateModalSetMsg(msg + status);
  }

  var clabsVmLastState = [];
  function buildAndShowClabsStateModal(clabs_data, start_state)
  {
    vms = clabs_data['vms'];

    data = '<table class="table table-first-column-check table-hover" style="margin-bottom:0px" border=1 frame=void rules=rows>';
    for (var i = 0; i < vms.length; i++)
    {
      vm = vms[i];
      data += '<tr id="vm_' + i + '" class="clabs-state-modal-tr-vm">';
      data += '<td class="clabs-state-modal-td-vm span4">';
      data += vm['name'];
      data += '</td>';
      data += '<td class="clabs-state-modal-td-state span4" id="clabs_modal_vm_state_' + i + '">';
      data += start_state + '&nbsp; <i id="clabs_modal_vm_spinner_' + i + '" class="icon-spin icon-spinner"></i>';
      data += '</td></tr>';
      clabsVmLastState.push(start_state);
    }
    data += '</table>';

    $('#clabsStateModal_body').show();
    $('#clabsStateModal_vms').html(data);
    $('#clabsStateModal_vms').show();
    $('#clabsStateModal_ta').hide();
    $("#clabsStateModal").css('height', 'auto');
    $('#clabsStateModal').modal();
  }

  var clabsChangeStateTimer = null;
  function changeClabsState(ctrl, printState, spinner, chkCounter)
  {
    clearTimeout(clabsChangeStateTimer);
    var newContainerLab = false;
    if (chkCounter == 0)
    {
      op = (ctrl == "Stop") ? 'endclabs' : 'launchclabs';
      $.ajax({
      url: "../util/vcput.php?a=" + op + "&stepid=2791722&version=0&labworkdir=/home/nowhere",
      })
      .done(function(ret_val) 
       {
         
         if (!newContainerLab) showEmptyClabsStateModal();
         console.log(ret_val);
         try 
         {
           var result = JSON.parse(ret_val);
           if (result['status'] != 'success')
           {
             clabsStateModalSetMsg('Failed to ' + ctrl + ' your lab. If the problem persists, please report to support@vocareum.com for assistance.');
             spinner.hide();
           }
           else 
           {
             clabsChangeStateTimer = setTimeout(changeClabsState, 100, ctrl, printState, spinner, 1);
           }
         }
         catch(err) 
         {
           clabsStateModalSetMsg('Exception changing state of lab1: ' + err);
           spinner.hide();
         }
       })
       .fail(function(data, textStatus, jqXHR)
       {
         clabsStateModalSetMsg("Failed to get lab1 information");
         spinner.hide();
       });
    }
    else
    {
      var jqxhr = $.ajax("../util/vcput.php?a=vcGetLabInfo&stepid=2791722&version=0&labworkdir=/home/nowhere")
        .done(function(data, textStatus, jqXHR)
        {
          try 
          {
            console.log(data);
            var result = JSON.parse(data);
            if (result['status'] == 'Error')
            {
              clabsStateModalSetMsg("Could not get lab information: " + result['msg']);
              spinner.hide();
            }
            else
            {
              clabsStateData = result;
              if (chkCounter == 1)
              {
                
                if(!newContainerLab) buildAndShowClabsStateModal(result, printState);
                clabsChangeStateTimer = setTimeout(changeClabsState, 1000, ctrl, printState, spinner, chkCounter + 1);
              }
              else
              {
                // check the state - if we've reached a good final state, all done
              
                state = result['lab_state'];
                status = result['lab_status']

                // let's first update all the vm individual states
                vms = result['vms'];
                for (var i = 0; i < vms.length; i++)
                {
                  vm = vms[i];
                  st = vm['state'];
                  if (st != clabsVmLastState[i])
                  {
                    var msg = st;
	            if (  (st != "Ready")
                       && (st != "Stopped")
                       && (st != "Terminated")
                       && (st != "Failed") )
                    {
                      msg += '&nbsp; <i id="clabs_modal_vm_spinner_' + i + '" class="icon-spin icon-spinner"></i>';
                    }
                    $('#clabs_modal_vm_state_' + i).html(msg);
                    clabsVmLastState[i] = st;
                  }
                }

                if (state == "Failed")
                {
                  msg = 'Failed to launch lab';
                  if (status != "")
                  {
                    msg += ": " + status;
                  }
                  clabsStateModalSetFinalState('Failed', msg);
                  spinner.hide();
                }
                else if (  (ctrl == "Stop")
                        && ( (state == "None")
                          || (state == "Stopped")
                          || (state == "Terminated") ) )
                {
                  // done!!
                  var print_state = state;
                  if (state == "None")
                  {
                    print_state = "Stopped";
                  }
                  if (!newContainerLab) clabsStateModalSetFinalState(state, 'Your lab is now ' + print_state);
                  spinner.hide();
                  awslabtimer(''); // end-timer
                }
                else if (ctrl == "Start")
                {
                  if (state == "Ready")
                  {
                    // done!!
                    // cdbtime(result); if node != t
                    if (!newContainerLab) clabsStateModalSetFinalState(state, 'Your lab is now ' + state + '. The session time is ' + awsscnt + ' seconds (' + Math.ceil(awsscnt/60) + ' minutes)');
                    
                    displayVoc2022(result);
                    
                    spinner.hide();
                  }
                  else if ( (state == "Stopped")
                         || (state == "Terminated") )
                  {
                    // something went wrong
                    msg = 'Please re-launch your lab';
                    if (status != "")
                    {
                      msg += ": " + status;
                    }
                    clabsStateModalSetFinalState(state, msg);
                    spinner.hide();
                  }
                  else
                  {
                    clabsChangeStateTimer = setTimeout(changeClabsState, 1000, ctrl, printState, spinner, chkCounter + 1);
                  }
                }
                else
                {
                  clabsChangeStateTimer = setTimeout(changeClabsState, 1000, ctrl, printState, spinner, chkCounter + 1);
                }
              }
            }
          }
          catch(err)
          {
            console.log("Exception: " + err);
            clabsStateModalSetMsg('Exception stopping lab2: ' + err);
            spinner.hide();
          }
        })
        .fail(function(data, textStatus, jqXHR)
        {
          clabsStateModalSetMsg("Failed to get lab2 information");
          spinner.hide();
        });
    }
  }

// functions used to display the Voc2022 lab within the console panel
//    - if clabData is provided, use the contained url to display the container
//    - otherwise, fetch the lab info that contains the proper source url
function displayVoc2022(clabData = null) {
  displayVoc2022_2(); 
  return;
  if(clabData != null) {
    try {
      var containerURL = '';
       var vms_urls = clabData.vms[0].simple_url;
       Object.entries(vms_urls).forEach(([key, value]) => {
          if(containerURL != '') return false; 
          if(typeof value.url != 'undefined') containerURL = value.url;
      });
      $('#panel2Iframe').attr('src', containerURL);
    } catch(err) {
      displayVoc2022_2();
    }
    
  } else {
    displayVoc2022_2();   
  }
}

var containerCookies = "";
function displayVoc2022_2(indx = 0, access_type = '', refresh = 0) 
{
  console.log("Now displaying Voc2022 Lab....");
  var vm_indx = indx; //e.target.dataset.indx;
  var subtype;
  var state;
  var vm;
  var str;
  var allTabs = false;
  var hideConsole = false;
  var newContainerLab = false;

  var jqxhr = $.ajax("../util/vcput.php?a=vcGetLabInfo&stepid=2791722&version=0&labworkdir=/home/nowhere" + '&novnc=1' + '&vm_indx=' + vm_indx)
   .done(function(data, textStatus, jqXHR)
   {
  	 if (data.indexOf('<ERROR:INVALID_SESSION>') !== -1) 
     { // invalid session
  	   window.location.reload();
  		 return;
  	 }
  	    
     try 
     {
       var result = JSON.parse(data);
       if (result['status'] == 'Error')
       {
          show_voc_gritter(false, "Could not get lab information: " + result['msg'], true);
  
       }
       else
       {
         subtype = result['subtype'];
         state = result['lab_state'];
  
         // just a precuationary measure in case the check returns with state != Ready and at the same time
         // we are trying to start the check for a just started lab
         vcSetupPeriodicUiCheck(vcPeriodUiCheckReloadDelay);
  
         // get the appropriate container/vm
         vm = result['vms'][vm_indx];
         state = vm['state'];
  	     vm_extip = (typeof(vm['extip']) != 'undefined')? vm['extip'] : vm['ip'];
         vm_user = vm['user'];
         vm_access = vm['access'];
         vm_access_url = (typeof(vm['access_url']) != 'undefined')? vm['access_url'] : false;
         vm_simple_url = (typeof(vm['simple_url']) != 'undefined')? vm['simple_url'] : false;
         
         var access_v2 = (typeof(vm['access_v2']) != 'undefined')? vm['access_v2'] : false;
         var access_name, access_port;
  
         // handles the mysql db container when no access is passed back
         if (vm_access.length == 0)
         {
      	   $('#vmspinbox'+indx).addClass('hidden-1');
           //console.log('cdb = ' + JSON.stringify(result['cdb'][0]));
      	   return;
         }
         
         if (state != "Ready")
         {
           if (typeof(vmspinbox) != 'undefined' && vmspinbox != null)
           {
          	 $('#vmspinbox'+indx).addClass('hidden-1');
           }
         }
         else
         {
           if (access_type == '')
           {
              if (access_v2)
              {
              	  access_type = access_v2[0]['name']; //type
              	  access_name = access_v2[0]['name'];
              	  access_port = access_v2[0]['port']
              }
              else
              {
                  var keys = Object.keys(vm_access);
                  console.log(keys);
                  if (keys.length == 0) {return;}
                  access_type = keys[0];
                  access_port = vm_access[access_type];
              }
              
              if(false && typeof(vm_access_url['jupyter']) != 'undefined')
                access_type = 'jupyter';
              
           }
  
           var is_telnet = access_type.includes("telnet");
           console.log('access type = '+access_type);
  
           //2020-01-26: new access_url
           if (vm_access_url)
           {
             access_name = access_type;
             var relativePath = "/home/labsuser";
   	         if (typeof(vm_access_url[access_name]) != "undefined") 
   	         {
   	        	 var url = vm_access_url[access_name]["url"]+((false)? relativePath : ""); //"https://eval.vocareum.com";
  
   	           var cookieName = vm_access_url[access_name]["cookie"]["name"]; //"vocLabAccess";
   	           var cookieValue = vm_access_url[access_name]["cookie"]["value"]; //"ttyd";
   	           var cookiePath = vm_access_url[access_name]["cookie"]["path"]; //"/";
   	           var cookieDomain = vm_access_url[access_name]["cookie"]["domain"]; //"vocareum.com";

                     var age = newContainerLab ? "; max-age=43200" : "";
                     var checkUrl = url;
                     if (cookieDomain == "vocareum.com")
                     {
         	             str = cookieName + "=" + cookieValue + "; path=" + cookiePath + "; domain=" + cookieDomain + age + "; SameSite=None; secure";
         	             document.cookie = str;
         	             console.log(str);
         	             containerCookies = str;
                     }
                     else
                     {
                       url = url + "/redirector" + "?name=" + encodeURIComponent(cookieName) + "&value=" + encodeURIComponent(cookieValue);
                     }
   	           
   	           var keys = Object.keys(vm_access_url);
   	           vmCheckAndDisplayFrame(checkUrl, url, cookieName, cookieValue, 0);
   	         }
   	         else
   	         {
   	        	 show_voc_gritter(false, "Failed: Could not get " + access_name + " access_url information", true);
   	         }
  
          	 $('#vmspinbox'+indx).addClass('hidden-1');
           }
           
           else if (vm_simple_url)
           {
             access_name = access_type;
             if (typeof(vm_simple_url[access_name]) !== "undefined") 
             {
               var url = vm_simple_url[access_name]["url"];
               vmCheckAndDisplayFrame(url, url, 'dummyCookieName', 'dummyCookieValue', 0);
               //setTimeout(vmDisplayFrameAfterDelay, 100, url); // may need a check for ui readiness...
             }
             else
         	   {
         	     show_voc_gritter(false, "Failed: Could not get " + access_name + " simple_url information", true);
         	   }
             $('#vmspinbox'+indx).addClass('hidden-1');
           }
  
           else if (access_type != 'ssh' && access_type != 'telnet' && !is_telnet && //subtype != 16 && 
                   (typeof vm['novnc_proxy'] !== "undefined") && vm['novnc_proxy']) 
           {
               console.log(vm['novnc_proxy']);
               document.getElementById('vmBtn'+vm_indx_current).style.borderTop = "0px solid rgb(0,109,204)";
               document.getElementById('vmBtn'+indx).style.borderTop = "3px solid #6495ED";
               vm_indx_current = indx;
  

               if (newTab || onlyReadme)
               {
              	 if (access_v2)
                 {
              	   for (var j=0; j<access_v2.length; j++)
                   {
                     if (access_type == access_v2[j]['name'])
                     {
                       console.log("v2 new tab = " + access_v2[j]['type'] + "://" + vm['extip'] + ":" + access_v2[j]['port']);
         	             window.open(access_v2[j]['type'] + "://" + vm['extip'] + ":" + access_v2[j]['port']);
         	             break;
                     }
                   }
                 }
              	 else 
                 {
                   console.log("newTab: open a new tab - http://" + vm['extip'] + ":" + vm_access[access_type]);   
                   window.open("http://" + vm['extip'] + ":" + vm_access[access_type]);
                 }
              	 $('#vmspinbox'+indx).addClass('hidden-1');
               }
               else
               {
              	 
              	 // if there's already something in the frame and we are effectively just reloading the iframe,
                 // unload and it first and give the existing ws connection time to be closed first - otherwise 
                 // there's a conflict
                 if (!onlyReadme)
                 {
                   setTimeout(vmBtnDelayedNovnc, 2000, vm, indx, vmspinbox);
                 }
               }
           }
           else if (access_type != 'ssh' && access_type != 'telnet')
           {
             //console.log("newTab = " + newTab);
             if (newTab)
             {
          	   if (access_v2)
               {
              	   for (var j=0; j<access_v2.length; j++)
                   {
                     if (access_type == access_v2[j]['name'])
                     {
                       console.log("v2-1 new tab = " + access_v2[j]['type'] + "://" + vm['extip'] + ":" + access_v2[j]['port']);
         	             window.open(access_v2[j]['type'] + "://" + vm['extip'] + ":" + access_v2[j]['port']);
         	             break;
                     }
                   }
               }
          	   else if (access_type == 'https')
          	   {
          		   console.log("https://" + vm['extip'] + ":" + vm_access[access_type]);
                 window.open("https://" + vm['extip'] + ":" + vm_access[access_type]);
          	   }
          	   else
          	   {
                 console.log("http://" + vm['extip'] + ":" + vm_access[access_type]);
                 window.open("http://" + vm['extip'] + ":" + vm_access[access_type]);
          	   }
             }
             else
             {
          	     var url;
          	     if (access_v2)
                 {
                	 for (var j=0; j<access_v2.length; j++)
                   {
                     if (access_type == access_v2[j]['name'])
                     {
                       console.log("v2-1 new tab = " + access_v2[j]['type'] + "://" + vm['extip'] + ":" + access_v2[j]['port']);
           	           url = access_v2[j]['type'] + "://" + vm['extip'] + ":" + access_v2[j]['port'];
           	           break;
                     }
                   }
                 }
          	     else
          	     {
          	       console.log("https://" + vm['extip'] + ":" + vm_access[access_type]);
                   url = "https://" + vm['extip'] + ":" + vm_access[access_type];
          	     }
                 if (!document.mozFullScreen && !document.webkitFullScreen) 
                 {
              	   //load the readme
              	   if (onlyReadme)
  	               {
  		               vmp_3();
  	               }
              	   else if (readme == 1)
        	         {
        	        	if (!cloudera && !hideFileBrowser && !hideSource) {vmp_1_22_3();} 
        	        	else {
        	        	  console.log("calling vmp_22_3 from vmpbtnclicked #2");
        	        	  vmp_22_3();
        	        	}
        	     		 }
        	     		 else
        	     		 {
        	     			if (!cloudera && !hideFileBrowser && !hideSource) {vmp_1_22();} else {vmp_22();}
        	     		 }
              	   if (canSubmit) {document.getElementById('vmp-ideheader').style.display = "block"; vmp_ideheader = true;}
  	     		   
        	     	   vmp_resize();
                 }
                 $('#panel2-iframe').attr("src", url);
             }
             
             if (typeof(vmspinbox) != 'undefined' && vmspinbox != null)
             {
          	   $('#vmspinbox'+indx).addClass('hidden-1');
             }
           }
           else if ((access_type == 'ssh' && (typeof vm['ssh_cmd'] !== "undefined") && vm['ssh_cmd']) ||
          		      (access_type == 'telnet' && (typeof vm['telnet_cmd'] !== "undefined") && vm['telnet_cmd']))
           {
             console.log('ssh');
  
             document.getElementById('vmBtn'+vm_indx_current).style.borderTop = "0px solid rgb(0,109,204)";
             document.getElementById('vmBtn'+indx).style.borderTop = "3px solid #6495ED";
             vm_indx_current = indx;
  
             // clear periodic_save
             if (savefilehandle) {clearTimeout(savefilehandle);}
  
  
             // Three cases:
             // 
             // 1. no terminal has ever been launched
             //    - start terminal
             //    - ssh cntnr
             // 2. terminal disappeared
             //    - "press" the launch button
             //    - ssh cntnr
             // 3. terminal is present
             //    - check if tab for this vm is already there
             //      - if so, select it
             //      - if not, open a new tab and ssh cntnr
  
             var isNewWin = true;
             const termExp = /\/terminal\//;
             var telement = document.getElementById('panel2-iframe');
             if ($('#panel2-iframe').attr("src") == "")
             {
               $('#panel2-iframe').attr("src", "");
               $('#panel2-iframe').on('load', function() {
                   /*
                  var elmnt = telement.contentWindow.document.getElementById('open');
                  if (typeof(elmnt) != "undefined" && elmnt != null) {
                    elmnt.style.display = "none";
                    }
                   */
                });
             }
             else if (termExp.test($('#panel2-iframe').attr("src")) === false)
             {
               $('#panel2-iframe').attr("src", "");
               $('#panel2-iframe').on('load', function() {
                  var elmnt = telement.contentWindow.document.getElementById('open');
                  if (typeof(elmnt) != "undefined") {
                    elmnt.style.display = "none";
                    }
                });
             }
             else if (! telement.contentWindow.vocTerminalIsAvailable())
             {
               telement.contentWindow.vocStartTerminal();
               var elmnt = telement.contentWindow.document.getElementById('open');
                  if (typeof(elmnt) != "undefined") {
                    elmnt.style.display = "none";
                    }
             }
             else
             {
               isNewWin = false;
             }
             setTimeout(vocTerminalTimeout, 500, telement, access_type, vm, isNewWin, 0);
  
             // reset filetree and panel
             if (!cloudera && !hideFileBrowser && !hideSource) //(!cloudera)
  	         {
       	       initEditor();
       	       initFileTree();
               resetFileTree();
               refreshFileTree(false, true);
               refreshS3WorkareaTree(0);
               refreshSubTree();
             
               //mhui
               window.setTimeout('periodic_save()', 60000);
  	         }
  	         
           }
           else if ((typeof vm['err'] !== "undefined") && vm['err'])
           {
             bootbox.dialog("Unable to access:  " + vm['err'], 
                            [{
                              "label" : "Ok",
                              "class" : "btn vocbtn-ac vocbtn-action",
                            }]
             );                      
           }
         }
       }
     }
     catch(err)
     {
       console.log("Exception: " + err);
     }
   })
   .fail(function(data, textStatus, jqXHR)
   {
     show_voc_gritter(false, "Failed: Could not get lab information", true);
   });
}

var container503ErrorReported = false;
function reportContainer503Error() {
  var data = "";
  var urlval = "../util/vcput.php";
  $.ajax({
   type: "POST",
   url: urlval,
   data: {
      a: 'reportContainer503Error',
      stepid: 2791722,
      userid: 3209731    }
  })
  .done(function(ret_val) {
        if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
          refreshNewSessionPage();                                    
        }
        resp = jQuery.parseJSON(ret_val);
        if (resp.status != 'success') {
          console.log("An error occurred while reporting the container 503 error");
        } else {
          container503ErrorReported = true;
        }
    })
    .fail(function(ret_val) {
      console.log("Failed to Report Contrainer 503 Error");
    });
}


var vmCheckAndDisplayFrameCounterMax =  40;
function vmCheckAndDisplayFrame(checkUrl, displayUrl, cookieName, cookieValue, counter)
{
  console.log("vmCheckAndDisplayFrame()");
  $.ajax({
    url: "../util/vcput.php?a=checkVmAccess&displayUrl=" + checkUrl + "&cookieName=" + cookieName + "&cookieValue=" + cookieValue
  })
   .done(function(data) 
   {
     try 
     {
       var result = JSON.parse(data);
       console.log("vmCheckAndDisplayFrame: " + data);
       if (result['status'] == 'Error') 
       {
         console.log("vmCheckAndDisplayFrame: Error");
       }
       else 
       {
         if (result['http_status'] == 503 || result['http_status'] == 404 || result['http_status'] == 0)
         {
           if (counter < vmCheckAndDisplayFrameCounterMax)
           {
             if (counter == 1)
             {
               show_voc_gritter_duration(false, 'Waiting for the UI to be ready', false, Math.abs(vmCheckAndDisplayFrameCounterMax - 3) * 1000);
             }
             var sleepTime = 1;
             if (counter > 120)
             {
               sleepTime = 10;
             }
             else if (counter > 20)
             {
               sleepTime = 5;
             }
             console.log("vmCheckAndDisplayFrame: UI not ready; sleep for " + sleepTime + " second(s)");
             setTimeout(vmCheckAndDisplayFrame, sleepTime * 1000, checkUrl, displayUrl, cookieName, cookieValue, counter + sleepTime);
             return;
           } else {
            if (result['http_status'] == 503 && newContainerLab && !container503ErrorReported) reportContainer503Error();
           }
         }
       }
       $.gritter.removeAll();
       setTimeout(vmDisplayFrameAfterDelay, 1000, displayUrl);
     } 
     catch (err) 
     {
       console.log("vmCheckAndDisplayFrame:Exc " + err);
       $('#panel2Iframe').attr("src", displayUrl);
     }
   })
   .fail(function(data, textStatus, jqXHR) 
   {
     console.log("vmCheckAndDisplayFrame: Fail");
     $('#panel2Iframe').attr("src", displayUrl);
   });
}

function vmDisplayFrameAfterDelay(displayUrl)
{
  $('#panel2Iframe').attr("src", displayUrl);
}

var vcPeriodicUiCheckHandle = null;
var vcPeriodUiCheckReloadDelay = 5000;     // 5 s
var vcPeriodUiCheckFirstDelay = 30000;     // 30 s
var vcPeriodUiCheckSamplingDelta = 180000; // 3 min
function vcSetupPeriodicUiCheck(delay)
{

    if (! vcPeriodicUiCheckHandle)
    {
      vcPeriodicUiCheckHandle = window.setTimeout(vcPeriodicUiCheck, delay);
    }
}

function vcPeriodicUiCheck()
{
  $.ajax({
    url: "../util/vcput.php?a=vcPeriodicUiCheck&stepid=2791722&version=0&labworkdir=/home/nowhere",
  })
  .done(function(data, textStatus, jqXHR)
  {
    try 
    {
      var result = JSON.parse(data);
      if (result['status'] != 'Error')
      {
        var lab_info = result['lab_info'];
        var state = lab_info['lab_state'];
        if (state == "Ready") 
        {
          vcPeriodicUiCheckHandle = window.setTimeout(vcPeriodicUiCheck, vcPeriodUiCheckSamplingDelta);
        }
        else
        {
          // gray out the screen?
          vcPeriodicUiCheckHandle = null;
          console.log("The lab state is no longer 'Ready'; stopping periodic ui check");
          var panel2ParentEl = $('#panel2Iframe').parent();
          $('#consolediv').children().remove();
          $('#consolediv').append(' \
        <div style="display:flex; flex-direction: column; justify-content: center; height: 100%; width: auto; align-items: center;">' 
        + ('') + ' \
          <div> \
            <button id="open" style="display: block; font: 20px/1.5 sans-serif; background: #438EB9; height: 50px; padding: 10px 25px; color: white; \
              border: none; cursor: pointer;" onclick="launchclabs()"> \
              Launch Lab \
            </button> \
          </div> \
        </div>');
          containerCookies = null;
          return;
        }
      }
    }
    catch(err)
    {
      console.log("vcPeriodicUiCheck:Error: " + err);
      vcPeriodicUiCheckHandle = window.setTimeout(vcPeriodicUiCheck, vcPeriodUiCheckSamplingDelta);
    }
  })
  .fail(function(data, textStatus, jqXHR)
  {
    console.log("vcPeriodicUiCheck:Fail: " + textStatus);
    vcPeriodicUiCheckHandle = window.setTimeout(vcPeriodicUiCheck, vcPeriodUiCheckSamplingDelta);
  });
}

  function endclabs_confirmed(ischk)
  {
    if (true) {
      changeClabsState("Stop", 'Shutting down', $('#endclabspinbox'), ischk);
    }
    else {
      endclabs_confirmed_1(ischk);
    }
  }

  var endclabshandle = null;
  function endclabs_confirmed_1(ischk) {
    clearTimeout(endclabshandle);
    if (! ischk) $('#endclabspinbox').show();

    $.ajax({
      url: "../util/vcput.php?a=" + (ischk? 'stateclabs' : 'endclabs') + "&stepid=2791722&version=0&labworkdir=/home/nowhere",
    })
     .done(function(ret_val) {
       console.log(ret_val);
       try {
         var result = JSON.parse(ret_val);
         if (!ischk) {
           if (result['status'] != 'success') {
             $('#endclabspinbox').hide();
             var target = document.getElementById("report_clabs_msg_box");
             target.innerHTML = '<br>Failed to end your lab. If the problem persists, please report to support@vocareum.com for assistance.';
             $('#modal-table-report-clabs').modal('show');
           }
           else {
             clabshandle = setTimeout(function() { endclabs_confirmed(1); }, 1000);
           }
         } else {
           if (   (result['state'] == "None")
               || (result['state'] == "Stopped")
               || (result['state'] == "Terminated") ) {
             $('#endclabspinbox').hide();
             var target = document.getElementById("report_clabs_msg_box");
             target.innerHTML = '<br>Your lab has been stopped.';
             $('#modal-table-report-clabs').modal('show');
             awslabtimer(''); // end-timer
           } else {
             clabshandle = setTimeout(function() { endclabs_confirmed(1); }, 1000);
           }
         }
       }
       catch(err) {
         $('#endclabspinbox').hide();
         var target = document.getElementById("report_clabs_msg_box");
         target.innerHTML = '<br>Exception stopping lab: ' + err;
         $('#modal-table-report-clabs').modal('show');
       }
     })
     .fail(function(ret_val) {
       $('#endclabspinbox').hide();
       var target = document.getElementById("report_clabs_msg_box");
       target.innerHTML = '<br>Failed to end Lab.';
       $('#modal-table-report-clabs').modal('show');
     });
  }

  function endclabs_question(str){
    bootbox.dialog(str,
         [
           {
             "label" : "Yes",
             "class" : "btn vocbtn-ac vocbtn-action",
             "callback": function() {
               endclabs_confirmed(0);
             }
           },
           {
             "label" : "No",
             "class" : "btn vocbtn-ac vocbtn-status",
             "callback": function() {
               $('#endclabspinbox').hide();
             }
           }
         ]);
  }
  function endclabs_note(str){
    bootbox.dialog(str,
         [
           {
             "label" : "Close",
             "class" : "btn vocbtn-ac vocbtn-action",
             "callback": function() {
               $('#endclabspinbox').hide();
             }
           }
         ]);
  }
  function launchclabs_note(str){
    bootbox.dialog(str,
         [
           {
             "label" : "Close",
             "class" : "btn vocbtn-ac vocbtn-action",
             "callback": function() {
               $('#labspinbox').hide();
             }
           }
         ]);
  }
  function launchclabs_question(str){
    bootbox.dialog(str,
         [
           {
             "label" : "Yes",
             "class" : "btn vocbtn-ac vocbtn-action",
             "callback": function() {
               launchclabs_confirmed(0);
             }
           },
           {
             "label" : "No",
             "class" : "btn vocbtn-ac vocbtn-status",
             "callback": function() {
               $('#labspinbox').hide();
             }
           }
         ]);
  }
  function endclabs(){
    $('#endclabspinbox').show();
    $.ajax({
        url: "../util/vcput.php?a=getclabs&stepid=2791722&version=0&labworkdir=/home/nowhere",
     })
     .done(function(ret_val) {
         var resp;
         var target = document.getElementById("report_clabs_msg_box");
         try {
           resp = jQuery.parseJSON(ret_val);
           if( resp.status=='Ready' || resp.status=='stopped' ){
             endclabs_question('Are you sure you want to end the following? <br><br>' + resp.message + '<br>');
           } else {
             endclabs_note('Your lab has not started yet.');
           }
         } catch(err) {
           endclabs_note('Your lab has not started yet.');
         }
      })
     .fail(function(ret_val) {
       alert('failed to retrieve Labs credentials, report this problem to support@vocareum.com if the problem persists.');
       $('#labspinbox').hide();
     });
  }
  function launchclabs(){
    var newContainerLab = false;

    if($('#open').is(':visible')) {
      $('#consolediv').children().remove();
      $('#consolediv').append(`<div style="width: 100%; height: 100%; background-image: url('../shared/img/vocpacifier.gif'); background-repeat: no-repeat; background-position: center; background-size: 20%;">
                                  <iframe id="panel2Iframe" name="" title="Console" src="" width="100%" height="100%" style="overflow:none;border:0px;opacity:100;"></iframe>
                                </div>`);
    }

    $('#labspinbox').show();
    $.ajax({
        //url: "../util/vcput.php?a=getclabs&stepid=2791722&version=0&labworkdir=/home/nowhere",
        url: "../util/vcput.php?a=vcGetLabInfo&stepid=2791722&version=0&labworkdir=/home/nowhere",
     })
     .done(function(ret_val) {
         var resp;
         var target = document.getElementById("report_clabs_msg_box");
         try {
           resp = jQuery.parseJSON(ret_val);
           resp.status = resp.lab_state;
           if( resp.status=='Ready' ){
             if (true) {
               if(newContainerLab) {
                 
                 try {
                   var containerURL = '';
                   var containerCookieName = '';
                   var containerCookieValue = '';
                   var containerCookiePath = '';
                   var containerCookieDomain = '';
                   var vms_urls = (typeof resp.vms[0].simple_url != 'undefined')? resp.vms[0].simple_url : resp.vms[0].access_url;
                   Object.entries(vms_urls).forEach(([key, value]) => {
                      if(containerURL != '') return false; 
                      if(typeof value.url != 'undefined') containerURL = value.url, containerCookieName = value.cookie.name, containerCookieValue = value.cookie.value,containerCookiePath = value.cookie.path, containerCookieDomain = value.cookie.domain;
                      var relativePath = "/home/labsuser";
                      if (false) containerURL = (key !== 'jupyter') ? '' : containerURL+relativePath; 
                  });
                  
                  var age = "; max-age=43200"; // 12 hours
                  var checkUrl = containerURL;
                  // Sets Cookies
                  if (containerCookieDomain == "vocareum.com")
                  {
                    str = containerCookieName + "=" + containerCookieValue + "; path=" + containerCookiePath + "; domain=" + containerCookieDomain + age + "; SameSite=None; secure";
                    document.cookie = str;
                    console.log("Set Cookies on Ready: " + str);
                    containerCookies = str;
                  }
                  else
                  {
                    containerURL += "/redirector" + "?name=" + encodeURIComponent(cookieName) + "&value=" + encodeURIComponent(cookieValue);
                  }
                  
                  
                  
                  // Check if container URI is loaded
                  //vmCheckAndDisplayFrame(checkUrl, containerURL, containerCookieName, containerCookieValue, 0);
                  vcSetupPeriodicUiCheck(vcPeriodUiCheckReloadDelay);
                  
                  // If no conatiner URL is directly found, attempt to load/display container via vmBtn click event
                  (containerURL != '')? vmCheckAndDisplayFrame(checkUrl, containerURL, containerCookieName, containerCookieValue, 0) : displayVoc2022(resp);
                 } catch(err) {
                   displayVoc2022(resp);
                 }
                 //$('#labspinbox').hide();
                 //displayVoc2022(resp);
                 
               } else {
                 launchclabs_confirmed(1);
               }
             } else {
               launchclabs_question('Are you sure you want to launch a new lab? When you launch a new lab, the earlier one shown below will be terminated and its content will be deleted completely.<br><br>' + resp.message + '<br>');
             }
           }  else if (resp.status=='Starting') {
             launchclabs_confirmed(2);
           } else {
             launchclabs_confirmed(0);
           }
         } catch(err) {
           launchclabs_confirmed(0); 
         }
      })
     .fail(function(ret_val) {
       alert('failed to retrieve Labs credentials, report this problem to support@vocareum.com if the problem persists.');
       $('#labspinbox').hide();
     });
  }

  // set the cookie for the web stuff
  var str;
  if (true)
  {
    str = "domain_latestWebProxy" + "=" + "https://proxy.vocareum.com/hostip//vocproxy/" + "; path=/" + "; domain=vocareum.com";
  }
  // else
  // {
  //   str = "domain_latestWebProxy" + "=" + "expired" + "; path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT" + "; domain=vocareum.com";
  // }
  document.cookie = str;
  
  function vocWebSocket() {
    // should we have our own class and wait for server connection?
    var url = "wss://proxy.vocareum.com";
    var ws = new WebSocket(url + "/xfer/" + "" + "/client");
    // var ws = new WebSocket("ws://jag.vocareum.com:8088/xfer/" + "" + "/client");
    return ws;
  }

  function vocWebSocketUrl() {
    var baseUrl = "wss://proxy.vocareum.com";
    var fullUrl = baseUrl + "/xfer/" + "" + "/client";
    return fullUrl;
  }

  function vocProxyShowErrMsg(msg) {
    bootbox.dialog(msg, 
                   [{
                     "label" : "Ok",
                     "class" : "btn vocbtn-ac vocbtn-action",
                    }]
    );
  }
  
  function vocProxyGetWsUrl() {
    url = "wss://proxy.vocareum.com/hostip//vocproxy/";
    console.log("Proxy URL: " + url);
    return url;
  }

  function vocProxyWebSocket() {
    if (true)
    {
      vocProxyShowErrMsg("Error: proxy setup failed.<br><br>If a page reload does not resolve it, please contact Vocareum Technical Support");
      return null;
    }
    var url = vocProxyGetWsUrl();
    var ws = new WebSocket(url);
    // Note: this error callback may be overridden by calling code
    //       in that case, it is up to that code to handle the error appropriately
    ws.onerror = function() {
      vocProxyShowErrMsg("Error: WebSocket connection closed due to error - is your WebSocket server running?<br><br>If it is running (and listening on the correct port) and a page reload does not resolve it, please contact Vocareum Technical Support");
    };
    return ws;
  }

  function vocProxyWebSocketUrl() {
    if (true)
    {
      vocProxyShowErrMsg("Error: proxy setup failed.<br><br>If a page reload does not resolve it, please contact Vocareum Technical Support");
      return null;
    }
    return vocProxyGetWsUrl();
  }

  function vocProxyWebUrl() {
    if (true)
    {
      vocProxyShowErrMsg("Error: proxy setup failed.<br><br>If a page reload does not resolve it, please contact Vocareum Technical Support");
      return null;
    }
    url = "https://proxy.vocareum.com/hostip//vocproxy/";
    console.log("Proxy URL: " + url);
    return url;
  }

  function vocCommShowErrMsg(msg) {
    vocProxyShowErrMsg(msg);
  }
  function vocCommGetWsUrl() {
    url = "wss://proxy.vocareum.com/hostip//voccomm/";
    console.log("Proxy URL: " + url);
    return url;
  }
  function vocCommWebSocket(type) {
    if (true)
    {
      vocCommShowErrMsg("Error: comm channel setup failed.<br><br>If a page reload does not resolve it, please contact Vocareum Technical Support");
      return null;
    }
    var url = vocCommGetWsUrl();
    var ws = new WebSocket(url + "/" + type + "?vocmsgs=1");
    // Note: this error callback may be overridden by calling code
    //       in that case, it is up to that code to handle the error appropriately
    ws.onerror = function() {
      vocCommShowErrMsg("Error: WebSocket connection closed due to error - if a page reload does not resolve it, please contact Vocareum Technical Support");
    };
    return ws;
  }
  function vocCommWebSocketUrl() {
    if (true)
    {
      vocCommShowErrMsg("Error: comm channel setup failed.<br><br>If a page reload does not resolve it, please contact Vocareum Technical Support");
      return null;
    }
    return vocCommGetWsUrl();
  }

  var imageBuildModalDotTimer;
  var checkImageBuildTimer;
  var vocBuildImages = null;
  var vocImageBuildNew = true;

  var lastImageName = "";
  var lastBaseImage = null;
  var lastDockerFile = "";

  var savedBuildAccessElements = document.createElement("div");
  var savedBuildAccessActualElement = document.createElement("div");

  function imageBuildClearAccessOptions(saveFirst)
  {
    // remove all .image-build-access - except the first one
    // remove the first .image-build-access-actual

    var currentAccessElements = document.getElementsByClassName("image-build-access");
    for (var i = currentAccessElements.length - 1; i > 0; i--)
    {
      if (saveFirst)
      {
        savedBuildAccessElements.appendChild(currentAccessElements[i]);
      }
      else
      {
        currentAccessElements[i].remove();
      }
    }

    var currentActualAccessElements = document.getElementsByClassName("image-build-access-actual");
    if (currentActualAccessElements.length > 0)
    {
      if (saveFirst)
      {
        savedBuildAccessActualElement.appendChild(currentActualAccessElements[0]);
      }
      else
      {
        currentActualAccessElements[0].remove();
      }
    }
  }

  function imageBuildRestoreAccessOptions()
  {
    if (savedBuildAccessActualElement.children.length > 0)
    {
      document.getElementById("image_build_access_0").appendChild(savedBuildAccessActualElement.firstChild);

      if (savedBuildAccessElements.children.length > 0)
      {
        var parent = document.getElementById("imageBuildModal_body");
        // remember - we stored the access elements in reverse order
        var currentAccessElements = savedBuildAccessElements.children;
        for (var i = currentAccessElements.length - 1; i >=0; i--)
        {
          parent.appendChild(currentAccessElements[i]);
        }
      }
    }
  }

  function getContainerImageFromNameId(name, val)
  {
    if ('vocareum' in vocBuildImages) {
      ib = vocBuildImages['vocareum'];
      for (var key in ib) {
        if (ib.hasOwnProperty(key)) {
          img = ib[key];
          if ((img.name == name) && (img.id == val))
          {
            return img;
          }
        }
      }
    }

    return false;
  }

  function getContainerUserImageFromId(val)
  {
    if ('user' in vocBuildImages) {
      ib = vocBuildImages['user'];
      for (var key in ib) {
        if (ib.hasOwnProperty(key)) {
          img = ib[key];
          if (img.id == val)
          {
            return img;
          }
        }
      }
    }

    return false;
  }

  function imageBaseOptionSelected(target)
  {
    var name = target.options[target.selectedIndex].text;
    var value = target.options[target.selectedIndex].value;

    lastBaseImage = value;
    imageBuildClearAccessOptions(false);

    img = getContainerImageFromNameId(name, value);
    if (img.access)
    {
      try
      {
        var access = JSON.parse(img.access);
        for (var i = 0; i < access.length; i++)
        {
          var acc = access[i];
          var newIndx = addContainerImageAccess();
          document.getElementById("image_build_access_name_" + newIndx).value = acc.name;
          document.getElementById("image_build_access_port_" + newIndx).value = acc.port;
          document.getElementById("image_build_access_type_select_" + newIndx).value = acc.type;
        }
      }
      catch (err)
      {
        alert("Failed to parse access data: " + img.access)
      }
    }
  }

  function imageBuildOptionSelected(target)
  {
    console.log(target.value);

    var image_name = target.options[target.selectedIndex].text;

    if (image_name in vocBuildImages['user'])
    {
      // first remove all the existing "access" stuff
      // if (prevSelectionWasNew - vocImageBuildNew?) -> save it

      if (vocImageBuildNew)
      {
        // previous value was "new"
        imageBuildClearAccessOptions(true);
        lastImageName = document.getElementById('image_build_name').value; // id
        lastBaseImage = document.getElementById("imageBuildModal_select_baseimage").value; // id
        lastDockerFile = document.getElementById('image_build_dockerfile').value;
        vocImageBuildNew = false;
        
      }
      else
      {
        imageBuildClearAccessOptions(false);
      }  

      img = vocBuildImages['user'][image_name];
      
      $('#image_build_name').val(img.id); // id -> name
      $('#image_build_name_div').hide();

      $('#image_build_dockerfile').val(img.dockerfile);
      document.getElementById("imageBuildModal_select_baseimage").value = img.baseimage_id;

      if (img.access)
      {
        try
        {
          var access = JSON.parse(img.access);
          for (var i = 0; i < access.length; i++)
          {
            var acc = access[i];
            var newIndx = addContainerImageAccess();
            document.getElementById("image_build_access_name_" + newIndx).value = acc.name;
            document.getElementById("image_build_access_port_" + newIndx).value = acc.port;
            document.getElementById("image_build_access_type_select_" + newIndx).value = acc.type;
          }
        }
        catch (err)
        {
          alert("Failed to parse access data: " + img.access)
        }
      }

      $('#imageBuildModal_ta').text("retrieving last build log...");
      $('#imageBuildModal_ta').show();
      getImageBuildLog(img.dockerfile, false);
    }
    else
    {
      vocImageBuildNew = true;
      $('#image_build_name_div').show();
      $('#image_build_name').val(lastImageName);
      $('#image_build_dockerfile').val(lastDockerFile);
      $("#imageBuildModal_select_baseimage").val(lastBaseImage);
      $('#imageBuildModal_ta').text("");
      $('#imageBuildModal_ta').hide();
      // for the access elements, first clear everthing and then add back if we've saved anything
      imageBuildClearAccessOptions(false);
      imageBuildRestoreAccessOptions();
    }
  }

  function isEmpty(obj) {
    for (var key in obj) {
      if (obj.hasOwnProperty(key)) {
        return false;
      }
      return true;
    }
  }
  function getImageBuildLog(dockerFile, scrollIt)
  {
    // can now build again
    $('#imageBuildModal_build').show();
    // also re-retrieve image list coz we probably added a new one - in that case scrollIt will be true
    if (scrollIt)
    {
      prepareBuildImageModal(true);
    }
    
    var target = document.getElementById('imageBuildModal_ta');
    var jqxhr = $.ajax('../util/vcput.php?a=checklab_nocfgchk'
                     + '&stepid=' + 2791722                     + '&mode=' + 's'
                     + '&ownerid=' + 3209731                     + '&init=' + dockerFile)
                 .done(function(data, textStatus, jqXHR) {
                   // console.log(data);
                   try {
                     var result = JSON.parse(data);
                     if (result['status'] == 'not built') {
                       msg = 'Status: not built<br>Init file:' + dockerFile + '<br>' + result['message'];
                     } else if (result.status =='error'){
                       msg = 'Status: failed<br>' + 'Init file:' + dockerFile + '<br>' + 'Built at ' + result['time'] + '<br>' + result['message'];
                     } else if (result['status'] == 'building') {
                       msg = 'Status: in progress<br>' + 'Init file:' + dockerFile + '<br>' + 'Started at ' + result['time'] + '<br>' + result['message'];
                     } else if (result['status'] == 'success') {
                       msg = 'Status: completed<br>' + 'Init file:' + dockerFile + '<br>' + 'Built at ' + result['time'] + '<br>' + result['message']
                           + '<br>' + 'Status: completed<br>';
                     } else {
                       msg = 'Internal error, report this to support.vocareum.com<br>' + 'Init file: ' + dockerFile;
                     }
                     target.innerHTML = msg;
                     if (scrollIt) {
                       $("#imageBuildModal_ta").animate({
                         scrollTop:$("#imageBuildModal_ta")[0].scrollHeight - $("#imageBuildModal_ta").height()
                       },1000);
                     }
                   }
                   catch (err) {
                     var htm = target.innerHTML;
                     target.innerHTML = htm + '<br>' + 'Error: Exception retrieving image build log: ' + err;
                   }
                 })
                 .fail(function(data, textStatus, jqXHR) {
                   var htm = target.innerHTML;
                   target.innerHTML = htm + '<br>' + 'Error retrieving image build log';
                 });
  }

  function checkImageBuild(dockerFile)
  {
    var blds = [];
    blds.push(dockerFile);
    var jqxhr = $.ajax('../util/vcput.php?a=chkbld'
                     + '&stepid=' + 2791722                     + '&mode=' + 's'
                     + '&ownerid=' + 3209731                     + '&files=' + JSON.stringify(blds))
                 .done(function(data, textStatus, jqXHR) {
                   console.log("CHK DONE");
                   try {
                     console.log(data);
                     var resultAll = JSON.parse(data);
                     var result = resultAll[0];
                     if (result['status'] == 'error') {
                       clearTimeout(imageBuildModalDotTimer);
                       $('#imageBuildModal_ta').text("Build Error");
                       getImageBuildLog(dockerFile, true);
                     }
                     else if (result['status'] == 'success') {
                       clearTimeout(imageBuildModalDotTimer);
                       $('#imageBuildModal_ta').text(result['status']);
                       getImageBuildLog(dockerFile, true);
                     }
                     else if (result['status'] != 'building') {
                       $('#imageBuildModal_ta').text(data); // should never really happen
                     }
                     else {
                       // building
                       checkImageBuildTimer = setTimeout(checkImageBuild, 3000, dockerFile);
                     }
                   }
                   catch (err) {
                     clearTimeout(imageBuildModalDotTimer);
                     $('#imageBuildModal_ta').text('Error: Exception retrieving image build status: ' + err);
                   }
                 })
                 .fail(function(data, textStatus, jqXHR) {
                   clearTimeout(imageBuildModalDotTimer);
                   $('#imageBuildModal_ta').text('Failure retrieving image build status');
                   console.log("CHK FAILED");
                 });
  }

  function imageBuildModalModalDots()
  {
    text = $('#imageBuildModal_ta').text();
    $('#imageBuildModal_ta').text(text + '.');
    imageBuildModalDotTimer = setTimeout(imageBuildModalModalDots, 1000);
  }

  var firsTimeShowingImageModal = true;

  function showBuildImageModal()
  {
    console.log(vocBuildImages);

    // setup the select
    // if image_name is set, we'll try to find it in this select - if found, set selected
    // otherwise select "create new image"
    var imageBuildName = $('#image_build_name').val();
    console.log("image build name: " + imageBuildName);
    var foundSelected = false;

    var data = '';
    data += '<select id="imageBuildModal_select" name="imageBuildModal_select" style="width:100%; margin-bottom:0px" onchange="imageBuildOptionSelected(this)" >';

    data += '<option value="0">Create new image</option>';

    // data += '<option selected disabled hidden>Select image</option>';

    // images built in this course
    if ('user' in vocBuildImages) {
      ic = vocBuildImages['user'];
      if (Object.keys(ic).length > 0) {
        data += '<optgroup label="Use existing image">';
        for (var key in ic) {
          if (ic.hasOwnProperty(key)) {
            img = ic[key];
            // console.log(img);
            if (imageBuildName == img.id) {
              data += '<option selected value=' + img.id + '>' + img.name + '</option>';
              foundSelected = img;
            } else {
              data += '<option value=' + img.id + '>' + img.name + '</option>';
            }
          }
        }
        data += '</optgroup>';
      }
    }

    $('#imageBuildModal_select_div').html(data);

    if (foundSelected)
    {
      // no need to show the name div
      $('#image_build_name_div').hide();
    }

    // select-base
    data = '';
    data += '<select id="imageBuildModal_select_baseimage" name="imageBuildModal_select_baseimage" style="width:100%; margin-bottom:0px"  onchange="imageBaseOptionSelected(this)">';
    var foundSelectedBaseImage = false;
    if ('vocareum' in vocBuildImages) {
      ib = vocBuildImages['vocareum'];
      for (var key in ib) {
        if (ib.hasOwnProperty(key)) {
          var dumpedIt = false;
          img = ib[key];
          if (foundSelected) { 
            if (foundSelected.baseimage_id == img.id) { 
              data += '<option selected value=' + img.id + '>' + img.name + '</option>';
              foundSelectedBaseImage = img;
              dumpedIt = true;
            }
          }
          else {
            if (lastBaseImage == img.id) { 
              data += '<option selected value=' + img.id + '>' + img.name + '</option>';
              foundSelectedBaseImage = img;
              dumpedIt = true;
            }
          }
          if (dumpedIt == false) {
            data += '<option value=' + img.id + '>' + img.name + '</option>';
          }
        }
      }
    }

    data += '</select>';

    $('#imageBuildModal_select_baseimage_div').html(data);

    if (foundSelectedBaseImage == false)
    {
      $("#imageBuildModal_select_baseimage").prop("selectedIndex", -1);
    }

    if (firsTimeShowingImageModal)
    {
      $('#imageBuildModal_ok').hide();
      $('#imageBuildModal_cancel').show();
    }
    else
    {
      // whatever is set is fine
    }
    $('#imageBuildModal_build').show();

    // $('#imageBuildModal_ta').hide();
    $("#imageBuildModal").css('height', 'auto');
    $('#imageBuildModal').modal();

    firsTimeShowingImageModal = false;
  }

  function prepareBuildImageModal(showModal)
  {
    var jqxhr = $.ajax('../util/vcput.php?a=getImages'
                     + '&courseid=' + 117181                     + '&isbuildimage=1')
                 .done(function(data, textStatus, jqXHR) {
                   try {
                     console.log(data);
                     var result = JSON.parse(data);
                     if (result['status'] == 'error') {
                       alert('Error getting image list: ' + result['message']);
                     }
                     else {
                       if (typeof result['images'] === 'undefined') {
                         alert('Error: no image list found');
                       }
                       else {
                         vocBuildImages = result['images'];
                         if (showModal) {
                           showBuildImageModal();
                         }
                       }
                     }
                   }
                   catch (err) {
                     alert('Error: Exception getting image list: ' + err);
                   }
                 })
                 .fail(function(data, textStatus, jqXHR) {
                   alert('Error: Failure getting image list');
                 });
  }

  function buildContainerImage()
  {
    var imageName = document.getElementById('image_build_name').value.trim();
    var dockerFile = document.getElementById('image_build_dockerfile').value.trim();

    if (imageName === "")
    {
      alert("The image name needs to be set");
      return;
    }
    if (dockerFile === "")
    {
      alert("The docker file name needs to be set");
      return;
    }

    // imageName could be an id for existing images - if so, convert it to name
    var mappedName = getContainerUserImageFromId(imageName);
    imageName = mappedName ? mappedName.name : imageName;

    var currentAccessActualElements = document.getElementsByClassName("image-build-access-actual");
    var accessArray = [];
    for (var i = 0; i < currentAccessActualElements.length; i++)
    {
      var id = currentAccessActualElements[i].dataset.id;
      var name = document.getElementById("image_build_access_name_" + id).value.trim();
      var port = document.getElementById("image_build_access_port_" + id).value.trim();
      var e = document.getElementById("image_build_access_type_select_" + id);
      var type = e.options[e.selectedIndex].text;
      console.log("ACCESS " + id + " : " + name + " / " + type + " / " + port);
      if ((name === "") || (port === "") || (type == 0))
      {
        alert("At least one access type definition is incomplete; please set all the fields or delete the row");
        return;
      }
      if (! (/^\d+$/.test(port)))
      {
        alert("Port numbers need to be positive integers; please fix the incorrect port value: " + port);
        return;
      }
      // accessArray.push({ "name" : name, "type" : type, "port" : port });
      var arr = {};
      arr["name"] = name;
      arr["type"] = type;
      arr["port"] = port;
      accessArray.push(arr);
    }
    
    // right now we don't give users a choice - since we always start from our base
    var userArray = {};
    userArray["user"] = "labsuser";
    userArray["suser"] = "labsadmin";
    userArray["sysuser"] = "";

    var mountsArray = {};

    // if this is a supposed to be a new image, make sure that it does not already exist
    if (vocImageBuildNew)
    {
      if (vocBuildImages) {
        if ('user' in vocBuildImages) {
          if (imageName in vocBuildImages['user']) {
            alert("An image with this name '" + imageName + "' already exists; please select a new unique name");
            return;
          }
        }
      }
    }
    var select_baseimage = document.getElementById('imageBuildModal_select_baseimage');
    
    var imageSelVal = select_baseimage.value;
    var imageSelTxt = select_baseimage.options[select_baseimage.selectedIndex].text.trim();

    $('#imageBuildModal_ok').show();
    $('#imageBuildModal_cancel').hide();
    $('#imageBuildModal_build').hide();
    $('#imageBuildModal_ta').text("building..."); // "Building image.");
    $('#imageBuildModal_ta').show();
    $("#imageBuildModal").animate({ scrollTop: $('#imageBuildModal').prop("scrollHeight")}, 1000);
    // imageBuildModalDotTimer = setTimeout(imageBuildModalModalDots, 1000);

    var jqxhr = $.ajax({
      type: 'POST',
      url: '../util/vcput.php?a=buildImage&stepid=2791722&version=0&mode=s',
      data: {
        baseimage: imageSelTxt,
        baseimage_id: imageSelVal,
        imagename: imageName,
        dockerfile: dockerFile,
        access: JSON.stringify(accessArray),
        users: JSON.stringify(userArray),
        mounts: JSON.stringify(mountsArray)
      }
    })
    .done(function(data, textStatus, jqXHR) {
      try {
        console.log(data);
        var result = JSON.parse(data);
        if (result['status'] == 'error') {
          $('#imageBuildModal_ta').text('Error: ' + result['message']);
          // put Cancel/Build back
          $('#imageBuildModal_ok').hide();
          $('#imageBuildModal_cancel').show();
          $('#imageBuildModal_build').show();
        }
        else {
          if (result['status'] == 'building') {
            $('#imageBuildModal_ta').text("building...");
            imageBuildModalDotTimer = setTimeout(imageBuildModalModalDots, 1000);
            // need to periodically check the build status
            checkImageBuildTimer = setTimeout(checkImageBuild, 3000, dockerFile);
          }
          else {
            $('#imageBuildModal_ta').text(result['status']);
          }
          vocImageBuildNew = false;
        }
      }
      catch (err) {
        $('#imageBuildModal_ta').text('Error: Exception building image: ' + err);
        // put Cancel/Build back
        $('#imageBuildModal_ok').hide();
        $('#imageBuildModal_cancel').show();
        $('#imageBuildModal_build').show();
      }
    })
    .fail(function(data, textStatus, jqXHR) {
      console.log("BuldImage: Fail");
      $('#imageBuildModal_ta').text('Error: Build Image failed');
      // put Cancel/Build back
      $('#imageBuildModal_ok').hide();
      $('#imageBuildModal_cancel').show();
      $('#imageBuildModal_build').show();
    });
  }

  function deleteAccessContainerImage(e)
  {
    var target = e.target;
    var id = target.dataset.id;

    var firstBuildAccess = document.getElementById("image_build_access_0");

    var targetAncestor = target.closest('.image-build-access');

    var currentAccessElements = document.getElementsByClassName("image-build-access");

    if (targetAncestor != firstBuildAccess)
    {
      for (var i = 0; i < currentAccessElements.length; i++)
      {
        var el = currentAccessElements[i];
        if (el.dataset.id == id)
        {
          el.remove();
          break;
        }
      }
    }
    else
    {
      // remove the first one (image-build-access-actual) - but we need to then move the next ones (if any) up
      
      var actualAccessElement = targetAncestor.querySelector(".image-build-access-actual");
      actualAccessElement.remove();

      if (currentAccessElements.length > 1)
      {
        // get the first image-build-access-actual and append it to firstBuildAccess

        var imageModalBody = document.getElementById("imageBuildModal_body");
        var firstImageBuildAccessActual = imageModalBody.querySelector(".image-build-access-actual");
        var firstImageBuildAccessActualParent = firstImageBuildAccessActual.closest('.image-build-access');
        
        firstImageBuildAccessActual.classList.remove("offset3");
        firstBuildAccess.appendChild(firstImageBuildAccessActual);
        firstImageBuildAccessActualParent.remove();
      }
    }
  }

  function addContainerImageAccess()
  {
    var currentAccessElements = document.getElementsByClassName("image-build-access-actual");
    var myId = currentAccessElements.length;
    console.log("MY ID: " + myId);

    // myId == 0 => this is the first access type (inline with the "Access:" label)

    if (myId > 0)
    {
      var topDiv = document.createElement("div"); 
      topDiv.classList.add("control-group");
      topDiv.classList.add("row-fluid");
      topDiv.classList.add("image-build-access");
      // topDiv.setAttribute("name", "image_build_access");
      topDiv.setAttribute("id", "image_build_access_" + myId);
      topDiv.setAttribute('data-id', myId);
    }
    else
    {
      topDiv = document.getElementById("image_build_access_0");
    }

    middleDiv = document.createElement("div"); 
    middleDiv.classList.add("span4");
    middleDiv.classList.add("row-fluid");
    middleDiv.classList.add("image-build-access-actual");
    middleDiv.setAttribute('data-id', myId);
    // middleDiv.setAttribute("name", "image_build_access_actual");
    middleDiv.setAttribute("id", "image_build_access_actual_" + myId);
    if (myId > 0)
    {
      middleDiv.classList.add("offset3");
    }
    topDiv.appendChild(middleDiv);
    
    // name
    nameOuterDiv = document.createElement("div"); 
    nameOuterDiv.classList.add("span4");
    middleDiv.appendChild(nameOuterDiv);

    nameInnerDiv = document.createElement("div"); 
    nameInnerDiv.classList.add("span12");
    nameOuterDiv.appendChild(nameInnerDiv);

    input = document.createElement("input");
    input.className = "span12";
    input.setAttribute("id", "image_build_access_name_" + myId);
    input.setAttribute("placeholder", "name");
    input.setAttribute("type", "text");
    input.setAttribute("maxlength", "80");
    input.setAttribute('data-id', myId);
    input.style.marginBottom = "0px";
    nameInnerDiv.appendChild(input);

    // type
    typeOuterDiv = document.createElement("div"); 
    typeOuterDiv.classList.add("span4");
    middleDiv.appendChild(typeOuterDiv);

    typeInnerDiv = document.createElement("div"); 
    typeInnerDiv.classList.add("span12");
    typeOuterDiv.appendChild(typeInnerDiv);

    var select = document.createElement("select");
    select.style.width = "100%";
    select.style.marginBottom = "0px";
    select.setAttribute('data-id', myId);
    select.setAttribute("id", "image_build_access_type_select_" + myId);

    var op = new Option("Type", 0, true, true);
    op.disabled = true;
    op.hidden = true;
    select.appendChild(op);
          op = new Option("http", "http");
      select.appendChild(op);
    
    typeInnerDiv.appendChild(select);

    // port
    portOuterDiv = document.createElement("div"); 
    portOuterDiv.classList.add("span3");
    middleDiv.appendChild(portOuterDiv);

    portInnerDiv = document.createElement("div"); 
    portInnerDiv.classList.add("span12");
    portOuterDiv.appendChild(portInnerDiv);

    input = document.createElement("input");
    input.className = "span12";
    input.setAttribute("id", "image_build_access_port_" + myId);
    input.setAttribute("placeholder", "port");
    input.setAttribute("type", "text");
    input.setAttribute("maxlength", "80");
    input.setAttribute('data-id', myId);
    input.style.marginBottom = "0px";
    input.style.textAlign = "right";
    portInnerDiv.appendChild(input);

    // trash
    trashOuterDiv = document.createElement("div"); 
    trashOuterDiv.classList.add("span1");
    trashOuterDiv.classList.add("row-fluid");
    middleDiv.appendChild(trashOuterDiv);

    button = document.createElement("button");
    button.classList.add("icon-button");
    // button.setAttribute("id", myId);
    button.style.paddingTop = "8px";
    trashOuterDiv.appendChild(button);

    icon = document.createElement("i");
    icon.classList.add("icon-trash");
    // icon.classList.add("icon-large");
    icon.setAttribute('data-id', myId);
    icon.addEventListener('click', deleteAccessContainerImage);
    button.appendChild(icon);

    if (myId > 0)
    {
      parent = document.getElementById("imageBuildModal_body");
      parent.appendChild(topDiv);
    }

    // scroll up in case we added more access elements that can be displayed together
    $("#imageBuildModal_body").animate({
      scrollTop:$("#imageBuildModal_body")[0].scrollHeight - $("#imageBuildModal_body").height()
    },100);

    return myId;
  }

  // from:https://github.com/jserz/js_piece/blob/master/DOM/ChildNode/remove()/remove().md
  // node.remove polyfill for IE
  (function (arr) {
    arr.forEach(function (item) {
      if (item.hasOwnProperty('remove')) {
        return;
      }
      Object.defineProperty(item, 'remove', {
        configurable: true,
        enumerable: true,
        writable: true,
        value: function remove() {
          if (this.parentNode === null) {
            return;
          }
          this.parentNode.removeChild(this);
        }
      });
    });
  })([Element.prototype, CharacterData.prototype, DocumentType.prototype]);

</script>
  


	


	

	

<link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/codemirror.css">
<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/codemirror.js"></script>

<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/clike.js"></script>
<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/xml.js"></script>
<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/python.js"></script>
<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/php.js"></script>

<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/markdown.js"></script>
<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/gfm.js"></script>
<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/overlay.js"></script>

<link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/neat.css">

<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/javascript.js"></script>
<!-- removed from later versions
<script src="../shared/codemirror-5.25.2/keymap/extra.js"></script> 
-->
<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/active-line.js"></script>
<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/matchbrackets.js"></script>
<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/search.js"></script>
<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/searchcursor.js"></script>
<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/dialog.js"></script>
<link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/dialog.css">

<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/closebrackets.js"></script>
<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/closetag.js"></script>


<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/diff_match_patch.js"></script>
<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/merge.js"></script>
<link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/merge.css">




<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/css.js"></script>
<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/sql.js"></script>

<link rel="stylesheet" href="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/show-hint.css">
<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/show-hint.js"></script>
<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/javascript-hint.js"></script>
<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/html-hint.js"></script>
<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/xml-hint.js"></script>
<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/sql-hint.js"></script>
<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/css-hint.js"></script>

<style type="text/css">

.breadcrumbs {
    z-index: 999 !important;
}

.content pre {
    padding: 5px 0px !important;
    margin: 0px 0px 4px !important;
    line-height: 15px !important;
    border: none !important;
    font-size: 12px !important;
    background: transparent !important;    
}

div:-webkit-full-screen {
  width: 100% !important;
  background-color: white;
}
div:-moz-full-screen {
  width: 100% !important;
  background-color: white;
}
div:-ms-fullscreen {
  width: 100% !important;
  background-color: white;
}
div:fullscreen {
  width: 100% !important;
  background-color: white;
}

/* While in fullscreen, hide any children with class 'tohide' */
:-webkit-full-screen .tohide {
  display: none;
}
:-moz-full-screen .tohide {
  display: none;
}
:-ms-fullscreen .tohide {
  display: none;
}
:fullscreen .tohide {
  display: none;
}

         

#wrap {
  background-color: white;
}
#page-content > div {
  background-color: white;
}
html,
body {
      background-color: white!important;
}

#page-content {
    position: absolute;
    left: 0;
    right: 0;
    top: 0px;
    bottom: 10px;
    background-color: white;
}

body > div > #page-content {
    top: 0px;
}
#page-content > div,
#page-content #editorbox,
#page-content #editordiv,
#page-content #editordiv > div,
#page-content #editordiv .tab-content #filelisting .widget-box,
#page-content #editordiv .tab-content #filelisting .widget-box .widget-body,

#page-content #editordiv #editorTabs,

#page-content #editordiv .tab-content,

#page-content #editordiv .tab-content #filelisting {
    height: 100%;
    overflow: auto;
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box; 
}

#page-content #editordiv .tab-content #filelisting .widget-box {
    margin: 0;
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}

#page-content #editordiv .tab-content #codeframe,
#page-content #editordiv .tab-content #buildframe,
#page-content #editordiv .tab-content #htmlframe,
#page-content #editordiv .tab-content #terminalframe
#page-content #editordiv .tab-content #gradeframe
{
    height: 100%;
    position: relative;
    overflow: hidden;
}

#page-content #editordiv .tab-content #htmlframe
{
    background-color: white;
}


#page-content #editordiv .tab-content #codeframe #codeform0,
#page-content #editordiv .tab-content #htmlframe #div_htmlframe,
#page-content #editordiv .tab-content #buildframe #buildtextarea {
    position: absolute;
    top: 1px;
    bottom: 0;
    left: 0px;
    right: 0px;
}



.CodeMirror {
    font-size: 13px;
    border: 1px solid #eee;
    width: auto;
    height: 95%;
    -moz-box-sizing: border-box;
    -webkit-box-sizing: border-box;
    box-sizing: border-box;
}

.CodeMirror-scroll {
  overflow-y: auto;
  overflow-x: auto;
  margin-bottom: -10px !important;
  padding-bottom: 10px !important;
}


.CodeMirror-linenumber {
  color: #000 !important;
}

.CodeMirror-hints, .CodeMirror-hint, .CodeMirror-hint-active { 
    z-index:2147483647 !important;
}

#buildtextarea {
	background-color: white;
    overflow: auto;
    border: 1px solid light-gray;
    padding: 5px;
    margin-bottom: 0;
}

.tree {
  font-size: 12px;
}

.tree .tree-selected > [class*="icon-"]:first-child {
  color: 0 !important;
}

#video-viewer-modal {
    height: 80% !important;
}

#image-viewer-modal {
    height: 80% !important;
}

#gallery-viewer-modal {
    height: 80% !important;
}

#image-viewer-modal .modal-body {
    max-height: none;
    position: absolute;
    left: 0;
    right: 0;
    top: 40px;
    bottom: 0;
}

#image-viewer-modal .modal-body table,
#image-viewer-modal .modal-body table tbody,
#image-viewer-modal .modal-body table tbody td {
    height: 100%;
    width: 100%;
}

#image-viewer-modal .modal-body table tbody td {
    text-align: center;
}

#image-viewer-modal .modal-body img {
    max-height: 100%;
    max-width: 100%;
}

.modal-80percent {
    height: 80% !important;
}

#other-viewer-modal {
    height: 80%;
}

#other-viewer-modal .modal-body {
    max-height: none;
    position: absolute;
    left: 0;
    right: 0;
    top: 40px;
    bottom: 0;
}

#other-viewer-modal .modal-body table,
#other-viewer-modal .modal-body table tbody,
#other-viewer-modal .modal-body table tbody td {
    height: 100%;
    width: 100%;
}

#other-viewer-modal .modal-body table tbody td {
    text-align: center;
}

#other-viewer-modal .modal-body img {
    max-height: 100%;
    max-width: 100%;
}


#modal-table-widgetoutput {
    height: 80%;
}

#modal-table-widgetoutput .modal-body {
    max-height: none;
    position: absolute;
    left: 0;
    right: 0;
    top: 40px;
    bottom: 0;
}

#modal-table-widgetoutput .modal-body table,
#modal-table-widgetoutput .modal-body table tbody,
#modal-table-widgetoutput .modal-body table tbody td {
    height: 100%;
    width: 100%;
}

#modal-table-widgetoutput .modal-body table tbody td {
    text-align: center;
}

#modal-table-widgetoutput .modal-body img {
    max-height: 100%;
    max-width: 100%;
}

.widgetoutput pre {
    padding: 5px 0px !important;
    margin: 0px 0px 4px !important;
    line-height: 15px !important;
    border: none !important;
    font-size: 12px !important;
    background: transparent !important;    
}




#browser-viewer-modal {
    height: 80% !important;
}

#modal-upload-wait {
    height: 80% !important;
}

#modal-git-wait {
    height: 60% !important;
    width : 60% !important;
}

#browser-viewer-modal .modal-body {
    max-height: none;
    position: absolute;
    padding: 0px;
    left: 0;
    right: 0;
    top: 38px;
    bottom: 0;
}

#modal-table-report-all-html {
    height: 80% !important;
}

#modal-table-report-all-html .modal-body {
    max-height: none;
    position: absolute;
    padding: 0px;
    left: 0;
    right: 0;
    top: 38px;
    bottom: 0;
}

#report_aws_div .modal-body0 {
    position: relative;
    max-height: 100%;
    overflow-y: auto;
}

.vocidetoolbarbtn {
    background-color: transparent;
    border: 1px solid lightgray; 
    margin-right: 4px; 
    margin-left: 0px;
    color: rgb(0, 0, 0);}

.vmtoolbarbtn {
    border-radius: 3px!important;
    background-color: transparent;
    border: 1px solid lightgray; 
    margin-right: 4px; 
    margin-left: 0px;
    color: rgb(0, 0, 0);}

#waitClusterButton:disabled,
#waitClusterButton[disabled] {
  border: 0px;
}

#waitClusterButton:disabled:hover { 
  background-color: #abbac3 !important;
}

.jupyter-modal-td-file {
  text-align:left !important;
  border:0px !important; 
  padding-bottom:0px !important;
}
.jupyter-modal-td-checkbox {
  margin-bottom:6px !important;
  width:20px !important;
}


    .merge-modal-td-asn {
      text-align:left !important;
      border:0px !important; 
      padding-bottom:0px !important;
      padding-left:0px !important;
      padding-top:4px !important;
    }
    .merge-modal-td-checkbox {
      margin-bottom:6px !important;
      margin-right:6px !important;
      width:20px !important;
    }
  
.clabs-state-modal-tr-vm {
    border-bottom:1px solid lightgray;
}
.clabs-state-modal-td-vm {
  text-align:left !important;
  border:0px !important; 
  padding-bottom:0px !important;
}
.clabs-state-modal-td-state {
  text-align:right !important;
  border:0px !important; 
  padding-bottom:4px !important;
}

.icon-button {
    appearance: none;
    -webkit-appearance: none;
    -moz-appearance: none;
    outline: none;
    border: 0;
    background: transparent;
}

.autograde-modal {
  max-height: 85vh;
  /* background-color: yellow; */
}
.autograde-modal-header {
  background-color: #394b58;
  color: white;
}
.autograde-modal-content {
  /* background-color: pink; */
}
.autograde-modal-body {
  /* background-color: coral; */
  height: 74vh;
  max-height: 74vh;
}
.autograde-iframe {
  width: 100%;
  height: 98%;
  overflow-y: auto;
}
.autograde-cancel {
  margin-left: auto;
}
.modal-body-full-height {
  max-height: 98%;
}
</style>

      

	
    <div class="span12" id="editordiv" style="margin-left:0px;margin-right:0px; "><!-- editor and logs -->	

			    <div class="tabbable" id="editorTabs" style="overflow:hidden; height: 100%;"> <!-- start tabbable -->
					    <ul class="nav nav-tabs" id="idenav" style=" 
                                                        
                                                        background-color:white;  
                                                        "> <!-- ul tabs -->
									<!-- dropdown actions -->
                                                                                   <span class="span1" style="margin-left:40px; width:300px; min-width:200px; max-width:500px;"></span>
                                                                <select name="widgetfiles" class="pull-left valid hidden-1" id="widgetfiles" style="
                                     
                                    display:none; 
                                  ">
                                </select>
                                   <div class="pull-right">

                    
                	

                
                                      
                  
                                              <div class="btn-group hide" style="margin-left:0px;">
                                <a id="licheck" class="btn vocbtn2 vocbtn-status commandbutton" data-toggle="tab" href="#buildframe" data-command="Submission">
                                      Check
                                  </a>
                            </div>
                                        
                                                       
                                                                                  <div id="reports" class="btn-group" style="margin-left:0px;">
                          <div id="reportsdropdown" data-toggle="dropdown" class="dropdown-toggle btn vocbtn2 vocbtn-status" href="#" tabindex="0" role="button">
                             <i id="detailspinbox" class="icon-spin icon-spinner" style="display: none;"></i>
                             Details <i class="icon-caret-down"></i>
                          </div>
                          <ul class="dropdown-menu dropdown-info dropdown-yellow pull-right dropdown-caret dropdown-close" style="padding-top: 0px; border: 1px solid darkgray;">

                            <li>
                            <table class="table" style="margin-bottom:0px !important; border: 1px solid lightgray">
                                      <thead>
                                  <tr>
                                    <th style="width:140px">Details</th>
                                    <th></th>
                                  </tr>
      
                                      </thead>
                                      <tbody id="subdetails">
          
                                    <tr><td>Last submitted: </td><td>Apr-21-2024 4:33:19 pm PDT</td></tr><tr></tr><tr><td>Submission count: </td><td>1</td></tr><tr></tr><tr><td>Total allowed: </td><td>1</td></tr><tr></tr><tr><td>Due date: </td><td>None</td></tr><tr>
		      
                                                                        
                                                                        </tr><tr><td>AWS:</td><td> <div class="btn vocbtn2 vocbtn-status" data-toggle="tab" href="#" tabindex="0" role="button" style="border:0px; line-height:17px !important" onclick="showawsact(0);" id="showawsbtn">Show</div></td></tr>                                                                          </tbody>

                                </table>
                                                                            
                                      
                            </li>  		      

                            
                                                          <li>                     
                                                              <div style="border-top: 1px solid;"></div>
                                <a href="#" id="submissionreportbutton" data-toggle="modal" style="font-size:95%; padding-top: 10px;">
                                    <i class="icon-caret-right"></i>View Submission Report
                                </a>
                                                              <div id="SubmissionReportStatus" style="display:none; padding: 3px; margin: 3px 5px;"></div>
                                <div id="SubmissionReportProgress" style="display:none; margin: 3px 5px; margin-left:0px;"></div>
                              </li>
                                                                        
                                                                        
                      </ul>
                        </div>
                                         

                
                                
                
                                                                        
                                                                        
                                                                        
            <div class="btn-group" style="margin-left:0px;" id="awsbtn">
                      <div class="btn vocbtn2 vocbtn-status" data-toggle="tab" href="#" tabindex="0" role="button">
                        AWS
                      </div>
                    </div>
                                                        <div class="btn-group" style="margin-left:0px;">
                      <div class="btn vocbtn2 vocbtn-status" data-toggle="tab" id="startawslab" href="#" tabindex="0" role="button" onclick="startawslab(1);">
                        Start Lab
                      </div>
                    </div>
                                                        <div class="btn-group" style="margin-left:0px;">
                      <div class="btn vocbtn2 vocbtn-status" data-toggle="tab" href="#" tabindex="0" role="button" id="endawslab" onclick="endawslab(1);">
                        End Lab
                      </div>
                    </div>
                                                                                        <div class="btn-group" style="margin-left:0px;" id="awsstimeS">
                      <div class="btn vocbtn2 vocbtn-status" data-toggle="tab" href="#" tabindex="0" style="pointer-events:none;">
                                <span id="awsstimetxtS">&nbsp;00:00:00</span>&nbsp;&nbsp;
                         <div style="display:none;">
                                <span id="awsstimetxtT">&nbsp;00:00:00</span>&nbsp;&nbsp;
                                <span id="awsstimetxtB">&nbsp;$0.00</span>
                         </div>
                      </div>
                    </div>
                                 
                <!-- cluster start -->
                                <!-- cluster end -->
                
                <!-- new ide -->
                                
                                                                
                                                                      <div class="btn-group" id="grade-window" style="margin-left:0px;">
                      <div class="btn vocbtn2 vocbtn-status" tabindex="0" role="button" data-toggle="modal" id="gradesIdeBtn">
                          Grades                      </div>
                    </div>
                                                                                          
                
                  <!-- commands end -->
                  <!-- commands start -->
                                          <!-- commands end -->

                                  
                
                
                    
                    
		   		  
		        		  
                      </div>
							</ul> <!-- ul tabs end -->

                     <div class="tab-content" id="idebox" style="overflow:hidden; padding:4px; padding-bottom: 5px;  border:0px; padding:0px"> <!-- tab-content start -->

                  
<!-- start of buildframe -->
<!-- end of buildframe -->
                              
                      
                                                            <textarea id="scratchpad" class="hide"></textarea>                                   

                                  
                       <!--   mhui -->
                       <!-- gradepanel -->

<div id="gradeframe" class="span1" style="float: right; width:250px; height: 100%; border: 1px solid lightgray; margin-bottom: 0px; margin-right: 0px; margin-left: 0px; display: none;">
  <div id="grades-panel" style="border: 0px solid red; width: 100%; height: 100%;">
    <div id="gradeframehide" tabindex="0" role="button" aria-label="Close grade panel" class="" style="float: right; cursor: pointer; padding: 5px 8px 8px 8px; line-height: 20%; margin-right: 8px; font-size: 200%; border: 0px solid red;">-</div>
      <div class="btn-group span2" id="gradedetails" style="float: right; padding-top: 5px; display: none;">
        <a href="https://labs.vocareum.com/main/main.php?m=editor&amp;asnid=2791721&amp;stepid=2791722&amp;hideNavBar=1" target="_blank" class="btn vocbtn2 vocbtn-status" tabindex="0" role="button">Details
        </a>
      </div>
    <div style="clear: right;"></div>
    <div id="gradespinner" class="center hidden-1" style="border: 0px solid red; width: 100%; height: 100%; margin-top: 20px; background-color: #fff;">
      <i class="icon-spinner icon-spin light-grey bigger-275" style="width: 42px; height: 42px; margin: auto;"></i>
    </div>
    <iframe style="overflow: auto; border: 0px solid blue; width: 100%; height: 100%;" src="about: blank"></iframe>
  </div>
</div>

<div class="span1 ui-draggable ui-draggable-handle" id="gradeframedivider" style="float: right; border: 0px solid red; display: none; display:none; width:8px; height:90%; margin:0px; background:url('../shared/img/vocdivider-v.png') no-repeat scroll 3px 50% transparent;padding: 5px 0px;cursor: col-resize;"></div>



<script type="text/javascript">

var addEvent = function(object, type, callback) {
    if (object == null || typeof(object) == 'undefined') return;
    if (object.addEventListener) {
        object.addEventListener(type, callback, false);
    } else if (object.attachEvent) {
        object.attachEvent("on" + type, callback);
    } else {
        object["on"+type] = callback;
    }
};

addEvent(window, "resize", function(event) {
        var jde = false;
        var rde = false;
        
        if (document.getElementById('gradeframe').style.display === 'none') {
          if (jde || rde) {
               $('#jupyterIframeParent').width($('#jidebox').width());
          }
        } else {
          if (jde || rde) {
             $('#jupyterIframeParent').width(document.getElementById('gradeframedivider').offsetLeft-5);
          }
       }
});

$('#gradeframehide').on('click', function() {
    var jde = false;
    var rde = false;
    
      document.getElementById('gradeframe').style.display = "none";
      document.getElementById('gradeframedivider').style.display = "none";
      if (jde || rde) {
           $('#jupyterIframeParent').width($('#jidebox').width());
      }

});

var input = document.getElementById("gradeframehide");

//Execute a function when the user releases a key on the keyboard
input.addEventListener("keyup", function(event) {
// Number 13 is the "Enter" key on the keyboard
if (event.keyCode === 13) {
 // Cancel the default action, if needed
 event.preventDefault();
 // Trigger the button element with a click
 document.getElementById("gradeframehide").click();
}
});

$('#gradeframedivider').draggable({
axis: 'x',
containment: 'parent',
helper: 'clone',
iframeFix: true,
drag: function (event, ui) {
    var jde = false;
    var rde = false;
    var filetree = false;
    
    if (jde || rde)
    {
      var jidebox_width = $('#jidebox').width();
      var width = jidebox_width - ui.offset.left;
      //if (width < 100) return;

      $('#gradeframe').width(width);
      $('#jupyterIframeParent').width(ui.offset.left-10);
      $('#jupyterIframeParent').css('pointer-events', 'none');
    }
    else
    {
      var width = $("#idebox").width() - ui.offset.left;
      var width_of_right_panel = $("#idebox").width() - width - $('#filelisting').width();
      if (width_of_right_panel < 200) {
        return;
      }
      if (width < 100) {
        return;
      }
      $('#gradeframe').width(width);
    }
},

start: function() {
    var jde = false;
    var rde = false;
    
    if (jde || rde)
    {
    	$('#jupyterIframe').css('pointer-events', 'none');
    }
              $('#readeMeIframe').css('pointer-events', 'none');
    },

stop: function() {
    var jde = false;
    var rde = false;
    
    if (jde || rde)
    {
    	$('#jupyterIframe').css('pointer-events', 'auto');
    }
              $('#readeMeIframe').css('pointer-events', 'auto');
    }

});

</script>
                       
                                         

                                                <div id="instructions" class="span1 " style="height: 98%; margin-left:0px; border-top: 1px solid #eee;width:100%"> <!-- instructions -->
                          <div class="content" style="height: 98%">
                                 <span id="readmeframehide" tabindex="0" role="button" aria-label="Close panel" style="float: right; cursor: pointer; padding: 5px 8px 8px 8px; line-height: 20%; margin-right: 8px; font-size: 200%; border: 0px solid red;  display:none; ">-</span>
                                                                  <span id="readmeframelang" style="float: left; cursor: pointer;">
                                   <select style="margin: 5px;" id="localeLangReadmeSelect">
                                                                          <option value="ar-sa">AR-SA</option>
                                                                          <option value="de-de">DE-DE</option>
                                                                          <option value="en-us" selected="selected">EN-US</option>
                                                                          <option value="es-es">ES-ES</option>
                                                                          <option value="es-la">ES-LA</option>
                                                                          <option value="fr-fr">FR-FR</option>
                                                                          <option value="id-id">ID-ID</option>
                                                                          <option value="it-it">IT-IT</option>
                                                                          <option value="ko-kr">KO-KR</option>
                                                                          <option value="pl-pl">PL-PL</option>
                                                                          <option value="pt-br">PT-BR</option>
                                                                          <option value="th-th">TH-TH</option>
                                                                          <option value="uk-ua">UK-UA</option>
                                                                          <option value="vi-vn">VI-VN</option>
                                                                          <option value="zh-tw">ZH-TW</option>
                                                                        </select>
                                 </span>
                                                                  <script type="text/javascript">	
                                   var vocdomain = document.domain.split('.').slice(-2).join('.')
                                  document.domain = "vocareum.com";
                                   
                                 </script>
                                  <iframe id="readMeIframe" name="readMeIframe" title="README" src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/README.htm" width="100%" height="95%" style="overflow:none;border:2px;position:relative; border-top: 1px solid #eee;"></iframe>
			  </div>
			</div>
                        <div class="span1 vocdivider  hide ui-draggable ui-draggable-handle" id="instructionsdivider" style="width:8px; height:100%; margin:0px; background:url('../shared/img/vocdivider-v.png') no-repeat scroll 3px 50% transparent;padding: 5px 0px;cursor: col-resize;"></div>
                       			

                        <div class="vocdivider_h1 ui-draggable ui-draggable-handle" id="html_divider" style="display:none;                                    height:3px; padding-top:2px !important; padding-bottom:2px !important; margin:0px; overflow:hidden; background:url('../shared/img/vocdivider-h.png') no-repeat scroll center 50% transparent;padding: 5px 0px;cursor: row-resize;">
                        </div>

                              <div id="codeframe" class="hidden-1" style="margin-right: 0px; height: 100%; display: block;">

                                  <div id="div_codeform0_or_draw" style="height: 100%">
                                    <div id="div_codeform0" style="height: 100%">
                                      <form id="codeform0" style="margin-bottom:0px; position:absolute; ">
                                        <textarea id="codearea0" aria-label="Source code" style="display: none;">Choose a file to load from the Files menu on the left</textarea><div class="CodeMirror cm-s-neat CodeMirror-wrap"><div style="overflow: hidden; position: relative; width: 3px; height: 0px;"><textarea style="position: absolute; bottom: -1em; padding: 0px; width: 1px; height: 1em; outline: none;" wrap="off" autocorrect="off" autocapitalize="none" spellcheck="false" tabindex="0"></textarea></div><div class="CodeMirror-vscrollbar" cm-not-content="true" style="display: block; bottom: 0px;"><div style="min-width: 1px; height: 41px;"></div></div><div class="CodeMirror-hscrollbar" cm-not-content="true"><div style="height: 100%; min-height: 1px; width: 0px;"></div></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1" draggable="true"><div class="CodeMirror-sizer" style="margin-left: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative;"><div class="CodeMirror-lines" role="presentation"><div style="position: relative; outline: none;" role="presentation"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre><div class="CodeMirror-linenumber CodeMirror-gutter-elt"><div>1</div></div></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-cursors"></div><div class="CodeMirror-code" role="presentation"></div></div></div></div></div><div style="position: absolute; height: 30px; width: 1px; border-bottom: 0px solid transparent;"></div><div class="CodeMirror-gutters"><div class="CodeMirror-gutter CodeMirror-linenumbers" style="width: 1px;"></div></div></div></div>
                                      </form>
                                    </div>
                                                                      </div>
                                  
                              </div> <!-- end of codeframe -->
                  
                        <div class="vocdivider_h2 ui-draggable ui-draggable-handle" id="console_divider" style="margin-rigt: 0px;                                      height:3px; padding-top:2px !important; padding-bottom:2px !important; margin:0px; overflow:hidden; background:url('../shared/img/vocdivider-h.png') no-repeat scroll center 50% transparent;padding: 5px 0px;cursor: row-resize;">
                        </div>


<!-- start of buildframe -->
<!-- end of buildframe -->

<!-- Panel 2 -->
										</div> <!-- tab-content end -->

				  </div><!-- end tabbable -->

	  </div> <!-- editor and logs -->



	</div> <!-- end dirs and editor -->

<!-- start of modals -->

<!-- widget output start -->
							<div id="modal-table-widgetoutput" class="modal hide fade widgetoutput modal-80percent" tabindex="-1">
								<div class="modal-header no-padding">
									<div class="table-header">
										<button type="button" class="close" data-dismiss="modal">
											<h3>Close</h3>
										</button>
											<span style="font-size:20px">Output</span>
									</div>
								</div>

								<div class="modal-body" id="div-widgetoutput" style="">

								</div>
							</div>
<!-- end widget output -->

<!-- view output start -->
							<div id="modal-table-output" class="modal hide fade" tabindex="-1">
								<div class="modal-header no-padding">
									<div class="table-header">
										<button type="button" class="close" data-dismiss="modal">
											<h3>Close</h3>
										</button>
											<span style="font-size:20px">Output</span>
									</div>
								</div>

								<div class="modal-body no-padding" id="div-output" style="height:600px;">

								</div>
							</div>
<!-- end view output -->

<!-- diff window -->
							<div id="modal-table-diff" class="modal hide fade" tabindex="-1">
								<div class="modal-header no-padding">
									<div class="table-header">
										<button type="button" class="close" data-dismiss="modal">
																						<h3>Close</h3>
										</button>
											<span style="font-size:20px">View Changes</span>
									</div>
								</div>

								<div class="modal-body no-padding" id="div-diff">

								</div>
							</div>
<!-- end diff window -->

<!-- video viewer -->
    <div id="video-viewer-modal" class="modal hide fade" tabindex="-1">
		    <div class="modal-header no-padding">
            <div class="table-header">
              <button type="button" class="close" data-dismiss="modal">×</button>
                Video viewer
            </div>
				</div>

        <div class="modal-body">
            <table><tbody><tr><td>
               <div id="video-viewer-modal-div">
              </div>
            </td></tr></tbody></table>
        </div>
   </div>
<!-- end video viewer -->
<!-- image viewer -->
    <div id="image-viewer-modal" class="modal hide fade" tabindex="-1">
		    <div class="modal-header no-padding">
            <div class="table-header">
              <button type="button" class="close" data-dismiss="modal">×</button>
                Image viewer
            </div>
				</div>

        <div class="modal-body">
            <table><tbody><tr><td>
                            <img id="image-viewer-modal-image">
            </td></tr></tbody></table>
        </div>
   </div>
<!-- end image viewer -->

<!-- largefile viewer -->
    <div id="largefile-viewer-modal" class="modal hide fade" tabindex="-1" style="height:200px">
		    <div class="modal-header no-padding">
            <div class="table-header">
              <button type="button" class="close" data-dismiss="modal">×</button>
                File too big for viewer
            </div>
				</div>

        <div class="modal-body">
                <h4>The file is too big for the viewer. Please download the file instead.</h4>
                <br><mute>Only files smaller than 1 MB are shown in the viewer.</mute>
        </div>
   </div>
<!-- end largefile viewer -->


<!-- Uploader -->
 <div id="modal-upload-wait" class="modal hide fade" tabindex="-1">
   <div class="modal-header no-padding">
     <div class="table-header">
       <button type="button" class="close" onclick="afterUpload();" data-dismiss="modal">×</button>
       <span style="font-size:20px">Status</span>
     </div>
   </div>

   <div id="uploadWaitMsgDiv" class="modal-body no-padding modal-body-full-height">
     <p id="uploadWaitMsgBox" style="margin-left: 20px !important;"></p>
   </div>
 </div>

<!-- other viewer -->
    <div id="other-viewer-modal" class="modal hide fade" tabindex="-1">
      <div class="modal-header no-padding">
        <div class="table-header">
          <button type="button" class="close" data-dismiss="modal">×</button>
            File viewer
        </div>
      </div>

      <div class="modal-body">
          <table><tbody><tr><td>
               <object type="application/pdf" id="other-viewer-modal-area" width="100%" height="100%">No default viewer found</object>
          </td></tr></tbody></table>
      </div>
    </div>
<!-- end other viewer -->
<!-- browser viewer -->
    <div id="browser-viewer-modal" class="modal hide fade" tabindex="-1">
      <div class="modal-header no-padding">
        <div class="table-header">

          <button type="button" class="close" data-dismiss="modal">×</button>
          <span id="browser-viewer-title">Viewer</span>
          <a class="" target="_blank" href="" id="browser-viewer-link">
							<i style="margin-left:10px" class="icon-external-link icon-only white"></i>
					</a>
        </div>
      </div>

      <div class="modal-body" id="browser-viewer-body">
          <iframe id="browser-viewer-iframe" src="" width="100%" height="100%" frameborder="0"></iframe>
      </div>
    </div>
<!-- browser viewer -->


<div id="Scripts-help-modal" class="modal hide fade modal-80percent" tabindex="-1"> <div class="modal-header no-padding"> <div class="table-header"> <button type="button" class="close" data-dismiss="modal">×</button> &nbsp;
            <span class="modal-title">&nbsp;
                Scripts            </span>
        </div>
    </div>
    <div class="modal-body">
        Specify the shell scripts that will be run during various 
phases. These scripts are always run in a directory which has a copy of 
student submission.
    </div>
</div>
<div id="Grading-help-modal" class="modal hide fade modal-80percent" tabindex="-1"> <div class="modal-header no-padding"> <div class="table-header"> <button type="button" class="close" data-dismiss="modal">×</button> &nbsp;
            <span class="modal-title">&nbsp;
                Grading
            </span>
        </div>
    </div>
    <div class="modal-body">
Grading script - this script can be run for grading student submission. 
It can either be run in batch on all student submissions from the 
control panel or can be run on an individual student submission by 
selecting the grading button from the grading panel. You can test this 
script by selecting “Run Scripts =&gt; Grading”. The script will be run 
in the “work” directory in this IDE.
    </div>
</div>

<div id="RUN-help-modal" class="modal hide fade modal-80percent" tabindex="-1">
    <div class="modal-header no-padding">
        <div class="table-header"> <button type="button" class="close" data-dismiss="modal">×</button> &nbsp;
            <span class="modal-title">&nbsp;
                RUN
            </span>
        </div>
    </div>
    <div class="modal-body">
If this script is specified then a Run button shows up on student IDE 
which the user can execute. This script runs on the student work 
directory unlike Submission script which runs on submitted assignment.
    </div>
</div>
<div id="BUILD-help-modal" class="modal hide fade modal-80percent" tabindex="-1">
    <div class="modal-header no-padding">
        <div class="table-header"> <button type="button" class="close" data-dismiss="modal">×</button> &nbsp;
            <span class="modal-title">&nbsp;
                BUILD
            </span>
        </div>
    </div>
    <div class="modal-body">
If this script is specified then a Build button shows up on student IDE 
which the user can execute. This script runs on the student work 
directory unlike Submission script which runs on submitted assignment.
    </div>
</div>
<div id="Submission-help-modal" class="modal hide fade modal-80percent" tabindex="-1"> <div class="modal-header no-padding"> <div class="table-header"> <button type="button" class="close" data-dismiss="modal">×</button> &nbsp;
            <span class="modal-title">&nbsp;
                Submission
            </span>
        </div>
    </div>
    <div class="modal-body">
Submission script - this script is run when the student submits his/her 
assignment. You can use this script to either perform sanity checks like
 whether the submission compiles or can run either some or all of tests 
that will be used to grade the submission. Note: this script runs on 
last submitted assignment for the user. You can test this script by 
selecting “Run Scripts =&gt; Submission”. It will be executed in the 
“work” directory of this IDE.
    </div>
</div>
<div id="LIB-help-modal" class="modal hide fade modal-80percent" tabindex="-1"> <div class="modal-header no-padding"> <div class="table-header"> <button type="button" class="close" data-dismiss="modal">×</button> &nbsp;
            <span class="modal-title">&nbsp;
                LIB            </span>
        </div>
    </div>
    <div class="modal-body">
$LIB - Use this directory to store resource files common to more than 
one assignment for this course. Assignment specific resources should be 
stored in $ASNLIB.
    </div>
</div>
<div id="ASNLIB-help-modal" class="modal hide fade modal-80percent" tabindex="-1"> <div class="modal-header no-padding"> <div class="table-header"> <button type="button" class="close" data-dismiss="modal">×</button> &nbsp;
            <span class="modal-title">&nbsp;
                ASNLIB            </span>
        </div>
    </div>
    <div class="modal-body">
$ASNLIB - This is a directory where the teacher can store all the files 
that are needed to run scripts. This directory is not visible to or 
accessible by the students.
    </div>
</div>
<div id="StarterCode-help-modal" class="modal hide fade modal-80percent" tabindex="-1"> <div class="modal-header no-padding"> <div class="table-header"> <button type="button" class="close" data-dismiss="modal">×</button> &nbsp;
            <span class="modal-title">&nbsp;
                StarterCode            </span>
        </div>
    </div>
    <div class="modal-body">
All the files in this directory are copied to the student work area when
 s/he starts working on the assignment. Once the student has started 
working on the assignment, any changes made to the starter code are not 
reflected in the student work area.
    </div>
</div>

<div id="modal-table-download_from_ide" class="modal hide fade" tabindex="-1" style="height:200px">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">
	<h3>Close</h3>
      </button>
      <span style="font-size:15px">Preparing ZIP File</span>
    </div>
  </div>
  
  <div class="modal-body" id="div-output-download_from_ide" style="height:200px;">
  
  </div>
</div>

<div id="modal-table-od_terminal" class="modal hide fade" tabindex="-1" style="height:400px">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">
	<h3>Close</h3>
      </button>
      <span style="font-size:15px">Terminal</span>
    </div>
  </div>
  
  <div class="modal-body no-padding" id="div-output-od_terminal" style="height:360px">
  
  </div>
</div>
<div id="modal-table-report-db" class="modal hide fade" tabindex="-1" style="height:50% !important;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">×</button>
      <span style="font-size: 15px">Database Credentials</span>
    </div>
  </div>

   <div id="report_db_div" class="modal-body no-padding modal-body-full-height">
     <p id="report_db_msg_box" style="margin-left: 10px !important; font-family: Courier;"></p>
   </div>
</div>
<div id="modal-table-report-aws" class="modal hide fade" tabindex="-1" style="height:80% !important;overflow: auto;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">×</button>
      <span style="font-size: 15px" id="aws-modal-label">AWS Credentials</span>
    </div>
  </div>

   <div id="report_aws_div" class="modal-body0 no-padding">
     <p id="report_aws_msg_box" style="margin-left: 10px;height:60%; !important; font-family: Courier;overflow: auto;"></p>
   </div>
   <div class="modal-body0 no-padding">
     <p id="report_aws_progress_box" style="margin-left: 10px;height:60%; !important; font-family: Courier;overflow: auto;"></p>
   </div>

</div>
<script type="text/javascript">

var autoloadFileOccured = 0;

function sshkeyboxdownload(s, f)
{
  var t = document.createElement('a');
  t.setAttribute('href', 'data:application/octet-stream;charset=utf-16le;base64,' + s);
  t.setAttribute('download', f);
  t.style.display = 'none';
  document.body.appendChild(t);
  t.click();
  document.body.removeChild(t);
}
function ssodownload(id)
{
  $.ajax({
    url: '../util/vcput.php',
    type: 'post',
    data: {
      a: 'ssodownload',
      data:id,
      step:2791722    },
    success: function(data) {
      if( data.search(/^Error/) >=0 ){
        alert(data);
      } else {
        sshkeyboxdownload(data, 'ssourl.txt');
      }
    },
    fail: function(data) {
      alert('Failed to retrieve SSO URL');
    }
  });
}
  function sshkeyboxshow(){
     $("#sshkeybox").show();
     $("#sshkeyboxbtn").hide();
  }
  function clikeyboxshow(){
     $("#clikeybox").show();
     $("#clikeyboxbtn").hide();
  }
</script>
<div id="modal-table-report-buildclabs" class="modal hide fade" tabindex="-1" style="height:65% !important;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" id="clabscls" class="close" data-dismiss="modal" onclick="endvm()">×</button>
      <span style="font-size: 15px">Build Labs</span>
    </div>
    <br>
    <div class="control-group">
        <div class="controls">
          <div class="row-fluid">
            <div class="span3" style="margin-left: 20px;">
              <select id="clabstype" name="clabstype" class="span6" onchange="chgvmtype();">
                  <option value="ct" selected="selected">Container</option>
                                  <option value="cl">VM</option>
                              </select>
            </div>
            
            <div class="span3" style="margin-left: 20px; display: none;">
              <select id="clabsamis" name="clabsamis" class="span6">
              </select>
            </div>

            <div class="span6" style="float: left;width: 700px; border: 0px solid red; font-size: 13px; display:block">
                Systemuser <input id="systemuser" name="systemuser" class="span1" style="margin: 0px 20px 0px 3px; width:100px;" placeholder="" type="text">
                Scriptuser <input id="scriptuser" name="scriptuser" class="span1" style="margin: 0px 20px 0px 3px; width:100px;" placeholder="" type="text">
                Labuser <input id="labsuser" name="labsuser" class="span1" style="margin: 0px 20px 0px 3px; width:100px;" placeholder="" type="text">
                Sudo <input class="span1" style="margin-right: 20px;" id="labssudo" name="labssudo" type="checkbox">
            </div>
            
          </div>
        </div>
    </div>
  </div>
  <div id="report_buildclabs_div" class="modal-body no-padding" style="height:100%; !important;">
     <table class="table table-first-column-check table-hover" id="clabstbl" style="border-top: 0 !important;">
       <tbody><tr><th style="text-align:center;"><input class="span1" style="margin-right: 20px; width:40%" id="clabschk" onclick="chkvm();" type="checkbox"></th>
                    <th>Dockerfile </th>
           <th>Init File</th>
           <th>Hostname</th>
           <th>Port</th>
           <th>Script</th>
           <th>Persistent Workarea</th>
           <th>Status</th>
           <th></th>
               </tr>
          </tbody></table>
     <div style="margin-left:10px;">
       <div id="clabsstatus" class="hidden-1">
         <p id="clabselapsed"></p><p><i class="icon-spin icon-spinner"></i>
         Build is in progress, it can take a few minutes to complete.
       </p></div>
       <a class="btn btn-info btn-small" style="margin: 10px 10px 0px 10px !important;" id="clabsbtnadd" onclick="addvm()">Add</a>
       <a class="btn btn-info btn-small" style="margin: 10px 10px 0px 0px !important;" id="clabsbtndel" onclick="delvm()">Delete</a>
       <a class="btn btn-info btn-small" style="margin: 10px 10px 0px 0px !important;" id="clabsbtnbld" onclick="bldvm()">Build</a>
       <a id="saveVmBtn" class="btn btn-info btn-small" style="margin: 10px 10px 0px 0px !important;" onclick="savevm(false)">Save</a>
       <a class="btn btn-info btn-small" style="margin: 10px 10px 0px 0px !important;" onclick="clsvm()">Close</a>
     </div>
     <hr>
     <p id="report_buildclabs_msg_box" style="margin-left: 10px;height:100%; !important; font-family: Courier;"></p>
   </div>
</div>

<div id="modal-table-report-cdb" class="modal hide fade" tabindex="-1" style="height:40% !important;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">×</button>
      <span style="font-size: 15px">Database Credentials</span>
    </div>
  </div>

   <div id="report_cdb_div" class="modal-body no-padding">
     <p id="report_cdb_msg_box" style="margin-left: 10px;height:30%; !important; font-family: Courier;"></p>
   </div>
</div>
<div id="modal-table-report-clabs" class="modal hide fade" tabindex="-1" style="height:70% !important;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">×</button>
      <span style="font-size: 15px">Container Lab</span>
    </div>
  </div>

   <div id="report_clabs_div" class="modal-body no-padding">
     <p id="report_clabs_msg_box" style="margin-left: 10px;height:60%; !important; font-family: Courier;"></p>
   </div>
</div>
<div id="modal-table-report-web" class="modal hide fade" tabindex="-1" style="left:5%; width:90% !important; height:15% !important;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">×</button>
      <span style="font-size: 15px">Web/WebSocket Details</span>
    </div>
  </div>

   <div id="report_web_div" class="modal-body no-padding modal-body-full-height">
     <p id="report_web_msg_box" style="margin-left: 10px !important; font-family: Courier; margin-top: 5px;"></p>
   </div>
</div>





<div class="modal hide fade" id="imageBuildModal" role="dialog" style="width:80%; min-width:400px; max-height:90%; height:auto;">
  <div id="imageBuildModal_dialog" class="modal-dialog "> <!-- jupyter-modal-dialog -->
    <div id="imageBuildModal_content" class="modal-content">

      <div id="imageBuildModal_header" class="modal-header">
        <h3>Build Container Image</h3>
        <h6>
          The build context will be the resource/lib directory; the dockerfile also needs to be placed there.
        </h6>
                  <h6>
            If you're building a new image, please select the base 
Vocareum docker image. Also, please make sure you do not have any "FROM"
 directive in your dockerfile.
          </h6>
                </div>

      <div id="imageBuildModal_body" class="modal-body" style="padding-bottom: 0px; max-height:250px">

        <div class="control-group row-fluid">
          <div class="span2" style="padding-top:3px">
            <label class="control-label"></label>
          </div>
          <div class="span5" id="imageBuildModal_select_div">
            <select id="imageBuildModal_select" name="imageBuildModal_select" style="width:100%">
              <option selected="selected" disabled="disabled" hidden="">Select image</option>
              <optgroup label="Create new image (select base)">
                <option value="img1">Img1</option>
                <option value="img2">Img2</option>
              </optgroup>
              <optgroup label="Use existing image">
                <option value="img3">Img3</option>
                <option value="img4">Img4</option>
              </optgroup>
            </select>
          </div>
          <div class="span4" id="image_build_name_div">
            <input id="image_build_name" name="image_build_name" class="span12" placeholder="Image name" type="text" maxlength="80" style="margin-bottom:0px">
          </div>
        </div>
<!--
        <div class="control-group row-fluid" id="image_build_name_div">
          <div class="span3" style="padding-top:3px">
            <label class="control-label">Image Name :</label>
          </div>
          <div class="span6">
            <input id="image_build_name" name="image_build_name" class="span12" placeholder="Course-unique name" type="text" maxlength="80" style="margin-bottom:0px">
          </div>
        </div>
-->
        <div class="control-group row-fluid" style="display:block">
          <div class="span2" style="padding-top:3px">
            <label class="control-label">Base Image :</label>
          </div>
          <div class="span5" id="imageBuildModal_select_baseimage_div">
            <select id="imageBuildModal_select_baseimage" name="imageBuildModal_select_baseimage" style="width:100%">
              <option value="img1" selected="selected">Img1</option>
              <option value="img2">Img2</option>
            </select>
          </div>
        </div>
        
        <div class="control-group row-fluid">
          <div class="span2" style="padding-top:3px">
            <label class="control-label">Dockerfile :</label>
          </div>
          <div class="span5">
            <input id="image_build_dockerfile" name="image_build_dockerfile" class="span12" placeholder="Dockerfile" type="text" maxlength="80" style="margin-bottom:0px">
          </div>
        </div>
        
        <div class="control-group row-fluid image-build-access" id="image_build_access_0" data-id="0">
          <div class="span2" style="padding-top:3px">
            <label class="control-label">Access :</label>
          </div>
          
          <div class="span1 row-fluid">
            <button class="icon-button" id="image_build_access_plus" style="padding-top:6px">
              <i class="icon-plus-sign icon-large"></i>
            </button>
          </div>
<!--
          <div class="span5 row-fluid">
            <div class="span5">
              <div class="span12">
                <input id="image_build_access_name_0" class="span12" data-id="0" placeholder="name" type="text" maxlength="80" style="margin-bottom:0px">
              </div>
            </div>
            <div class="span4">
              <div class="span12">
                <select id="image_build_access_type_select_0" style="width:100%; margin-bottom:0px" data-id="0">
                  <option selected disabled hidden value="0">Type</option>
                                      <option value="http">http</option>
                                  </select>
              </div>
            </div>
            <div class="span3">
              <div class="span12">
                <input id="image_build_access_port_0" class="span12" placeholder="port" type="text" maxlength="80" data-id="0" style="margin-bottom:0px">
              </div>
            </div>
          </div>
          
          <div class="span1 row-fluid">
            <button class="icon-button" data-id="0" style="padding-top:6px">
              <i class="icon-trash icon-large"></i>
            </button>
          </div>
 -->

        </div>
       
        <!--
        <div class="control-group row-fluid">
          <div class="span3" style="padding-top:3px">
            <label class="control-label">Init File :</label>
          </div>
          <div class="span5">
            <input id="image_build_initfile" name="image_build_initfile" class="span12" placeholder="Script run after container start" type="text" maxlength="80" style="margin-bottom:0px">
          </div>
        </div>
        -->
        <!--
        <div class="control-group row-fluid">
          <div class="span3" style="padding-top:3px">
            <label class="control-label">User Name :</label>
          </div>
          <div class="span5">
            <input disabled id="image_build_user" name="image_build_user" class="span12" value="labsuser" type="text" maxlength="80" style="margin-bottom:0px">
          </div>
        </div>
        -->
        
      </div>

      <div class="modal-footer" id="imageBuildModal_footer" style="margin-top: 15px;padding: 15px 0 15px 0 !important; background-color:white">
        <div id="imageBuildModal_output">
          <div contenteditable="true" id="imageBuildModal_ta" style="overflow:scroll; height:150px; display:none; text-align:left !important; width:98%; border:0px; margin-bottom: 10px;padding-bottom: 10px;padding-top: 0px; padding-left: 6px; resize:none; border-bottom:1px solid lightgray;">
          </div>
        </div>

        <button id="imageBuildModal_ok" type="button" class="btn vocbtn2 vocbtn-status" style="min-width: 80px !important; display:none; margin-right:10px !important" data-dismiss="modal">Ok</button>
        <button id="imageBuildModal_cancel" type="button" class="btn vocbtn2 vocbtn-status" style="min-width: 80px !important; margin-right:10px !important" data-dismiss="modal">Cancel</button>
        <button id="imageBuildModal_build" type="button" class="btn vocbtn2 vocbtn-action" style="min-width: 80px !important; margin-right:10px !important">Build</button>
        
      </div>

    </div>
  </div>
</div>

<div id="upload_data_modal" class="modal hide fade autograde-modal" style="width:50%; height:auto; margin-left: auto; margin-right: auto;">
    <div class="modal-dialog autograde-modal">
        <div class="modal-content autograde-modal-content">
            <div class="modal-header autograde-modal-header" style="display:flex;">
                <h4 style="display: flex;">
                    Upload File to this URL (Max 5GB):
                </h4>
                <h4 class="autograde-cancel pull-right" data-dismiss="modal"><i class="icon-remove" style="cursor:pointer;"></i></h4>
            </div>
            <div class="modal-body">
                <textarea id="uploaddatapresignedurl" style="resize:none;min-height:200px;width:99%;" disabled="disabled"></textarea>
            </div>
        </div>
    </div>
</div>

<div id="add_autograde_modal" class="modal hide fade autograde-modal">
    <div class="modal-dialog autograde-modal">
      <div class="modal-content autograde-modal-content">
        <div class="modal-header autograde-modal-header" style="display: flex;" id="autograde_modal_header">
            <h4 style="display: flex;">
            Generate Tests (BETA)
            </h4>
            <h4 id="generate_test_cancel" href="#" class="autograde-cancel pull-right" data-dismiss="modal"><i class="icon-remove"></i></h4>
        </div>
        <div class="modal-body autograde-modal-body">
            <iframe class="autograde-iframe" frameborder="0" src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/nav.htm" title="Generate Autograde Tests Window"></iframe> 
        </div>
      </div>
    </div>
</div>

<div class="modal hide fade" id="quizModal" role="dialog" style="width:80%; min-width:400px; max-height:90%; height:auto;">
	<div id="quizModal_dialog" class="modal-dialog ">
		<div id="quizModal_content" class="modal-content">
			<div id="quizModal_header" class="modal-header">
				<h3>Generate Quiz</h3>
			</div>
			<div id="quizModal_body" class="modal-body" style="padding-bottom: 0px; max-height:500px">
				<h6>
					Generating a quiz for this assignment will do the following:
				</h6>
				<ul>
					<li>
						<h6>
							Convert any markdown files in the work area into html and place them under asnlib/public/docs
						</h6>
					</li>
					<li>
						<h6>
							Copy over all non-markdown contents of work/docs to asnlib/public/docs
						</h6>
					</li>
					<li>
						<h6>
							Automatically generate rubrics for each question
						</h6>
					</li>
					<li>
						<h6>
							Flag this assignment for quiz grading. To remove this flag, generate quiz again with no markdown files in the work area.
						</h6>
					</li>
				</ul>
				<h6>
					There can be only one markdown file viewable per part. If multiple 
markdown files in different languages exist please ensure that they have
 the same scores and answers for grading consistency.
				</h6>
				<br>
        <div class="controls">
					<div class="row-fluid">
						<div class="span2">
							<label class="control-label">Multi-Tab Format :</label>
						</div>
						<input name="multi_tab" id="multi_tab" class="ace ace-switch ace-switch-6" type="checkbox" checked="checked">
						<span class="lbl"></span>
            &nbsp;<i class="icon-question icon-base" data-toggle="tooltip" data-placement="top" title="" aria-label="Multi-Tab Info" data-original-title="Display each question in its own tab with navigation and bookmark controls. Recommended for exams."></i>
					</div>
				</div>
				<div class="controls">
					<div class="row-fluid">
						<div class="span2">
							<label class="control-label">Show hints :</label>
						</div>
						<input name="show_hints" id="show_hints" class="ace ace-switch ace-switch-6" type="checkbox" checked="checked">
						<span class="lbl"></span>
            &nbsp;<i class="icon-question icon-base" data-toggle="tooltip" data-placement="top" title="" aria-label="Show Hints Info" data-original-title="Add hints to the student's saved copy of their submission."></i>
					</div>
				</div>
        <div class="controls">
					<div class="row-fluid">
						<div class="span2">
							<label class="control-label">Show rubrics :</label>
						</div>
						<input name="show_rubrics" id="show_rubrics" class="ace ace-switch ace-switch-6" type="checkbox" checked="checked">
						<span class="lbl"></span>
            &nbsp;<i class="icon-question icon-base" data-toggle="tooltip" data-placement="top" title="" aria-label="Show Rubrics Info" data-original-title="Show associated rubric name and possible points after each question."></i>
					</div>
				</div>
			</div>
			<div id="quizModal_footer" class="modal-footer" style="padding: 15px 0 15px 0 !important; background-color:white">
				<button id="quizModal_ok" type="button" class="btn vocbtn2 vocbtn-action" style="min-width: 80px !important; margin-right:10px !important">Generate</button>
				<button id="quizModal_cancel" type="button" class="btn vocbtn2 vocbtn-status" style="min-width: 80px !important; margin-right:10px !important" data-dismiss="modal">Cancel</button>
			</div>
		</div>
	</div>
</div>


<div id="modal-table-report-cluster" class="modal hide fade" tabindex="-1" style="left:10%; width:70% !important; height:15% !important;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">×</button>
      <span style="font-size: 15px">Cluster Details</span>
    </div>
  </div>

   <div id="report_cluster_div" class="modal-body no-padding modal-body-full-height">
     <p id="report_cluster_msg_box" style="margin-left: 10px !important; font-family: Courier; margin-top: 5px;"></p>
   </div>
</div>

<div id="modal-table-report-submission" class="modal hide fade" tabindex="-1" style="height:50% !important;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">×</button>
      <span style="font-size: 15px">Submission Report</span>
    </div>
  </div>

   <div id="report_submission_div" class="modal-body no-padding modal-body-full-height">
     <p id="report_submission_msg_box" style="margin-left: 10px !important; font-family: Courier; white-space: pre;"></p>
   </div>
   
</div>

<div id="modal-table-report-grading" class="modal hide fade" tabindex="-1" style="height:50% !important;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">×</button>
      <span style="font-size: 15px">Grading Report</span>
    </div>
  </div>
   
   <div id="report_grading_div" class="modal-body modal-body-full-height no-padding">
     <p id="report_grading_msg_box" style="margin-left: 10px !important; font-family: Courier; white-space: pre;"></p>
   </div>

</div>


<div id="modal-table-report-all-html" class="modal hide fade" tabindex="-1">
  <div class="modal-header no-padding">
    <div class="table-header">

      <button type="button" class="close" data-dismiss="modal">×</button>
      <span id="modal-table-report-all-html-title">Grading Report</span>
      <a class="" target="_blank" href="" id="modal-table-report-all-html-link">
					<i style="margin-left:10px" class="icon-external-link icon-only white"></i>
			</a>
    </div>
  </div>

  <div class="modal-body" id="modal-table-report-all-html-body">
      <iframe id="modal-table-report-all-html-iframe" src="" width="100%" height="100%" frameborder="0"></iframe>
  </div>
</div>


<div id="modal-table-report-run" class="modal hide fade" tabindex="-1" style="height:50% !important;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">×</button>
      <span style="font-size: 15px">RUN Report</span>
    </div>
  </div>
   
   <div id="report_run_div" class="modal-body no-padding modal-body-full-height">
     <p id="report_run_msg_box" style="margin-left: 10px !important; font-family: Courier;"></p>
   </div>
</div>
<div id="modal-table-report-build" class="modal hide fade" tabindex="-1" style="height:50% !important;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">×</button>
      <span style="font-size: 15px">BUILD Report</span>
    </div>
  </div>

   <div id="report_build_div" class="modal-body no-padding modal-body-full-height">
     <p id="report_build_msg_box" style="margin-left: 10px !important; font-family: Courier;"></p>
   </div>
</div>

<div id="modal-edit-vers" class="modal hide fade" tabindex="-1" style="height:70% !important;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal" onclick="location.href='main.php?m=editor&amp;mode=s&amp;asnid=2791721&amp;stepid=2791722&amp;version=0'">
        <h3>Close</h3>
      </button>
      <span style="font-size: 15px">Edit Versions <i id="versspinbox" class="icon-spin icon-spinner" style="display: none;"></i></span>
    </div>
  </div>

   <div id="edit_vers_div" class="modal-body no-padding" style="margin-left: 10px !important; font-family: Courier;">
      <table id="verstable" class="table table-hover table-bordered" style="border-top: 0 !important;">
        <tbody><tr>
          <th>Version</th>
          <th>Name</th>
          <th>Deleted</th>
          <th>Action</th>
        </tr>
             </tbody></table>
     <button type="button" class="btn btn-small btn-info vocbtn vocbtn-info" onclick="newvers();">Add a version</button>
   </div>
</div>

<div id="modal-git-actions" class="modal hide fade" tabindex="-1" style="height:50% !important;">
  <div class="modal-header no-padding">
    <div class="table-header">
      <button type="button" class="close" data-dismiss="modal">
        <h3>Close</h3>

      </button>
      <span id="git_actions_lable" style="font-size: 15px">Git action status</span>
    </div>
  </div>

   <div id="git_actions_div" class="modal-body no-padding modal-body-full-height">
     <p id="git_action_msg_box" style="margin-left: 10px !important;"></p>
   </div>
</div>

<div id="grades-modal" class="modal hide fade" tabindex="-1" style="height:75% !important; overflow: hidden !important;">
    <div class="modal-header no-padding">
        <div class="table-header">
            <button type="button" class="close" data-dismiss="modal">×</button>
            &nbsp;
            <span class="modal-title"></span>
        </div>
    </div>

    <div class="modal-body" style="max-height: none; height: 85%;">
        <iframe style="width: 100%; height: 100%; border: none;" src="about: blank"></iframe>
        <div id="spinner" class="center" style="width: 100%; height: 100%; position: absolute; top: 0; left: 0; background-color: #fff;">
            <div style="width: 100%; height: 100%; position: relative;">
                <i class="icon-spinner icon-spin light-grey bigger-275" style="position: absolute; width: 42px; height: 42px; left: 0; right: 0; top: 0; bottom: 0; margin: auto;"></i>
            </div>
        </div>
    </div>
</div>

<div class="modal hide fade" id="jupyterModal" role="dialog" style="width:80%; min-width:400px; max-height:90%; height:auto;">
  <div id="jupyterModal_dialog" class="modal-dialog jupyter-modal-dialog">
    <div id="jupyterModal_content" class="modal-content">

      <div id="jupyterModal_header" class="modal-header">
        <h3>Jupyter</h3>
        <h6>
          This process will strip out the code marked with 
BEGIN_SOLUTION and BEGIN_HIDDEN_TESTS pragmas and copy the resulting 
notebook to the Starter Code.         </h6>
        <h6>
          This will, optionally, extract nbgrader-style grading items 
and sync them with the Vocareum environment. New grading items will be 
added and existing ones with new scores will be updated. If no 
submissions have been made, an option to delete unused grading items 
will be available.
        </h6>
        <h6>
          A grading script will also be generated (with any existing 
grading script being overwritten) unless that option is de-selected.
        </h6>
      </div>

      <div id="jupyterModal_body" class="modal-body" style="padding-bottom: 0px;">
        
        <span id="jupyterModal_files">
          Notebook(s) to be released:

          <table class="table table-first-column-check table-hover" style="border-top: 0 !important;margin-bottom:5px">
            <tbody><tr id="jupyter_file_1">
              <td class="jupyter-modal-td-file"><input class="span1 jupyter-modal-td-checkbox" type="checkbox" checked="checked">
                File1.ipynb
              </td>
            </tr>
          </tbody></table>

          <br>
          This process will also generate the grading script
          <table class="table table-first-column-check table-hover" style="border-top: 0 !important;margin-bottom:5px">
            <tbody><tr id="jupyter_file_ow">
              <td style="text-align:left; border:0px; padding-bottom:0px"><input class="span1" style="margin-bottom:6px; width:20px" type="checkbox" checked="checked">
                Overwrite grading script if it exists
              </td>
            </tr>
          </tbody></table>

        </span>
      </div>

      <div class="modal-footer" id="jupyterModal_footer" style="margin-top: 15px;padding: 15px 0 15px 0 !important; background-color:white">
        <div id="jupyterModal_output">
          <textarea id="jupyterModal_ta" style="height:100px; display:none; text-align:left !important; width:98%; border:0px; margin-bottom: 10px;padding-bottom: 10px;padding-top: 0px; resize:none; border-bottom:1px solid lightgray;">          </textarea>
        </div>
        <span class="pull-left btn vocbtn2 vocbtn-status " style="margin-left: 20px !important;" onclick="$('#updateAsnOnRelease').prop('checked', function(index, value) { return !value; });">
          <input id="updateAsnOnRelease" class="span1 jupyter-modal-td-checkbox" type="checkbox" style="pointer-events:none;"> Deploy Assignment after Generation
        </span>
        <button id="jupyterModal_ok" type="button" class="btn vocbtn2 vocbtn-action" style="min-width: 80px !important; display:none; margin-right:10px !important" data-dismiss="modal">Close</button>
        <button id="jupyterModal_cancel" type="button" class="btn vocbtn2 vocbtn-status" style="min-width: 80px !important" data-dismiss="modal">Cancel</button>
        <button id="jupyterModal_release" type="button" class="btn vocbtn2 vocbtn-action" style="min-width: 80px !important; margin-right:10px !important">Generate</button>
        
      </div>

    </div>
  </div>
</div>

<div class="modal hide fade" id="jupyterClearOutputModal" role="dialog" style="width:65%; min-width:400px; max-height:90%; height:auto;">
  <div id="jupyterClearOutputModal_dialog" class="modal-dialog jupyter-modal-dialog">
    <div id="jupyterClearOutputModal_content" class="modal-content">

      <div id="jupyterClearOutputModal_header" class="modal-header">
        <h3>Jupyter</h3>
        <h6>
          This will clear out all the output arrays in the selected 
notebook(s) and save it in a copy; the original notebook will not be 
modified.
        </h6>
        <h6>
          This is useful when notebook sizes get very large due to debug print statements and they take a long time to load.
        </h6>
      </div>

      <div id="jupyterClearOutputModal_body" class="modal-body" style="padding-bottom: 0px;">
        <span id="jupyterClearOutputModal_files">
          Notebook(s) to be released:

          <table class="table table-first-column-check table-hover" style="border-top: 0 !important;margin-bottom:5px">
            <tbody><tr id="jupyter_file_1">
              <td class="jupyter-modal-td-file"><input class="span1 jupyter-modal-td-checkbox" type="checkbox" checked="checked">
                File1.ipynb
              </td>
            </tr>
          </tbody></table>

          <br>
          This process will also generate the grading script
          <table class="table table-first-column-check table-hover" style="border-top: 0 !important;margin-bottom:5px">
            <tbody><tr id="jupyter_file_ow">
              <td style="text-align:left; border:0px; padding-bottom:0px"><input class="span1" style="margin-bottom:6px; width:20px" type="checkbox" checked="checked">
                Overwrite grading script if it exists
              </td>
            </tr>
          </tbody></table>

        </span>
      </div>

      <div class="modal-footer" id="jupyterClearOutputModal_footer" style="margin-top: 15px;padding: 15px 0 15px 0 !important; background-color:white">
        <div id="jupyterClearOutputModal_output">
          <textarea id="jupyterClearOutputModal_ta" style="height:80px; display:none; text-align:left !important; width:98%; border:0px; margin-bottom: 10px;padding-bottom: 10px;padding-top: 0px; resize:none; border-bottom:1px solid lightgray;">          </textarea>
        </div>

        <button id="jupyterClearOutputModal_cancel" type="button" class="btn vocbtn2 vocbtn-status" style="min-width: 80px !important" data-dismiss="modal">Cancel</button>
        <button id="jupyterClearOutputModal_co" type="button" class="btn vocbtn2 vocbtn-action" style="min-width: 80px !important; margin-right:10px !important">Clear Output</button>
        <button id="jupyterClearOutputModal_ok" type="button" class="btn vocbtn2 vocbtn-action" style="min-width: 80px !important; display:none; margin-right:10px !important" data-dismiss="modal">Ok</button>
      </div>

    </div>
  </div>
</div>


<div class="modal hide fade" id="clabsStateModal" role="dialog" style="max-height:50%; height:auto; width:50%; min-width:300px">
  <div id="clabsStateModal_dialog" class="modal-dialog jupyter-modal-dialog">
    <div id="clabsStateModal_content" class="modal-content">

      <div id="clabsStateModal_header" class="modal-header" style="padding-bottom:10px; border-bottom-color:#3e3e3e">
        <h3>Lab status</h3>
      </div>

      <div id="clabsStateModal_body" class="modal-body" style="padding-bottom: 15px; border-bottom:1px solid; border-bottom-color:#3e3e3e">
        <span id="clabsStateModal_vms">
          <table class="table table-first-column-check table-hover" style="margin-bottom:0px" border="1" frame="void" rules="rows">
            <tbody><tr id="vm_1" class="clabs-state-modal-tr-vm">
              <td class="clabs-state-modal-td-vm span6">
                Linux-1
              </td>
              <td class="clabs-state-modal-td-state span6">
                shutting down <i id="vm_1_spinbox" class="icon-spin icon-spinner"></i>
              </td>
            </tr>
            <tr id="vm_2" class="clabs-state-modal-tr-vm">
              <td class="clabs-state-modal-td-vm span6">
                Linux-2
              </td>
              <td class="clabs-state-modal-td-state span6">
                shutting down <i id="vm_2_spinbox" class="icon-spin icon-spinner"></i>
              </td>
            </tr>
          </tbody></table>
          <br>

        </span>
      </div>

      <div class="modal-footer" id="clabsStateModal_footer" style="padding: 15px 0 15px 0 !important; background-color:white;"> <!--  border-top-color:#3e3e3e"> -->

        <div id="clabsStateModal_msg">
          <textarea id="clabsStateModal_ta" style="height:50px; display:none; text-align:left !important; width:98%; border:0px; margin-bottom: 10px;padding-bottom: 10px;padding-top: 0px; resize:none; border-bottom:1px solid; border-bottom-color:#3e3e3e;">          </textarea>
        </div>

        <button id="clabsStateModal_ok" type="button" class="btn vocbtn2 vocbtn-action" style="min-width: 80px !important; margin-right:10px !important" data-dismiss="modal">Ok</button>
      </div>

    </div>
  </div>
</div>

<!-- end of modals -->



<script>

function generatePresignedURL() {
    $.ajax({
        url: "../util/vcput.php?a=generatePresignedUploadURL&partid=2791722"
    }).done(function(ret_val) {
        let result = JSON.parse(ret_val);
        if (result['status'] === 'success') {
            $('#uploaddatapresignedurl').html(result['msg'])
        }
    });
}

var left_panel_instructions = 1;
$('#detailspinbox').hide();
$('#versspinbox').hide();

$('#showfullscreen').on('click', function()
	    {
	              var fullbox = document.getElementById("editordiv");

	              if (!document.mozFullScreen && !document.webkitFullScreen) {
	              if (fullbox.mozRequestFullScreen) {
	                  fullbox.mozRequestFullScreen();
	              } else {
	                  fullbox.webkitRequestFullScreen(Element.ALLOW_KEYBOARD_INPUT);
	              }
	            } else {
	              if (document.mozCancelFullScreen) {
	                document.mozCancelFullScreen();
	              } else {
	                document.webkitCancelFullScreen();
	              }
	            }
	    });



	var gloss_theme = 0;
	var editor_content_change = 0;
	var viewer_last_fname = null;
	var viewer_last_fpath = null;
	var viewer_first_fpath = "/";


    var doc_panel_width = 0;
    function isTextFile(ext) {
    	// // EDIT_EXT
    	var js_ext_array = ["java","xml","txt","text","py","c","C","cpp","cc","h","php","js","json","sql","html","vhd","vhdl","properties","mak","hpp","htm","html","sh","pl","pm","ml","R","csv","s","asm","m","pml","config","css","rb"];
    	if (!ext) return false;
			if (js_ext_array.indexOf(ext.toLowerCase()) == -1) return false;
			return true;
    }
    function isVidFile(ext) {
    	var js_ext_array = ["mp4"];
    	if (!ext) return false;
			if (js_ext_array.indexOf(ext.toLowerCase()) == -1) return false;
			return true;
    }
    function isImgFile(ext) {
    	var js_ext_array = ["jpg","jpeg","bmp","gif","png"];
    	if (!ext) return false;
			if (js_ext_array.indexOf(ext.toLowerCase()) == -1) return false;
			return true;
    }
    function isOtherFile(ext) {
    	var js_ext_array = ["pdf"];
    	if (!ext) return false;
			if (js_ext_array.indexOf(ext.toLowerCase()) == -1) return false;
			return true;
    }
    function isBrowserViewableFile(ext) {
    	var js_ext_array = ["html","htm","md","markdown","mdown"];
    	if (!ext) return false;
			if (js_ext_array.indexOf(ext.toLowerCase()) == -1) return false;
			return true;
    }

    function canOpenFile(filename) {
			var ext_index = filename.lastIndexOf('.');
			if (ext_index == -1) {
				ext = null;
			} else {
            	ext = filename.substring(ext_index + 1);
			}

			if ((ext == null) || isTextFile(ext)) {
				return true;
			} else {
				return false;
			}
    }

	function findMode(filename) {
		ext = filename.split('.').pop().toLowerCase();
		switch (ext) {
			case "java":
				mode = "text/x-java";
				break;
			case "xml":
				mode = { name: "text/html", alignCDATA: true };
				break;
			case "py":
				mode = "text/x-python";
				break;
			case "php":
				mode = "application/x-httpd-php";
				break;
			case "c":
			case "h":
				mode = "text/x-csrc";
				break;
			case "hpp":
			case "cpp":
			case "c++":
				mode = "text/x-c++src";
				break;
			case "md":
				mode = "gfm";
				break;
			case "js":
				mode = { name: "text/javascript", globalVars: true };
				break;
			case "css":
				mode = "text/css";
				break;
			case "sql":
				mode = "text/x-sql";
				break;
			default:
				mode = { name: "text/html", alignCDATA: true };
				break;
		}
		return mode;
	}
	function findReadOnlyDelimiter(filename) {
		var delim = filename.split('.').pop().toLowerCase();
		switch (ext) {
			case "java":
				delim = "//";
				break;
			case "py":
				delim = "#";
				break;
			case "php":
			case "c":
			case "cpp":
			case "c++":
			default:
				delim = "//";
				break;
		}
		return delim;
	}
	var vocIndentSize = 4;
	
  function vocBetterTab(cm) {
    if (cm.somethingSelected()) {
      cm.indentSelection("add");
    } else {
      cm.replaceSelection(cm.getOption("indentWithTabs")? "\t":
        Array(cm.getOption("indentUnit") + 1).join(" "), "end", "+input");
    }
  }

  function vocDefaultTab(cm) {
    if (cm.somethingSelected()) {
      cm.indentSelection("add");
    }
    else {
      cm.execCommand("insertTab");
    }
  }

  var newLabNoContainer = false;


if (true) {

  var editor = CodeMirror.fromTextArea(document.getElementById("codearea0"), {
        lineNumbers: true,
        styleActiveLine: true,
    matchBrackets: true,
    autoCloseBrackets: false,
        autoCloseTags: true,
        lineWrapping: true,
    indentUnit: vocIndentSize,
    smartIndent: true,
    mode: {name: "xml", alignCDATA: true},
	theme: "neat",
          extraKeys: { Tab: vocBetterTab },
      });  

  cm_mode = findMode("");
  editor.setOption("mode", cm_mode);
  editor.setOption("readOnly", true);

  editor.clearHistory();

  var map = {
    "Cmd-E": function(cm){
      console.log("Command E");
      var terminalFrame = document.getElementById('terminalIframe');
      if (document.getElementById('consolediv') && ($('#consolediv').height() != 0) && terminalFrame) {
          //terminalFrame.focus();
          terminalFrame.contentWindow.vocLaunchTerminalButton().focus();
      } else if (document.getElementById('navbar-logo')) {
          document.getElementById('navbar-logo').focus();
      } else {
          // set focus to any other element if navbar is not present
          document.getElementById('breadcrumb-type-link').focus();
      }
    },
    "Ctrl-Space": "autocomplete"
  }
  editor.addKeyMap(map);

  	var lastEditTime = 0;
	numEdits = 1;
	function handleEditorChange(doc, param) {
		lastEditTime = new Date().getTime();
		if (numEdits) {
                   if( save_in_progress ){
                     $('#editor-save-status-btn').hide();
                     $("#editor-save-status").show();
                     $("#editor-save-status").html("Saving...pending");
                   } else {
                     $('#editor-save-status-btn').show();
                     $('#editor-save-status-btn').html("Save pending");
                     $("#editor-save-status").hide();
                   }
		}
		numEdits++;
	}
 	 
 	 editor.on("change", handleEditorChange);
 	 function vocIsFileReadOnly(fpath) {
 	 	return false;
	  }

	
}

  $('.vocdivider').draggable({
    axis: 'x',
    containment: 'parent',
    helper: 'clone',
    drag: function (event, ui) {
        var width = ui.offset.left;
        var width_of_right_panel = $("#idebox").width() - width;
        if (width_of_right_panel < 200) {
          return;
        }
        //if (width > 500) return; // at most
        if (left_panel_instructions) {
          if ($('#showdocviewicon').hasClass("icon-check-empty")) {
            $('#filelisting').width(width);
          } else {
            $('#instructions').width(width);
            doc_panel_width = width;
          }
        } else {
          $(this).prev().width(width);
        }
                          $('#readMeIframe').css('pointer-events', 'none');
            },
    start: function() {
                    $('#readMeIframe').css('pointer-events', 'none');
          },
    stop: function() {
                    $('#readMeIframe').css('pointer-events', 'auto');
          }
  });

  $('.vocdivider_v2').draggable({
    axis: 'x',
    containment: 'parent',
    helper: 'clone',
    iframeFix: true,
    scroll: false,
    drag: function (event, ui) {
        var width = ui.offset.left;

        // min/max of movement is controlled by the min/max where buildframe is defined
        // var width_of_right_panel = $("#buildframe").width();
        // if (width_of_right_panel < 50) {
        //   return;
        // }
        // if (width_of_right_panel > 400) {
        //   return;
        // }

        //mhui
        var idebox_width = $('#idebox').width();
        var element =  document.getElementById('gradeframe');
        if (typeof(element) != 'undefined' && element != null && element.style.display == 'block')
        {
            $('#buildframe').width(idebox_width - width - $('#gradeframe').width() - 10);
        }
        else
        {
            $(this).prev().width(idebox_width - width);
        }
    },
  });



// var for copypaste feature
var copyPasteClipboard = false;
if (vocCookiesDisabled === true) {
  copyPasteClipboard = false;
}
var copyCBValue = '';
function saveCBClipboard(path, paths=[])
{
    $.ajax({
      url: "../util/vcput.php",
      type: "post",
      data: {
        a: "saveClipboard",
        userid:3209731,
        asnid:2791722,
        mode:'s',
        version:'0',
        path:path,
        paths: JSON.stringify(paths)
      },
      success: function(data) {
        if (data.indexOf('ERROR:INVALID_SESSION>') == 1) { // invalid session
          refreshNewSessionPage();
        }

        try {
          resp = jQuery.parseJSON(data);
        } catch(err) {
          show_voc_gritter(false, "Internal error: invalid json", true);
          return;
        }     
        if(resp.status == 'Error'){
          show_voc_gritter(false, resp.message, false);
        } else {
          if (vocCookiesDisabled === true) {
            copyCBValue = resp.val;
            //console.log("copyCBValue: " + copyCBValue);
          }
          show_voc_gritter(false, "Copied", false);
          copyPasteClipboard = true;
        }
        return false;
      }
    });
}
var pasteprogress=0;
function pasteCB(type, path, source, msg, confirm) {
      /* default value to be used for confirm - better to do it this way
       * than doing it in the funtion signature otherwise some browser
       * versions e.g. IE, Edge has problem showing IDE page
       */
      if(confirm === undefined) {
        confirm = false;
      }
      if( pasteprogress>0 ){
        alert('Paste-workarea is in progress, please wait until the prior operation finishes.');
        return false;
      }
      pasteprogress++;
      var stepstr = "&stepid=2791722";
      var url = "../util/vcsave.php?asnid=2791721"+stepstr+"&mode=s&version=0&type="+type+(confirm? '&confirm=1' : '') + "&vm=34.209.4.84&labtype=1";
      $.ajax({
        type: 'POST',
        url: url,
        async: false,
        data: {filepath: "./"+path , sourcepath: "./"+source, copyCBValue: copyCBValue}
        })
          .done(function(ret_val) {
                  if(pasteprogress) --pasteprogress;
                  if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
                      refreshNewSessionPage();
                  }
                  if (ret_val.indexOf('<ERROR:') !== -1) { // error
                    show_voc_gritter(false, ret_val.substring(7), true);
                  } else {
                    show_voc_gritter(false, msg, false);
                    refreshFileTree(true, true);
                  }

          })
             .fail(function(ret_val) {
                  if(pasteprogress) --pasteprogress;
                  show_voc_gritter(false, "Paste-workarea failed. Please check your internet connection", true);
          });
          return true;
}

</script>


		<!-- ace scripts -->
		<!-- page specific plugin scripts -->
		<!-- <script src="../shared/ace/assets/js/fuelux/data/fuelux.tree-sampledata.js"></script> -->
		<script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/fuelux.tree.js"></script>
		
		<script type="text/javascript">
		  var DataSourceTree = function(options) {
        this._data 	= options.data;
        this.url = options.url;
      }
      
      DataSourceTree.prototype.data = function(options, callback) {
        if (this.url) {
          $.ajax({
            url: this.url,
            data: {
              t: 'getFileTreeV2',
              mode: 's',
              ownerid: 3209731,
              tide: 0,
              asnid: 2791721,
              asnstep: 2791722,
              currversion: '0',
              globalunfoldpath: './work',
              path: options.path ? options.path : ''
            },
            success: function(tree_data) {
              console.log('Dynamic Tree Load');
              console.log(tree_data);
              callback({data: JSON.parse(tree_data)});
            },
            error: function() {
              console.log('failed to load tree');
              callback({data: {}});
            }
          });
        } else { // use frontend implementation to build tree
          // copied from fuelux.tree-sampledata
          var self = this;
          var $data = null;

          if(!("name" in options) && !("type" in options)){
            $data = this._data;//the root tree
            callback({ data: $data });
            return;
          }
          else if("type" in options && options.type == "folder") {
            if("additionalParameters" in options && "children" in options.additionalParameters)
              $data = options.additionalParameters.children;
            else $data = {}//no data
          }

          if($data != null)//this setTimeout is only for mimicking some random delay
            setTimeout(function(){callback({ data: $data });} , parseInt(Math.random() * 0));
        }
      };
            			var treeDataSource;
			            var tree_data;
      

 tree_data = { 
  'resource' : {name:'resource',  base:'1',  type:'folder', nc:'',  extraHtml:'<i class=\"icon-lock bigger-140\" style=\"padding-left:4px\"></i>',  unfold:'1',  ed:'0', ec:'0', path:'./resource',} , 
 'work' : {name:'work',  base:'1',  type:'folder', nc:'', unfold:'1', ed:'0', ec:'0', path:'./work',} , 
 } 

 tree_data['resource']['additionalParameters'] = { 
 'children' : { 
 'lib' : {name:'lib',  type:'folder', nc:'0',  extraHtml:'<a class="badge badge-info pointer pull-right voc-tree-help tree-btn" tabindex="0" role="button" style="margin-right: 20px;" data-target="#LIB-help-modal" data-toggle="modal">?</a>',  unfold:'0',  ed:'0', ec:'0', path:'./resource/lib',} , 
 'asnlib' : {name:'asnlib',  type:'folder', nc:'0',  extraHtml:'<a class="badge badge-info pointer pull-right voc-tree-help tree-btn" tabindex="0" role="button" style="margin-right: 20px;" data-target="#ASNLIB-help-modal" data-toggle="modal">?</a>',  unfold:'0',  ed:'0', ec:'0', path:'./resource/asnlib',} , 
 'scripts' : {name:'scripts',  type:'folder', nc:'0',  extraHtml:'<a class="badge badge-info pointer pull-right voc-tree-help tree-btn" tabindex="0" role="button" style="margin-right: 20px;" data-target="#Scripts-help-modal" data-toggle="modal">?</a>',  unfold:'0',  ed:'0', ec:'0', path:'./resource/scripts',} , 
 'startercode' : {name:'startercode',  type:'folder', nc:'0',  extraHtml:'<a class="badge badge-info pointer pull-right voc-tree-help tree-btn" tabindex="0" role="button" style="margin-right: 20px;" data-target="#StarterCode-help-modal" data-toggle="modal">?</a>',  unfold:'0',  ed:'0', ec:'0', path:'./resource/startercode',} , 
 } 
 } 

 tree_data['resource']['additionalParameters']['children']['asnlib']['additionalParameters'] = { 
 'children' : { 
 '__error.dir_does_not_exist__' : {name:'__error.dir_does_not_exist__',  extraHtml:'',   type:'item', nc:'0', ed:'0', ee:'0', path:'./resource/asnlib/__error.dir_does_not_exist__',} , 
 } 
 } 

 tree_data['resource']['additionalParameters']['children']['lib']['additionalParameters'] = { 
 'children' : { 
 '__error.dir_does_not_exist__' : {name:'__error.dir_does_not_exist__',  extraHtml:'',   type:'item', nc:'0', ed:'0', ee:'0', path:'./resource/lib/__error.dir_does_not_exist__',} , 
 } 
 } 

 tree_data['resource']['additionalParameters']['children']['scripts']['additionalParameters'] = { 
 'children' : { 
 '__error.dir_does_not_exist__' : {name:'__error.dir_does_not_exist__',  extraHtml:'',   type:'item', nc:'0', ed:'0', ee:'0', path:'./resource/scripts/__error.dir_does_not_exist__',} , 
 } 
 } 

 tree_data['resource']['additionalParameters']['children']['startercode']['additionalParameters'] = { 
 'children' : { 
 '__error.dir_does_not_exist__' : {name:'__error.dir_does_not_exist__',  extraHtml:'',   type:'item', nc:'0', ed:'0', ee:'0', path:'./resource/startercode/__error.dir_does_not_exist__',} , 
 } 
 } 


tree_data_files = ' ./resource ./work ./resource/lib ./resource/asnlib ./resource/scripts ./resource/startercode ./resource/asnlib/__error.dir_does_not_exist__ ./resource/lib/__error.dir_does_not_exist__ ./resource/scripts/__error.dir_does_not_exist__ ./resource/startercode/__error.dir_does_not_exist__'
            
            // If new lab w/ no container (i.e. virtual machine, quiz, etc.), format tree object to only have 'Docs' and 'Work' folder
                
            treeDataSource = new DataSourceTree({data: tree_data});
      
var codeCommentWidgets = [];
	function removeLineWidgets() {
                if (codeCommentWidgets.length) {
                    for (var i = 0; i < codeCommentWidgets.length; i++) {
                        codeCommentWidgets[i].clear();
                    }

                    codeCommentWidgets = [];
            	}
        }
function showCodeComment(ids) {
        var id, codeComment, node;

	removeLineWidgets();
        if (ids == '') {
            return;
        }
        var ids = ids.split(',');

        

    for (var i = 0; i < ids.length; i++) {

        id = ids[i];

        codeComment = getCodeComment(id);
        
        if (codeComment.selectedPeer == 1) {
            commenterName = "Peer reviewer";
        } else {
                            commenterName = codeComment.name;
                    }

        node = $('\
            <div class="vocborder-1" style="position: relative; padding: 4px 30px 4px 6px; background: #f7f7f7; border-color: #ddd !important; border-left: none !important; margin: 4px 0 !important; z-index: 4;">\
                <strong style="color: #3b7fd4;">' + commenterName + ', ' + codeComment.time + ' ago</strong>\
                ' + (codeComment.selectedComment.length ? ('<pre style="padding-top: 4px;">' + codeComment.selectedComment + '</pre>') : '')  + '\
            </div>'
        )[0];

        codeCommentWidgets.push(editor.addLineWidget(codeComment.selectedLine, node, {above: false, coverGutter: false, noHScroll: true}));
    }
}


                var readonlyWidgets = [];
                
                function clearReadOnlyWidgets() {
                    if (readonlyWidgets.length) {
                        for (var i = 0; i < readonlyWidgets.length; i++) {
                            readonlyWidgets[i].clear();
                        }

                        readonlyWidgets = [];
                    }

                }
                function addReadOnlyWidget(widget) {
                    readonlyWidgets.push(widget);
                }
				
			function voc_process_readonly(cm, delim, begins, ends) {
			    var expectingBegin = true;
			    for (i=0; i< cm.doc.lineCount(); i++) {
			    
			    var test = delim+"READONLY_BEGIN";
			    
			        var val = cm.getLine(i);
			        val = val.replace(/ /g,'');
			        if (val == delim+"READONLY_BEGIN") {
			            if (!expectingBegin) return false;
			            begins.push(i);
			            expectingBegin = false;
			        } else if (val == delim+"READONLY_END") {
			        	if (expectingBegin) return false;
			        	ends.push(i);
			        	expectingBegin = true;
			        } else {
			        }
			    }
			    if (begins.length && (begins.length == ends.length)) {
			        return true;
			    } else {
			        return false;
			    }
			}
			var largefileurl = null;

                        function voc_get_viewer_code(fpath, fname, lineNum, codeComments){
                $("#editor_current_file").html('<i class="icon-spin icon-spinner"></i>Reading ... ' + (((newLabNoContainer && fpath.substring(2).includes("resource/asnlib/public/docs/"))? 
                    fpath.substring(2).replace('resource/asnlib/public/docs/','docs/') : fpath.substring(2))));

        var stepstr = "&stepid=2791722";
        
				var url = "../util/vcprojapi.php?t=filefetch&mode=s&getcode=1&data="+encodeURIComponent(fpath)+"&getlarge=0&asnid=2791721&version=0"+stepstr + "&vm=34.209.4.84&labtype=1";
				var data = fpath;

				$.post(url,{},function(ret_val)
				{
					if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
						refreshNewSessionPage();
					}
					
				  if (ret_val.indexOf('VOCAREUM-ERROR') !== -1) { // due to Db traffic or something
                                      show_voc_gritter(false, "Error retrieving file, please try again", true);
                                      return;
                                  }
				  if (ret_val.indexOf('<ERROR:FILE_TOO_BIG>') !== -1) { // too large to show in editor
				      largefileurl = url + "&dl=1";
				      $('#largefile-download').attr('href',largefileurl);
				      $('#largefile-viewer-modal').modal('show');
				      return;
				  }
				

					$('#codebtn').tab('show');

					numEdits = 0; // reset num of edits for this file

					cm_mode = findMode(fpath);
					editor.setOption("mode", cm_mode);
                                        $("#editor-save-status").show();
                                        $('#editor-save-status-btn').hide();
                                        if(ret_val.length>8388608/*8MB*/ || (fpath && fpath.search(/^\.\/(LIB|ASNLIB|resource\/lib|resource\/asnlib)\/publicdata\//)>=0) ){
                                          if(ret_val.length>8388608){
                                            editor.setOption("readOnly", true);
                                            $("#editor-save-status").html("Read only[<font color='red'>8MB+</font>]");
                                          } else {
                                                                                        editor.setOption("readOnly", true);
                                            $("#editor-save-status").html("Read only");
                                                                                      }
                                        } else {
                                          $("#editor-save-status").html("");
                                        }
					editor.setValue(ret_val);
					editor.clearHistory();

					editor_content_change = editor.doc.changeGeneration();
					
						        // check ext. check if copy of default
					var ro_begins = [];
					var ro_ends = [];
					var delim = findReadOnlyDelimiter(fpath);

                    var readonly_lines = voc_process_readonly(editor, delim, ro_begins, ro_ends);
                    
                    clearReadOnlyWidgets(); // clear last

                    if (readonly_lines && (ro_begins.length > 0)) {
                    
                        for (i = 0; i < ro_begins.length; i++) {
                              var msg1 = document.createElement("div");
                              // msg1.appendChild(document.createTextNode("Start readonly code"));
                              msg1.className = "voc-readonly-top";
                              
                              var label = document.createElement("span");
                              label.className = "label label-warning";
                              label.appendChild(document.createTextNode("READ ONLY"));
                              msg1.appendChild(label);
                              
                              var msg2 = document.createElement("div");
                              // msg2.appendChild(document.createTextNode("End of readonly code"));
                              msg2.className = "voc-readonly-bottom";
                              
                              ro_widget1 = editor.addLineWidget(ro_begins[i], msg1, {above:true, coverGutter: false, noHScroll: true});
                              ro_widget2 = editor.addLineWidget(ro_ends[i], msg2, {coverGutter: false, noHScroll: true});

                              addReadOnlyWidget(ro_widget1);
                              addReadOnlyWidget(ro_widget2);

                              editor.markText(
                                {line: ro_begins[i],ch:0}, {line: ro_ends[i] + 1, ch:0},
                                    {
                                        readOnly:true,
                                        atomic: true,
                                        className:"vocbghighlight",
                                        title:"READONLY"
                                    }
                              );
                              
                        }
                    }
            
					viewer_last_fname = fname;
					viewer_last_fpath = fpath;
					$("#editor_current_file").html(((newLabNoContainer && fpath.substring(2).includes("resource/asnlib/public/docs/"))? 
                    fpath.substring(2).replace('resource/asnlib/public/docs/','docs/') : fpath.substring(2)));
                                      					if (lineNum > 0) {
						if (lineNum > 0) lineNum = lineNum - 1;
						editor.setCursor(lineNum);
					}


          showCodeComment(codeComments);
				}).fail(function() {
				  // Record failed file load in activity log
          $.ajax({
            'url': '../util/vcput.php',
            'type': 'post',
            'data': {
              'a': 'addActivityLogEntry',
              'stepid': '2791722',
              'asnuserid': '3209731',
              'msg': 'Failed to load file: ' + "/home" + fpath.substring(1),
              'type': '9',
              'status': 0
            }
          });
      	  
				  $("#editor_current_file").html(('<i class="icon-exclamation-sign"></i> FAILED to load ... ' + fpath.substring(2)));
				  
				});
			  return false;
			}
			

            function subTreeInit() {
    			var s3_data;
    			$.ajax({
    		        url: "submissiontree.php",
    		        method: "GET",
    		        dataType: "JSON",
    		        async: false,
    		        data: {
    		            courseid: "117181",
    		            asnid: "2791722",
    		            userid: "3209731",
    			        published: "1",
        			    ide: 1
    		        },
    		        success: function(data) {
    		    		s3_data = data;
    		        }
    		    });
    			subDataSource = new DataSourceTree({data: s3_data});
    			
              			$('#trees3').ace_tree({
    				dataSource: subDataSource,
    				multiSelect: false,
    				loadingHTML:'<div class="tree-loading"><i class="icon-refresh icon-spin blue"></i></div>',
    				'open-icon' : 'icon-minus',
    				'close-icon' : 'icon-plus',
    				'selectable' : true,
    				'selected-icon' : 'icon-caret-right',
    				'unselected-icon' : 'icon-caret-right',
    				cacheItems: true
    			});
              		}

    		function refreshSubTree() {
    			$('#trees3').remove();
    			$("<div id='trees3' class='tree' style='background:white;'></div>").insertAfter('#tree1');
    			subTreeInit();
    		}
    		
            function voc_get_s3_code(fpath, fname, lineNum, codeComments) {
                $("#editor_current_file").html('<i class="icon-spin icon-spinner"></i>Reading ... ' + (fpath));

    	        var stepstr = "&stepid=2791722";
    			var url = "../util/vcprojapi.php?t=filefetch&mode=s&getcode=1&data="+encodeURIComponent(fpath)+"&getlarge=0&userid=3209731&asnid=2791721&version=0"+stepstr;
    			var data = fpath;

    			$.post(url,{},function(ret_val) {
    				if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
    					refreshNewSessionPage();
    				}
				if (ret_val.indexOf('VOCAREUM-ERROR') !== -1) { // due to Db traffic or something
                                    show_voc_gritter(false, "Error retrieving file, please try again", true);
                                    return;
                                }
    			  	if (ret_val.indexOf('<ERROR:FILE_TOO_BIG>') !== -1) { // too large to show in editor
    		    		largefileurl = url + "&dl=1";
    					$('#largefile-download').attr('href',largefileurl);
    					$('#largefile-viewer-modal').modal('show');
    					return;
    				}
    			
    				$('#codebtn').tab('show');

    				numEdits = 0; // reset num of edits for this file

    				cm_mode = findMode(fpath);
    				editor.setOption("mode", cm_mode);
                    $("#editor-save-status").show();
                    $('#editor-save-status-btn').hide();
                    editor.setOption("readOnly", true);
                    
                    if(ret_val.length>8388608/*8MB*/ || (fpath && fpath.search(/^\.\/(LIB|ASNLIB|resource\/lib|resource\/asnlib)\/publicdata\//)>=0) ){
                        if(ret_val.length>8388608) {
                            $("#editor-save-status").html("Read only[<font color='red'>8MB+</font>]");
                        } else {
                            $("#editor-save-status").html("Read only");
    					}
    				} else {
    					$("#editor-save-status").html("");
    				}
    				
    				editor.setValue(ret_val);
    				editor.clearHistory();
    				editor_content_change = editor.doc.changeGeneration();
    				$("#editor_current_file").html((fpath));
    				
    				if (lineNum > 0) {
    					if (lineNum > 0) lineNum = lineNum - 1;
    					editor.setCursor(lineNum);
    				}

    				showCodeComment(codeComments);
    			});
    		  return false;
    		}

      
	    var $foldersToUnfold = [];
	    

      var unfoldLoopCount = 0;
      function unfoldTree() {
                    
          if ($foldersToUnfold.length <= 0) return;
          if (unfoldLoopCount++ > 20) {
              $foldersToUnfold = [];
              return;
          }

          $('.tree-folder-header').each(function() {
              $val = $(this).data();
              // console.log("element is "+$val['path']);
              if ('path' in $val) {
                  $val['path'] = $val['path'].trim();
                  var tmpIndex = $foldersToUnfold.indexOf($val['path']);
                  if (tmpIndex != -1) {
                    $('#tree1').tree('openFolder', $(this));
                    $foldersToUnfold.splice(tmpIndex, 1);
                  }
              }
          });
          window.setTimeout('unfoldTree()', 100);
      
      }
	    var tree1_files = "";

        function refreshFileTree(workchanged, retainwork) {
          console.log('inside refreshFileTree()');
        return;         }
 
        function markUpdateChanged(path)
        {
          if( path.search(/^work/)<0 &&
              path.search(/^\.\/work/)<0 ) {
            $('#updatebtntext').html('Update*');
          }
        }
     
        $('#cmdprogressbtn').hide();
        var cmdprogress = 0;
        function voc_create_confirm(type, path, source, msg, qstr)
        {
          bootbox.dialog(qstr, [{
                                 "label" : "Yes",
                                 "class" : "btn vocbtn-ac vocbtn-action",
                                 "callback": function() {
                                      voc_create(type, path, source, msg, true);
                                    }
                                }, {
                                 "label" : "Cancel",
                                 "class" : "btn vocbtn-ac vocbtn-status"
                                }]
                        );
          return false;
        }
        function voc_create(type, path, source, msg, confirm) {
                /* default value to be used for confirm - better to do it this way
                 * than doing it in the funtion signature otherwise some browser
                 * versions e.g. IE, Edge has problem showing IDE page
                 */
                if(confirm === undefined) {
                  confirm = false;
                }
                cmdprogress++;
                var stepstr = "&stepid=2791722";
                var url = "../util/vcsave.php?asnid=2791721"+stepstr+"&mode=s&version=0&type="+type+(confirm? '&confirm=1' : '') + "&vm=34.209.4.84&labtype=1";
                markUpdateChanged(path);
                $('#cmdprogressbtn').show();
                var paths = $('#tree1').tree('selectedItems').map(function (el) {
          	      var path = el.path.substring(2);
          	      if (el.type == 'folder') {
          	        path += '/';
          	      }
          	      return path;
          	    });
                $.ajax({
                  type: 'POST',
                  url: url,
                  async: false,
                  data: {
                    filepath: "./"+path,
                    sourcepath: "./"+source,
                    files: JSON.stringify(paths),
                    copyCBValue: copyCBValue
                  }
                })
                    .done(function(ret_val) {
                            if(cmdprogress) --cmdprogress;
                            if(cmdprogress<1) $('#cmdprogressbtn').hide();
                            if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
                                refreshNewSessionPage();
                            }
                            if (ret_val.indexOf('<ERROR:') !== -1) { // error
                              show_voc_gritter(false, ret_val.substring(7), true);
                              $("#filestatuslabel").html("<i class='icon-warning-sign' style='margin-right:3px'> </i><font color=red>error</font>");
                            } else if (ret_val.indexOf('<CONFIRM:') !== -1) {
                              voc_create_confirm(type, path, source, msg, ret_val.substring(9));
                            } else {
                              show_voc_gritter(false, msg, false);
                              refreshFileTree(true, true);
                              $("#filecancelbtn").click();
                            }

                    })
                       .fail(function(ret_val) {
                            if(cmdprogress) --cmdprogress;
                            if(cmdprogress<1) $('#cmdprogressbtn').hide();
                            var timenow = new Date().getTime();
                            if (timenow - last_conn_warning > 10*1000) { // 10 seconds
                              show_voc_gritter(false, "File/folder creation/rename failed. Please check your internet connection", true);
                              last_conn_warning = new Date().getTime();
                            }
                    });
 
                    return true;
          }
			
			
		var save_count = 0;
		var last_conn_warning = new Date().getTime();
    function voc_save(showGritter, dspmsg) {
        var save_ok = true;
        save_count++;
    if (save_in_progress) {
      return false;
    }
    save_in_progress = true;

    $('#editor-save-status-btn').hide();
    $("#editor-save-status").show();
    $("#editor-save-status").html('<i class="icon-spin icon-spinner"></i> '+dspmsg);

    $("#save-icon").addClass('icon-spin');
    $("#save-icon").addClass('icon-spinner');
    $('#save-icon').removeClass('vochide');
    var viewerContents = editor.getValue();
    var whichfilepath = viewer_last_fpath;
    if (!whichfilepath) whichfilepath = viewer_first_fpath;
    var filepath = encodeURIComponent(whichfilepath);

    var stepstr = "&stepid=2791722";
    var url = "../util/vcsave.php?type=Save&asnid=2791721"+stepstr+"&mode=s&version=0&filepath="+filepath + "&vm=34.209.4.84&labtype=1";
    
    editor_content_change = editor.doc.changeGeneration();
    markUpdateChanged(whichfilepath);
    $.ajax({
      type: 'POST',
      url: url,
      async: true,
      data: {code0: viewerContents}
      })
        .done(function(ret_val) {
                if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
                    refreshNewSessionPage();
                }
                $("#save-icon").removeClass('icon-spin');
                $("#save-icon").removeClass('icon-spinner');
                $("#save-icon").addClass('vochide');
                passed = ( ret_val.indexOf('SAVE SUCCESSFUL') !== -1 );
                $("#editor-save-status").show();
                $('#editor-save-status-btn').hide();
                if (passed) {
                    $("#editor-save-status").html('<i class="icon-ok"></i> Saved');
                                                                                    } else {
                    if (1 || showGritter) {
                        if (ret_val.indexOf('<ERROR:') !== -1) {
                            errStr = ret_val.substring(7);
                        } else {
                            errStr = ret_val;
                        }
                        show_voc_gritter(false, "Save failed: " + errStr, true);
                                                                    }
                    $("#editor-save-status").html('<i class="icon-exclamation-sign"></i> Save failed');
                }
        
             //   editor_content_change = editor.doc.changeGeneration();
                save_in_progress = false;
                var moresave = save_count>1;
                save_count = 0;
                          if( moresave ){
               window.setTimeout(function(){ voc_save(showGritter, dspmsg); } , 100);
             }
        })
       .fail(function(ret_val) {
            $("#save-icon").removeClass('icon-spin');
            $("#save-icon").removeClass('icon-spinner');
            $("#save-icon").addClass('vochide');
    
            var timenow = new Date().getTime();
            if (timenow - last_conn_warning > 10*1000) { // 10 seconds
              show_voc_gritter(false, "File save failed. Please check your internet connection", true);
              last_conn_warning = new Date().getTime();
            }
            save_count = 0;
            save_in_progress = false;
            save_ok = false;
        });

		    return save_ok;
		}
		
    if (true) {

			function isSaveNeeded() {
					var codeFileChanged = true;
					if (editor && editor.doc.isClean(editor_content_change)) codeFileChanged = false;
					if (vocIsFileReadOnly(viewer_last_fpath)) codeFileChanged = false;
					return codeFileChanged;
			}
    

		 var isTermActive = true;
     function periodic_save() {
            var saveNeeded = isSaveNeeded();
      timeNow = new Date().getTime();
      if (saveNeeded && (timeNow - lastEditTime > 5000)) {
        voc_save(false, "Saving");
      }
      if ($('#terminalIframe').length > 0) {
          if (document.activeElement.name == "terminalIframe") {
              if (!isTermActive) {
                 isTermActive = true;
                 console.log("Terminal is now active");
                 // terminalIframe.document.head.innerHTML += '<style type="text/css">.terminal-cursor{background:#AAAAAA !important;}</style>';

                 var el = terminalIframe.document.getElementById('vocCursorStyle');
                 if (el) {
                     el.innerHTML = ".terminal-cursor{background:#AAAAAA !important;";
                 }

              }
          } else { // activeElement is not terminal
              if (isTermActive) {
                 isTermActive = false;
                 console.log("Terminal is NOT active");

                 // terminalIframe.document.head.innerHTML += '<style type="text/css">.terminal-cursor{background:#F3F3F3 !important;}</style>';
                 var el = terminalIframe.document.getElementById('vocCursorStyle');
                 if (el) {
                     el.innerHTML = ".terminal-cursor{background:#F3F3F3 !important;";
                 }
                 
                 refreshFileTree(false, true);
              }
          }
      }
      
      window.setTimeout('periodic_save()', 1000);
     }
			 
    }

		</script>


<script>
var jupyterIframeName = "panel2Iframe";
/* this is all javascript for iFrame-parent communication using postMessage etc to handle cross-origin
 * security implications - different sub-domains are cross-origin 
 * NOTE: to be included under script tags 
 */
/* let's start with Jupyter */
var vocJupyterSaveCheckDelta = 1000;
var vocJupyterSaveMaxCounter = 55; // 55 seconds
var vocJupyterSaveCounter = 0;
var vocJupyterSaveStatus = null;
var iframeWindow = null; 
var jupyter_username = null; 
var jupyter_submit_url = null;
var jupyter_cw = null;
<!-- console.log("New IPC between parent and jupyter iFrame ======== "); -->

//jupyterIframeName and juypterRootUri comes from parent files
function vocCheckJupyterConsistency(username)
{
  jupyter_username = username;
  jif = document.getElementById(jupyterIframeName);
  if (jif)
  {
    cw = jif.contentWindow;
    jupyter_cw = cw;
    if (cw)
    {
      try {
        if (typeof(cw.vocExtGetUniqUserName) === typeof(Function))
        {
          name = cw.vocExtGetUniqUserName();
          if ((name != 'unset') && (name != username))
          {
            //console.log("VOC name check: " + name + " :: " + username);
            window.location.replace($('#breadcrumb').find('a').attr("href") + "&w=Jupyter+session+closed");
          }
        }
      } catch (error) {
        //console.log("sending message vocExtGetUniqUserName");
        cw.postMessage({ action: 'vocExtGetUniqUserName' }, jupyterRootUri);
      }
    }
  }
  setTimeout(vocCheckJupyterConsistency, 1000, username);
}

function vocareum_be_notebook_saved(val)
{
  vocJupyterSaveStatus = val;
  console.log("VOC: Notebook saved: " + val);
}

function vocareum_be_notebook_checkpointed(val)
{
  vocJupyterSaveStatus = val;
  console.log("VOC: Notebook saved/checkpointed: " + val);
}

function waitForJupSaveAndCheckVerifySubmit(cw, url)
{
  jupyter_submit_url = url;
  if (vocJupyterSaveStatus == true)
  {
    $.gritter.removeAll();
    vocJupyterSaveStatus = null;
    checkAndVerifyResubmit(url);
    return;
  }
  else if (vocJupyterSaveStatus == false)
  {
    vocJupyterSaveStatus = null;
    show_voc_gritter(true, 'Notebook save/chkpt failed', true);
    checkAndVerifyResubmit(url); // coz we don't stop submission even on save failure
    return;
  }
  vocJupyterSaveCounter += 1;
  if (vocJupyterSaveCounter >= vocJupyterSaveMaxCounter)
  {
    show_voc_gritter(true, 'Notebook save/chkpt timed out', true);
    checkAndVerifyResubmit(url); // coz we don't stop submission even on save failure
    return;
  }
  setTimeout(waitForJupSaveAndCheckVerifySubmit, vocJupyterSaveCheckDelta, cw, url);
  return false;
}

function saveJupyterNotebookAndCheckVerifySubmit(url)
{
  jupyter_submit_url = url;
  
  // if we're here, nothing to save for jupyter
  checkAndVerifyResubmit(url);
}

function vocareum_be_loadContext() {
    console.log("In vocareum_be_loadContext");
    const vocext_comments_context = {};
    vocext_comments_context['myname'] = "EMMANUEL ARHU";
    vocext_comments_context['myid'] = "3209731";
    vocext_comments_context['codecomment_edit'] = "false";
    if (iframeWindow) {
      iframeWindow.vocext_comments.context = vocext_comments_context;
    } else {
      jif = document.getElementById(jupyterIframeName);
      jupyter_cw = jif.contentWindow;
      jupyter_cw.postMessage({ action: 'vocext_comments_context', value: vocext_comments_context }, jupyterRootUri);
    }
}

function vocareum_be_canEdit() {
    return true;
}

function vocareum_be_canEditRubrics() {
    return false;
}

function vocareum_be_getCellColor(cellType) 
{
    // cellType is of type: VCJupyterCellType
    switch (cellType)
    {
      case 4:
        return "#e2e2e2";
      default:
        return null;
    }
}

function vocareum_be_loadComments(filepath, cell, cellindex) {
    console.log("vocareum_be_loadComments " + filepath);
    filepath = "./" + filepath;
    for (var cid in allCodeComments) {
        var obj = allCodeComments[cid];
        if (obj.selectedFilePath == filepath) {
            if (obj.cell == cellindex) {
                if (iframeWindow) {
                    iframeWindow.vocext_addComment(cell, obj.selectedLine, JSON.parse(obj.selectedComment), (obj.selectedPeer == 1 ? 'Peer reviewer' : obj.name), obj.time, cid, obj.selectedAuthor);
                } else {
                  jupyter_cw.postMessage({ action: 'vocext_addComment', cell: cell, selectedLine: obj.selectedLine, selectedComment: JSON.parse(obj.selectedComment), selectedPeer: (obj.selectedPeer == 1 ? 'Peer reviewer' : obj.name), time: obj.time, cid: cid, selectedAuthor: obj.selectedAuthor, cellindex: cellindex }, jupyterRootUri);
                }
            }
        }
    }
}


  function vcJupyterExtraNewSubmission()
  {
    // if this is jupyter and we're embedding output, need to clear it on a new submission
      }

  function vcJupyterExtraGradingComplete()
  {
    // if this is jupyter and we're embedding output, tell jupyter to do it's thing
      }

  // called by jupyter if it needs to show something in an opened notebook
  function vocareum_be_getOutputData(notebookName)
  {
      }


window.addEventListener("message", onMessage, false); // to support postMessage etc

function onMessage(event) {
  let data = event.data;

  if (!event.origin.includes('vocareum.com')) {
    return;
  }

  if (data.func !== undefined && typeof(window[data.func]) == "function") {
    console.log("Function Event in parent: " + data.func);
    window[data.func].call();
    return;
  }

  switch (data.action) {
    case 'vocExtCheckNotebookAvailableResponse' :
      //console.log("Event in parent: " + data.action);
      var status = data.notebook_available_status;
      //console.log("Rcvd status from iframe: " + status);
      if (status == true)
      {
        vocJupyterSaveCounter = 0;
        vocJupyterSaveStatus = null;
        show_voc_gritter_duration(false, 'Checkpointing Notebook', false, vocJupyterSaveCheckDelta * vocJupyterSaveMaxCounter);
        event.source.postMessage({ func: 'vocExtSaveAndCheckpointNotebook' }, event.origin);
        setTimeout(waitForJupSaveAndCheckVerifySubmit, vocJupyterSaveCheckDelta, jupyter_cw, jupyter_submit_url);
        return;
      } else {
        checkAndVerifyResubmit(jupyter_submit_url);
      }
    break;
    case 'vocExtGetUniqUserNameResponse' :
      name = data.username;
      //console.log("VOC name check: " + name + " :: " + jupyter_username);
      if ((name != 'unset') && (name != jupyter_username))
      {
        window.location.replace($('#breadcrumb').find('a').attr("href") + "&w=Jupyter+session+closed");
      }
    break;
    case 'vocareum_be_notebook_checkpointed' :
      val = data.val;
      vocareum_be_notebook_checkpointed(val);
      return;
    break;
    case 'vocareum_be_canEdit':
      val = vocareum_be_canEdit();
      event.source.postMessage({ action: 'vocareum_be_canEditResponse', value: val }, event.origin);
    break;
    case 'vocareum_be_canEditRubrics':
      val = vocareum_be_canEditRubrics();
      event.source.postMessage({ action: 'vocareum_be_canEditRubricsResponse', value: val }, event.origin);
    break;
    case 'vocareum_be_loadComments' :
      var parsedData = data.data;
      filepath = parsedData.voc_filepath;
      cell = parsedData.voc_cell;
      cellindex = parsedData.voc_CellIndex; 
      vocareum_be_loadComments(filepath, cell, cellindex);
      return;
    break;
    case 'vocareum_be_getOutputData' :
      vocareum_be_getOutputData(data.notebook_name);
    break;
    case 'voc_functionExists' :
      var nameOfFunction = data.function_name;
      var val = false;
      if (typeof window[nameOfFunction] === 'function') {
        val = true;
      }
      event.source.postMessage({ action: 'voc_functionExistsResponse', function_name: nameOfFunction, value: val }, event.origin);
    break;
    case 'vocareum_be_getRubricItems':
      var rubricItems = vocareum_be_getRubricItems();
      event.source.postMessage({ action: 'vocareum_be_getRubricItemsResponse', rubricItems: rubricItems }, event.origin);
    break;
    case 'vocareum_be_getRubricScores':
      var rubricScores = vocareum_be_getRubricScores();
      event.source.postMessage({ action: 'vocareum_be_getRubricScoresResponse', rubricScores: rubricScores }, event.origin);
    break;
    case 'vocareum_be_addComment':
      let addComment_data = data.data;
      let addComment_filepath = addComment_data.filepath;
      let addComment_cellid = addComment_data.cellid;
      let addComment_index = addComment_data.index;
      let addComment_comment = addComment_data.comment;
      let addComment_line = addComment_data.line;
      let addComment_cellindex = addComment_data.cellindex;
      let addComment_commentid = addComment_data.commentid;
      vocareum_be_addComment(addComment_filepath, addComment_cellid, addComment_index, addComment_comment, addComment_line, addComment_cellindex, addComment_commentid);
    break;
    case 'vocareum_be_deleteComment':
      let deleteComment_data = data.data;
      let deleteComment_cid = deleteComment_data.cid;
      let deleteComment_cellid = deleteComment_data.cellid;
      let deleteComment_index = deleteComment_data.index;
      vocareum_be_deleteComment(deleteComment_cid, deleteComment_cellid, deleteComment_index);
    break
    default:
      console.log("Unhandled event in parent: " + data.action);
      break;
  }
}
 
</script>
  <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/platform.js"></script>

		<script type="text/javascript">

			var save_in_progress = false;
                        var fileUploadListener = null;
			var runlog_in_progress = false;
			var verify_in_progress = false;
			var log_interval = 1;
			var current_mode = 1;
			var previous_mode = 1;

			var viewer = false;
			var currentEditFileIndex = 0;
			var edit_file = "";
			var edit_file_name = "";


var diffArea = null;


function initDiff() {
  value = editor.getValue();
  var target = document.getElementById("div-diff");
 
  target.innerHTML = "<h4>&nbsp;<i class=\"icon-spin icon-spinner\"></i> Loading diff. Please wait. </h4>";
  
	var filepath = viewer_last_fpath;
	if (!viewer_last_fpath) filepath = viewer_first_fpath;

	// filepath = encodeURIComponent(filepath);
	cm_mode = findMode(filepath);
	
	
	var url = "../util/vcprojapi.php?t=projsource&orig=1&asnid=2791721&wa_stepid=2791722&id=23302504&data=filepath&version=0";

	$.post(url,{getcode:1,data:filepath},function(ret_val)
	{
		if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
			refreshNewSessionPage();
		}
		// conversion
		$("#scratchpad").val(ret_val);
		orig_val = $("#scratchpad").val();
		
		
		if (ret_val == "") {
		  	target.innerHTML = "<h4>&nbsp; This file has no original version. </h4>";
			diffArea = null;
			return;
		}
		if (orig_val == value) {
		  	target.innerHTML = "<h4>&nbsp;<i class=\"icon-check\"></i> Current version is same as the original version. </h4>";

			// target.innerHTML = "<div style=\"padding: 10px\">Current Version is exactly same as the Original Version.</div>";
			diffArea = null;
			return;
		}
		
		target.innerHTML = "<span style=\"padding-left:10px\">Current Version</span><span class=\"pull-right\" style=\"padding-right:10px\">Original Version</span>";
		  orig2 = orig_val;
		  // value_mod = value.replace(/\u003cscript/g, "\u003cscript type=text/javascript ");
		  value_mod = value;
		  diffArea = CodeMirror.MergeView(target, {
			value: value_mod,
			origLeft: null,
			orig: orig2,
			lineNumbers: true,
			mode: cm_mode,
			highlightDifferences: true
		  });

	});
}

        function setConsoleParams()
        {
                                      var build_ht = $("#idebox").height();
              var console_ht = build_ht - 40;
          
          $("#buildframe").height(build_ht);
          $("#consolediv").height(console_ht);
        }

        $( document ).ready(function() {
          setConsoleParams();
          if (true) window.setTimeout('periodic_save()', 5000);
          

          
			});
			
			function indicate_build_done() {
			}


			
			jQuery(function($){

          $(function() {
            $('[data-toggle="tooltip"]').tooltip();
          });

          

	function getFilePathStr(unencoded_filepath, encodeIt)
        {
          if (unencoded_filepath.length <= 1)
          {
            return "";
          }
          // if starting with "./work", remove it
          // not sure what to do about asnlib, etc. right now
          fp = unencoded_filepath.replace(/^\.\/work\//, "");
          return "&selectedfile=" + ((encodeIt == true) ? encodeURIComponent(fp) : fp);
        }
          function hideCopyFileBtn() {
              $('#filecopybtn').hide();
          }
          function showCopyFileBtn() {
              $('#downloadbtn').show();
              $('#filecopybtn').show();
          }
          function hidePasteFileBtn() {
              $('#filepastebtn').hide();
          }
          function showPasteFileBtn() {
              if (copyPasteClipboard) {
                  $('#filepastebtn').show();
              }
          }

          function hideAllFileBtn() {
                              $('#fileuploadbtn').hide();
                              $('#filedelbtn').hide();
                              $('#filerenamebtn').hide();
                              $('#newbtn').hide();
                              $("#fileform" ).hide();
                              hideCopyFileBtn();
                              hidePasteFileBtn();
          }
          function showDelFileBtn() {
                              $('#filedelbtn').show();
                              $('#filerenamebtn').show();
          }
          function showCreateFileBtn() {
                              // $("#fileform" ).hide();
                              $('#fileuploadbtn').show();
                              $('#newbtn').show();
          }
          function showNewBtn() {
                              $('#newbtn').show();
          }


     			
				
$("#modal-table-diff").on('shown.bs.modal',
    function (e) {
      initDiff();
    }
);
		
		// File operation handlers
    $('#filecopybtn').on('click', function() {
        $("#filestatuslabel").html("");
        var cb = (newLabNoContainer && $('#input_filename').val().includes("docs/") && $('#input_filename').val().indexOf('docs/') == 0)? 
                    $('#input_filename').val().replace('docs/','resource/asnlib/public/docs/') 
                  : $('#input_filename').val();

        var paths = $('#tree1').tree('selectedItems').map(function (el) {
  	      var path = el.path.substring(2);
  	      if (el.type == 'folder') {
  	        path += '/';
  	      }
  	      return path;
  	    });
        saveCBClipboard(cb, paths);
    });
    $('#filepastebtn').on('click', function() {
        $("#filestatuslabel").html("");
        var tgt = (newLabNoContainer && $("#input_filename").val().includes("docs/") && $("#input_filename").val().indexOf('docs/') == 0)? 
                    $("#input_filename").val().replace('docs/','resource/asnlib/public/docs/') 
                  : $("#input_filename").val();
        voc_create("Paste", tgt, '', "Paste successful");
    });



    $('#filecreatebtn').on('click', function() {
        $("#filestatuslabel").html("");
        var createFilePath = (newLabNoContainer && $("#input_filename").val().includes("docs/") && $('#input_filename').val().indexOf('docs/') == 0)? 
                                $("#input_filename").val().replace("docs/","resource/asnlib/public/docs/") 
                              : $("#input_filename").val();
        if (fileoptype=='file') {
            voc_create("File", createFilePath, null, "File created");
        } else if (fileoptype=='folder') {
            voc_create("Folder", createFilePath, null, "Folder created");
        } else if (fileoptype=='rename') {
          var selectedFilePath = (newLabNoContainer && $("#span_selectedfile").text().includes("docs/") && $("#span_selectedfile").text().indexOf('docs/') == 0)? 
                                  $("#span_selectedfile").text().replace("docs/","resource/asnlib/public/docs/") 
                                : $("#span_selectedfile").text();
            voc_create("Rename", createFilePath, selectedFilePath, "Rename successful");
        }
    });

    $('#filedelbtn').on('click', function() {
      var paths = $('#tree1').tree('selectedItems').map(function (el) {
	      var path = el.path.substring(2);
	      if (el.type == 'folder') {
	        path += '/';
	      }
	      return path;
	    });
	var $val = $("#input_filename").val();
	var $type = $("#input_filetype").val();
        $("#filestatuslabel").html("");
	if ($val != '') {
				bootbox.dialog("Are you sure you want to delete " + ((newLabNoContainer && JSON.stringify(paths).substring(1, JSON.stringify(paths).length-1).includes("resource/asnlib/public/docs/"))? 
                    JSON.stringify(paths).substring(1, JSON.stringify(paths).length-1).replace('resource/asnlib/public/docs/','docs/') : JSON.stringify(paths).substring(1, JSON.stringify(paths).length-1)) + "?", [{
					"label" : "Yes",
					"class" : "btn vocbtn-ac vocbtn-action",
					"callback": function() {
						voc_create("Delete", (newLabNoContainer && $("#input_filename").val().includes("docs/") && $('#input_filename').val().indexOf("docs/") == 0)? 
                    $("#input_filename").val().replace('docs/','resource/asnlib/public/docs/') : $("#input_filename").val(), null, "Deleted");
					}
					}, {
					"label" : "Cancel",
					"class" : "btn vocbtn-ac vocbtn-status"
					}]
				);
	}
    });
    
    
    
    function isReadmeVisible() {
      if (left_panel_instructions) {
        return $('#showdocviewicon').hasClass("icon-check");
      }
      return false;
    }

    function showHideDivBasedOnHeight(divId)
    {
      if ($(divId).length) {
        if ( ($(divId).height() == 0) || ($(divId).height() == '0%') ) {
          $(divId).hide();
        } else {
          $(divId).show();
        }
      }
    }

    function showHideFramesBasedOnHeight()
    {
      showHideDivBasedOnHeight('#htmlframe');
      showHideDivBasedOnHeight('#codeframe');
      showHideDivBasedOnHeight('#buildframe');
      showHideDivBasedOnHeight('#consolediv');
    }

    if (left_panel_instructions) {
      var lang_readmes = {"ar-sa":"ASNLIB\/public\/docs\/lang\/ar-sa\/README.html","de-de":"ASNLIB\/public\/docs\/lang\/de-de\/README.html","en-us":"ASNLIB\/public\/docs\/lang\/en-us\/README.html","es-es":"ASNLIB\/public\/docs\/lang\/es-es\/README.html","es-la":"ASNLIB\/public\/docs\/lang\/es-la\/README.html","fr-fr":"ASNLIB\/public\/docs\/lang\/fr-fr\/README.html","id-id":"ASNLIB\/public\/docs\/lang\/id-id\/README.html","it-it":"ASNLIB\/public\/docs\/lang\/it-it\/README.html","ko-kr":"ASNLIB\/public\/docs\/lang\/ko-kr\/README.html","pl-pl":"ASNLIB\/public\/docs\/lang\/pl-pl\/README.html","pt-br":"ASNLIB\/public\/docs\/lang\/pt-br\/README.html","th-th":"ASNLIB\/public\/docs\/lang\/th-th\/README.html","uk-ua":"ASNLIB\/public\/docs\/lang\/uk-ua\/README.html","vi-vn":"ASNLIB\/public\/docs\/lang\/vi-vn\/README.html","zh-tw":"ASNLIB\/public\/docs\/lang\/zh-tw\/README.html"};
      $('#localeLangReadmeSelect').on('change', function() {
        var readmelang = $(this).val();
        langReadmePath = lang_readmes[readmelang];
        iframeReadmeSrc ="../web/3209731/2791722.0/" + langReadmePath;
        $("#readMeIframe").attr('src', iframeReadmeSrc);
        $.ajax({
                 type: "POST",
                 url: "../util/vcprojapi.php",
                 data: { t : 'changeReadmeLang',
                         stepid : "2791722",
                         readmelang : readmelang,
                         tide: "0"
                        }
        }) .done(function(ret_val) {
          //just return
        });
      });
    }


    if (left_panel_instructions) {
      $('#showdocs').on('click', function() {
          $('#instructions').toggle();
          if ($('#showdocviewicon').hasClass("icon-check-empty")) {
            $('#showdocviewicon').removeClass("icon-check-empty");
            $('#showdocviewicon').addClass("icon-check");
            if ($('#showfiletreeicon').hasClass("icon-check")) {
              $('#showfiletree').click();
            }
            if (doc_panel_width == 0) {
              doc_panel_width = $('#instructions').width();
            } else {
               $('#instructions').width(doc_panel_width);
            }
            $('#instructionsdivider').show();
          } else {
            $('#showdocviewicon').removeClass("icon-check");
            $('#showdocviewicon').addClass("icon-check-empty");
            $('#instructionsdivider').hide();
            /* the following condition will only be true in case of README 100% */
            if ($('#showcodeviewicon').hasClass("icon-check-empty") && $('#showterminalicon').hasClass("icon-check-empty") && $('#showfiletreeicon').hasClass("icon-check-empty")) {
              $('#showfiletree').click();
            }
          }
      });

    }
    
    $('#showfiletree').on('click', function() {
          $('#filelisting').toggle();
          if ($('#showfiletreeicon').hasClass("icon-check-empty")) {
            $('#showfiletreeicon').removeClass("icon-check-empty");
            $('#showfiletreeicon').addClass("icon-check");
            if (left_panel_instructions) {
              if ($('#showdocviewicon').hasClass("icon-check")) {
                $('#instructions').width(doc_panel_width);
                $('#showdocs').click();
              }
            }
            $('#filelistdivider').show();
            showFileTreeSource();
          } else {
            $('#showfiletreeicon').removeClass("icon-check");
            $('#showfiletreeicon').addClass("icon-check-empty");
            $('#filelistdivider').hide();
          }
    });
    
    function showFileTreeSource() {
      /* the following condition will only be true in case of README 100% */
      if ($('#showcodeviewicon').hasClass("icon-check-empty") && $('#showterminalicon').hasClass("icon-check-empty")) {
        viewOnlySource();
        $('#showcodeviewicon').removeClass("icon-check-empty");
        $('#showcodeviewicon').addClass("icon-check");
      }
    }

    function viewSaveData()
    {
      code_ht = $('#codeframe').height();
      build_ht = $('#buildframe').height();
      console_ht = $('#consolediv').height();
      html_ht = 0;
      infobar_ht = 0;
      frame_idebox_ht = $('#idebox').height();
    }

    function viewOnlyTerminal()
    {
      $('#codeframe').height(infobar_ht);
      $('#buildframe').height(build_ht + code_ht - infobar_ht);
      $('#consolediv').height(console_ht + code_ht - infobar_ht);
      if (! $('#editor_current_file_div').hasClass("hidden-1")) {
        $('#editor_current_file_div').addClass("hidden-1");
      }
    }

    function viewOnlySource()
    {
      $('#codeframe').height(build_ht + code_ht);
      $('#consolediv').height(0);
      $('#buildframe').height(0);
      $('#codeform0').height("100%");
      if ($('#editor_current_file_div').hasClass("hidden-1")) {
        // actually, keep this div hidden unless we're using the source code (not canvas)
        if (! $('#div_codeform0').hasClass('hidden-1')) {
          $('#editor_current_file_div').removeClass("hidden-1");
        }
      }
      editor.refresh();
    }

    function viewOnlyREADME()
    {
      $('#codeframe').height(0);
      $('#buildframe').height(0);
      $('#consolediv').height(0);
      if (! $('#editor_current_file_div').hasClass("hidden-1")) {
        $('#editor_current_file_div').addClass("hidden-1");
      }
      $('#instructions').width("100%");
      $('#instructionsdivider').hide();
    }

    function viewBothSourceAndConsole()
    {
      // use the saved values - these always correspond to the multi-view
      $('#codeframe').height(code_ht);
      $('#buildframe').height(build_ht);
      $('#consolediv').height(console_ht);
      $('#codeform0').height("100%");
      if ($('#editor_current_file_div').hasClass("hidden-1")) {
        // actually, keep this div hidden unless we're using the source code (not canvas)
        if (! $('#div_codeform0').hasClass('hidden-1')) {
          $('#editor_current_file_div').removeClass("hidden-1");
        }
      }
      editor.refresh();
    }

    $('#showcodeview').on('click', function() {
      if ($('#showcodeviewicon').hasClass("icon-check")) {
        // currently visible

        $('#showcodeviewicon').removeClass("icon-check");
        $('#showcodeviewicon').addClass("icon-check-empty");
        if ($('#showterminalicon').hasClass("icon-check")) {
          // both are currently visible; record current sizes first
          viewSaveData();
        }
        else if (isReadmeVisible()) {
          // now make the readme full size
          viewOnlyREADME();
          return;
        }
        else {
          // the terminal is not visible right now, so we are showing code full size
          // we can't just remove the code window - have to show something
          // so we'll show full terminal here too
          // but fix the icon for this case
          $('#showterminalicon').removeClass("icon-check-empty");
          $('#showterminalicon').addClass("icon-check");
        }

        // now make terminal full size
        viewOnlyTerminal();
      }
      else {
        if (isReadmeVisible()) {
          $('#instructions').width(doc_panel_width);
          $('#instructionsdivider').show();
          if ($('#showterminalicon').hasClass("icon-check")) {
            viewBothSourceAndConsole();
          } else {
            viewOnlySource();
          }
        } else {
          // currently code is not visible
          // so we must be showing full terminal

          // use the saved values - these always correspond to the multi-view
          viewBothSourceAndConsole();
        }

        $('#showcodeviewicon').removeClass("icon-check-empty");
        $('#showcodeviewicon').addClass("icon-check");
      }
    });
    
    $('#showterminal').on('click', function() {
      if ($('#showterminalicon').hasClass("icon-check")) {
        // currently visible

        $('#showterminalicon').removeClass("icon-check");
        $('#showterminalicon').addClass("icon-check-empty");
        
        if ($('#showcodeviewicon').hasClass("icon-check")) {
          // both are currently visible; record current sizes first
          viewSaveData();
        }
        else if (isReadmeVisible()) {
          // now make the readme full size
          viewOnlyREADME();
          return;
        }
        else {
          // the view code is not visible right now, so we are showing terminal full size
          // we can't just remove the terminal window - have to show something
          // so we'll show full view code here too
          // but fix the icon for this case
          $('#showcodeviewicon').removeClass("icon-check-empty");
          $('#showcodeviewicon').addClass("icon-check");
        }

        // now make the view code full size
        viewOnlySource();
      }
      else {
        if (isReadmeVisible()) {
          $('#instructions').width(doc_panel_width);
          $('#instructionsdivider').show();
          if ($('#showcodeviewicon').hasClass("icon-check")) {
            viewBothSourceAndConsole();
          } else {
            viewOnlyTerminal();
          }
        } else {
          // currently terminal is not visible
          // so we must be showing full view code

          // use the saved values - these always correspond to the multi-view
          viewBothSourceAndConsole();
        }

        $('#showterminalicon').removeClass("icon-check-empty");
        $('#showterminalicon').addClass("icon-check");
      }
    });


    if (left_panel_instructions)
    {
      if (doc_panel_width == 0) {
        doc_panel_width = $('#instructions').width();
      }
          }
    // save the initial sizes so easier to resize later on
    viewSaveData();


    var resizeEnd;
    // var resizeStart = false;

    // function resizeStartFunc()
    // {
    //   console.log("VOC: START resize");
    // }

    function resizeEndFunc()
    {
      // console.log("VOC: END Resize");
      
      new_frame_idebox_ht = $('#idebox').height();

      idebox_multiplier = new_frame_idebox_ht / frame_idebox_ht;
      // console.log("VOC: mult: " + idebox_multiplier);
      
      if (code_ht) {
        $('#codeframe').height(code_ht * idebox_multiplier);
        // console.log("VOC: code: " + code_ht + " -> " + code_ht * idebox_multiplier);
      }
      if (html_ht) {
        $('#htmlframe').height(html_ht * idebox_multiplier);
        // console.log("VOC: html: " + html_ht + " -> " + html_ht * idebox_multiplier);
      }
      if (build_ht) {
        setConsoleParams();
        // console.log("VOC: build: " + build_ht + " -> " + build_ht * idebox_multiplier);
      }

      //mhui
	    var ht = window.innerHeight - (document.getElementById('idebox') ? document.getElementById('idebox').offsetTop : 0) - $('#ideButtonDiv:visible').height() - 70; //50
	    $('#filelisting').height(ht);
	    
      viewSaveData();
      // resizeStart = false;
    }

    window.addEventListener('resize', function(event) {
      // if (resizeStart == false) {
      //   resizeStart = true;
      //   resizeStartFunc();
      // }
      clearTimeout(resizeEnd);
      resizeEnd = setTimeout(resizeEndFunc, 100);
    });
    
    function resizeCodeFrame()
    {
      ht = frame_idebox_ht - $('#htmlframe').height() - $('#ideButtonDiv:visible').height();
      $('#codeframe').height(ht);
    }

  $('.vocdivider_h1').draggable({
    axis: 'y',
    containment: 'parent',
    helper: 'clone',
    iframeFix: true,
    // refreshPositions: true,
    scroll: false,
    drag: function (event, ui) {
      var parent_height = $(this).parent().height();
      var prev_height = ui.position.top;
      $(this).prev().height(prev_height);
      // console.log("VOC: 1: Draggin'... " + ui.position.top);
      resizeCodeFrame();
    }
  });

  $('.vocdivider_h2').draggable({
    axis: 'y',
    containment: 'parent',
    helper: 'clone',
    iframeFix: true,
    // refreshPositions: true,
    scroll: false,
    drag: function (event, ui) {
      var prev_height = ui.position.top;
      if (prev_height < 50) {
        return;
      }
      var parent_height = $(this).parent().height();
      var height_of_console = parent_height - prev_height - $('#ideButtonDiv:visible').height();
      if (height_of_console < 75) {
        return;
      }
      $(this).prev().height(prev_height);
      // console.log("VOC: 2: Draggin'... " + ui.position.top);
      setConsoleParams();
    }
  });


    // $(document).ready(function() {
    $(window).load(function() {
      // if student and ide == standard, see if we want to change the layout
            showHideFramesBasedOnHeight();
      //mhui
	    var ht = window.innerHeight - (document.getElementById('idebox') ? document.getElementById('idebox').offsetTop : 0) - $('#ideButtonDiv:visible').height() - 70; //50
	    $('#filelisting').height(ht);
	    
	    if(false) $('#idebox').height(ht);
	    
    });

    $('#fileuploadbtn').on('click', function() {
                  $("#filestatuslabel").html("");
                                    markUpdateChanged(((newLabNoContainer && $("#input_filename").val().includes("docs/") && $("#input_filename").val().indexOf('docs/') == 0)? 
                    $("#input_filename").val().replace('docs/','resource/asnlib/public/docs/') 
                  : $("#input_filename").val()));
                  $('#fileuploadfield').val("");
        var args = '&type=Upload&asnid=2791721&stepid=2791722&mode=s&version=0&vmd=100&filepath=./' + ((newLabNoContainer && $("#input_filename").val().includes("docs/") && $("#input_filename").val().indexOf('docs/') == 0)? 
                    $("#input_filename").val().replace('docs/','resource/asnlib/public/docs/') 
                  : $("#input_filename").val());
        if(fileUploadListener) document.getElementById('fileuploadfield').removeEventListener('change', fileUploadListener, false);
        fileUploadListener = vcUploadFiles('modal-upload-wait', 'uploadWaitMsgBox', null,'fileuploadfield', 10, args, null);
	$("#fileuploadfield").click();
    });
    var wasDelOn = false;
    var fileoptype = '';

    $('#filecancelbtn').on('click', function() {
                        var sel_type = $('#input_filetype').val();
                        var seltxt = $("#span_selectedfile").text();
                        fileoptype = '';
			$("#fileform" ).hide();
                        if(copyPasteClipboard && sel_type=='folder'){
			  $('#newbtn').show();
			  $('#filepastebtn').show();
                        }
			$('#fileuploadbtn').show();
                        if(seltxt.search(/^(ASNLIB|LIB|resource\/lib|resource\/asnlib)\/publicdata\//)<0){
                          showCopyFileBtn();
                        }
			if (wasDelOn) {
			    $('#filedelbtn').show();
			    $('#filerenamebtn').show();
			}
			$("#filestatuslabel").html("");
			//$('#well_selectedfile').show();
			var element = document.getElementById('well_selectedfile');
      if (typeof(element) != 'undefined' && element != null) {
        document.getElementById('well_selectedfile').style.color = "black";
      }
			//document.getElementById('well_selectedfile').style.color = "black";
      $("#input_filename").val((newLabNoContainer && seltxt.includes("resource/asnlib/public/docs"))? seltxt.replace("resource/asnlib/public/docs", "docs") : seltxt);
    });
    $('#filenewbtn').on('click', function() {
                        fileoptype = 'file';
                        $("#filestatuslabel").html("");
			if ($('#filedelbtn').is(":visible")) {
				wasDelOn = true;
			} else {
				wasDelOn = false;
			}
	                $('#filepastebtn').hide();
			$('#fileuploadbtn').hide();
			hideCopyFileBtn();
			$('#filedelbtn').hide();
			$('#filerenamebtn').hide();
			$("#fileform" ).show();
			//$('#well_selectedfile').hide();
			var element = document.getElementById('well_selectedfile');
      if (typeof(element) != 'undefined' && element != null) {
        document.getElementById('well_selectedfile').style.color = "#f5f5f5";
      }
			//document.getElementById('well_selectedfile').style.color = "#f5f5f5";
			$('#input_filename').focus();
    });
    
    $('#foldernewbtn').on('click', function() {
                        fileoptype = 'folder';
                        $("#filestatuslabel").html("");
			if ($('#filedelbtn').is(":visible")) {
				wasDelOn = true;
			} else {
				wasDelOn = false;
			}
	                $('#filepastebtn').hide();
			hideCopyFileBtn();
			$('#fileuploadbtn').hide();
			$('#filedelbtn').hide();
			$('#filerenamebtn').hide();
			$("#fileform" ).show();
			//$('#well_selectedfile').hide();
		  var element = document.getElementById('well_selectedfile');
      if (typeof(element) != 'undefined' && element != null) {
        document.getElementById('well_selectedfile').style.color = "#f5f5f5";
      }
			//document.getElementById('well_selectedfile').style.color = "#f5f5f5";
			$('#input_filename').focus();
    });

    function showCanvas()
    {
      
    }
    function showEditor()
    {
          }


    $('#filerenamebtn').on('click', function() {
                        fileoptype = 'rename';
                        $("#filestatuslabel").html("");
			if ($('#filedelbtn').is(":visible")) {
				wasDelOn = true;
			} else {
				wasDelOn = false;
			}
                        hideCopyFileBtn();
			$('#newbtn').hide();
	                $('#filepastebtn').hide();
			$('#fileuploadbtn').hide();
			$('#filedelbtn').hide();
			$("#fileform" ).show();
			//$('#well_selectedfile').hide();
			var element = document.getElementById('well_selectedfile');
      if (typeof(element) != 'undefined' && element != null) {
        document.getElementById('well_selectedfile').style.color = "#f5f5f5";
      }
			//document.getElementById('well_selectedfile').style.color = "#f5f5f5";
    });

    $('#canvasbtn').on('click', function() {
      // var url = "../web/3209731/2791722/" + "work/" + "voc_canvas.html";
      // $('#div_canvas').html("<iframe src=\""+ url +"\" width=\"100%\" height=\"100%\"></iframe>");
      showCanvas();
    });

    $('#fileviewbtn').on('click', function() {
        		if (isSaveNeeded()) {
        				voc_save(true, "Saving");
        		}
      var val = $('#editor_current_file').text();
                 var url = "../web/3209731/2791722.0/"+val;
            $('#browser-viewer-title').text(val);
      $('#browser-viewer-iframe').attr("src", url);
      $('#browser-viewer-link').attr("href", url);
      $('#browser-viewer-modal').modal('show');
    });

    var lastHtmlFileShown = null;
    function showHtmlFile(val) {
      val = val.replace(/ /g, '+');
              var url = "../web/3209731/2791722.0/" + val;
           url += "?vockey=4ccbd337cdcd897ff6a099c76e4f2b078b7e9ebecc0431f932b05a84a2ce13d8";
     lastHtmlFileShown = val;
     // make sure that the html frame is there
     if (! isHtmlVisible())
     {
       checkHtmlSelector();
       drawFrameElements();
     }
     $('#div_html_frame_inner').html("<span id=\"loadingText\">Loading...</span><iframe id=\"htmliframe\" src=\""+ url +"\" width=\"100%\" height=\"100%\" style=\"border:0px\" title=\"HTML\"></iframe>");
     $('#htmliframe').on('load', function() {
       $('#loadingText').remove();
     });
    }

    function showHtmlFileDelayed(val) {
      if (isSaveNeeded()) {
        voc_save(true, "Saving");
      }
      if (save_in_progress) {
        setTimeout(showHtmlFileDelayed, 300, val);
      } else {
        showHtmlFile(val);
      }
    }
    
    $('#htmlreloadbtn').on('click', function() {
      if (lastHtmlFileShown == null) {
        return;
      }
      showHtmlFileDelayed(lastHtmlFileShown);
    });
	
		$('#tree1').ace_tree({
			dataSource: treeDataSource,
			multiSelect: true,
			loadingHTML:'<div class="tree-loading"><i class="icon-refresh icon-spin blue"></i></div>',
			'open-icon' : 'icon-minus',
			'close-icon' : 'icon-plus',
			'selectable' : true,
			'selected-icon' : 'icon-caret-right',
			'unselected-icon' : 'icon-caret-right',
			cacheItems: true
		});
		    		subTreeInit();
    		$(document).on('selectedfolder', '#trees3', function (evt, data) {
    		  if (data.info.length <= 0) { // when an item is unselected and the next item in the selected list is a folder
    		    return;
    		  }
    		  $('#tree1').find('.tree-selected').removeClass('tree-selected');
    			$('#input_filename').val((newLabNoContainer && data.info[0].fpath.includes("resource/asnlib/public/docs"))? data.info[0].fpath.replace('resource/asnlib/public/docs', 'docs') + "/" : data.info[0].fpath + "/");
    			
    			$('#span_selectedfile').html(data.info[0].fpath + "/");
    			//$('#well_selectedfile').show();
    			var element = document.getElementById('well_selectedfile');
          if (typeof(element) != 'undefined' && element != null) {
            document.getElementById('well_selectedfile').style.color = "black";
          }
    			//document.getElementById('well_selectedfile').style.color = "black";
    			$('#input_filetype').val("folder");
    			hideAllFileBtn();
                        $("#downloadbtn" ).hide();
                            			showCopyFileBtn();
                            		});
    		$('#trees3').on('selected', function (evt, data) {
    		  if (data.info.length) {
    			  S3FileSelect(data.info[0]);
    		  }
    		  $('#tree1').find('.tree-selected').removeClass('tree-selected');
    		});
	   
 		// one accesibilty handler per panel
		$('#filelisting').off('keydown');
        $('#filelisting').attach_accesible_handler();
        $('#idenav').off('keydown');
        $('#idenav').attach_accesible_handler();
        $('#breadcrumb').off('keydown');
        $('#breadcrumb').attach_accesible_handler();


		$('#tree1').on('loaded', function (evt, data) {
	    console.log('tree1 loaded');
	    // make long file/folder names appear on one line and clip if too long
	    $('div[class="tree-item-name"] span[class="tree-btn"]').css({'display': 'inline-block', 'vertical-align': 'top', 'max-width': '75%', 'overflow': 'hidden', 'text-overflow': 'ellipsis', 'white-space': 'nowrap'});
	    $('div[class="tree-folder-name"] span[class="tree-btn"]').css({'display': 'inline-block', 'vertical-align': 'top', 'max-width': '75%', 'overflow': 'hidden', 'text-overflow': 'ellipsis', 'white-space': 'nowrap'});
	    $('#editor_current_file_div #editor_current_file').css({'display': 'inline-block', 'vertical-align': 'top', 'max-width': '500px', 'overflow': 'hidden', 'text-overflow': 'ellipsis', 'white-space': 'nowrap'});
	    // shift+click is used for multi-select so prevent text from being highlighted
  	  $('div[class="tree-item"]').css({'user-select': 'none', '-ms-user-select': 'none', '-moz-user-select': 'none', '-webkit-user-select': 'none'});
  	  $('div[class="tree-folder-header"]').css({'user-select': 'none', '-ms-user-select': 'none', '-moz-user-select': 'none', '-webkit-user-select': 'none'});

	//		var classList = $('.tree-btn');
	//		$.each(classList, function(index, item) {
	//    		$(item).make_accesible();
	//    	});
	    if(typeof tree_data !== 'undefined') {
  	    //Autoloads files between 0mb-8mb
    	  var widgetFiles = tree_data.work.additionalParameters.children;
    	  if(widgetFiles != null && "1" && autoloadFileOccured < 2) {
    	     $.each(widgetFiles, function(i, obj) {
    	      
    	      // File will autoload if file is an item, has a size < 8mb, and the file name doesn't start with a '.'
    	      if(obj.type == 'item' && obj.size >= 0 && obj.size < 8388608 && (obj.name).indexOf('.') != 0) {
    	        var rec = {
    	          name: obj.name,
    	          path: obj.path,
    	          ee: obj.ee,
    	          autoload: 1 // Used to exclude period_save() for filetreeFileSelect() or it'll throw cross-DOM error
    	        }
    	        autoloadFileOccured += 1;
    	        // get the div[class="tree-item"] element for obj.name
    	        // in case of ./resource/.../work/<obj.name>, the correct one is the first child of the work folder
    	          // aka parent().parent().parent().parent().parent().attr('id') == 'tree1';
    	        let htmlEl = $('span[class="tree-btn"]').filter(function() {
                return $(this).text() === obj.name;
              }).filter(function() {
                return $(this).parent().parent().parent().parent().parent().attr('id') == 'tree1';
              }).parent().parent();
              $('#tree1').tree('selectItem', htmlEl);
    	        return false;
    	      }
    	    });
    	  }
	    }
	
	
    });

    function multiSelectShowHideBtns() {
      var showNewBtn = 1;
      var showRenameBtn = 1;
      var showDeleteBtn = 1;
      var showUploadBtn = 1;
      var showCopyBtn = 1;
      var showPasteBtn = 1;
      var showDownloadBtn = 1;

      var selectedItems = $('#tree1').tree('selectedItems');
      if (selectedItems.length > 1) { // can only copy, delete, download multiple items at once
        showNewBtn = 0;
        showRenameBtn = 0;
        showUploadBtn = 0;
        showPasteBtn = 0;
      }
              showNewBtn = 0;
        showUploadBtn = 0;
        showPasteBtn = 0;
            for (const el of selectedItems) {
        if (selectedItems[0].type == 'item') {
          showNewBtn = 0;
          showUploadBtn = 0;
          showPasteBtn = 0;
        }
        if (el.ed != 1) {
          showDeleteBtn = 0;
          showRenameBtn = 0;
        }
        if (el.ec != 1) {
          showNewBtn = 0;
          showUploadBtn = 0;
          showPasteBtn = 0;
        }
        if (el.path == './resource') {
          showNewBtn = 0;
          showRenameBtn = 0;
          showDeleteBtn = 0;
          showUploadBtn = 0;
          showCopyBtn = 0;
          showPasteBtn = 0;
          showDownloadBtn = 0;
        } else if (el.path.search(/resource/) >= 0) {
                      showNewBtn = 0;
            showRenameBtn = 0;
            showDeleteBtn = 0;
            showUploadBtn = 0;
            showPasteBtn = 0;
                  }
        if (el.path.search(/resource\/(asnlib|lib)\/publicdata/) >= 0) {
          if (el.type == 'item') {
            showCopyBtn = 0;
          }
        }
      }
      if (showNewBtn)      { $('#newbtn').show();        } else { $('#newbtn').hide(); }
      if (showRenameBtn)   { $('#filerenamebtn').show(); } else { $('#filerenamebtn').hide(); }
      if (showDeleteBtn)   { $('#filedelbtn').show();    } else { $('#filedelbtn').hide(); }
      if (showUploadBtn)   { $('#fileuploadbtn').show(); } else { $('#fileuploadbtn').hide(); }
      if (showCopyBtn)     { $('#filecopybtn').show();   } else { $('#filecopybtn').hide(); }
      if (showPasteBtn)    { showPasteFileBtn();         } else { hidePasteFileBtn(); }
      if (showDownloadBtn) { $('#downloadbtn').show();   } else { $('#downloadbtn').hide(); }
    }

		$('#tree1').on('opened', function (evt, data) {
		});

		$('#tree1').on('closed', function (evt, data) {
		});

		$('#tree1').on('selectedfolder', function (evt, data) {
		  if (data.info.length <= 0) { // when an item is unselected and the next item in the selected list is a folder
		    hideAllFileBtn();
        $('#downloadbtn').hide();
    		$('#span_selectedfile').html('');
        //$('#editor_current_file').html('');
		    return;
		  }
		  $('#trees3').find('.tree-selected').removeClass('tree-selected');
			var relpath = data.info[0].path.substring(2);
			$('#input_filename').val(((newLabNoContainer && relpath.includes("resource/asnlib/public/docs"))? relpath.replace("resource/asnlib/public/docs", 'docs') : relpath) + "/");
			$('#span_selectedfile').html(((newLabNoContainer && relpath.includes("resource/asnlib/public/docs"))? relpath.replace("resource/asnlib/public/docs", 'docs') : relpath) + "/");
			//$('#editor_current_file').html('');
			//$('#well_selectedfile').show();
			var element = document.getElementById('well_selectedfile');
      if (typeof(element) != 'undefined' && element != null) {
        document.getElementById('well_selectedfile').style.color = "black";
      }
			//document.getElementById('well_selectedfile').style.color = "black";
			$('#input_filetype').val("folder");

			hideAllFileBtn();
      if( relpath == 'resource' ){
        $('#downloadbtn').hide();
        return false;
      }

      
            if(relpath.search(/^(ASNLIB|LIB|resource\/lib|resource\/asnlib)\/publicdata($|\/)/)<0){
			  showCopyFileBtn();
      }
			if (data.info[0].ed == 1) {
        if( relpath.search(/^(ASNLIB|LIB)\/publicdata$/)<0 &&
            relpath.search(/^resource\/(lib|asnlib)\/publicdata$/)<0 &&
            relpath.search(/^resource\/(lib|asnlib|scripts|startercode)$/)<0 &&
            relpath.search(/^resource\/(docs|private|public|course)$/)<0 &&
            relpath.search(/^resource\/(docs|private|public|course)\/(docs|private|public|publicdata)/)<0){
              showDelFileBtn();
        }
      }
      if ($('#tree1').tree('selectedItems').length > 1) {
        //$('#editor_current_file').html('');
    		$('#span_selectedfile').html('');
        multiSelectShowHideBtns();
        // below: show appropriate buttons when an item is unselected
      } else if ($('#tree1').tree('selectedItems').length == 1) {
        if ($('#tree1').tree('selectedItems')[0].type == 'item') {
          filetreeFileSelect($('#tree1').tree('selectedItems')[0]);
          multiSelectShowHideBtns();
        } else {
          let relpath = $('#tree1').tree('selectedItems')[0].path.substring(2);
          $('#input_filename').val(((newLabNoContainer && relpath.includes("resource/asnlib/public/docs"))? relpath.replace("resource/asnlib/public/docs","docs") : relpath) + "/");
          //$('#editor_current_file').html('');
        }
      }
		});

		function filetreeFileSelect(rec) {
			var relpath = rec.path.substring(2);
			showEditor();
			$('#input_filename').val((newLabNoContainer && relpath.includes('resource/asnlib/public/docs'))? relpath.replace('resource/asnlib/public/docs', 'docs'): relpath);
			$('#span_selectedfile').html((newLabNoContainer && relpath.includes('resource/asnlib/public/docs'))? relpath.replace('resource/asnlib/public/docs', 'docs'): relpath);
			//$('#well_selectedfile').show();
			var element = document.getElementById('well_selectedfile');
      if (typeof(element) != 'undefined' && element != null) {
        document.getElementById('well_selectedfile').style.color = "black";
      }
			//document.getElementById('well_selectedfile').style.color = "black";
			$('#input_filetype').val("file");


      
      if (rec.ee == 1) {
          editor.setOption("readOnly", false);
			} else {
          editor.setOption("readOnly", true);
			}

						
			var ext_index = rec.name.lastIndexOf('.');
			if (ext_index == -1) {
				ext = null;
			} else {
      	ext = rec.name.substring(ext_index + 1);
      }
			if (isVidFile(ext)) {
                   var url = "https://labs.vocareum.com/web/3209731/2791722/" + relpath;
            var str = '<video width="600px" controls> ' +
                      '<source id="video-viewer-modal-video" src="' + url + '" type="video/mp4">' +
                      'Your browser does not support HTML5 video. </video>';
            $('#video-viewer-modal-div').html(str);
            $('#video-viewer-modal').modal('show');
            return;
			} else if (isImgFile(ext)) {
               $.get('../util/vcprojapi.php', {t: 'filefetch', mode:'s', asnid: 2791721,  stepid:2791722, data: rec.path,version:0, vm:'34.209.4.84', labtype:1}, function(data) {
            $('#image-viewer-modal-image').prop('src', data);
            $('#image-viewer-modal').modal('show');
				});
        return;
			} else if (isOtherFile(ext)) {
                    $.get('../util/vcprojapi.php', {t: 'filefetch', mode:'s', asnid: 2791721,  stepid:2791722, data: rec.path,version:0, vm:'34.209.4.84', labtype:1}, function(data) {
					$('#other-viewer-modal-area').prop('data', data);
					// set application type here
					$('#other-viewer-modal').modal('show');
				});
        return;
			} else {
					// all other
			}
			
      if (isBrowserViewableFile(ext) && false) {
        $('#htmlreloadbtn').show();
        showHtmlFile(relpath);
      }
      else {
  			if (isBrowserViewableFile(ext)) {
  			    $('#fileviewbtn').show();
  			} else {
  			    $('#fileviewbtn').hide();
  			}
      }
			
			var codeFileChanged = true;
			
			if (editor.doc.isClean(editor_content_change)) codeFileChanged = false;
			if (vocIsFileReadOnly(viewer_last_fpath)) codeFileChanged = false;

			if (codeFileChanged) {
					voc_save(true, "Saving, please wait");
			}
      var codeComments = ( (typeof (rec.comments) !== 'undefined') ? rec.comments : '' );
			voc_get_viewer_code(rec.path, rec.name, 0, codeComments);


					
		}

		function S3FileSelect(rec) {
			var fpath = rec.fpath;
			var fname = rec.name;
			showEditor();
			editor.setOption("readOnly", true);
			$('#input_filename').val(fpath);
			$('#span_selectedfile').html(fpath);
			//$('#well_selectedfile').show();
		  var element = document.getElementById('well_selectedfile');
      if (typeof(element) != 'undefined' && element != null) {
        document.getElementById('well_selectedfile').style.color = "black";
      }
			//document.getElementById('well_selectedfile').style.color = "black";
			$('#input_filetype').val("file");
			
			
			var ext_index = fname.lastIndexOf('.');
			if (ext_index == -1) {
				ext = null;
			} else {
            	ext = fname.substring(ext_index + 1);
            }
			if (isVidFile(ext)) {
                               var url = "https://labs.vocareum.com/web/3209731/2791722/" + fpath;
                var str = '<video width="600px" controls> ' +
                          '<source id="video-viewer-modal-video" src="' + url + '" type="video/mp4">' +
                          'Your browser does not support HTML5 video. </video>';
                $('#video-viewer-modal-div').html(str);
                $('#video-viewer-modal').modal('show');
                return;
			} else if (isImgFile(ext)) {
                               $.get('../util/vcprojapi.php', {t: 'filefetch', mode:'s', userid: 3209731, asnid: 2791721,  stepid:2791722, data: fpath,version:0, vm:'34.209.4.84', labtype:1}, function(data) {
                    $('#image-viewer-modal-image').prop('src', data);
                    $('#image-viewer-modal').modal('show');
				});
                return;
			} else if (isOtherFile(ext)) {
    			    			$.get('../util/vcprojapi.php', {t: 'filefetch', mode:'s', userid: 3209731, asnid: 2791721,  stepid:2791722, data: fpath,version:0, vm:'34.209.4.84', labtype:1}, function(data) {
                    $('#other-viewer-modal-area').prop('data', data);
                    // set application type here
                    $('#other-viewer-modal').modal('show');
                });
                return;
			} else {
				// all other
			}
			
            if ((isBrowserViewableFile(ext) || ext == 'ipynb') && false) {
                $('#htmlreloadbtn').show();
                showHtmlFile(fpath);
            } else {
    			if (isBrowserViewableFile(ext)) {
    			    $('#fileviewbtn').show();
    			} else {
    			    $('#fileviewbtn').hide();
    			}
            }
			
			var codeFileChanged = true;
			
			if (editor.doc.isClean(editor_content_change)) codeFileChanged = false;
			if (vocIsFileReadOnly(viewer_last_fpath)) codeFileChanged = false;

			if (codeFileChanged) {
				voc_save(true, "Saving, please wait");
			}
			var codeComments = ( (typeof (rec.comments) !== 'undefined') ? rec.comments : '' );
			voc_get_s3_code(fpath, fname, 0, codeComments);
		}

		$('#tree1').on('selected', function (evt, data) {
		  if (data.info.length > 0 && data.info[0] != null && data.info[0].type != 'folder' && $('#tree1').tree('selectedItems').length == 1) {
		    // if 1 folder & 1 file are selected and then file is unselected, then data.info[0] will be a folder
		    // so we need to check if data is a file and not a folder
  		  filetreeFileSelect(data.info[0]);
		  }
		  $('#trees3').find('.tree-selected').removeClass('tree-selected');
		  if ($('#tree1').tree('selectedItems').length > 1) {
    		$('#span_selectedfile').html('');
		    //$('#editor_current_file').html('');
        multiSelectShowHideBtns();
        // below: show appropriate buttons when an item is unselected
      } else if ($('#tree1').tree('selectedItems').length == 1) {
        if ($('#tree1').tree('selectedItems')[0].type == 'folder') {
          let relpath = $('#tree1').tree('selectedItems')[0].path.substring(2);
    			$('#input_filename').val(relpath + "/");
    			$('#span_selectedfile').html(relpath + "/");
    			//$('#editor_current_file').html('');
        }
        multiSelectShowHideBtns();
      } else {
        hideAllFileBtn();
        $('#downloadbtn').hide();
        //$('#editor_current_file').html('');
      }
		});

		$('.tree-folder-header').each(function(i, obj) {
			$val = $(this).data();
			if ($val['unfold'] == 1) {
				$(this).find('[class*="icon-"]:first-child').trigger('click');
				if ($val['name'] == 'work') {
				  $('#tree1').tree('selectFolder', obj);
				}
			}
		});

		// modes
		$( "#codebtn" ).click(function() {
  		});
 		$( "#actionsdropdown" ).click(function() {
  		});
  		
  		

		// MODE 1: E and C     E8 C4  XP
		// MODE 2: F and E	   F4 E12
		// MODE 3: E		   E12    XP
		
		// B1: M1 > M3
		// B2: M3 > M1
		
		// G1: M1 > M2
		//	   M3 > M2
		// G2: BACK TO M1 OR M3
		function changeEditorMode(modeFrom, modeTo) {
			switch (modeFrom) {
				case 1:
				break;
				case 2:
				break;
				case 3:
				break;
				default:
				break;
			}
			switch (modeTo) {
				case 1:
					$("#filelisting").removeClass('hide');
					$("#icon-folder").removeClass('icon-chevron-down');
					$("#icon-folder").addClass('icon-remove');
				
				break;
				case 2:
					$("#filelisting").addClass('hide');
					$("#icon-folder").removeClass('icon-remove');
					$("#icon-folder").addClass('icon-chevron-down');
				break;
				default:
				break;
			}
			current_mode = modeTo;
		}
		
        $( "#savebutton").click(function() {
				voc_save(true, "Saving");
        });


        function showDefaultEditorFile() {
            var default_file_rec = {
                    name: "",
                    path: "./work/" + "",
                    ee: 1
            }
            filetreeFileSelect(default_file_rec);
        }

       

  $('#input_filename').keydown(function(e) {
      if(e.keyCode == 13) {
          $('#filecreatebtn').trigger("click");
      }
  });
  

  

$('#video-viewer-modal').on('hidden.bs.modal', function (e) {
    $('#video-viewer-modal-div').html("");
})

$( document ).ready(function() {

		$.extend($.gritter.options, {
			position: 'top-left'
		});
		
		
	                        $('.navbar').hide();
                   
                        function showWidgetFile(name, path, ee) {
                  var rec = {
                      name: name,
                      path: path,
                      ee: ee,
                  }
                  filetreeFileSelect(rec);
              }
              
              var widgetFiles;
              var widgetFileCount = 0;
              
              try {
                  widgetFiles = tree_data.work.additionalParameters.children;
              } catch(err) {
                  widgetFiles = null;
              }
              function processWidgetFileNode(wnode) {
                    $.each(wnode, function (i, obj) {
                        if (obj.type == 'folder') {
                            if( typeof obj.additionalParameters != 'undefined' ){
                              processWidgetFileNode(obj.additionalParameters.children);
                            }
                        } else {
                            var basePath = "work";
                            var tmpName = obj.path.substring(basePath.length + 3);
                            $('#widgetfiles').append('<option data-ee="'+obj.ee+'" data-path="'+ obj.path+'">'+tmpName+'</option>');
                            widgetFileCount += 1;
                        }
                    });
             }
             processWidgetFileNode(widgetFiles);

              if (widgetFiles) {
                  // if there is more than one file present, show the file selector
                  if (widgetFileCount > 1) {
                      $('#widgetfiles').toggle();
                  }
                                      showWidgetFile($('option:selected', $(this)).val(), $('option:selected', $(this)).attr('data-path'), $('option:selected', $(this)).attr('data-ee'));
                                }
              
              $('#widgetfiles').change(function(){
                  showWidgetFile($(this).val(), $('option:selected', $(this)).attr('data-path'), $('option:selected', $(this)).attr('data-ee'));
              });
                    
			});
	
			// Connect to the Vocareum websocket server
      // Maybe we should move this code to a shared file if we're going to include it in multiple places?
      var retries = 1;
      function wsConnect() {
        const ws = new WebSocket('wss://message.vocareum.com');

        ws.onopen = function (event) {
          // console.log('Websocket connection success');
          wsTimeout = 0;
          ws.send('{"encrypted":"OwHFuVys2jzh7SGxLrn9Bhs6LKDbg2ChbZ4jFvBdhkEG6jre7nYsWUidkv7nXzZVmFaQUX2d\/9udeOkqR6mJIVomYlLKGJeuk4mUW9BtW08=","iv":"4cf554f219d48ddc6c9c2affa73e7330","salt":"649f2e6430180e240a537d014020c8cd8b5991f86fdce64ffaf8c167445dfbad70c86800ea33e90de815188f8fb691e81ca05345e070d06f766811b77ec9663e455bc2cf52369ae1a27b4907094632e1531f75b3d64d11e224ef88da935dc527bf72f166b58c19c3696de9b6f86614a6acf5b4c936686292eaeaf016fae24d09a15094938975308be463e243d01c21e7908c46727f004230ff0454083e9e53ec34610f738c772c11c5fbb3ca4658e3ebefffec0f9b69a5063aa85dd0bd872de89332ba9ae6020e6ae50b8777164a44b1c786c90131e538153e8e04e998de233f5a845232bfc6d99a63a59f9d02cefb15274a606fc45e6c95375018575b5d564d"}');
        }
        ws.onmessage = function (event) {
          // console.log('Received: %s', event.data);
          let data = JSON.parse(event.data);

          if (data.action === "alert") {
            let message = data.message;
            show_voc_gritter(true, message, true);
          }
          if (data.action === 'GoogleOAuth') {
            $('span[name="Google Drive"] span.appLabel').html('Colab');
            $('span[name="Google Drive"]').attr('onclick', 'goToColab(this)');
            $("#jupyterrelease").off('click');
            $("#jupyterrelease").click(function() {
              processNotebooks("release");
            });
          }
        }
        ws.onclose = function (event) {
          // console.log("Code: " + event.code + " | Reason: " + event.reason);
          // Automatic reconnect, note that onclose also gets called after onerror
          if (retries <= 5) {
            // console.log(`Websocket reconnect attempt ${retries} after 1 second...`);
            retries++;
            setTimeout(() => wsConnect(), (Math.random() * 1000) + 1000);
          } else {
            show_voc_gritter(true, "Unable to connect to Vocareum notification service, please refresh the page to try again", true);
          }
        }
        ws.onerror = function (event) {
          console.log('Websocket connection error');
        }
      }
      
      wsConnect();
  
//
// If we have an embedded terminal, we want to execute the BUILD and RUN
// commands om the terminal (not batch) - among other things, it allows
// the run to be interactive
// Of course, BUILD does not need to be handled this way, but it's better
// to be consistent
//
function vcGetCmdStr(data)
{
  var st = data.search(/@vocbegin@/);
  var ed = data.search(/@vocend@/);
  if(st>=0 && ed>=0 ) return data.substring(st+10, ed);
  else                return '';
}
function doTerminalBuildRun($type)
{
    return false;
}

function saveDbScriptToFile($type, callback=null) {
  var whichfilepath = viewer_last_fpath;
  if (!whichfilepath) whichfilepath = viewer_first_fpath;
  filepathstr = getFilePathStr(whichfilepath, true);
  // save the db data into a file - .voc{$type}.sh
  var fileName = "/home/nowhere" + "/";
  var jqxhr = $.ajax('../util/vcput.php?a=SaveDbScriptToFile'
                      + '&asnid='+ 2791722                      + '&type=' + $type
                      + '&mode=s'
                      + '&version=0'
                      + '&filename=' + fileName
                      + filepathstr)
    .done(function(data, textStatus, jqXHR) {
      if (callback) {
        // the callback will use postMessage
        callback(vcGetCmdStr(data));
      } else {
        document.getElementById('terminalIframe').focus();
        document.getElementById('terminalIframe').contentWindow.executeCommand(vcGetCmdStr(data));
      }
    })
    .fail(function(data, textStatus, jqXHR) {
      str = "Unexpected failure. Please contact support";
              updateReportStatus($type, '<i class="icon-info"></i>Unexpected error');
          });
}

/*
action: function inside iframe
args: for the iframe function specified by action
nextFunc: next function to call (if necessary)
extArgs: data that needs to be passed around as postMessages are called
*/
window.addEventListener('message', (event) => {
  let data = event.data;

  if (!event.origin.includes('vocareum.com') || data.vocSource !== 'terminal') {
    return;
  }

  switch (data.action) {
    case 'displayDataSimpleDone':
      if (typeof data.nextFunc !== 'undefined') {
        document.getElementById('terminalIframe').contentWindow.postMessage({ action: data.nextFunc, args: {data: String.fromCharCode(21)}, nextFunc: 'executeCommand', extArgs: {...data.extArgs}, vocSource: 'terminal' }, "");
      }
      break;
    case 'executeCommandDone':
      if (typeof data.nextFunc !== 'undefined') {
        // ajax call
        saveDbScriptToFile(data.extArgs.type, (executeCommandData) => {
          document.getElementById('terminalIframe').focus();
          document.getElementById('terminalIframe').contentWindow.postMessage({ action: data.nextFunc, args: {data: executeCommandData}, vocSource: 'terminal' }, "");
        });
      }
      break;
    default:
      break;
  }
});



    $('#shellinput').keyup(function(e) {
        if(e.keyCode == 13) {
            $('#shellbutton').trigger("click");
        }
    });


    $(".editbutton").click(function() {
      editVers();
    });
    $(".viewbutton").click(function() {
      var type = $(this).data("command");
      setView(type);
    });
    $(".togglebutton").click(function() {
      var type = $(this).data("command");
      setView(type);
    });
    $(".appbutton").click(function() {
      var type = $(this).data("command");
      launchApp(type);
    });
    $(".appstopbutton").click(function() {
      stopApp();
    });
    $(".newtabviewbutton").click(function() {
      var type = $(this).data("command");
      setNewTabView(type);
    });
    
    $('#jupyterNotebookViewBtn').click(function () {
      if(typeof clabsStateData == 'undefined' || clabsStateData['lab_state'] !== "Ready") {
        show_voc_gritter(false, "Jupyter Notebook View is currently unavailable", false);
        return;
      }
      displayVoc2022_2(0, 'jupyter', 0);
    });
    
    
    $('#jupyterLabViewBtn').click(function () {
      if(typeof clabsStateData == 'undefined' || clabsStateData['lab_state'] !== "Ready") {
        show_voc_gritter(false, "JupyterLab View is currently unavailable", false);
        return;
      }
      displayVoc2022_2(0, 'jupyterlab', 0);
    });
    
    $(".jupyterbutton").click(function() {
      var type = $(this).data("command");
      if (type == "launch")
      {
        setView(2);
      }
      else if (type == "release")
      {
        processNotebooks(type);
      }
      else if (type == "clear_output")
      {
        processNotebooks(type);
      }
    });
    $("#jupyterrelease").click(function() {
              processNotebooks("release");
          });

    $( ".commandbutton" ).click(function() {
	var $type = $(this).data("command");
        processThisCommand($type);
    });
    function processThisCommand($type){
	var filepath = viewer_last_fpath;
	if (!viewer_last_fpath) filepath = viewer_first_fpath;
	

        if (doTerminalBuildRun($type))
        {
                return;
        }
        
	if (isSaveNeeded()) {
		voc_save(true, "Saving");
	}
	executeThisCommand($type, filepath, true);
    }
    function executeThisCommand($type, filepath, isfirst)
    {
        if ( ($type=='RUN' || $type=='BUILD') && isfirst) { // activity icon only for RUN as of now
        	updateRunIcon($type, true);
        }

        if( save_in_progress ) {
          // delay execution
          window.setTimeout(function(){ executeThisCommand($type, filepath, false); } , 300);
          return;
        }
	var asyncCommand = false;
	var asyncPollUrl = null;
        var scheduleMode = false;
	if ($type=="Submission" || $type=="Grading" || $type=="RUN" || $type=='BUILD') {
		asyncCommand = true;
	}
        if ($type == "Grading") {
          scheduleMode = true;
        }
        var unencoded_filepath = filepath;
	filepath = encodeURIComponent(filepath);
				
        if (!asyncCommand) {
		$('#buildtextarea').html("<i class=\"icon-spin icon-spinner\"></i>&nbsp; Waiting for output ..");
	}
        // if the Asn Grading Rule is MAX, then we need to make sure we pass the correct rule (ontime/late) here
        // otherwise setting-grades-via-submission will not work
        
        var stepstr = "&stepid=2791722" + "&auto_calc_grading=1";

        var filepathstr = "";
        if (($type == 'BUILD') || ($type == 'RUN')) {
          filepathstr = getFilePathStr(unencoded_filepath, true);
        }

        
        if ($type == 'SHELL') {
            var input = encodeURIComponent($('#shellinput').val());
            var url =  "../domains/common_submit.php?loc=3&id=2791721&version=0&type="+$type+stepstr+"&input="+input+"&dryrun=1&useworkarea=1"+filepathstr;
        } else {
        
	      if ($type == "Grading") {
                var url = "../domains/common_submit.php?loc=6&id=23302504&version=0"+stepstr+"&type="+$type+filepathstr;
              } else {
                              var url = "../domains/common_submit.php?loc=7&id=23302504&version=0"+stepstr+"&type="+$type+filepathstr;
                            }
	      url += "&initiatorid=3209731"; // team projects: who performed the action
	      if (asyncCommand) {
	        asyncPollUrl = url + "&getstatus=1";
        	url = url + "&async=1";
              }
	      if (scheduleMode) {
        	url = url + "&scheduleMode=1";
              }
        } // else SHELL
                var msg = "Executing '" + $type + "' script...";
                if (!asyncCommand) {
                                    var htmlMsg = "<pre>" + msg + "</pre>";
                    $('#buildtextarea').html(htmlMsg);
                                }
                $.post(url,{code0: ""},function(ret_val)
                {
                  if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
                    refreshNewSessionPage();
                  }

                                      if ($type == 'Grading') {
                                            if (asyncCommand) {
                        reportsToOpen = true;
                        asyncCheckReportPeriodic($type, asyncPollUrl, false, false, maxPollTv, Math.floor(Date.now() / 1000));
                      }
                                            return;
                    }
                                    // show_voc_gritter(false, $type+" done", false);

                  data = ret_val;
                  if (!asyncCommand) {
                    if ($type=='RUN' || $type=='BUILD' ) { // activity icon only for RUN as of now
                      updateRunIcon($type, false);
                    }
                                      consolePrint(htmlMsg + "\n" + data);
                                    }

                  indicate_build_done();
                  build_in_progress = false;
                  
                  
                                        wasUnsubmitted = false;
                      if ($('#workunsubmitted').is(":visible")) {
                          wasUnsubmitted = true;
                      }
                                                          refreshFileTree(false, ($type != "Submission"));
                                             	  refreshSubTree();
                  	                        if (false && wasUnsubmitted) {
                          window.setTimeout(function(){ $('#workunsubmitted').show(); } , 500);
                      }
                                    
                  if (asyncCommand) {
                                            
                                                            $('#report_submission_msg_box').html("<i class=\"icon-spin icon-spinner\"></i>&nbsp; Creating report ..");
                                $('#modal-table-report-submission').modal();
                                                                        reportsToOpen = true;
                      var token = false;
                      var chksubmit = false;
                      var chkgrade = false;
                                            asyncCheckReportPeriodic($type, asyncPollUrl, chksubmit, chkgrade, maxPollTv, Math.floor(Date.now() / 1000));
                  }
                  
                });
						
		}

        var $gradesModal = $('#grades-modal'),
            $gradesIframe = $gradesModal.find('iframe'),
            $gradesSpinner = $gradesModal.find('#spinner');
				
        $gradesModal
            .on('show', function() {
                $gradesSpinner.removeClass('hidden-1');
                var url = 'main.php?m=grades_review&modalMode=1&asnId=2791721&stepid=2791722&userid=3209731';
                                                url += "&vockey=4ccbd337cdcd897ff6a099c76e4f2b078b7e9ebecc0431f932b05a84a2ce13d8";
                $gradesIframe.prop('src', url);
            });

        $gradesIframe.on('load', function() {
            $gradesSpinner.addClass('hidden-1');
        });

        function autoPeerReviewStart() {
          var data = "";
	  var urlval = '../util/vcprojapi.php?t=auto_peer_review_end_exam&type=peer_review&asnid=' + 2791721 + '&userid=' + 3209731;
          $.ajax({
                 type: "POST",
                 url: urlval,
                 data: data
          })
          .done(function(ret_val) {
                if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
                  console.log(ret_val + " Invalid session ");
                  // refreshNewSessionPage();
                }
                resp = jQuery.parseJSON(ret_val);
                if (resp.status !== 'success') {
                  show_voc_gritter(true, 'Peer review participation failed. <br>' + resp.message, true);
                } else {
                  $("#lisubmit").addClass('hidden');
                  show_peer_review_confirm_dialog = false;
                  $gradesModal.modal('show');
                }
            });
        }

        $('#gradesIdeBtn')
            .on('click', function() {
          var qstr = "Please make sure that you have submitted your work. You will not be allowed to make any more submissions once you start your participation in the peer review process. Are you sure you want to continue?";
          if (auto_peer_review_mode && show_peer_review_confirm_dialog)
          {
           bootbox.dialog(qstr,
                         [{
                           "label" : "Yes",
                           "class" : "btn vocbtn-ac vocbtn-action",
                           "callback": function() {
                              autoPeerReviewStart();
                           }
                         },
                          {
                            "label" : "Cancel",
                            "class" : "btn vocbtn-ac vocbtn-status"
                          }]
                   );
          }
          else
          {
            show_grades(advance_features, 0);
          }
        });

        function endExam() {
          var data = "";
	  var urlval = '../util/vcprojapi.php?t=auto_peer_review_end_exam&type=end_exam&asnid=' + 2791721 + '&userid=' + 3209731;
          $.ajax({
                 type: "POST",
                 url: urlval,
                 data: data
          })
          .done(function(ret_val) {
                if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
                  console.log(ret_val + " Invalid session ");
                  // refreshNewSessionPage();
                }
                resp = jQuery.parseJSON(ret_val);
                if (resp.status !== 'success') {
                  show_voc_gritter(true, 'End exam failed. <br>' + resp.message, true);
                } else {
                  $("#lisubmit").addClass('hidden');
                  $("#end-exam-group").addClass('hidden');
                  $("#examTimer").addClass('hidden');
                  show_voc_gritter(true, resp.message, true);
                }
            });
        }

        $('#endExamIdeBtn')
          .on('click', function() {
            var qstr = "Please make sure that you have submitted your work. You will not be allowed to make any more submissions once you end the exam. Are you sure you want to continue? <br>";
            // qstr += "Please refresh page to verify submission(s).";

            //store original string/html in button, so we can add a spinner icon during wait and remove spinner after
            let endExamIdeBtn_HTML = $("#endExamIdeBtn").html();

            //ajax call to fetch the parts that have been submitted/missing, and 
            //append to string displayed in the bootbox dialog
            $.ajax({
                url: "../util/vcput.php",
                async: true,
                data: {
                    a: "endExamGetRemainingParts",
                    userid: 3209731,
                    asnid: 2791721                },
                beforeSend: function() {
                    console.log(`Fetching exam remaining parts...`);
                    $("#endExamIdeBtn").html('<i class="icon-spin icon-spinner"></i>' + endExamIdeBtn_HTML);
                }
            }).done( function(data) {
              //remove spinner, set back to original text/html
              $("#endExamIdeBtn").html(endExamIdeBtn_HTML);

              data = JSON.parse(data);
              //append the submitted/missing parts strings. .join("") is used to remove
              //the comma, because the strings contain <br> tags already
              qstr += data.join("");

              //original bootbox to confirm endExam
              bootbox.dialog(qstr,
                [{
                  "label" : "Yes",
                  "class" : "btn vocbtn-ac vocbtn-action",
                  "callback": function() {
                    endExam();
                  }
                },
                {
                  "label" : "Cancel",
                  "class" : "btn vocbtn-ac vocbtn-status"
                }]
              );
            });
        });
       var lastUpdateTime = 'Tuesday Apr 02 2024 02:46:01 GMT-0700 (PDT)';
       function syncAsnNow(tonew)
       {
           var d = new Date();
           lastUpdateTime = d.toString();
           $('#updatebtntext').html('<i class="icon-spin icon-spinner"></i>Update');
           var jqxhr = $.ajax('../util/vcput.php?a=syncAsn&stepid=2791722'+(tonew? '&isnew=1' : ''))
                 .done(function(data, textStatus, jqXHR) {
                   var ap = data.indexOf('VOCERR::');
                   var bp = data.indexOf('::VOCERR');
                   if(ap>=0 && bp>=0 && bp>ap ){
                     show_voc_gritter(true, (asnUpdateMsg = 'Update failed:' + data.substring(ap+8, bp)), true);
                     $('#updatebtntext').html('Update*');
                   } else {
                     asnUpdateMsg = "\n## Assignment Update Successful";
                     $('#updatebtntext').html('Update');
                   }
                   
                   // If Jupyter Release Modal is visible, update progress text
                   if (($('#updateAsnOnRelease').prop('checked') || false) && $('#jupyterModal_ta').is(':visible')) {
                     $('#jupyterModal_ok').text("Close");
                     $('#jupyterModal_ta').text($('#jupyterModal_ta').text() + asnUpdateMsg).animate({
                       scrollTop:$("#jupyterModal_ta")[0].scrollHeight - $("#jupyterModal_ta").height()
                     },1000);
                   }
                 })
                 .fail(function(data, textStatus, jqXHR) {
                   $('#updatebtntext').html('Update');
                 });
       }
       $('#awsbtn').click(function(){
         launchAws(awsscnt);
       });
       $('#c9btn').click(function(){
         launchC9();
       });
       $('#appsbtn').click(function(){
    	   launchAppStream();
         });
       function launchStudentView()
       {
         $('#studentviewbtntext').html('<i class="icon-spin icon-spinner"></i> Student View');
    	   var newide = false;
    	   var appside = false;
    	   var awside = false;
    	   var stulabs = false;
    	   var appsallowed = false;
    	   var std2022ide = false;
    	   var tideUseContainer = false;
    	   var newContainerLab = false;
    	   
         $.ajax({
           url: '../util/vcput.php?a=resetStudentView&stepid=2791722&version=0',
           type: 'get',
           success: function(data) {
               $('#studentviewbtntext').html('Student View');
               if ((appside || awside) && !std2022ide && !tideUseContainer) {
            	   window.open( "main.php?m=clabide&mode=s&asnid=2791721&stepid=2791722&ownerid=3209731&permit=7&tide=1&version=0&hideNavBar=1");
               }
               else if ((stulabs || appsallowed) && !std2022ide  && (!tideUseContainer || newContainerLab)) {
            	   window.open( "main.php?m=clabide&mode=s&asnid=2791721&stepid=2791722&ownerid=3209731&permit=7&tide=1&version=0&hideNavBar=1");
               }
               else if ((newide) && !std2022ide  && !tideUseContainer) {
            	   window.open( "main.php?m=clabide&mode=s&asnid=2791721&stepid=2791722&ownerid=3209731&permit=7&tide=1&version=0&hideNavBar=1");
               }
               else {
                 window.location = "main.php?m=editor&mode=s&asnid=2791721&stepid=2791722&ownerid=3209731&permit=7&tide=1&version=0&hideNavBar=1";
               }
             //window.location = "main.php?m=editor&mode=s&asnid=2791721&stepid=2791722&ownerid=3209731&permit=7&tide=1&version=0&hideNavBar=1";
           }
         });
       }
       function launchClabide()
       {
         $.ajax({
           url: '../util/vcput.php?a=resetStudentView&stepid=2791722&version=0',
           type: 'get',
           success: function(data) {
        	   window.open( "main.php?m=clabide&mode=s&asnid=2791721&stepid=2791722&ownerid=3209731&permit=7&tide=1&version=0");
             //window.location = "main.php?m=clabide&mode=s&asnid=2791721&stepid=2791722&ownerid=3209731&permit=7&tide=1&version=0";
           }
         });
       }
       var vcPartUpdated = 1;
       $('#studentviewbtn').click(function(){
         if (true && isSaveNeeded()) { voc_save(true, "Saving");}
           if (vcPartUpdated != 0) {
             launchStudentViewUpdateWarning();
             return;
           }
           // maybe some other action udated it - like publich in a different window
           var jqxhr = $.ajax({
             type: "POST",
             url: '../util/vcput.php?a=checkForAsnUpdate',
             data: { partid: 2791722 }
           })
           .done(function(data, textStatus, jqXHR) {
             try {
               var result = JSON.parse(data);
               if (result['status'] == 'Error') {
                 console.log("Error getting update check results: " + result['message']);
                 launchStudentViewUpdateWarning();
               }
               else {
                 if (result['updated'] == 0 && true) {
                   bootbox.dialog('You must click the “Update” button at least once for the Student View to be available<br><br>',
                                  [{
                                    "label" : "Ok",
                                    "class" : "btn vocbtn-ac vocbtn-action"
                                  }]
                   );
                 }
                 else {
                   vcPartUpdated = 1;
                   launchStudentViewUpdateWarning();
                 }
               }
             }
             catch(err) {
               console.log("Exception getting update check results: " + err);
               launchStudentViewUpdateWarning();
             }
           })
           .fail(function(data, textStatus, jqXHR) {
             console.log("Failed getting update check results: " + err);
             launchStudentViewUpdateWarning();
           });
       });
       
       function launchStudentViewUpdateWarning() {
                    launchStudentView();
                }

       $('#clabidebtn').click(function(){
           if (isSaveNeeded()) { voc_save(true, "Saving");}
                        launchClabide();
                  });
       $('#teammemberbtn').click(function(){
         if (isSaveNeeded()) { voc_save(true, "Saving");}
         window.location = "main.php?m=editor&asnid=2791721&stepid=2791722";
       });
       $('#teacherviewbtn').click(function(){
         if (isSaveNeeded()) { voc_save(true, "Saving");}
         window.location = "main.php?m=editor&mode=t&asnid=2791721&stepid=2791722";
       });

       $('#merge_asn_btn').click(function() {
         var type = "merge";
         $('#' + type + '-output').hide();
         $('#' + type + '-ok').hide();
         $('#' + type + '-cancel').show();
         $('#' + type + '-action').show();
         $('#' + type + '-sel-course').trigger('change');
         $('#' + type + 'Assignment').css('height', 'auto');
         $('#' + type + 'Assignment').modal();
       });
       $("#merge-sel-course").change(function() {
         var type = "merge";
         $.post("../util/import_assignment.php",{courseid: $(this).val(), tgtbasnid: 2791721, type: type, functionName: 'get_assignment_table'}, function(output) {
           output = JSON.parse(output);
           $('#' + type + '-table').html(output.tbldata);
         })
       });

       $('#merge-table').on('click', '.merge-modal-td-checkbox-all', function() {
         if (this.checked) {
           // check all checkboxes
           $(".merge-modal-td-checkbox-one").prop("checked", true);
           // $('#merge-table .merge-modal-td-checkbox-one').prop("checked", true);
         } else {
           // uncheck all
           $(".merge-modal-td-checkbox-one").prop("checked", false);
           // $('#merge-table .merge-modal-td-checkbox-one').prop("checked", false);
         }
       });

       var mergeAsnTimer;
       function showMergeAnsDots()
       {
         text = $('#merge-output').text();
         $('#merge-output').text(text + '.');
         mergeAsnTimer = setTimeout(showMergeAnsDots, 1000);
       }

       $('#merge-action').click(function() {
         // get the id's of all the selected assignments
         var basnids = [];
         $(".merge-modal-td-checkbox-one").each(function() {
           if (this.checked) {
             basnids.push(this.dataset.asnid);
           }
         });
         console.log(basnids);

         // if nothing selected, give an error and stay open
         if (basnids.length == 0) {
           bootbox.dialog("<br>No assignment selected. Please select at least one assignment to merge.",
                          [{
                            "label" : "Ok",
                            "class" : "btn vocbtn-ac vocbtn-action"
                          }]
           );
         } else {
           $('#merge-ok').show();
           $('#merge-cancel').hide();
           $('#merge-action').hide();
           $('#merge-output').show();
           $('#merge-output').text("Merging assignment(s)...");
           mergeAsnTimer = setTimeout(showMergeAnsDots, 1000);

           var src_course = $("#merge-sel-course").val();
           // do the actual merge
           var jqxhr = $.ajax({
             type: "POST",
             url: '../util/vcput.php?a=mergeAssignments',
             data: { tgt_part: 2791722, tgt_base: 2791721, tgt_version: 0, src_course: src_course, asnuserid: 3209731, workarea: "/home/nowhere",basnids: basnids }
           })
           .done(function(data, textStatus, jqXHR) {
             console.log(data);
             clearTimeout(mergeAsnTimer);
             try {
               var result = JSON.parse(data);
               if (result['status'] == 'Error') {
                 $('#merge-output').text("Error merging assignments: " + result['output']);
               }
               else {
                    $('#merge-output').text(result['output']);
                    $('#merge-output').animate({
                      scrollTop:$('#merge-output')[0].scrollHeight - $("#merge-output").height()
                    }, 1000);
               }
             }
             catch (err) {
               $('#merge-output').text("Exception merging assignments: " + err);
             }
           })
           .fail(function(data, textStatus, jqXHR) {
             clearTimeout(mergeAsnTimer);
             $('#merge-output').text("Error merging assignments");
           });
           
           //$('#mergeAssignment').modal("hide");
         }
       });
       
       $('#mergeAssignment').on('shown.bs.modal', function() {
         $('#merge-sel-course').chosen();
         $("#merge-sel-course").change();
       });

       function confirmCseVersion(started,verstr)
       {
         var actstr = '';
         var utime = lastUpdateTime;
         var qstr = 'Are you sure you want to update?<br>' + (utime==''? '' : 'Last updated: ' + utime + '<br>') + verstr;
         if(started){
           qstr += '<br><strong>NOTE:</strong> Some students have started the assignment. <br>';
         }
         bootbox.dialog(qstr,
                         [{
                           "label" : "Yes",
                           "class" : "btn vocbtn-ac vocbtn-action",
                           "callback": function() {
                              syncAsnNow(false);
                           }
                         },
                         {
                           "label" : "Cancel",
                           "class" : "btn vocbtn-ac vocbtn-status"
                         }]
                   );
       }
       function cseVersDesc(ver)
       {
          //'{.vocconfig' + ver.versiondata.vocconfig +
          //', lib' + ver.versiondata.lib +
          //', asnlib' + ver.versiondata.asnlib +
          //', scripts' + ver.versiondata.scripts +
          //', startercode' + ver.versiondata.startercode + '}';
         if(ver.versiondata.asnlib.length==0) return ' initial';
         else                                 return ver.versiondata.asnlib.replace('.', ' ');
       }
       function updateCseVersion(data, v)
       {
         var ver = false;
         var verstr = '';
         if( v ){
           try {
             ver = JSON.parse(v);
             if( !ver ||  !ver.hasOwnProperty('versiondata') ){
               ver = false;
             }
           } catch(e){
             ver = false;
             alert('error:' + v);
           }
         }
         if( ver ){ // there is a prior version
           verstr = '';//'Current version:' + cseVersDesc(ver) + '<br>';
         }
         //check if there is student who started the assignment
                var apos = data.search('started::');
         var bpos = data.search('::started');
         if(apos>=0 && bpos>=0 && bpos>apos && data.substring(apos+9, bpos)=='yes'){
           confirmCseVersion(true,verstr);
         } else
                {
           confirmCseVersion(false,verstr);
         }
         return false;
       }
       
       
      $('#quizModal_ok').click(function() {
          let multi_tab;
          let show_hints;
          let show_rubrics;
          multi_tab = $('#multi_tab').prop('checked') ? 1 : 0;
          show_hints = $('#show_hints').prop('checked') ? 1 : 0;
          show_rubrics = $('#show_rubrics').prop('checked') ? 1 : 0;
          $('#quizModal').modal('hide');
          $('#quiztext').html('<i class="icon-spin icon-spinner"></i>Generate Quiz');
          $.when(generateQuiz(multi_tab, show_hints, show_rubrics)).done(function() {
              // Bypass daemon for beta server
              if (false) {
                  show_voc_gritter(false, "Quiz successfully generated", false);
                  refreshFileTree(false, true);
                  $('#quiztext').html('Generate Quiz');
              } else {
                  checkQuizStatus();
              }
          });
      });

      $('#replaceImage').change(function() {
          if ($('#replaceImage').prop('checked')) {
              $('#restartContainerControl').removeClass('hidden-1');
          } else {
              $('#restartContainerControl').addClass('hidden-1');
              $('#restartContainer').prop('checked', false);
          }
      });

      $('#saveImageModal_ok').click(function() {
          let labName;
          let replaceImage;
          let restartContainer;
          labName = $('#labName').val();
          replaceImage = $('#replaceImage').prop('checked') ? 1 : 0;
          restartContainer = $('#restartContainer').prop('checked') ? 1 : 0;
          $('#saveImageModal').modal('hide');
          $('#saveimagetext').html('<i class="icon-spin icon-spinner"></i>Save Image');
          saveclabs(labName, replaceImage, restartContainer);
      });

      function generateQuiz(multi_tab, show_hints, show_rubrics) {
          return $.ajax({
                    url: '../util/vcput.php?a=generateQuizAjax'
                          + '&courseid='  + 117181                          + '&stepid='    + 2791722                          + '&asnuserid=' + 3209731                          + '&multi_tab=' + multi_tab
                          + '&show_hints=' + show_hints
                          + '&show_rubrics=' + show_rubrics,
                  })
                  .done(function(data, textStatus, jqXHR) {
                      console.log(data);
                      try {
                          // alert(data);
                          let result = JSON.parse(data);
                          if (result['status'] === 'Error') {
                            show_voc_gritter(false, "Error generating quiz: " + result['msg'], true);
                          } else {
                            show_voc_gritter(false, "Quiz generation started", false);
                          }
                      } catch(err) {
                          alert("Exception generating quiz: " + err);
                          $('#quiztext').html('Generate Quiz');
                      }
                  })
                  .fail(function(data, textStatus, jqXHR) {
                      alert("Error generating quiz");
                  });
      }

      function checkQuizStatus() {
          $.ajax({
            url: '../util/vcput.php?a=checkQuizStatus&stepid=' + 2791722,
          })
          .done(function(data) {
              let result = JSON.parse(data);
              if (result['status'] === 'Completed') {
                  show_voc_gritter(false, result['message'], false);
                  refreshFileTree(false, true);
                  $('#quiztext').html('Generate Quiz');
              } else if (result['status'] === 'Error') {
                  show_voc_gritter(false, result['message'], true);
                  refreshFileTree(false, true);
                  $('#quiztext').html('Generate Quiz');
              } else if (result['status'] === 'In progress' || result['status'] === 'Initializing') {
                  window.setTimeout(checkQuizStatus, 3000); 
              } else {
                  show_voc_gritter(false, result['message'], true);
                  $('#quiztext').html('Generate Quiz');
              }
          })
          .fail(function(data) {
              alert('Failed to check generate quiz status');
              $('#quiztext').html('Generate Quiz');
          });
      }
       
       var jupyterOnDemandClearOutputStr = "\
           <h3>Jupyter</h3>\
           <h6>\
             This will clear out all the outputs in the selected notebook(s).\
           </h6>\
           <h6>\
             This is useful when notebook sizes get very large due to debug print statements and they take a long time to load.\
           </h6>\
       ";
       var jupyterAutoClearOutputStr = "\
           <h3>Jupyter</h3>\
           <h6>\
             At least one of your notebooks is very large; perhaps due to debug print statements in the outputs. If you are experiencing long load times, you can use choose to clear the outputs from your notebooks(s).\
           </h6>\
           <h6>\
             The original notebook(s) will be modified.\
           </h6>\
       ";

       function showJupyterClearOutputModal(nbsWsz, type)
       {
         if (nbsWsz.length == 0)
         {
           alert("Jupyter: No notebooks found in the workarea");
           return;
         }

         var max_size_in_kb = 10 * 1000;
         var data = ''
                  + '<table class="table table-first-column-check table-hover" style="border-top: 0 !important;margin-bottom:5px">'
         ;
         for (var i = 0; i < nbsWsz.length; i++)
         {
           nba = nbsWsz[i];
           data += '<tr id="jupyter_file_' + i + '">';

           sz = nba[1];
           if (sz > 1000)
           {
             sz = Math.round(sz / 1000);
             sz = sz + ' MB';
           }
           else
           {
             sz = sz + ' KB';
           }

           data += '<td class="jupyter-modal-td-file"><input id="jupyter_co_file_cb_' + i + '" class="span1 jupyter-modal-td-checkbox" type="checkbox" ';
           if (nba[1] >= max_size_in_kb)
           {
             data += 'checked>';
           }
           else
           {
             data += '>';
           }
           data += nba[0] + ' [' + sz + ']';
           data += '</td></tr>';
         }

         var str = "";
         if (type == 'auto')
         {
           str = jupyterAutoClearOutputStr;
         }
         else if (type == 'on_demand')
         {
           str = jupyterOnDemandClearOutputStr;
         }
         $('#jupyterClearOutputModal_header').html(str);
         $('#jupyterClearOutputModal_files').html(data);
         $('#jupyterClearOutputModal_ta').hide();
         $('#jupyterClearOutputModal_cancel').show();
         $('#jupyterClearOutputModal_co').show();
         $('#jupyterClearOutputModal_ok').hide();
         $("#jupyterClearOutputModal").css('height', 'auto');
         $('#jupyterClearOutputModal').modal();
       }

       var lastNotebookReleaseTime = '';
       function showJupyterReleaseModal(nbs,dfs, opts)
       {
         var newContainerLab = false;

         if (nbs.length == 0)
         {
           alert("Jupyter: No notebooks found in the workarea");
           return;
         }
         
         var releaseTimeText = '';
         if (lastNotebookReleaseTime) {
           releaseTimeText = 'Last released: ' + lastNotebookReleaseTime + '<br><br>';
         }

         var data = ''
                  + releaseTimeText
                  + 'Notebook(s) to be released:'
                  + '<table class="table table-first-column-check table-hover" style="border-top: 0 !important;margin-bottom:5px">'
         ;
         for (var i = 0; i < nbs.length; i++)
         {
           data += '<tr id="jupyter_file_' + i + '">';
           data += '<td class="jupyter-modal-td-file"><input id="jupyter_file_cb_' + i + '" class="span1 jupyter-modal-td-checkbox" type="checkbox" checked>';
           data += nbs[i];
           data += '</td></tr>';
         }
         data += '</table>';
         
         // Displays data files (CSVs)
         if (dfs.length > 0) {
           data += '<br>';
           data += 'Data Files: ' +
                    '<table class="table table-first-column-check table-hover" style="border-top: 0 !important;margin-bottom:5px">';
           for (var i = 0; i < dfs.length; i++)
           {
             // Data file is forced to be readme if it's over 8mb
             data += '<tr id="jupyter_data_file_' + i + '">';
             data += '<td class="jupyter-modal-td-file">';
             data += '<input id="jupyter_data_file_cb_' + i + '" class="span1 jupyter-modal-td-checkbox" type="checkbox" checked>';
             data += '&nbsp;&nbsp;'+dfs[i];
             data += '&nbsp;&nbsp;&nbsp;<i style="font-size:10px;"><input id="jupyter_read_only_data_file_cb_' + i + '" class="span1" style="margin-bottom: 6px !important; width:10px !important;" type="checkbox" '+((dataFilesWithSizes[i][1] > 51200) ? 'checked' : '') + ((dataFilesWithSizes[i][1] > 204800) ? ' disabled' : '') + '>&nbsp;read-only </i>';
             data += '</td>';
             data += '</tr>';
           }
           data += '</table>';
         }
         
         data += '<br>';
         data += '<div id="jupyter_release_options" class=" ">';
         data += 'Options:';
         data += '<table class="table table-first-column-check table-hover" style="border-top: 0 !important;margin-bottom:5px">';
         data += '<tr><td style="text-align:left; border:0px; padding-bottom:0px"><input id="jupyter_extract_rubric" class="span1" style="margin-bottom:6px; width:20px" type="checkbox"'; // + 'checked>';
         if (!opts || (typeof opts['extractrubric'] === 'undefined') || (opts['extractrubric'] == "1")) {
           data += ' checked ';
         }
         data += '>';
         data += 'Extract rubric items from notebook(s)';
         data += '</td></tr>';

         
         if (! newContainerLab)
         {
           data += '<tr><td style="text-align:left; border:0px; padding-bottom:0px"><input id="jupyter_script_resource_link" class="span1" style="margin-bottom:6px; width:20px" type="checkbox"'; // + 'checked>';
           if (!opts || (typeof opts['createresourceLink'] === 'undefined') || (opts['createresourceLink'] == "1")) {
             data += ' checked ';
           }
           data += '>';
           data += 'Create resource link in Starter Code';
           data += '</td></tr>';
         }

         data += '</table>';
         data += '</div>'

         // Script Options:
         data += '<br>';
         data += 'Script Options:';
         data += '<table class="table table-first-column-check table-hover" style="border-top: 0 !important;margin-bottom:5px">';

         // Generate grading script
         data += '<tr><td style="text-align:left; border:0px; padding-bottom:0px"><input id="jupyter_script_ow" class="span1" style="margin-bottom:6px; width:20px" type="checkbox"'; // + 'checked>';
         if (!opts || (typeof opts['owgrdscript'] === 'undefined') || (opts['owgrdscript'] == "1")) {
           data += ' checked ';
         }
         data += '>';
         data += 'Generate grading script';
         data += '</td></tr>';

         // Show traceback
         data += '<tr class=""><td style="text-align:left; border:0px; padding-bottom:0px"><input id="jupyter_script_traceback" class="span1" style="margin-bottom:6px; width:20px" type="checkbox"';
         if (!opts || (typeof opts['tbgrdscript'] === 'undefined') || (opts['tbgrdscript'] == "1")) {
           data += ' checked ';
         }
         if (opts && (typeof opts['owgrdscript'] !== 'undefined') && (opts['owgrdscript'] == "0")) {
           data += ' disabled ';
         }
         data += '>';
         data += 'Show traceback for errors';
         data += '</td></tr>';

         // Show feedback (via html report)
         data += '<tr class=""><td style="text-align:left; border:0px; padding-bottom:0px"><input id="jupyter_script_feedback" class="span1" style="margin-bottom:6px; width:20px" type="checkbox"';
         // default is unchecked
         feedbackIsChecked = false;
         if (opts && (typeof opts['fbgrdscript'] !== 'undefined') && (opts['fbgrdscript'] == "1")) {
           data += ' checked ';
           feedbackIsChecked = true;
         }
         if (opts && (typeof opts['owgrdscript'] !== 'undefined') && (opts['owgrdscript'] == "0")) {
           data += ' disabled ';
         }
         data += '>';
         data += 'Show html feedback report';
         data += '</td></tr>';

         // Hide output (on html report) (only if show feedback option is checked)
         style_str = feedbackIsChecked ? '' : 'display: none';
         data += `<tr id="jupyter_script_feedback_hide_output_row" style="${style_str}" class=""><td style="text-align:left; border:0px; padding-bottom:0px"><input id="jupyter_script_feedback_hide_output" class="span1" style="margin-bottom:6px; width:20px" type="checkbox"`;
         // default is unchecked
         if (opts && (typeof opts['fbgrdscripthideoutput'] !== 'undefined') && (opts['fbgrdscripthideoutput'] == "1")) {
           data += ' checked ';
         }
         if (opts && (typeof opts['owgrdscript'] !== 'undefined') && (opts['owgrdscript'] == "0")) {
           data += ' disabled ';
         }
         data += '>';
         data += 'Suppress output from all cells except autograded test cells';
         data += '</td></tr>';

         if (! newContainerLab)
         {
           data += '<tr><td style="text-align:left; border:0px; padding-bottom:0px"><input id="jupyter_embed_output" class="span1" style="margin-bottom:6px; width:20px" type="checkbox"'; // + 'checked>';
           if (!opts || (typeof opts['embedoutput'] === 'undefined') || (opts['embedoutput'] == "1")) {
             data += ' checked ';
           }
           data += '>';
           data += 'Display autograde test output in open notebook';
           data += '</td></tr>';
         }

         data += '</table>';

         
         $('#jupyterModal_files').html(data);

         $('#jupyterModal_ta').hide();
         $('#jupyterModal_ok').text('Close').hide();
         $('#jupyterModal_cancel').show();
         $('#jupyterModal_release').show();

         $("#jupyterModal").css('height', 'auto');
         $('#jupyterModal').modal();
       }

       var releaseNotebooks = [];
       var notebooksWithSizes = [];
       var dataFilesWithSizes = [];
       var dataFiles = [];
       var readOnlyDataFiles = [];
       var wrxDataFiles = [];
       function processNotebooks(type)
       {
         // get a list of notebooks
         releaseNotebooks = [];
         dataFiles = [];
         var jqxhr = $.ajax('../util/vcput.php?a=getNotebooksViaWebServer'
                          + '&courseid='  + 117181                          + '&basnid='    + 2791721                          + '&stepid='    + 2791722                          + '&asnuserid=' + 3209731                          + '&workarea='  + "/home/nowhere")
                      .done(function(data, textStatus, jqXHR) {
                        // console.log(data);
                        try {
             	          var result = JSON.parse(data);
                          if (result['status'] == 'Error') {
                            alert("Error retrieving notebook list: " + result['msg'])
                          }
                          else {
                            var prev_options = null;
                            if (typeof result['options'] === 'undefined') {
                              console.log("Options not found");
                            } else {
                              console.log("Options: ");
                              console.log(result['options']);
                              prev_options = result['options'];
                            }
                            notebooksWithSizes = result['notebooks'];
                            for (i = 0; i < notebooksWithSizes.length; i++) {
                              nba = notebooksWithSizes[i];
                              releaseNotebooks.push(nba[0]);
                            }
                            
                            dataFilesWithSizes = result['other'];
                            for (i = 0; i < dataFilesWithSizes.length; i++) {
                              csv = dataFilesWithSizes[i];
                              dataFiles.push(csv[0]);
                            }
                            
                            if (type == "release")
                            {
                              showJupyterReleaseModal(releaseNotebooks, dataFiles, prev_options);
                              if (prev_options !== null && prev_options.hasOwnProperty('extensions')) {
                                prev_options['extensions'].forEach(ext => $('#' + ext.replace('/', '\\/')).prop('checked', true));
                              }
                            }
                            else if (type == "clear_output")
                            {
                              showJupyterClearOutputModal(notebooksWithSizes, 'on_demand');
                            }
                            else if (type == "notebook_size_check")
                            {
                              checkNotebookSize(notebooksWithSizes);
                            }
                          }
                        }
                        catch(err) {
                          alert("Exception retrieving notebook list: " + err)
                        }
                      })
                      .fail(function(data, textStatus, jqXHR) {
                        alert("Error retrieving notebook list");
                      });
       }

       var jupyterModalDotTimer;

       function showJupyterModalDots()
       {
         text = $('#jupyterModal_ta').text();
         $('#jupyterModal_ta').text(text + '.');
         jupyterModalDotTimer = setTimeout(showJupyterModalDots, 1000);
       }

       $(document).on('change', '#jupyter_script_ow', function() {
         var val = this.checked ? false : true;
         $('#jupyter_script_traceback').prop("disabled", val);
         $('#jupyter_script_feedback').prop("disabled", val);
         $('#jupyter_script_feedback_hide_output').prop("disabled", val);
         $('#jupyter_embed_output').prop("disabled", val);;
       });

       $(document).on('change', '#jupyter_script_feedback', function() {
         if (this.checked) {
           $('#jupyter_script_feedback_hide_output_row').show();
         } else {
           $('#jupyter_script_feedback_hide_output_row').hide();
         }
       });

       function jupyterReleaseNotebooks()
       {
         if (releaseNotebooks.length == 0)
         {
           alert("No notebooks found");
           return;
         }
         nbsToRelease = [];
         for (var i = 0; i < releaseNotebooks.length; i++)
         {
           if ($('#jupyter_file_cb_' + i).prop('checked'))
           {
             nbsToRelease.push(releaseNotebooks[i]);
           }
         }
         if (nbsToRelease.length == 0)
         {
           alert("No notebook(s) selected for release");
           return;
         }
         
         readOnlyDataFiles = []; wrxDataFiles = [];
         for (var i = 0; i < dataFiles.length; i++) {
           if($('#jupyter_data_file_cb_'+i).prop('checked')) {
             ($('#jupyter_read_only_data_file_cb_'+i).prop('checked')) ? readOnlyDataFiles.push(dataFiles[i]) 
                                                             : wrxDataFiles.push(dataFiles[i]);
           }
         }

         var generateGradingScript = 0;
         if ($('#jupyter_script_ow').prop('checked'))
         {
           generateGradingScript = 1;
         }
         var extractRubric = 0;
         if ($('#jupyter_extract_rubric').prop('checked'))
         {
           extractRubric = 1;
         }
         var deleteRubric = 0;
         if ($('#jupyter_delete_rubric').prop('checked'))
         {
           deleteRubric = 1;
         }
         var createResourceLink = 0;
         if ($('#jupyter_script_resource_link').prop('checked'))
         {
           createResourceLink = 1;
         }
         var tracebackGradingScript = 0;
         if ($('#jupyter_script_traceback').prop('checked'))
         {
           tracebackGradingScript = 1;
         }
         var feedbackGradingScript = 0;
         if ($('#jupyter_script_feedback').prop('checked'))
         {
           feedbackGradingScript = 1;
         }
         var feedbackGradingScriptHideOutput = 0;
         if ($('#jupyter_script_feedback_hide_output').prop('checked'))
         {
           feedbackGradingScriptHideOutput = 1;
         }
         var embedOutput = 0;
         if ($('#jupyter_embed_output').prop('checked'))
         {
           embedOutput = 1;
         }
         
         var checkedExtensions = [];
         $('input[class="jupyterExtensionCheckbox"]:checked').each(function() {
           checkedExtensions.push($(this).attr("id"));
         });

         ht = $('#jupyterModal').height();
         $('#jupyterModal_ok').text("Generating...").show();
         $('#jupyterModal_cancel').hide();
         $('#jupyterModal_release').hide();
         $('#jupyterModal_ta').text("Generating notebook(s).");
         $('#jupyterModal_ta').show();
         $("#jupyterModal").animate({ scrollTop: $('#jupyterModal').prop("scrollHeight")}, 1000);
         jupyterModalDotTimer = setTimeout(showJupyterModalDots, 500);

         var jqxhr = $.ajax({
           url: '../util/vcput.php?a=releaseNotebooks'
                + '&courseid='  + 117181                + '&basnid='    + 2791721                + '&stepid='    + 2791722                + '&asnuserid=' + 3209731                + '&workarea='  + "/home/nowhere"
                + '&notebooks='  + encodeURIComponent(nbsToRelease.join('_____'))
                + ((readOnlyDataFiles.length > 0) ? ('&readOnlyDataFiles='  + encodeURIComponent(readOnlyDataFiles.join('_____'))) : '')
                + ((wrxDataFiles.length > 0) ? ('&wrxDataFiles='  + encodeURIComponent(wrxDataFiles.join('_____'))) : '')
                + '&owgrdscript=' + generateGradingScript
                + '&extractrubric=' + extractRubric
                + '&createresourceLink=' + createResourceLink
                + '&deleterubric=' + deleteRubric
                + '&tbgrdscript=' + tracebackGradingScript
                + '&fbgrdscript=' + feedbackGradingScript
                + '&fbgrdscripthideoutput=' + feedbackGradingScriptHideOutput
                + '&embedoutput=' + embedOutput,
           data: {
             extensions: checkedExtensions
           },
           type: 'POST'
         }).done(function(data, textStatus, jqXHR) {
                        clearTimeout(jupyterModalDotTimer);
                        console.log(data);
                        try {
                          var result = JSON.parse(data);
                          if (result['status'] == 'Error') {
                            alert("Error generating notebook(s): " + result['msg'])
                          }
                          else {
                            if ('release_time' in result) {
                              lastNotebookReleaseTime = new Date(result['release_time']*1000).toString();
                            }
                            $('#jupyterModal_ta').text(result['stdout']);
                            $("#jupyterModal_ta").animate({
                              scrollTop:$("#jupyterModal_ta")[0].scrollHeight - $("#jupyterModal_ta").height()
                            },1000);
                            
                            if($('#updateAsnOnRelease').prop('checked') || false) {
                              $('#jupyterModal_ok').text("Updating...");
                              let triggerUpdateMsg = "\n\n-----------------------------\
                                                    \nASSIGNMENT UPDATE\
                                                    \n-----------------------------\n\
                                                    \n## Now Updating Assignment...Please Wait\n";
                            
                              $('#jupyterModal_ta').text($('#jupyterModal_ta').text() + triggerUpdateMsg).animate({
                                scrollTop:$("#jupyterModal_ta")[0].scrollHeight - $("#jupyterModal_ta").height()
                              },1000);
                              
                              // triggers the Update
                              syncAsnNow(false);
                            }
                            else {
                              $('#jupyterModal_ok').text("Close");
                              $('#updatebtntext').html('Update*');
                            }
                          }
                        }
                        catch(err) {
                          alert("Exception generating notebook(s): " + err)
                        }
                      })
                      .fail(function(data, textStatus, jqXHR) {
                        clearTimeout(jupyterModalDotTimer);
                        alert("Error generating notebook(s)");
                      });
       }

       $('#jupyterModal_release').click(function() {
         //$('#jupyterModal').modal('hide');
         setTimeout(jupyterReleaseNotebooks, 500);
       });

       var jupyterClearOutputModalDotTimer;

       function showJupyterClearOutputModalDots()
       {
         text = $('#jupyterClearOutputModal_ta').text();
         $('#jupyterClearOutputModal_ta').text(text + '.');
         jupyterClearOutputModalDotTimer = setTimeout(showJupyterClearOutputModalDots, 1000);
       }


       function jupyterNotebookClearOutput()
       {
         if (releaseNotebooks.length == 0)
         {
           alert("No notebooks found");
           return;
         }
         nbsToClear = [];
         for (var i = 0; i < releaseNotebooks.length; i++)
         {
           if ($('#jupyter_co_file_cb_' + i).prop('checked'))
           {
             nbsToClear.push(releaseNotebooks[i]);
           }
         }
         if (nbsToClear.length == 0)
         {
           alert("No notebook(s) selected for clearing output");
           return;
         }

         $('#jupyterClearOutputModal_ta').text("Clearing output for notebook(s).");
         $('#jupyterClearOutputModal_ta').show();
         $('#jupyterClearOutputModal_ok').show();
         $('#jupyterClearOutputModal_co').hide();
         $('#jupyterClearOutputModal_cancel').hide();
         $("#jupyterClearOutputModal").animate({ scrollTop: $('#jupyterClearOutputModal').prop("scrollHeight")}, 1000);
         jupyterClearOutputModalDotTimer = setTimeout(showJupyterClearOutputModalDots, 500);

         var jqxhr = $.ajax('../util/vcput.php?a=notebookClearOutput'
                          + '&courseid='  + 117181                          + '&basnid='    + 2791721                          + '&stepid='    + 2791722                          + '&asnuserid=' + 3209731                          + '&workarea='  + "/home/nowhere"
                          + '&notebooks='  + nbsToClear.join('_____'))
                      .done(function(data, textStatus, jqXHR) {
                        clearTimeout(jupyterClearOutputModalDotTimer);
                        console.log(data);
                        try {
                          var result = JSON.parse(data);
                          if (result['status'] == 'Error') {
                            alert("Error clearing output: " + result['msg'])
                          }
                          else {
                            $('#jupyterClearOutputModal_ta').text(result['stdout']);
                            $("#jupyterClearOutputModal_ta").animate({
                              scrollTop:$("#jupyterClearOutputModal_ta")[0].scrollHeight - $("#jupyterClearOutputModal_ta").height()
                            },1000);
                          }
                        }
                        catch(err) {
                          alert("Exception clearing output: " + err)
                        }
                      })
                      .fail(function(data, textStatus, jqXHR) {
                        clearTimeout(jupyterClearOutputModalDotTimer);
                        alert("Error clearing output");
                      });

       }

       $('#jupyterClearOutputModal_co').click(function() {
         //$('#jupyterModal').modal('hide');
         setTimeout(jupyterNotebookClearOutput, 500);
       });

       $('#clear_notebook_output').click(function() {
         //$('#jupyterModal').modal('hide');
         setTimeout(processNotebooks, 500, 'clear_output');
       });

                          function checkNotebookSize(nbsWsz)
                          {
                            var max_size_in_kb = 10 * 1000;
                            for (i = 0; i < nbsWsz.length; i++) {
                              nba = nbsWsz[i];
                              if (nba[1] >= max_size_in_kb)
                              {
                                showJupyterClearOutputModal(nbsWsz, 'auto');
                                return;
                              }
                            }
                          }
                          
$(document).ready(function() {
  
  // workaround for guacamole container losing focus when panel3 is clicked on
  var el = document.getElementById("consolediv");
  if (el)
  {
    el.addEventListener('mouseenter',(event) => {
      var ifr = document.getElementById("panel2Iframe");
      if (ifr) { 
        ifr.blur(); 
        ifr.focus(); 
      }
    });
  }

});

    $('#updatebtn').click(function(){
      $.ajax({
        url: '../util/vcput.php?a=courseversion&stepid=2791722',
        type: 'get',
        success: function(data) {
          var apos = data.search('voc::');
          var bpos = data.search('::voc');
          if(apos>=0 && bpos>=0 && bpos>apos){
            updateCseVersion(data, data.substring(apos+5, bpos));
          } else {
            updateCseVersion(data, data.substring(apos+5, bpos));
          }
        }
      });
    });
    $('#help-window' ).click(function(){
        if (!$('#jspanelWindow').length) {
$.jsPanel({
  id: "jspanelWindow",
      theme:    "light",
      title:    "Instructions",
  addClass: {
    header: "voc-jpanel-header",
    content: "voc-jpanel-content",
  },
  position: { top: 130, right: "auto" },
  size: { width: 400, height: 500 },
  resizable: "disabled",
  content:  "<iframe src='../util/vcprojapi.php?vockey=4ccbd337cdcd897ff6a099c76e4f2b078b7e9ebecc0431f932b05a84a2ce13d8&t=gethelp&asnid=2791721&version=0' width='100%' height='100%' style='' title='Help'></iframe>",
  controls: { buttons: 'closeonly', iconfont: 'font-awesome' },
});
  }
    });
    
});

/* turtle start */
/* turtle end */

function unescapeHtml(safe) {
    return safe.replace(/&amp;/g, '&')
        .replace(/&lt;/g, '<')
        .replace(/&gt;/g, '>')
        .replace(/&quot;/g, '"')
        .replace(/&#039;/g, "'")
        .replace(/<br>/g, "");
}


/* we always get the str as htmlspecialchars from php - now print depends whether on terminal or console
 * to unescape html */
function consolePrint(str) {
    if ((typeof(str) === 'undefined') || (str == null)) {
      return;
    }
            str = str.replace(/VOC_NL/gm, "");
        str = str.replace(/(?:\r\n|\r|\n)/g, '<br />');
        
        str = '<pre>' + str + '</pre>';
                    widgetModalOutput(str);
                

    }

function widgetModalOutput(str) {
    $('#div-widgetoutput').html("<i class=\"icon-spin icon-spinner\"></i>&nbsp; Waiting for output ..");
    $('#modal-table-widgetoutput').modal('show');
    $('#div-widgetoutput').html(str);
}

var reportsToOpen = true;
function updateReportStatus(type, str) {
    var statusElem = '#'+type+'ReportStatus';
    $(statusElem).html(str);
    $(statusElem).show();

    if (!($('#reports').hasClass('open')) && reportsToOpen) {
        $('#reportsdropdown').trigger('click');
        reportsToOpen = false;
    }
}
function updateReportProgress(type, str) {
    var statusElem = '#'+type+'ReportProgress';
    if( str!='' ){
      $(statusElem).html(str);
      $(statusElem).show();
    } else {
      $(statusElem).hide();
    }
}
function updateReportReady(type, show) {
    var statusElem = '#'+type+'reportbutton';
    if( show ) $(statusElem).show();
    else       $(statusElem).hide();
}

function stopCheckReportTimeout(type) {
  if ($("body").data("timeout"+type) != null) {
    clearTimeout($("body").data("timeout"+type));
  }
}

function startCheckReportTimeout(type, url, chksubmit, chkgrade, tv, st) {
  stopCheckReportTimeout(type);
  timeoutVar = setTimeout(function() {
                 asyncCheckReportPeriodic(type, url, chksubmit, chkgrade, tv, st);
               }, 2000);
  $("body").data("timeout"+type, timeoutVar);
}

var waitingForReport = false;
var maxPollTv = 120; //3m
function asyncCheckReportPeriodic(type, url, chksubmit, chkgrade, tv, st) {
    var statusElem = '#'+type+'ReportStatus';
            if( tv>0 ){
          var elapsed = (Math.floor(Date.now() / 1000) - st);
                    if( true || type!='Submission' || chksubmit===0 ){
            updateReportStatus(type, '<i class="icon-spin icon-spinner"></i>waiting for report ' + elapsed + 's');
          }
        } else {
          waitingForReport = true;
          $("body").data("timeout"+type, null);
          updateReportStatus(type, 'Please come back and click here for the report ...');
          if (type=='RUN' || type=='BUILD') { // activity icon only for RUN as of now
            updateRunIcon(type, false);
          }
          return false;
        }
        if( tv <= (maxPollTv-10) ) { // after 10s
          if( tv>(maxPollTv-60) )  { // before 1m
            if( (tv % 10) != 0 ){
              startCheckReportTimeout(type, url, chksubmit, chkgrade, tv-2, st);
              return false;
            }
          } else if (tv>0){
            if( (tv % 30) != 0 ){
              startCheckReportTimeout(type, url, chksubmit, chkgrade, tv-2, st);
              return false;
            }
          }
        }
        tv -= 2;
        $.ajax({
            url: url,
            data: {},
            success: function(ret_val) {

                if (ret_val.indexOf('ERROR:INVALID_SESSION>') == 1) { // invalid session
                  refreshNewSessionPage();
                }

                try {
                  resp = jQuery.parseJSON(ret_val);
                } catch(err) {
                    show_voc_gritter(false, "Internal error: invalid json", true);
                    consolePrint('Internal error: invalid json');
                    if (type=='RUN' || type=='BUILD') { // activity icon only for RUN as of now
                      updateRunIcon(type, false);
                    }
                    return;
                }
                                if (resp.state != 2) {
                    startCheckReportTimeout(type, url, chksubmit, chkgrade, tv, st);
                } else {  // done
                    $("body").data("timeout"+type, null);
                    if ( (resp.status == 1) ||
                                (resp.status == 2) ) {
                        
                        if (type=='RUN' || type=='BUILD') { // activity icon only for RUN as of now
                                                    if(resp.status == 1){
                            show_voc_gritter(false, type + ' completed successfully', false);
                          } else {
                            show_voc_gritter(false, type + ' completed with errors', true);
                          }
                          updateRunIcon(type, false);
                                                  }
                                                                            if (type == 'RUN') {
                              $('#runreportbutton').trigger('click');
                            } else if (type=='BUILD'){
                              $('#buildreportbutton').trigger('click');
                            } else {
                              $('#submissionreportbutton').trigger('click');
                            }
                                                
                                                       reportsToOpen = true;
                               if( true ) {
                                 updateReportStatus(type, '<i class="icon-ok"></i>New report ready');
                                 if (type == 'Grading') {
                                   vcJupyterExtraGradingComplete();
                                 }
                                 //mhui
                                 var element =  document.getElementById('gradeframe');
                                 if (typeof(element) != 'undefined' && element != null && advance_features == 1)
                                 {
                                 	 $('#gradesIdeBtn').click();
                                 }
                               }
                                                
                    } else {
                        str = "Unexpected failure. Please contact support";
                                                    reportsToOpen = true;
                            updateReportStatus(type, '<i class="icon-info"></i>Unexpected error');
                                                            $('#report_submission_msg_box').html("Unexpected error");
                                                        
                                            }
                    
                }
            }
    });
    
}


var submit_maxcount = -1;
var submit_count = 0;
var submit_in_progress = false;
var submission_open = 0;
var show_peer_review_confirm_dialog = 0;
var auto_peer_review_mode = 0;


function showSolutionAlert() {
          bootbox.dialog("You can now download the solution from the Actions drop-down menu",
                         [{
                           "label" : "Ok",
                            "class" : "btn vocbtn-ac vocbtn-action"
                          }]
          );
}

function updateSubmitDetails(resp) {
    if( (typeof resp.data !== "undefined") && resp.data ) {
        var subData = resp.data;
        var str = "";
              if (subData.hasOwnProperty('last_submitted')) {
            str = str + "<tr><td>Last submitted: </td><td>" + subData['last_submitted'] + "</td><tr>";
            /* submission should make the confirm dialog for auto peer review to come up */
            if (!show_peer_review_confirm_dialog) {
              show_peer_review_confirm_dialog = true;
            }
        }
        if (subData.hasOwnProperty('submission_count')) {
            str = str + "<tr><td>Submission count: </td><td>" + subData['submission_count'] + "</td><tr>";
                    }
        if (subData.hasOwnProperty('submissions_allowed')) {
            str = str + "<tr><td>Total allowed: </td><td>" + subData['submissions_allowed'] + "</td><tr>";
        }
        
        if (subData.hasOwnProperty('due_date')) {
            str = str + "<tr><td>Due date: </td><td>" + subData['due_date'] + "</td><tr>";
        }
        if (subData.hasOwnProperty('late_submission_deadline')) {
            str = str + "<tr><td>Late deadline: </td><td>" + subData['late_submission_deadline'] + "</td><tr>";
        }
        if (subData.hasOwnProperty('early_submission_bonus')) {
            str = str + "<tr><td>Early bonus: </td><td>" + subData['early_submission_bonus'] + "</td><tr>";
        }
        if (subData.hasOwnProperty('version')) {
            str = str + "<tr><td>Current version: </td><td>" + subData['version'] + "</td><tr>";
        }
             str += '';
        str += '';
        str += '';
        str += '<tr><td>AWS:</td><td> <div  class="btn vocbtn2 vocbtn-status" data-toggle="tab" href="#" tabindex="0" role="button" style="border:0px; line-height:17px !important"  onclick="showawsact(0);" id="showawsbtn">Show</div></td></tr>';
        str += '';
        if (str != '') {
            $('#subdetails').html(str);
        }
    }
}

  // if ($canSubmit)

function updateSubmitIcon(inprogress) {
    submit_in_progress = inprogress;
    if (inprogress) {
        $('#btn-submitasn').html('<i class="icon-spin icon-spinner"></i>Submitting</button>');
    } else {
        if ((submit_maxcount < 0) || (submit_count <= submit_maxcount) || (submission_open != 0)) {
            $('#btn-submitasn').html('Submit');
        } else {
            $('#btn-submitasn').hide();
        }
    }
}

function updateRunIcon(type, inprogress) {
    var btn = '#' + type + '-btn';
    var name = type=='RUN'? 'Run' : 'Build';
    if (inprogress) {
        $(btn).html('<i class="icon-spin icon-spinner"></i>' + name);
    } else {
        $(btn).html(name);
    }
}

		
		
	            function verifyResubmit(url, resubmit)
        {
          var str = "Are you sure you want to submit?";
          if(resubmit){
            str += '<br>Your earlier submission is still being processed. If you submit again, the previous submission may be terminated.';
          }
                      bootbox.dialog(str,
                         [{
                           "label" : "Yes",
                           "class" : "btn vocbtn-ac vocbtn-action",
                           "callback": function() {
                             handleSubmitUpdate(url);
                           }
                         },
                          {
                            "label" : "Cancel",
                            "class" : "btn vocbtn-ac vocbtn-status"
                          }]
          );
          return false;
        }

                  function checkAndVerifyResubmit(url) {
                                                            $.ajax({
                      url: "../util/vcput.php?a=chkResubmit&tv="+Date.now()+"&stepid=2791722&version=0",
                    })
                     .done(function(ret_val) {
                       return verifyResubmit(url, ret_val.indexOf('status::progress')>=0);
                     })
                     .fail(function(ret_val) {
                       // procees to submit anyway
                       return verifyResubmit(url, false);
                     });
                                      }
                  
                  
        function confirmSubmitAsnBtn(url) {

                  

 				if (isSaveNeeded()) {
					voc_save(true, "Saving");
				}
                  checkAndVerifyResubmit(url);
        };
        function gotoTeam(pid, name)
        {
          bootbox.dialog('Are you sure you want to switch to the workarea owned by [' + name + ']?',
                         [{
                           "label" : "Yes",
                           "class" : "btn vocbtn-ac vocbtn-action",
                           "callback": function() {
                             window.location = "main.php?m=editor&asnid=2791721&stepid=2791722&ownerid="+pid+"&permit=7";
                           }
                         },
                          {
                            "label" : "Cancel",
                            "class" : "btn vocbtn-ac vocbtn-status"
                          }]
          );
        }
        function copyworkarea()
        {
          saveCBClipboard('work\/');
          return false;
        }
        function pasteworkarea()
        {
          pasteCB("Paste", 'work\/', '', "Paste successful", true);
          return false;
        }
        function confirmResetAsnBtn(url) {
          var str = 'Reset will delete all your content in the work area  and replace it with the starter code.<br><br>' +
                    '' +
                    'Are you sure you want to reset your work-area?';
                                    bootbox.dialog(str,
                         [{
                           "label" : "Yes",
                           "class" : "btn vocbtn-ac vocbtn-action",
                           "callback": function() {
                                                            show_voc_gritter(true, ' Resetting...', true);
                                                          resetAsn(url, { async: 1 });
                           }
                         },
                          {
                            "label" : "Cancel",
                            "class" : "btn vocbtn-ac vocbtn-status"
                          }]
              );
                              };

        function resetAsn(url, data) {
          $.ajax({
            url: url,
            data: data,
            success: function(response) {
              try {
                const res = JSON.parse(response);
                if (res['state'] == 'Running') {
                  show_voc_gritter(false, 'Reset in progress. Page will redirect when done.', false);
                  setTimeout(() => {
                    resetAsn(url, {
                      getstatus: 1
                    });
                  }, 5000);
                } else if (res['state'] == 'Done') {
                  const redirPage = res['output_str'];
                  window.location = redirPage;
                } else if (res['state'] == 'Error') {
                  show_voc_gritter(true, res['output_str'], true);
                }
              } catch (error) {
                show_voc_gritter(true, error, true);
              }
            }
          });
        }
      

			if ($.cookie('buildtextareaData')) {
				$.removeCookie('buildtextareaData');
			}
			
      $(window).bind('beforeunload', function() {
          if (isSaveNeeded()) {
              voc_save(true, "Saving before you quit page, please wait");
              return 'Please wait till we save your unsaved changes';
          }
      });
      
      var vocClipboard = '';
      $(window).bind({
                copy : function(e){
                        var str = window.getSelection().toString();
                        if ((str == "") && e.target && e.target.value) {
                            console.log(e.target.value);
                            str = e.target.value;
                        }
                        vocClipboard = str.trim();
                        console.log('copied: ' + vocClipboard);
                }
      });

  // if we wanted to use the terminal but could not, print an error msg
  
  var vcChkSubmitFP = false;
    function periodicChkSubmitFP()
  {
    if(vcChkSubmitFP) {
      clearTimeout(vcChkSubmitFP);
      vcChkSubmitFP = false;
    }
    if( submit_in_progress || $('#reports').hasClass('open') ){
      vcChkSubmitOneTime();
    }
  }
  function vcScheChkSubmit()
  {
    if( !vcChkSubmitFP ){
      vcChkSubmitFP = setTimeout(periodicChkSubmitFP, 3000);
    }
  }
  function vcStStr(data, type)
  {
    var str = '';
    var st = type + '_st';
    var code = type + '_code';
    if( data.hasOwnProperty(code) && data[code]>0 ){
      if( data[code]==6 || data[code]==134 ){
        return ' (script aborted, exitcode=' + data[code] + ')';
      } else {
        return ' (script exitcode=' + data[code] + ')';
      }
    }
    if( data.hasOwnProperty(st) && data[st]!=1 ){
      return  '(Error)';
    }
    return '';
  }
  function vcChkSubmitOneTime()
  {
    $.ajax({
         type: "POST",
         url:'../util/vcput.php?a=getsubmitdetail&stepid=2791722&userid=3209731&version=0'
     })
     .done(function(ret_val) {
         try {
           var resp = jQuery.parseJSON(ret_val);
           updateSubmitDetails(resp);
           var data = resp.hasOwnProperty('data')? resp['data'] : [];
           if(data.hasOwnProperty('record')){
             if(!data['record']){
                                updateReportProgress('Submission', '');
             } else {
               var substr = '';
               var st = '';
               var rep = '';
               if( data.hasOwnProperty('grade') ){
                 if( data['grade'] ){
                                    st = vcStStr(data, 'grade');
                   if( data.hasOwnProperty('grade_out') ){
                     substr = '<tr><td style="width:130px">Grading Report' + st + '</td><td><div class="btn btn-info vocbtn vocbtn-info" data-toggle="tab" href="#" tabindex="0" role="button" style="border:0px; line-height:17px !important" onclick="showrep(1);">Show</div></td></tr>';
                   } else
                                    {
                     substr = '<tr><td> Grading ' + st + '</td><td></td></tr>';
                   }
                 } else {
                   substr = '<tr><td><i class="icon-spin icon-spinner"></i> Grading processing</td><td></td></tr>';
                   vcScheChkSubmit();
                 }
               }
                            if( data.hasOwnProperty('submit') && data['submit'] ){
                 updateSubmitIcon(false);
                 st = vcStStr(data, 'submit');
                 if( data.hasOwnProperty('submit_out') ){
                   rep = '<tr><td style="width:130px">Submission Report' + st + '</td><td><div class="btn btn-info vocbtn vocbtn-info" data-toggle="tab" href="#" tabindex="0" role="button" style="border:0px; line-height:17px !important" onclick="showrep(0);">Show</div></td></tr>';
                 } else if( st!='' ){
                   rep = '<tr><td> Submission ' + st + '</td><td></td></tr>';
                 } else {
                   rep = '';
                 }
                 updateReportProgress('Submission', rep + substr);
                 updateReportReady('submission', true);
               } else if (data.hasOwnProperty('submit_exe') && !data['submit_exe']){
                 // no submission script execution needed
                 if(data['record_st']!=1) st = 'failed';
                 else                                                                st = 'completed';
                 updateReportProgress('Submission', '<tr><td> Submission ' + st + '</td><td></td></tr>' + substr);
                 updateReportReady('submission', true);
               } else {
                 updateReportProgress('Submission', '<tr><td><i class="icon-spin icon-spinner"></i> Submission processing</td><td></td></tr>' + substr);
                 updateReportReady('submission', true);
                 vcScheChkSubmit();
               }
                          }
           } else {
             updateReportProgress('Submission', '');
             updateReportReady('submission', true);
           }
         } catch (e) {
           show_voc_gritter(false, "Failed to retrieve submission status", true);
         }
    });
  }

  $( "#reports" ).click(function() {
      if( vcChkSubmitFP ){
      clearTimeout(vcChkSubmitFP);
      vcChkSubmitFP = false;
    }
    if( ! $('#reports').hasClass('open') ){
      updateReportProgress('Submission', ' <i class="icon-spin icon-spinner">');
      vcChkSubmitFP = setTimeout(periodicChkSubmitFP, 1000);
    }
    });

  $( "#odterminalbtn" ).click(function() {
   $('#div-output-od_terminal').html("<iframe src=\"/terminal/?uid=3209731&token=\" width=\"100%\" height=\"100%\" frameBorder=\"0\" scrolling=\"no\" title=\"Terminal\"></iframe>");
  });



  $( "#downloadbtn" ).click(function() {
  	if ($('#input_filename').val().startsWith("Submissions/")) {
  		var url = "../main/submissionurl.php?asnid=2791722&mode=s&version=0&courseid=117181&userid=3209731&data=" + $('#input_filename').val();
  	} else {
  	    var paths = $('#tree1').tree('selectedItems').map(function (el) {
  	      var path = el.path.substring(2);
  	      if (el.type == 'folder') {
  	        path += '/';
  	      }
  	      return path;
  	    });
      	var filepath = "./" + ((newLabNoContainer && $('#input_filename').val().includes('docs/') && $('#input_filename').val().indexOf('docs/') == 0)? $('#input_filename').val().replace('docs', 'resource/asnlib/public/docs') : $('#input_filename').val());
      	var url = "../domains/ide_src_zip.php?stepid=2791722&mode=s&version=0&filepath=" + filepath;
  	}
  	$('#div-output-download_from_ide').html('');
  	$.ajax({
  	  url: url,
  	  type: 'post',
  	  data: {
  	    files: JSON.stringify(paths)
  	  },
  	  success: function(data) {
  	    $('#div-output-download_from_ide').html(data);
  	  }
  	});
    //$('#div-output-download_from_ide').html("<iframe src=\""+url+"\" width=\"100%\" height=\"100%\" title=\"Download\"></iframe>");
  });

  function getStudentReport(target, targetDiv, type, num) {
    var jqxhr = $.ajax('../util/vcput.php?a=getStudentReport'
                     + '&stepid='+ 2791722                     + '&userid='+ 3209731                     + '&type=' + type
                     + '&version=0'
                     + '&num=' + num)
                 .done(function(data, textStatus, jqXHR) {
                   // alert(data);
                   target.innerHTML = data;
                   targetDiv.scrollTop = targetDiv.scrollHeight;
                               if( waitingForReport && data.search(/Executed/)>=0 ){
                     waitingForReport = false;
                     if( true ) {
                       updateReportStatus(type, '<i class="icon-ok"></i>New report ready');
                     }
                     consolePrint(data);
                   }
                             })
                 .fail(function(data, textStatus, jqXHR) {
                   target.innerHTML = "<p>No " + type + " Report has been generated<p>";
                   targetDiv.scrollTop = targetDiv.scrollHeight;
                 });
  }
  
  function showStudentReportHtml(modalHtml, iframeHtml, iframeTitle, type, fileName)
  {
     var url = "../web/3209731/2791722/work/" + fileName;
     iframeTitle.html(type + " Report");
     iframeHtml.attr("src", url);
     modalHtml.modal('show');
  }
  
  function showStudentReportText(modalDiv, target, targetDiv, text)
  {
     modalDiv.modal('show');
     str = text.replace(/(?:\r\n|\r|\n)/g, '<br />');
     target.innerHTML = str;
     targetDiv.scrollTop = targetDiv.scrollHeight;
  }
  
  function showStudentReport(modalDiv, target, targetDiv, modalHtml, iframeHtml, iframeTitle, type, num) {
    var jqxhr = $.ajax('../util/vcput.php?a=showStudentReport'
                     + '&stepid='+ 2791722                     + '&userid='+ 3209731                     + '&type=' + type
                     + '&work=' + "/home/nowhere"
                     + ''                     + '&version=0'
                     + '&num=' + num)
                 .done(function(data, textStatus, jqXHR) {
                   try {
                     var result = JSON.parse(data);
                     if (result['status'] == 'Error') {
                       showStudentReportText(modalDiv, target, targetDiv, result['msg']);
                     } else {
                       if (result['msg']) {
                         showStudentReportText(modalDiv, target, targetDiv, result['msg']);
                       } else if (result['fileType'] == "text") {
                         showStudentReportText(modalDiv, target, targetDiv, result['reportFile']);
                       } else {
                         showStudentReportHtml(modalHtml, iframeHtml, iframeTitle, type, result['reportFileName']);
                       }
                     }
                   }
                   catch (e) {
                     showStudentReportText(modalDiv, target, targetDiv, 'Parse error getting student report: ' + e);
                   }
                               if (waitingForReport) {
                     waitingForReport = false;
                     if( true ) {
                       updateReportStatus(type, '<i class="icon-ok"></i>New report ready');
                     }
                     consolePrint(data);
                   }
                             })
                  .fail(function(data, textStatus, jqXHR) {
                    showStudentReportText(modalDiv, target, targetDiv, "<p>No " + type + " Report has been generated<p>");
                 });
  }

  function showrep(grading)
  {
    var name, type;
    if(grading) {
      name = 'grading';
      type = 'Grading';
    } else {
      name = 'submission';
      type = 'Submission';
    }
    var target = document.getElementById("report_" + name + "_msg_box");
    var targetDiv = document.getElementById("report_" + name + "_div");

    // if course has new flag set
          $('#modal-table-report-all-html-iframe').attr("src", "");
      showStudentReport($('#modal-table-report-' + name), target, targetDiv,
                        $('#modal-table-report-all-html'), $('#modal-table-report-all-html-iframe'),
                        $('#modal-table-report-all-html-title'), type, 0);
      }
  $('#gradingreportbutton').click(function(e) {
    showrep(1);
    e.preventDefault();// prevent the default anchor functionality
  });
  
  $('#submissionreportbutton').click(function(e) {
    showrep(0);
    e.preventDefault();// prevent the default anchor functionality
  });

  $('#runreportbutton').click(function(e) {
    var target = document.getElementById("report_run_msg_box");
    var targetDiv = document.getElementById("report_run_div");

    $('#modal-table-report-run').modal('show');
    getStudentReport(target, targetDiv, 'RUN', 0);

    e.preventDefault();// prevent the default anchor functionality
  });
  $('#buildreportbutton').click(function(e) {
    var target = document.getElementById("report_build_msg_box");
    var targetDiv = document.getElementById("report_build_div");

    $('#modal-table-report-build').modal('show');
    getStudentReport(target, targetDiv, 'BUILD', 0);

    e.preventDefault();// prevent the default anchor functionality
  });
  
  

  var dottyTimeout;
  var jupyterHtmlStyle = 'style="text-align:left; margin-left: 10px; padding-top:10px"';

  function vcLogJupyterError(jid, msg, ip, url)
  {
    var jqxhr = $.ajax({
      type: 'POST',
      url: '../util/vcput.php',
      data: { a: 'logJupyterError', msg: msg, jid: jid, ip: ip, url: url }
    })
    .done(function(data, textStatus, jqXHR) {
       // all done
    })
    .fail(function(jqXHR, textStatus, errorThrown) {
      // if the error logging itself failed, don't know what else to do...
    });
  }
  
  function editVers()
  {
    $('#modal-edit-vers').modal('show');
  }
  function setView(type) {
        name = "vocview_3209731_2791722_s";
    str = name + "=" + type + "; path=/";
    // if this cookie is already set with the same value as "type", nothing to do
    var re = new RegExp(name + '=(\\w*)');
    allcookies = document.cookie;
    var matches = allcookies.match(re);
    if (matches && (matches.length > 1) && (matches[1] == type))
    {
      return;
    }
    document.cookie = str;
    location.reload();
  }

  function setNewTabView(type)
  {
    var loc = "main.php?m=editor&asnid=2791721&stepid=2791722&hideNavBar=1" + '&force_idetype=' + type + '&force_noreadme=1';
    window.open(loc);
  }

  function openAppWindow(loc)
  {
    window.open(loc);
  }

  function getXstartupFileName(type)
  {
    switch (type) {
              case 0: return "xstartup.test";
              case 1: return "xstartup.eclipse";
              case 2: return "xstartup.mysqlwb";
              case 5: return "xstartup.pgadmin";
              case 3: return "xstartup.spyder3";
              case 4: return "xstartup.desktop";
              case 6: return "xstartup.android-studio";
              case 11: return "xstartup.thonny";
              default: return "xstartup.desktop";
    }
  }

  var vocLaunchingApp = false;
  function vocLaunchTimer()
  {
    vocLaunchingApp = false;
  }
  
  function launchApp(type)
  {
    $('#app_spinbox_' + type).show();

    if (vocLaunchingApp == true) {
      return;
    }
    vocLaunchingApp = true;
    setTimeout(vocLaunchTimer, 5000);

    xstartup_file = '/home/lib/ubuntu1604/vdi/xstartup_files/' + getXstartupFileName(type);
    data = { 'action': 'Launch', 'token': '', 'proxy_path': 'proxy.vocareum.com/hostip//vocproxy/', 'proxy_scheme': 'https', 'xstartup_file': xstartup_file };

    var jqxhr = $.ajax({
      type: 'POST',
      url: "https://proxy.vocareum.com/hostip//",
      data: JSON.stringify(data)
    })
    .done(function(data, textStatus, jqXHR) {
       $('#app_spinbox_' + type).hide();
       console.log(data);
       if (data['status'] == 'Error') {
         alert("VDI: Error: " + data['msg'])
       }
       else {
         // alert("location = " + data['location']);
         window.setTimeout(function() { openAppWindow(data['location']); } , 1000);
       }
       $('#actionsdropdown_liactions2').parent().removeClass('open').attr('aria-expanded', 'false');
       clearTimeout(vocLaunchTimer);
       vocLaunchingApp = false;
    })
    .fail(function(jqXHR, textStatus, errorThrown) {
      $('#app_spinbox_' + type).hide();
      alert("VDI: Launch Failed");
      $('#actionsdropdown_liactions2').parent().removeClass('open').attr('aria-expanded', 'false');
      clearTimeout(vocLaunchTimer);
      vocLaunchingApp = false;
    });
  }

  function stopApp()
  {
    $('#app_spinbox_stop').show();

    data = { 'action': 'Stop', 'token': '' }

    var jqxhr = $.ajax({
      type: 'POST',
      url: "https://proxy.vocareum.com/hostip//",
      data: JSON.stringify(data)
    })
    .done(function(data, textStatus, jqXHR) {
       $('#app_spinbox_stop').hide();
       console.log(data);
       if (data['status'] == 'Error') {
         alert("VDI: Error: " + data['msg'])
       }
       $('#actionsdropdown_liactions2').parent().removeClass('open').attr('aria-expanded', 'false');
    })
    .fail(function(jqXHR, textStatus, errorThrown) {
      $('#app_spinbox_stop').hide();
      $('#actionsdropdown_liactions2').parent().removeClass('open').attr('aria-expanded', 'false');
    });
  }


  $("#justdoit").click(function() {
    vcJupyterExtraGradingComplete();
    return;
  });

  function dotty()
  {
    val = $('#jupyterIframeParent').text();
    $('#jupyterIframeParent').html('<p ' + jupyterHtmlStyle + ' >' + val + '. </p>');
    dottyTimeout = setTimeout(dotty, 1000);
  }
  function startDotty(type)
  {
    $('#jupyterIframeParent').html('<p ' + jupyterHtmlStyle + ' >Loading ' + type +' server' + ' </p>');
    dottyTimeout = setTimeout(dotty, 1000);
  }
  function stopDotty()
  {
    clearTimeout(dottyTimeout);
  }
  function launchRStudio()
  {
     return false;
  }
  function launchAws(v)
  {
     if( v===0 ){
       bootbox.dialog("<br>Your lab has not started yet. Please click StartLab in order to access AWS console",
                       [{
                         "label" : "Ok",
                         "class" : "btn vocbtn-ac vocbtn-action"
                       }]
                  );
       return;
     }
     var tv = v<0? '' : ('&tv=' + v);
     $.ajax({
              url: "../util/vcput.php?vockey=4ccbd337cdcd897ff6a099c76e4f2b078b7e9ebecc0431f932b05a84a2ce13d8&a=getawsurl"+tv+"&asnid=2791722&userid=3209731&mode=s&version=0",
              data: {},
              success: function(data) {
                 var apos = data.search('voc::');
                 var bpos = data.search('::voc');
                 if(apos>=0 && bpos>=0 && bpos>apos){
                   if( data.search('voc::Error:')>=0 ){
                     consolePrint(data.substring(apos+5,bpos) + ' -- failed to launch AWS Console');
                   } else {
                     window.open(data.substring(apos+5,bpos), "EMMANUEL ARHU");
                   }
                 } else {
                   consolePrint('Failed to launch AWS Console');
                 }
              }
           });

  }
  function launchC9()
  {
     $.ajax({
        url: "../util/vcput.php?vockey=4ccbd337cdcd897ff6a099c76e4f2b078b7e9ebecc0431f932b05a84a2ce13d8&a=getawsc9&asnid=2791722&userid=3209731&mode=s&version=0",
        data: {},
        success: function(data) {
           var apos = data.search('voc::');
           var bpos = data.search('::voc');
           if(apos>=0 && bpos>=0 && bpos>apos){
             if( data.search('voc::Error:')>=0 ){
               consolePrint(data.substring(apos+5,bpos) + ' -- failed to launch Cloud9 Console');
             } else {
               window.open(data.substring(apos+5,bpos), "EMMANUEL ARHU");
             }
           } else {
             consolePrint('Failed to launch Cloud9 Console');
           }
        }
     });
  }
  
  function launchAppStream()
  {
    return false;
  }
  
  var jupyterRootUri;
  function launchJupyter()
  {
    
    return false;
  }


                  

  var vocPanelTerminalTryMax = 20; // 10s

  function vocTerminalTabTimeout(el, vm, counter)
  {
    if (el.contentWindow.tabReadyForCmd(vm['name']))
    {
      el.contentWindow.executeCommandOnTab(vm['name'], 'exec ' + vm['ssh_cmd']);
      return;
    }
    counter += 1;
    if (counter <= vocPanelTerminalTryMax)
    {
      setTimeout(vocTerminalTabTimeout, 500, el, vm, counter);
    }
    else
    {
      alert("Could not open new tab in terminal");
    }
  }

  function vocTerminalTimeoutInternal(el, vm, isNewWin)
  {
    if (isNewWin)
    {
      el.contentWindow.setTabTitle(0, vm['name']);
      el.contentWindow.executeCommand('exec ' + vm['ssh_cmd']);
    }
    else
    {
      if (el.contentWindow.createTabIfNoneExists(vm['name']) == true)
      {
        // so a new tab is being created - we need to wait for it
        // no need for else clause - coz the above call will focus on the correct tab
        setTimeout(vocTerminalTabTimeout, 500, el, vm, 0);
      }
    }
  }

  function vocTerminalTimeout(el, vm, isNewWin, counter)
  { 
     try 
     {
       if (el.contentWindow.vocTerminalIsAvailable())
       {
         setTimeout(vocTerminalTimeoutInternal, 500, el, vm, isNewWin);
         return;
       }
     }
     catch(err)
     {
       // nothing to do - we'll just try again
     }

     counter += 1;
     if (counter <= vocPanelTerminalTryMax)
     {
       setTimeout(vocTerminalTimeout, 500, el, vm, isNewWin, counter);
     }
     else
     {
       alert("Could not start terminal");
     }
  }

  function restartRunningContainer() {
    show_voc_gritter(true, "Restarting container...", true);
    // Call a blocking end lab then a launch
    $.ajax({
      url: "../util/vcput.php?a=restartclabs&stepid=2791722&version=0&labworkdir=/home/nowhere",
    })
    .done(function(data) {
      var result = JSON.parse(data);
      if (result['status'] != 'success') {
        show_voc_gritter(true, result['message'] + ", please reload the page", true);
      } else {
        // Reload iframe to point to new proxy on runserver
        launchclabs();
        // Difficult calling directly after launchclabs due to asyc functions inside
        setTimeout(show_voc_gritter, 10000, true, "Container restarted", false);
      }
    })
    .fail(function(data) {
      show_voc_gritter(true, "Restart container failed, please reload the page", true);
    });
  }

  function checkForLabStatus(state, substate, labName, replaceImage, restartContainer)
  {
    $.ajax({
      url: "../util/vcput.php?a=vcGetLabInfo&stepid=2791722&version=0&labworkdir=/home/nowhere",
    })
    .done(function(data) {
      try {
        var result = JSON.parse(data);
        if (result['status'] == 'Error') {
          show_voc_gritter(true, "Could not get lab information: " + result['msg'], true);
          $('#saveimagetext').html('Save Image');
        }
        else {
          state = result['lab_state'];
          // Failed state means container is still paused, could happen during a large image push
          if (state != "Ready" && state != "Failed") {
            show_voc_gritter(true, "Unexpected lab state: " + state + ", please verify that the image was saved", true);
            $('#saveimagetext').html('Save Image');
          }
          else {
            // Check substate
            if (result['lab_substate'] == 'Failed') {
              show_voc_gritter(true, "Failed to save image", true);
              $('#saveimagetext').html('Save Image');
            }
            else if (result['lab_substate'] == 'Saved') {
              show_voc_gritter(true, "Image saved", false);
              $('#saveimagetext').html('Save Image');
              if (replaceImage) {
                $.ajax({
                  url: "../util/vcput.php?a=UpdatePartLabsConfigFromName&partid=2791722&labName=" + labName,
                })
                .done(function(data) {
                  if (restartContainer) {
                    restartRunningContainer();
                  }
                })
                .fail(function(data, textStatus, jqXHR) {
                  show_voc_gritter(true, "Error replacing the current image, please update it manually in part settings", true);
                });
              }
            }
            else {
              show_voc_gritter(false, result['lab_substate'], true);
              setTimeout(checkForLabStatus, 5000, state, substate, labName, replaceImage, restartContainer);
            }
          }
        }
      } catch(err) {
        show_voc_gritter(false, "Could not get lab1 information", true);
        $('#saveimagetext').html('Save Image');
      }
    })
    .fail(function(data, textStatus, jqXHR) {
      show_voc_gritter(false, "Could not get lab2 information", true);
      $('#saveimagetext').html('Save Image');
    });
    
    return;
  }

                  
  $('.vmtoolbarbtn').click(function(e) 
  {
    
    var vm_indx = e.target.dataset.indx;
    var jqxhr = $.ajax("../util/vcput.php?a=vcGetLabInfo&stepid=2791722&version=0&labworkdir=/home/nowhere" + '&novnc=1' + '&vm_indx=' + vm_indx)
      .done(function(data, textStatus, jqXHR)
      {
        try 
        {
          var result = JSON.parse(data);
          if (result['status'] == 'Error')
          {
             show_voc_gritter(false, "Could not get lab information: " + result['msg'], true);
          }
          else
          {
            state = result['lab_state'];

            // get the appropriate container/vm
            vm = result['vms'][vm_indx];
            state = vm['state'];
                    
            if (state != "Ready")
            {
              bootbox.dialog("This machine is not in Ready state; please launch it before attempting to access it.", 
                             [{
                               "label" : "Ok",
                               "class" : "btn vocbtn-ac vocbtn-action",
                             }]
              );
            }
            else
            {
              if ((typeof vm['novnc_proxy'] !== "undefined") && vm['novnc_proxy']) 
              {
                $('#panel2Iframe').attr("src", vm['novnc_proxy']);
              }
              else if ((typeof vm['ssh_cmd'] !== "undefined") && vm['ssh_cmd']) 
              {
                console.log(vm);
                console.log(result);

                // Three cases:
                // 
                // 1. no terminal has ever been launched
                //    - start terminal
                //    - ssh cntnr
                // 2. terminal disappeared
                //    - "press" the launch button
                //    - ssh cntnr
                // 3. terminal is present
                //    - check if tab for this vm is already there
                //      - if so, select it
                //      - if not, open a new tab and ssh cntnr

                var isNewWin = true;
                const termExp = /\/terminal\//;
                var telement = document.getElementById('panel2Iframe');
                if ($('#panel2Iframe').attr("src") == "")
                {
                  $('#panel2Iframe').attr("src", "/terminal/?uid=3209731&token=");
                }
                else if (termExp.test($('#panel2Iframe').attr("src")) === false)
                {
                  $('#panel2Iframe').attr("src", "/terminal/?uid=3209731&token=");
                }
                else if (! telement.contentWindow.vocTerminalIsAvailable())
                {
                  console.log("voc-start-term");
                  telement.contentWindow.vocStartTerminal();
                }
                else
                {
                  isNewWin = false;
                }
                setTimeout(vocTerminalTimeout, 500, telement, vm, isNewWin, 0);
              }
              else if ((typeof vm['err'] !== "undefined") && vm['err'])
              {
                bootbox.dialog("Unable to access:  " + vm['err'], 
                               [{
                                 "label" : "Ok",
                                 "class" : "btn vocbtn-ac vocbtn-action",
                               }]
                );                      
              }
            }
          }
        }
        catch(err)
        {
          console.log("Exception: " + err);
          show_voc_gritter(false, "Could not get lab1 information", true);
        }
      })
      .fail(function(data, textStatus, jqXHR)
      {
        show_voc_gritter(false, "Could not get lab2 information", true);
      });
  });

                  function reallyResetClab()
                  {
                    show_voc_gritter_duration(true, "Resetting lab...", true, 15);
                    $.ajax({
                      url: "../util/vcput.php?a=resetclabsblocking&stepid=2791722&version=0&labworkdir=/home/nowhere",
                    })
                     .done(function(ret_val) {
                       $.gritter.removeAll();
                       // wait for "None" state - when we have the new container-server flow (and don't use blocking above)
                       // setTimeout(waitForNoneState, 5000, "endResetClab");
                       setTimeout(show_voc_gritter, 1000, false, "Lab Reset Done", false);
                     })
                     .fail(function(ret_val) {
                       $.gritter.removeAll();
                       setTimeout(show_voc_gritter, 1000, false, "Reset failed", true);
                     });
                  }

                  function resetclabs()
                  {
                    $.ajax({
                      url: "../util/vcput.php?a=vcGetLabInfo&stepid=2791722&version=0&labworkdir=/home/nowhere",
                    })
                     .done(function(data) {
                       try {
                         var result = JSON.parse(data);
                         if (result['status'] == 'Error') {
                           show_voc_gritter(false, "Could not get lab information: " + result['msg'], true);
                         }
                         else {
                           state = result['lab_state'];
                           if (state == "Ready") {
                             bootbox.dialog("The lab cannot be reset while it is running; please end the lab before proceeding.", 
                                            [{
                                              "label" : "Ok",
                                              "class" : "btn vocbtn-ac vocbtn-action",
                                            }]
                             );
                           }
                           else {
                             reallyResetClab();
                           }
                         }
                       } catch(err) {
                         show_voc_gritter(false, "Could not get lab1 information", true);
                       }
                     })
                     .fail(function(data, textStatus, jqXHR) {
                       show_voc_gritter(false, "Could not get lab2 information", true);
                     });
                    
                    return;
                  }

                  function confirmLabReset()
                  {
                    bootbox.dialog("The operation will remove all host-mounted writeable data stores (such as databases).<br><br>Press Ok to continue or Cancel to abort.", 
                               [
                                 {
                                   "label" : "Ok",
                                   "class" : "btn vocbtn-ac vocbtn-action",
                                   "callback": function() {
                                     resetclabs();
                                   }
                                 },
                                 {
                                   "label" : "Cancel",
                                   "class" : "btn vocbtn-ac vocbtn-status"
                                 }                                   
                               ]
                    );
                  }

                  function reallySaveClab(labName, replaceImage, restartContainer)
                  {
                    show_voc_gritter_duration(true, "Saving image...", true, 15);
                    $.ajax({
                      url: "../util/vcput.php?a=saveclabs&stepid=2791722&version=0&labworkdir=/home/nowhere&overwrite=1&labname=" + labName,
                    })
                    .done(function(data) {
                      $.gritter.removeAll();
                      try {
                        var result = JSON.parse(data);
                        if (result['status'] == 'Failed') {
                          setTimeout(show_voc_gritter, 1000, true, "Save failed: " + result['message'], true);
                          $('#saveimagetext').html('Save Image');
                        } else {
                          // so the save has started; we now need to poll to check for status and completion
                          setTimeout(checkForLabStatus, 5000, 'Ready', 'Saved', labName, replaceImage, restartContainer);
                        }
                      } catch (err) {
                        setTimeout(show_voc_gritter, 1000, true, "Save failed with exception: " + err, true);
                        $('#saveimagetext').html('Save Image');
                      }
                    })
                    .fail(function(data) {
                      $.gritter.removeAll();
                      setTimeout(show_voc_gritter, 1000, true, "Save failed", true);
                      $('#saveimagetext').html('Save Image');
                    });
                  }

                  function saveclabs(labName, replaceImage, restartContainer)
                  {
                    $.ajax({
                      url: "../util/vcput.php?a=vcGetLabInfo&stepid=2791722&version=0&labworkdir=/home/nowhere",
                    })
                    .done(function(data) {
                      try {
                        var result = JSON.parse(data);
                        if (result['status'] == 'Error') {
                          show_voc_gritter(false, "Could not get lab information: " + result['msg'], true);
                        }
                        else {
                          state = result['lab_state'];
                          if (state != "Ready") {
                            bootbox.dialog("An image cannot be saved without a running container, please start one before proceeding.", 
                                          [{
                                            "label" : "Ok",
                                            "class" : "btn vocbtn-ac vocbtn-action",
                                          }]
                            );
                            $('#saveimagetext').html('Save Image');
                          }
                          else {
                            reallySaveClab(labName, replaceImage, restartContainer);
                          }
                        }
                      } catch(err) {
                        show_voc_gritter(false, "Could not get lab1 information", true);
                        $('#saveimagetext').html('Save Image');
                      }
                    })
                    .fail(function(data, textStatus, jqXHR) {
                      show_voc_gritter(false, "Could not get lab2 information", true);
                      $('#saveimagetext').html('Save Image');
                    });
                    
                    return;
                  }

        function useSlipDays() {
          var data = "";
          var urlval = "../util/vcput.php?m=editor&vocajax=1&stepid=" + 2791722 + "&a=useMySlipDays&caller=ide&ajaxData=1&q1=asnid=" + 2791721;
          $.ajax({
           type: "POST",
           url: urlval,
           data: data
          })
          .done(function(ret_val) {
                if (ret_val.indexOf('<ERROR:INVALID_SESSION>') !== -1) { // invalid session
                  refreshNewSessionPage();                                    
                }
                resp = jQuery.parseJSON(ret_val);
                if (resp.success !== 'true') {
                    show_voc_gritter(true, 'Failed: ' + resp.msg, true);
                } else {
                // success
                    if( (typeof resp.msg !== "undefined") && resp.msg ) {
                      show_voc_gritter(true, 'Failed: ' + resp.msg, true);
                    } else {
                      show_voc_gritter(false, resp.ret_arg1 + ' slip day(s) used', false);
                    }
                }       
                return false;   
            })
            .fail(function(ret_val) {
                    show_voc_gritter(false, ' Operation failed. Please try again', true);
                    return false;
            });
        }

        $('#useSlipDays').click(function() {
          var str = "Are you sure you want to use slip days for your submission?";
          bootbox.dialog(str, 
                         [{
                           "label" : "Yes",
                           "class" : "btn vocbtn-ac vocbtn-action",
                           "callback": function() {
                               useSlipDays();
                           }
                         }, 
                          {
                            "label" : "Cancel",
                            "class" : "btn vocbtn-ac vocbtn-status"
                          }]
          );
        });

        var wcClusterSshCmd = "";

        function showclusteract(display)
        {
                  var jqxhr = $.ajax('../util/vcput.php?a=clusterInfo'
                                   + '&courseid='+ 117181                                   + '&asnid='+ 2791721                      
                                   + '&stepid='+ 2791722                                   + '&userid='+ 3209731                                   + '&asnuserid='+ 0)
                                   .done(function(data, textStatus, jqXHR)
                                     {
                                       try {
					 var result = JSON.parse(data);
                                         if (result['status'] == 'Error')
                                         {
                                           show_voc_gritter(false, "Could not get cluster information: " + result['msg'], true);
                                         }
                                         else
                                         {
                                           var state_status = result['cluster_state'];
                                           if ((result['cluster_status'] !== undefined) && (result['cluster_status'] != 'Ok'))
                                           {
                                             state_status = state_status + ' (' + result['cluster_status'] + ')';
                                           }
                                           if ((result['cluster_ssh_cmd'] !== undefined) && (result['cluster_ssh_cmd'] != ''))
                                           {
                                             wcClusterSshCmd = result['cluster_ssh_cmd'];
                                           }
                                           if (display == true)
                                           {
                                             var target = document.getElementById("report_cluster_msg_box");
                                             target.innerHTML = "<strong>Status: </strong>" + state_status + "<br>"
                                                              + "<strong>Cluster IP: </strong>" + result['cluster_ip'] + "<br>"
                                                              + "<strong>SSH Cmd: </strong>" + wcClusterSshCmd;
                                             $('#modal-table-report-cluster').modal('show');
                                           }
				         }
                                       }
                                       catch(err)
                                       {
                                         show_voc_gritter(false, "Could not get cluster1 information", true);
                                       }
                                     })
                                   .fail(function(data, textStatus, jqXHR)
                                     {
                                       show_voc_gritter(false, "Could not get cluster2 information", true);
                                     });
                      
        }
                  
        $('#clusterStartOld').click(function()
        {
                    var jqxhr = $.ajax('../util/vcput.php?a=clusterStartOld'
                                       + '&courseid='+ 117181                                       + '&asnid='+ 2791721                      
                                       + '&stepid='+ 2791722                                       + '&userid='+ 3209731                                       + '&asnuserid='+ 3209731)
                                   .done(function(data, textStatus, jqXHR)
                                     {
                                       try {
					 var result = JSON.parse(data);
                                         if (result['status'] == 'Error')
                                         {
                                           show_voc_gritter(false, "Could not start cluster: " + result['msg'], true);
                                         }
                                         else
                                         {
                                           // ok - got some information back...
                                           msg = "Unknown";
                                           switch (result['state'])
                                           {
                                             case null:
                                             case "Unknown":
                                               msg = "Launching a new cluster; this operation will take a few minutes.";
                                               break;
                                             case "Launching":
                                               msg = "A new cluster is currently being launched.";
                                               break;
                                             case "Starting":
                                               msg = "A new cluster is currently being started.";
                                               break;
                                             case "Stopped":
                                             case "Stopping":
                                               msg = "The cluster is being restarted.";
                                               break;
                                             case "Running":
                                               msg = "The cluster is already running.";
                                               break;
                                             case "Failed":
                                               msg = "The cluster is in failed state; please contact Vocareum Technical Support to resolve this.";
                                               break;
                                           }
                                           bootbox.dialog(msg, 
                                                          [{
                                                            "label" : "Ok",
                                                            "class" : "btn vocbtn-ac vocbtn-action",
                                                          }]);
                                         }
				       }
                                       catch(err)
                                       {
                                         show_voc_gritter(false, "Starting of cluster1 failed", true);
                                       }
                                     })
                                   .fail(function(data, textStatus, jqXHR)
                                     {
                                       show_voc_gritter(false, "Starting of cluster2 failed", true);
                                     });
                      
                  }
                  );

                  var clusterState = "Unknown";
                  var clusterStatus = "Unknown";
                  var clusterExtIp = "Unknown";
                  var clusterLaunchTimeAvg = 0;
                  var clusterRestartTimeAvg = 0;
                  var clusterActionTimeElapsed = 0;

                  $('#clusterdropdown').on('click', function (event) {
                    $('#clusterState').html("<i class='icon-info-sign' style='margin-right:5px'></i>" + "State: Retrieving...");
                    getClusterState();
                  });
                  function getClusterState()
                  {
                    var jqxhr = $.ajax('../util/vcput.php?a=getClusterState'
                                       + '&courseid='+ 117181                                       + '&stepid='+ 2791722                                       + '&userid='+ 3209731)
                                 .done(function(data, textStatus, jqXHR)
                                   {
                                     try 
                                     {
				       var result = JSON.parse(data);
                                       if (result['status'] == 'Error') 
                                       {
                                         show_voc_gritter(false, "Could not get cluster state: " + result['msg'], true);
                                       }
                                       else 
                                       {
                                         clusterState = result['cluster_state'];
                                         clusterStatus = result['cluster_status'];
                                         clusterExtIp = result['cluster_ext_ip'];

                                         clusterLaunchTimeAvg = result['cluster_launch_avg'];
                                         clusterRestartTimeAvg = result['cluster_restart_avg'];
                                         clusterActionTimeElapsed = result['cluster_action_time_elapsed'];

                                         showClusterState = clusterState;
                                         if (result['cluster_status'] == "Error") {
                                           showClusterState += " (Error)";
                                         }
                                         if (clusterState == "None") {
                                           showClusterState = 'Not launched';
                                         }
                                         else if (clusterState == "Ready") {
                                           wcClusterSshCmd = '';
                                           showclusteract(false);
                                         }
                                         $('#clusterState').html("<i class='icon-info-sign' style='margin-right:5px'></i>" + "State: " + showClusterState);
				       }
                                     }
                                     catch(err) 
                                     {
                                       show_voc_gritter(false, "Could not get cluster state1", true);
                                     }
                                   })
                                 .fail(function(data, textStatus, jqXHR)
                                   {
                                     show_voc_gritter(false, "Could not get cluster state2", true);
                                   });
  		  }	
                  
                  function changeClusterState(ctrlState)
                  {
                    var jqxhr = $.ajax('../util/vcput.php?a=changeClusterState'
                                     + '&courseid='+ 117181                                     + '&stepid='+ 2791722                                     + '&userid='+ 3209731                                     + '&ctrlstate=' + ctrlState)
                                 .done(function(data, textStatus, jqXHR)
                                   {
                                     try 
                                     {
				       var result = JSON.parse(data);
                                       if (result['status'] == 'Error') 
                                       {
                                         show_voc_gritter(false, "Could not change cluster state: " + result['msg'], true);
                                       }
                                     }
                                     catch(err) 
                                     {
                                       show_voc_gritter(false, "Could not change cluster state1", true);
                                     }
                                   })
                                 .fail(function(data, textStatus, jqXHR)
                                   {
                                     show_voc_gritter(false, "Could not change cluster state2", true);
                                   });
                  }

                  $('#clusterStart').on('click', function (e) {
                    var str = "";
                    if (clusterState == "Ready") {
                      str = "The cluster is already in the Ready state; resetting the Idle timer...";
                      bootbox.dialog(str,
                                     [
                                       {
                                         "label" : "Ok",
                                         "class" : "btn vocbtn-ac vocbtn-action",
                                         "callback": function() {
                                           changeClusterState(4);
                                         }
                                       }
                                     ]);
                    } else {
                      str = "Are you sure you want to start the cluster?<br><br>Click Yes to continue or No to cancel.";
                      bootbox.dialog(str,
                                     [
                                       {
                                         "label" : "Yes",
                                         "class" : "btn vocbtn-ac vocbtn-action",
                                         "callback": function() {
                                                                                        changeClusterState(4);
                                                                                    }
                                       },
                                      {
                                        "label" : "No",
                                        "class" : "btn vocbtn-ac vocbtn-status"
                                      }
                                     ]);
                    }
                  });
                  $('#clusterStop').on('click', function (e) {
                    var str = "";

                    if (    (clusterState == "Ready")
                         || ((clusterState == "Starting" || clusterState == "Initializing") && (clusterStatus == "Error"))) {
                      str = "Are you sure you want to stop the cluster?<br><br>Click Yes to continue or No to cancel.";
                      bootbox.dialog(str,
                                     [
                                       {
                                         "label" : "Yes",
                                         "class" : "btn vocbtn-ac vocbtn-action",
                                         "callback": function() {
                                           changeClusterState(5);
                                         }
                                       },
                                      {
                                        "label" : "No",
                                        "class" : "btn vocbtn-ac vocbtn-status"
                                      }
                                     ]);
                    }
                    else {
                      str = "The cluster is neither running nor in an Error state.";
                      bootbox.dialog(str,
                                     [
                                       {
                                         "label" : "Ok",
                                         "class" : "btn vocbtn-ac vocbtn-action",
                                       }
                                     ]);
                    }
                  });

                  $('#clusterReInit').on('click', function (e) {
                    var str = "";
                    if ((clusterState != "Ready") && (clusterState != "Initializing")) {
                      str = "The cluster is not running.";
                      bootbox.dialog(str,
                                     [
                                       {
                                         "label" : "Ok",
                                         "class" : "btn vocbtn-ac vocbtn-action",
                                       }
                                     ]);
                    } else {
                      str = "The instructor's init script will be run on the cluster.<br><br><strong>Warning:</strong> This operation will <strong>re-format</strong> the namenode.<br><br>Click Ok to start the operation or Cancel to quit.";
                      bootbox.dialog(str,
                                     [
                                       {
                                         "label" : "Ok",
                                         "class" : "btn vocbtn-ac vocbtn-action",
                                         "callback": function() {
                                           changeClusterState(2);
                                         }
                                       },
                                      {
                                        "label" : "Cancel",
                                        "class" : "btn vocbtn-ac vocbtn-status"
                                      }
                                     ]);
                    }
                  });
                  $('#clusterTerminate').on('click', function (e) {
                    var str = "";
                    if (clusterState == "None") {
                      str = "The cluster is not running.";
                      bootbox.dialog(str,
                                     [
                                       {
                                         "label" : "Ok",
                                         "class" : "btn vocbtn-ac vocbtn-action",
                                       }
                                     ]);
                    } else {
                      str = "Are you sure you want to terminate the cluster?<br><br><strong>Warning:</strong> This operation <strong>cannot</strong> be undone.<br><br>Click Yes to continue or No to cancel.";
                      bootbox.dialog(str,
                                     [
                                       {
                                         "label" : "Yes",
                                         "class" : "btn vocbtn-ac vocbtn-action",
                                         "callback": function() {
                                           changeClusterState(6);
                                         }
                                       },
                                       {
                                         "label" : "No",
                                         "class" : "btn vocbtn-ac vocbtn-status"
                                       }
                                     ]);
                    }
                  });
                    
                  function showClouderaUI(type)
                  {
                    var str = "";
                    if (clusterState != 'Ready') {
                      str = "The cluster is not running at this time.";
                      bootbox.dialog(str,
                                     [
                                       {
                                         "label" : "Ok",
                                         "class" : "btn vocbtn-ac vocbtn-action",
                                       }
                                     ]);
                    } else {
                      if (clusterExtIp == "Unknown") {
                        str = "Could not determine cluster ip address";
                        bootbox.dialog(str,
                                       [
                                         {
                                           "label" : "Ok",
                                           "class" : "btn vocbtn-ac vocbtn-action",
                                         }
                                       ]);
                      } else {
                        if (type == "ssh") {
                          wcSendSshCmd();
                        }
                        else if (type == "manager") {
                          window.open("http://" + clusterExtIp + ":7180");
                        }
                        else {
                          window.open("http://" + clusterExtIp + ":8889");
                        }
                      }
                    }
                    $('#actionsdropdown_liactions2').parent().removeClass('open').attr('aria-expanded', 'false');
                  }

                  $(".clouderaButton").click(function() {
                    var $type = $(this).data("command");
                    showClouderaUI($type);
                  });


                  var last_saved_ide_indent = 4;
                  var last_saved_ide_t2s = "1";
                  
                  function saveIdeOptions()
                  {
                                        var ind = $("#ide_indent_size").find("option:selected").text();
                    var t2s = 0;
                    if ($('#ide_tab_to_spaces').is(':checked')) {
                      t2s = 1;
                    }
                    if ((ind != last_saved_ide_indent) || (t2s != last_saved_ide_t2s))
                    {
                      if (ind != last_saved_ide_indent)
                      {
                        last_saved_ide_indent = ind;
                        editor.setOption("indentUnit", last_saved_ide_indent);
                      }
                      if (t2s != last_saved_ide_t2s)
                      {
                        last_saved_ide_t2s = t2s;
                        if (t2s == 0)
                        {
                          editor.setOption("extraKeys", { Tab: vocDefaultTab });
                        }
                        else
                        {
                          editor.setOption("extraKeys", { Tab: vocBetterTab });
                        }
                      }
                      
                      var jqxhr = $.ajax('../util/vcput.php?a=saveIdeOptions'
                                       + '&stepid='+ 2791722                                       + '&userid='+ 3209731                                       + '&indent_size=' + ind
                                       + '&tab_to_spaces=' + t2s)
                                   .done(function(data, textStatus, jqXHR)
                                     {
                                       try {
					 var result = JSON.parse(data);
                                         if (result['status'] == 'Error')
                                         {
                                           show_voc_gritter(false, "Saving of IDE data failed: " + result['msg'], true);
                                         }
				       } catch(err) {
                                         show_voc_gritter(false, "Saving of IDE data 1 failed", true);
                                       }
                                     })
                                   .fail(function(data, textStatus, jqXHR) {
                                     show_voc_gritter(false, "Saving of IDE data 2 failed", true);
                                   });
                      
                    }
                  }
                  
                  $('#actionsdropdown_liactions2').on('click', function (event) {
                    if ($('#actionsdropdown_liactions2').parent().hasClass('open'))
                    {
                      saveIdeOptions();
                    }
                    $(this).parent().toggleClass('open').attr('aria-expanded', $(this).parent().hasClass('open')?'true':'false');
                  });

                  $('body').on('click', function (e) {
                    if (  !$('#liactions2').is(e.target)
                        && ($('#liactions2').has(e.target).length === 0)
                        && ($('.open').has(e.target).length === 0))
                    {
                      if ($('#actionsdropdown_liactions2').parent().hasClass('open'))
                      {
                        $('#actionsdropdown_liactions2').parent().removeClass('open').attr('aria-expanded', 'false');
                        saveIdeOptions();
                      }
                    }
                  });

                  $( document ).ready(function() {
                                      });

                  function wcSetupTerminal()
                  {
                    // send the ssh cmd
                    // first check of terminal is still open
                    //     if yes - send cmd
                    //     if not - start it
                    var telement = document.getElementById('terminalIframe');
                    if (! telement.contentWindow.vocTerminalIsAvailable())
                    {
                      telement.contentWindow.vocStartTerminal();
                    }
                    else
                    {
                      telement.contentWindow.executeCommand(wcClusterSshCmd);
                    }
                  }

                  var wcShowClusterState = 'Unknown';
                  var wcClusterWaitAvgTime = 0;
                  var wcClusterTimeElapsed = 0;
                  var wcClusterShowProgressTimeout;

                  function wcPeriodicCheckClusterState()
                  {
                    getClusterState();
                    // has the state changed? the above function is non-blocking so we'll see it next time around
                    if (wcShowClusterState != showClusterState)
                    {
                      wcShowClusterState = showClusterState;
                      $('#waitCluster_header').text("Cluster: " + wcShowClusterState);
                      // state changed
                      // if Ready state, great
                      // otherwise it's Error state - what to do?? Show msg and "Ok" button
                      if (clusterStatus == 'Error')
                      {
                        $('#waitClusterMsg').text("There was an error starting your cluster; please terminate it and try again.");
                        $('#waitClusterButton').prop('disabled', false);
                      }
                      else
                      {
                        switch (clusterState)
                        {
                          case "Ready":
                            clearTimeout(wcClusterShowProgressTimeout);
                            wcSetProgressBar(100);
                            $('#waitClusterMsg').text("Your cluster is now ready for use.");
                            $('#waitClusterButton').prop('disabled', false);
                            wcSetupTerminal();
                            break;

                          case "Starting":
                          case "Initializing":
                          case "Launching":
                            setTimeout(wcPeriodicCheckClusterState, 3000);
                            break;

                          default:
                            $('#waitClusterMsg').text("The cluster is in an unexpected state; please terminate it and try again.");
                            clearTimeout(wcClusterShowProgressTimeout);
                            $('#waitClusterButton').prop('disabled', false);
                            break;
                        }
                      }
                    }
                    else
                    {
                      setTimeout(wcPeriodicCheckClusterState, 3000);
                    }
                  }

                  function wcSetProgressBar(val)
                  {
                    $progressBar = $('#waitClusterProgress');
                    $progressBar
                      .attr('data-percent', val + '%')
                      .find('.bar')
                      .css({
                        width: val + '%'
                      });
                  }

                  function wcPeriodicShowProgress()
                  {
                    wcClusterTimeElapsed += 0.5;
                    wcClusterWaitProgress = Math.floor(100 * wcClusterTimeElapsed / wcClusterWaitAvgTime);
                    if (wcClusterWaitProgress >= 100) { wcClusterWaitProgress = 99; } // 100 will be set when the state changes
                    wcSetProgressBar(wcClusterWaitProgress);
                    wcClusterShowProgressTimeout = setTimeout(wcPeriodicShowProgress, 500);
                  }
                  
                  function wcShowModal(clusterState)
                  {
                    // should we show the progress bar or the spinner?
                    wcClusterWaitAvgTime = 0;
                    switch (clusterState)
                    {
                      case "Terminated":
                      case "Launching":
                      case "None":
                        wcClusterWaitAvgTime = clusterLaunchTimeAvg;
                        break;

                      case "Stopped":
                      case "Starting":
                        wcClusterWaitAvgTime = clusterRestartTimeAvg;
                        break;
                    }
                    if (wcClusterWaitAvgTime > 0)
                    {
                      if (  (clusterState == "Launching")
                         || (clusterState == "Starting") )
                      {
                        if ((clusterActionTimeElapsed > 0) && (clusterActionTimeElapsed < wcClusterWaitAvgTime))
                        {
                          wcClusterTimeElapsed = clusterActionTimeElapsed;
                        }
                        else
                        {
                          wcClusterTimeElapsed = 0;
                        }
                      }
                      $('#waitClusterProgress').show();
                      $('#waitClusterSpinner').hide();
                      wcClusterShowProgressTimeout = setTimeout(wcPeriodicShowProgress, 500);
                    }
                    else
                    {
                      $('#waitClusterSpinner').show();
                      $('#waitClusterProgress').hide();
                    }

                    $('#waitCluster').modal();
                    // start the monitoring process
                    setTimeout(wcPeriodicCheckClusterState, 2000);
                  }
                  
                  function wcCheckForClusterState()
                  {
                    if (clusterState == "Unknown")
                    {
                      setTimeout(wcCheckForClusterState, 500);
                      return;
                    }
                    wcShowClusterState = showClusterState;
                    $('#waitCluster_header').text("Cluster: " + wcShowClusterState);

                    // If the state is Stopped/Terminated/Launching/Starting/Initializing, bring up modal
                    // If state is Stopped/Terminate, start cluster
                    switch (clusterState)
                    {
                      case "Stopped":
                      case "Terminated":
                      case "None":
                        changeClusterState(4);
                        if (clusterState == "Stopped")
                        {
                          stateStr = "Starting";
                        }
                        else
                        {
                          stateStr = "Launching";
                        }
                        $('#waitCluster_header').text("Cluster: " + stateStr);
                        wcShowModal(clusterState);
                        break;
                      case "Starting":
                      // case "Initializing":
                      case "Launching":
                        wcShowModal(clusterState);
                        break;
                    }
                  }

                  var wcSshWait = 0;
                  var wcClusterSshCmdWaitMax = 6;

                  function wcWaitForSshCmd()
                  {
                    while ((wcClusterSshCmd == '') && (wcSshWait < wcClusterSshCmdWaitMax))
                    {
                      wcSshWait += 1;
                      setTimeout(wcWaitForSshCmd, 500);
                    }
                    if (wcClusterSshCmd == '')
                    {
                      str = "Unable to determine cluster ssh cmd; please try again in a few seconds.";
                      bootbox.dialog(str,
                                     [
                                       {
                                         "label" : "Ok",
                                         "class" : "btn vocbtn-ac vocbtn-action",
                                       }
                                     ]);
                    }
                  }

                  function wcSendSshCmd()
                  {
                    if (wcClusterSshCmd != '')
                    {
                      document.getElementById('terminalIframe').contentWindow.executeCommand(wcClusterSshCmd);
                    }
                    else
                    {
                      wcSshWait = 0;
                      showclusteract(false);
                      setTimeout(wcWaitForSshCmd, 500);
                    }
                  }

                  function wcTestLater()
                  {
                    clearTimeout(wcClusterShowProgressTimeout);
                    wcSetProgressBar(100);
                    wcSendSshCmd();
                    $('#waitClusterMsg').text("Your cluster is now ready for use.");
                    $('#waitClusterButton').prop('disabled', false);
                  }
                  function wcTestSetupProgress()
                  {
                    // setup the variables and show the progress bar
                    wcClusterTimeElapsed = 0;
                    wcClusterWaitAvgTime = 8;
                    $('#waitClusterProgress').show();
                    wcClusterShowProgressTimeout = setTimeout(wcPeriodicShowProgress, 500);
                  }
                  function wcTest()
                  {
                    if (1)
                    {
                      $('#waitClusterSpinner').hide();
                      wcTestSetupProgress();
                    }
                    else
                    {
                      $('#waitClusterSpinner').show();
                      $('#waitClusterProgress').hide();
                    }
                    $('#waitCluster').modal();
                    setTimeout(wcTestLater, 20000);
                  }

                  function wcStartCluster()
                  {
                    // wcTest();
                    getClusterState();
                    setTimeout(wcCheckForClusterState, 500);                    
                  }

                  function wcAutoStartCluster()
                  {
                    // need to reset the modal elements first
                    $('#waitCluster_header').text("Cluster");
                    $('#waitClusterMsg').text("Your cluster is being started. This operation may take a few minutes.");
                    $('#waitClusterButton').prop('disabled', true);
                    wcClusterTimeElapsed = 0;
                    wcSetProgressBar(0);
                    setTimeout(wcStartCluster, 1000);
                  }

	          $(document).ready(function() {
                                        
                  });
            
            // When window is loaded, add global escape hatch
            $(window).load(function () {
              // adds the force tab escape hatch
                document.addEventListener('keydown', forceTabHandler);
                try {
                  if (typeof terminalIframe !== 'undefined' && terminalIframe) {
                    var terminal_el = (terminalIframe.document.body); //getElementsByClassName("terminal"))[1];
                    if(typeof terminal_el != 'undefined') terminal_el.addEventListener("keydown", forceTabHandler);
                  }
                } catch(e) {
                  console.error(e);
                }
            });

            // Adds ctrl + ` and ctrl + shift + ` as force escape hatches for keyboard-only
            function forceTabHandler(e) {
              // if escape + tab is pressed
              if((e.ctrlKey) && !e.shiftKey && (e.keyCode == 192 || e.keyCode == 27)) e.preventDefault(), console.log(document.activeElement), focusNextElement();
              else if(e.ctrlKey && e.shiftKey && (e.keyCode == 192 || e.keyCode == 27)) e.preventDefault(), console.log(document.activeElement), focusPrevElement();
            }
            
            function focusNextElement () {
              //add all elements we want to include in our selection
              var focussableElements = 'a:not([disabled]), button:not([disabled]), input[type=text]:not([disabled]), [tabindex]:not([disabled]):not([tabindex="-1"]), iframe:not([disabled]):not([tabindex="-1"])';
              if (document.activeElement) {
                  var focussable = Array.prototype.filter.call(document.querySelectorAll(focussableElements),
                  function (element) {
                      //check for visibility while always include the current activeElement 
                      return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement
                }); 
                  
                  var index = focussable.indexOf(document.activeElement);
         
                  if(index > -1) {        
                     var nextElement = focussable[index + 1] || focussable[0];
                     nextElement.focus();
                  } else {
                    var nextElement = focussable[0];
                     nextElement.focus();
                  }         
              }
          }
          
          function focusPrevElement () {
              //add all elements we want to include in our selection
              var focussableElements = 'a:not([disabled]), button:not([disabled]), input[type=text]:not([disabled]), [tabindex]:not([disabled]):not([tabindex="-1"]), iframe:not([disabled]):not([tabindex="-1"])';
              if (document.activeElement) {
                  var focussable = Array.prototype.filter.call(document.querySelectorAll(focussableElements),
                  function (element) {
                      //check for visibility while always include the current activeElement 
                      return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement
                  });
                  var index = focussable.indexOf(document.activeElement);
                  
                  if(index > -1) {
                     var prevElement = focussable[index - 1] || focussable[focussable.length - 1];
                     prevElement.focus();
                  }                    
              }
          }
  
  $(window).on('mouseenter', function() {
    $(window).focus();
  });
  
  // For new architecture, on window focus, re-set the container cookies
  $(window).focus(function() {
      if(containerCookies && false) {
        try {
          // Resolves for container's cookie data
          var cookieData = containerCookies.split(';')[0].split('=');
          var containerCookieName = cookieData[0];
          var containerCookieValue = cookieData[1];
          
          // Resolves for stored cookie data based on expected cookie name/value
          var storedCookieValue = getCookie(containerCookieName);
          
          if (vcPeriodicUiCheckHandle) {
            clearTimeout(vcPeriodicUiCheckHandle);
            vcPeriodicUiCheckHandle = null;
            vcPeriodicUiCheck();
          }

          (console.log("Cookies set on Focus: " + containerCookies), document.cookie = containerCookies);

          if(storedCookieValue && storedCookieValue !== containerCookieValue)
            ( console.log("Cookie Mismatch Detected for ["+containerCookieName+"]: Setting New Cookie Values ("+storedCookieValue+") => ("+containerCookieValue+") \n\n***Refreshing Container Frame***"),
              $( '#panel2Iframe' ).attr( 'src', function ( i, val ) { return val; }));
        } catch(e) {
          console.log("Error: Could not resolve Cookie Data");
        }
      }
  });
  
  function getCookie(cname) {
    let name = cname + "=";
    let decodedCookie = decodeURIComponent(document.cookie);
    let ca = decodedCookie.split(';');
    for(let i = 0; i <ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) == ' ') {
        c = c.substring(1);
      }
      if (c.indexOf(name) == 0) {
        return c.substring(name.length, c.length);
      }
    }
    return null;
  }

  // Handles dropdown menu behavior for the special case sub-menu ('Actions' dropdown)    
  $('#apps_dd_submenu a').on('focusin focusout', function(event) {
    if(event.type == "focusin") {
      $('#apps_dd_submenu').addClass('open');
    } else {
      
      // on blur, if new focused element is not in parent element, close it
      if(!$.contains($(this).parent(), event.originalEvent.relatedTarget))
        $('#apps_dd_submenu').removeClass('open');
    }
    
    // when submenu is first opened, switch focus to first element in submenu
    if(!$(event.target).hasClass('appbutton') && !$(event.target).hasClass('appstopbutton'))
      $(this).nextUntil('a').focus();
  });
	</script>
	

	


                </div>
            </div>
        
                
        

        <div id="push" tabindex="0"></div>

        <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/ace-elements.js"></script>
        <script src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/jquery.colorbox-min.js"></script>

        <!-- functions start : remove unused ones -->
        <!-- PCHECK -->
        <script type="text/javascript">

            /*
                This section handles auto-hiding the sections in the user dropdown menu.
            */
            let nav_dropdown_sections = $(".nav-dropdown-section");
            let nav_dropdown_sections_count = 0;
            nav_dropdown_sections.each(function() {
                let licount = $(this).find("li").length;

                if (licount < 2) { //1 default <li> element per section for section header
                    // Hide the current section
                    $(this).hide();
                } else {
                    nav_dropdown_sections_count++;
                }
            });
            if(nav_dropdown_sections_count == 1) $("#account_section_bar").hide();


            function voc_set_tabindex() {
                $(".vocelem").each(function (i) {
                    $(this).attr('tabindex', i + 1);
                });
            }

            $('#navbar-inner-div').off('keydown');
            $('#navbar-inner-div').attach_accesible_handler();

            //when user acknowledges the msg banner, remove it from URL so it
            //doesn't reappear on page refresh
            $(".close_msg_banner").on("click", function() {
                switch($(this).data('msg-banner')) {
                    case "error":
                        removeUrlParam(["e", "e_hash"]);
                        break;
                    case "warn":
                        removeUrlParam(["w", "w_hash"]);
                        break;
                    case "success":
                        removeUrlParam(["success", "s_hash"]);
                        break;
                }
            });

            $(function () {

                
                $('textarea[class*=autosize]').autosize({append: "\n"});

                $('#accordion2').on('hide', function (e) {
                    $(e.target).prev().children(0).addClass('collapsed');
                })
                $('#accordion2').on('hidden', function (e) {
                    $(e.target).prev().children(0).addClass('collapsed');
                })
                $('#accordion2').on('show', function (e) {
                    $(e.target).prev().children(0).removeClass('collapsed');
                })
                $('#accordion2').on('shown', function (e) {
                    $(e.target).prev().children(0).removeClass('collapsed');
                })

                $('#accordion-style').on('click', function (ev) {
                    var target = $('input', ev.target);
                    var which = parseInt(target.val());
                    if (which == 2) $('#accordion').addClass('accordion-style2');
                    else $('#accordion').removeClass('accordion-style2');
                });

                var oldie = /msie\s*(8|7|6)/.test(navigator.userAgent.toLowerCase());
                $('.easy-pie-chart.percentage').each(function () {
                    $(this).easyPieChart({
                        barColor: $(this).data('color'),
                        trackColor: '#EEEEEE',
                        scaleColor: false,
                        lineCap: 'butt',
                        lineWidth: 8,
                        animate: oldie ? false : 1000,
                        size: 75
                    }).css('color', $(this).data('color'));
                });

                $('[data-rel=tooltip]').tooltip();
                $('[data-rel=popover]').popover({html: true});
                $('#spinner-opts small').css({display: 'inline-block', width: '60px'});

                var slide_styles = ['', 'green', 'red', 'purple', 'orange', 'dark'];
                var ii = 0;
                $("#spinner-opts input[type=text]").each(function () {
                    var $this = $(this);
                    $this.hide().after('<span />');
                    $this.next().addClass('ui-slider-small').addClass("inline ui-slider-" + slide_styles[ii++ % slide_styles.length]).css({'width': '125px'}).slider({
                        value: parseInt($this.val()),
                        range: "min",
                        animate: true,
                        min: parseInt($this.data('min')),
                        max: parseInt($this.data('max')),
                        step: parseFloat($this.data('step')),
                        slide: function (event, ui) {
                        $this.attr('value', ui.value);
                        spinner_update();
                        }
                    });
                });


                $.fn.spin = function (opts) {
                    this.each(function () {
                        var $this = $(this),
                        data = $this.data();

                        if (data.spinner) {
                            data.spinner.stop();
                            delete data.spinner;
                        }
                        if (opts !== false) {
                            data.spinner = new Spinner($.extend({color: $this.css('color')}, opts)).spin(this);
                        }
                    });
                    return this;
                };

                function spinner_update() {
                    var opts = {};
                    $('#spinner-opts input[type=text]').each(function () {
                        opts[this.name] = parseFloat(this.value);
                    });
                    $('#spinner-preview').spin(opts);
                }


                $('#id-pills-stacked').removeAttr('checked').on('click', function () {
                    $('.nav-pills').toggleClass('nav-stacked');
                });


            });
        </script>
        <!-- functions end -->


        <!-- it might be used by both TA and grader so putting it under main.php -->
        <script>
        function hideNamesOnDashboard() {
            $('.studentNameDashboard').addClass('hidden-1');
            $('.anonymousInfoDashboard').removeClass('hidden-1');
        }

        function showNamesOnDashboard() {
            $('.studentNameDashboard').removeClass('hidden-1');
            $('.anonymousInfoDashboard').addClass('hidden-1');
        }

        $('#showHideStudentNameDashboard').on('click', function () {
            if ($(this).text() == 'Hide Names') {
                hideNamesOnDashboard();
                $(this).html('Show Names');
                hideNamesDashboard = 1;
            } else {
                showNamesOnDashboard();
                $(this).html('Hide Names');
                hideNamesDashboard = 0;
            }
        });
        </script>

    <script defer="defer" src="227-[LX]-Lab%20-%20Linux%20Command%20Line_files/vedd3670a3b1c4e178fdfb0cc912d969e1713874337387" integrity="sha512-EzCudv2gYygrCcVhu65FkAxclf3mYM6BCwiGUm6BEuLzSb5ulVhgokzCZED7yMIkzYVg65mxfIBNdNra5ZFNyQ==" data-cf-beacon="{&quot;rayId&quot;:&quot;87e5b77e4fff9526&quot;,&quot;version&quot;:&quot;2024.4.1&quot;,&quot;token&quot;:&quot;a73834a4a1444e9ab89e8da06da41720&quot;}" crossorigin="anonymous"></script>


<div id="cboxOverlay" style="display: none;"></div><div id="colorbox" class="" role="dialog" tabindex="-1" style="display: none;"><div id="cboxWrapper"><div><div id="cboxTopLeft" style="float: left;"></div><div id="cboxTopCenter" style="float: left;"></div><div id="cboxTopRight" style="float: left;"></div></div><div style="clear: left;"><div id="cboxMiddleLeft" style="float: left;"></div><div id="cboxContent" style="float: left;"><div id="cboxTitle" style="float: left;"></div><div id="cboxCurrent" style="float: left;"></div><button type="button" id="cboxPrevious"></button><button type="button" id="cboxNext"></button><button id="cboxSlideshow"></button><div id="cboxLoadingOverlay" style="float: left;"></div><div id="cboxLoadingGraphic" style="float: left;"></div></div><div id="cboxMiddleRight" style="float: left;"></div></div><div style="clear: left;"><div id="cboxBottomLeft" style="float: left;"></div><div id="cboxBottomCenter" style="float: left;"></div><div id="cboxBottomRight" style="float: left;"></div></div></div><div style="position: absolute; width: 9999px; visibility: hidden; display: none;"></div></div><textarea tabindex="-1" style="position: absolute; inset: -999px auto auto 0px; border: 0px; box-sizing: content-box; overflow-wrap: break-word; height: 0px !important; min-height: 0px !important; overflow: hidden; transition: none;"></textarea></body></html>