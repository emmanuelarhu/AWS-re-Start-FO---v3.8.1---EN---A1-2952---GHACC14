<!DOCTYPE html>
<html><head>
<meta http-equiv="content-type" content="text/html; charset=UTF-8">
<meta charset="UTF-8"><meta name="viewport" content="width=device-width initial-scale=1">

<link href="README_data/css.css" rel="stylesheet" type="text/css"><style type="text/css">html {overflow-x: initial !important;}:root { --bg-color: #ffffff; --text-color: #333333; --select-text-bg-color: #B5D6FC; --select-text-font-color: auto; --monospace: "Lucida Console",Consolas,"Courier",monospace; --title-bar-height: 20px; }
.mac-os-11 { --title-bar-height: 28px; }
html { font-size: 14px; background-color: var(--bg-color); color: var(--text-color); font-family: "Helvetica Neue", Helvetica, Arial, sans-serif; -webkit-font-smoothing: antialiased; }
h1, h2, h3, h4, h5 { white-space: pre-wrap; }
body { margin: 0px; padding: 0px; height: auto; inset: 0px; font-size: 1rem; line-height: 1.428571; overflow-x: hidden; background-image: inherit; background-size: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: inherit; tab-size: 4; background-position: inherit; background-repeat: inherit; }
iframe { margin: auto; }
a.url { word-break: break-all; }
a:active, a:hover { outline: 0px; }
.in-text-selection, ::selection { text-shadow: none; background: var(--select-text-bg-color); color: var(--select-text-font-color); }
#write { margin: 0px auto; height: auto; width: inherit; word-break: normal; overflow-wrap: break-word; position: relative; white-space: normal; overflow-x: visible; padding-top: 36px; }
#write.first-line-indent p { text-indent: 2em; }
#write.first-line-indent li p, #write.first-line-indent p * { text-indent: 0px; }
#write.first-line-indent li { margin-left: 2em; }
.for-image #write { padding-left: 8px; padding-right: 8px; }
body.typora-export { padding-left: 30px; padding-right: 30px; }
.typora-export .footnote-line, .typora-export li, .typora-export p { white-space: pre-wrap; }
.typora-export .task-list-item input { pointer-events: none; }
@media screen and (max-width: 500px) {
  body.typora-export { padding-left: 0px; padding-right: 0px; }
  #write { padding-left: 20px; padding-right: 20px; }
}
#write li > figure:last-child { margin-bottom: 0.5rem; }
#write ol, #write ul { position: relative; }
img { max-width: 100%; vertical-align: middle; image-orientation: from-image; }
button, input, select, textarea { color: inherit; font-family: inherit; font-size: inherit; font-style: inherit; font-variant-caps: inherit; font-weight: inherit; font-stretch: inherit; line-height: inherit; }
input[type="checkbox"], input[type="radio"] { line-height: normal; padding: 0px; }
*, ::after, ::before { box-sizing: border-box; }
#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p, #write pre { width: inherit; }
#write h1, #write h2, #write h3, #write h4, #write h5, #write h6, #write p { position: relative; }
p { line-height: inherit; }
h1, h2, h3, h4, h5, h6 { break-after: avoid-page; break-inside: avoid; orphans: 4; }
p { orphans: 4; }
h1 { font-size: 2rem; }
h2 { font-size: 1.8rem; }
h3 { font-size: 1.6rem; }
h4 { font-size: 1.4rem; }
h5 { font-size: 1.2rem; }
h6 { font-size: 1rem; }
.md-math-block, .md-rawblock, h1, h2, h3, h4, h5, h6, p { margin-top: 1rem; margin-bottom: 1rem; }
.hidden { display: none; }
.md-blockmeta { color: rgb(204, 204, 204); font-weight: 700; font-style: italic; }
a { cursor: pointer; }
sup.md-footnote { padding: 2px 4px; background-color: rgba(238, 238, 238, 0.7); color: rgb(85, 85, 85); border-radius: 4px; cursor: pointer; }
sup.md-footnote a, sup.md-footnote a:hover { color: inherit; text-transform: inherit; text-decoration: inherit; }
#write input[type="checkbox"] { cursor: pointer; width: inherit; height: inherit; }
figure { overflow-x: auto; margin: 1.2em 0px; max-width: calc(100% + 16px); padding: 0px; }
figure > table { margin: 0px; }
thead, tr { break-inside: avoid; break-after: auto; }
thead { display: table-header-group; }
table { border-collapse: collapse; border-spacing: 0px; width: 100%; overflow: auto; break-inside: auto; text-align: left; }
table.md-table td { min-width: 32px; }
.CodeMirror-gutters { border-right-width: 0px; background-color: inherit; }
.CodeMirror-linenumber { -webkit-user-select: none; }
.CodeMirror { text-align: left; }
.CodeMirror-placeholder { opacity: 0.3; }
.CodeMirror pre { padding: 0px 4px; }
.CodeMirror-lines { padding: 0px; }
div.hr:focus { cursor: none; }
#write pre { white-space: pre-wrap; }
#write.fences-no-line-wrapping pre { white-space: pre; }
#write pre.ty-contain-cm { white-space: normal; }
.CodeMirror-gutters { margin-right: 4px; }
.md-fences { font-size: 0.9rem; display: block; break-inside: avoid; text-align: left; overflow: visible; white-space: pre; background-image: inherit; background-size: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: inherit; position: relative !important; background-position: inherit; background-repeat: inherit; }
.md-fences-adv-panel { width: 100%; margin-top: 10px; text-align: center; padding-top: 0px; padding-bottom: 8px; overflow-x: auto; }
#write .md-fences.mock-cm { white-space: pre-wrap; }
.md-fences.md-fences-with-lineno { padding-left: 0px; }
#write.fences-no-line-wrapping .md-fences.mock-cm { white-space: pre; overflow-x: auto; }
.md-fences.mock-cm.md-fences-with-lineno { padding-left: 8px; }
.CodeMirror-line, twitterwidget { break-inside: avoid; }
svg { break-inside: avoid; }
.footnotes { opacity: 0.8; font-size: 0.9rem; margin-top: 1em; margin-bottom: 1em; }
.footnotes + .footnotes { margin-top: 0px; }
.md-reset { margin: 0px; padding: 0px; border: 0px; outline: 0px; vertical-align: top; text-decoration: none; text-shadow: none; float: none; position: static; width: auto; height: auto; white-space: nowrap; cursor: inherit; line-height: normal; font-weight: 400; text-align: left; box-sizing: content-box; direction: ltr; background-position: 0px 0px; }
li div { padding-top: 0px; }
blockquote { margin: 1rem 0px; }
li .mathjax-block, li p { margin: 0.5rem 0px; }
li blockquote { margin: 1rem 0px; }
li { margin: 0px; position: relative; }
blockquote > :last-child { margin-bottom: 0px; }
blockquote > :first-child, li > :first-child { margin-top: 0px; }
.footnotes-area { color: rgb(136, 136, 136); margin-top: 0.714rem; padding-bottom: 0.143rem; white-space: normal; }
#write .footnote-line { white-space: pre-wrap; }
@media print {
  body, html { border: 1px solid transparent; height: 99%; break-after: avoid; break-before: avoid; font-variant-ligatures: no-common-ligatures; }
  #write { margin-top: 0px; border-color: transparent !important; padding-top: 0px !important; padding-bottom: 0px !important; }
  .typora-export * { print-color-adjust: exact; }
  .typora-export #write { break-after: avoid; }
  .typora-export #write::after { height: 0px; }
  .is-mac table { break-inside: avoid; }
  #write > p:nth-child(1) { margin-top: 0px; }
  .typora-export-show-outline .typora-export-sidebar { display: none; }
  figure { overflow-x: visible; }
}
.footnote-line { margin-top: 0.714em; font-size: 0.7em; }
a img, img a { cursor: pointer; }
pre.md-meta-block { font-size: 0.8rem; min-height: 0.8rem; white-space: pre-wrap; background-color: rgb(204, 204, 204); display: block; overflow-x: hidden; }
p > .md-image:only-child:not(.md-img-error) img, p > img:only-child { display: block; margin: auto; }
#write.first-line-indent p > .md-image:only-child:not(.md-img-error) img { left: -2em; position: relative; }
p > .md-image:only-child { display: inline-block; width: 100%; }
#write .MathJax_Display { margin: 0.8em 0px 0px; }
.md-math-block { width: 100%; }
.md-math-block:not(:empty)::after { display: none; }
.MathJax_ref { fill: currentcolor; }
[contenteditable="true"]:active, [contenteditable="true"]:focus, [contenteditable="false"]:active, [contenteditable="false"]:focus { outline: 0px; box-shadow: none; }
.md-task-list-item { position: relative; list-style-type: none; }
.task-list-item.md-task-list-item { padding-left: 0px; }
.md-task-list-item > input { position: absolute; top: 0px; left: 0px; margin-left: -1.2em; margin-top: calc(1em - 10px); border: none; }
.math { font-size: 1rem; }
.md-toc { min-height: 3.58rem; position: relative; font-size: 0.9rem; border-radius: 10px; }
.md-toc-content { position: relative; margin-left: 0px; }
.md-toc-content::after, .md-toc::after { display: none; }
.md-toc-item { display: block; color: rgb(65, 131, 196); }
.md-toc-item a { text-decoration: none; }
.md-toc-inner:hover { text-decoration: underline; }
.md-toc-inner { display: inline-block; cursor: pointer; }
.md-toc-h1 .md-toc-inner { margin-left: 0px; font-weight: 700; }
.md-toc-h2 .md-toc-inner { margin-left: 2em; }
.md-toc-h3 .md-toc-inner { margin-left: 4em; }
.md-toc-h4 .md-toc-inner { margin-left: 6em; }
.md-toc-h5 .md-toc-inner { margin-left: 8em; }
.md-toc-h6 .md-toc-inner { margin-left: 10em; }
@media screen and (max-width: 48em) {
  .md-toc-h3 .md-toc-inner { margin-left: 3.5em; }
  .md-toc-h4 .md-toc-inner { margin-left: 5em; }
  .md-toc-h5 .md-toc-inner { margin-left: 6.5em; }
  .md-toc-h6 .md-toc-inner { margin-left: 8em; }
}
a.md-toc-inner { font-size: inherit; font-style: inherit; font-weight: inherit; line-height: inherit; }
.footnote-line a:not(.reversefootnote) { color: inherit; }
.reversefootnote { font-family: ui-monospace, sans-serif; }
.md-attr { display: none; }
.md-fn-count::after { content: "."; }
code, pre, samp, tt { font-family: var(--monospace); }
kbd { margin: 0px 0.1em; padding: 0.1em 0.6em; font-size: 0.8em; color: rgb(36, 39, 41); background-color: rgb(255, 255, 255); border: 1px solid rgb(173, 179, 185); border-radius: 3px; box-shadow: rgba(12, 13, 14, 0.2) 0px 1px 0px, rgb(255, 255, 255) 0px 0px 0px 2px inset; white-space: nowrap; vertical-align: middle; }
.md-comment { color: rgb(162, 127, 3); opacity: 0.6; font-family: var(--monospace); }
code { text-align: left; }
a.md-print-anchor { white-space: pre !important; border: none !important; display: inline-block !important; position: absolute !important; width: 1px !important; right: 0px !important; outline: 0px !important; text-shadow: initial !important; background-position: 0px 0px !important; }
.os-windows.monocolor-emoji .md-emoji { font-family: "Segoe UI Symbol", sans-serif; }
.md-diagram-panel > svg { max-width: 100%; }
[lang="flow"] svg, [lang="mermaid"] svg { max-width: 100%; height: auto; }
[lang="mermaid"] .node text { font-size: 1rem; }
table tr th { border-bottom-width: 0px; }
video { max-width: 100%; display: block; margin: 0px auto; }
iframe { max-width: 100%; width: 100%; border: none; }
.highlight td, .highlight tr { border: 0px; }
mark { background-color: rgb(255, 255, 0); color: rgb(0, 0, 0); }
.md-html-inline .md-plain, .md-html-inline strong, mark .md-inline-math, mark strong { color: inherit; }
.md-expand mark .md-meta { opacity: 0.3 !important; }
mark .md-meta { color: rgb(0, 0, 0); }
@media print {
  .typora-export h1, .typora-export h2, .typora-export h3, .typora-export h4, .typora-export h5, .typora-export h6 { break-inside: avoid; }
}
.md-diagram-panel .messageText { stroke: none !important; }
.md-diagram-panel .start-state { fill: var(--node-fill); }
.md-diagram-panel .edgeLabel rect { opacity: 1 !important; }
.md-fences.md-fences-math { font-size: 1em; }
.md-fences-advanced:not(.md-focus) { padding: 0px; white-space: nowrap; border: 0px; }
.md-fences-advanced:not(.md-focus) { background-image: inherit; background-size: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: inherit; background-position: inherit; background-repeat: inherit; }
.typora-export-show-outline .typora-export-content { max-width: 1440px; margin: auto; display: flex; flex-direction: row; }
.typora-export-sidebar { width: 300px; font-size: 0.8rem; margin-top: 80px; margin-right: 18px; }
.typora-export-show-outline #write { --webkit-flex: 2; flex: 2 1 0%; }
.typora-export-sidebar .outline-content { position: fixed; top: 0px; max-height: 100%; overflow: hidden auto; padding-bottom: 30px; padding-top: 60px; width: 300px; }
@media screen and (max-width: 1024px) {
  .typora-export-sidebar, .typora-export-sidebar .outline-content { width: 240px; }
}
@media screen and (max-width: 800px) {
  .typora-export-sidebar { display: none; }
}
.outline-content li, .outline-content ul { margin-left: 0px; margin-right: 0px; padding-left: 0px; padding-right: 0px; list-style: none; overflow-wrap: anywhere; }
.outline-content ul { margin-top: 0px; margin-bottom: 0px; }
.outline-content strong { font-weight: 400; }
.outline-expander { width: 1rem; height: 1.428571rem; position: relative; display: table-cell; vertical-align: middle; cursor: pointer; padding-left: 4px; }
.outline-expander::before { content: ""; position: relative; font-family: Ionicons; display: inline-block; font-size: 8px; vertical-align: middle; }
.outline-item { padding-top: 3px; padding-bottom: 3px; cursor: pointer; }
.outline-expander:hover::before { content: ""; }
.outline-h1 > .outline-item { padding-left: 0px; }
.outline-h2 > .outline-item { padding-left: 1em; }
.outline-h3 > .outline-item { padding-left: 2em; }
.outline-h4 > .outline-item { padding-left: 3em; }
.outline-h5 > .outline-item { padding-left: 4em; }
.outline-h6 > .outline-item { padding-left: 5em; }
.outline-label { cursor: pointer; display: table-cell; vertical-align: middle; text-decoration: none; color: inherit; }
.outline-label:hover { text-decoration: underline; }
.outline-item:hover { border-color: rgb(245, 245, 245); background-color: var(--item-hover-bg-color); }
.outline-item:hover { margin-left: -28px; margin-right: -28px; border-left-width: 28px; border-left-style: solid; border-left-color: transparent; border-right-width: 28px; border-right-style: solid; border-right-color: transparent; }
.outline-item-single .outline-expander::before, .outline-item-single .outline-expander:hover::before { display: none; }
.outline-item-open > .outline-item > .outline-expander::before { content: ""; }
.outline-children { display: none; }
.info-panel-tab-wrapper { display: none; }
.outline-item-open > .outline-children { display: block; }
.typora-export .outline-item { padding-top: 1px; padding-bottom: 1px; }
.typora-export .outline-item:hover { margin-right: -8px; border-right-width: 8px; border-right-style: solid; border-right-color: transparent; }
.typora-export .outline-expander::before { content: "+"; font-family: inherit; top: -1px; }
.typora-export .outline-expander:hover::before, .typora-export .outline-item-open > .outline-item > .outline-expander::before { content: "−"; }
.typora-export-collapse-outline .outline-children { display: none; }
.typora-export-collapse-outline .outline-item-open > .outline-children, .typora-export-no-collapse-outline .outline-children { display: block; }
.typora-export-no-collapse-outline .outline-expander::before { content: "" !important; }
.typora-export-show-outline .outline-item-active > .outline-item .outline-label { font-weight: 700; }
.md-inline-math-container mjx-container { zoom: 0.95; }
mjx-container { break-inside: avoid; }


.CodeMirror { height: auto; }
.CodeMirror.cm-s-inner { background-image: inherit; background-size: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: inherit; background-position: inherit; background-repeat: inherit; }
.CodeMirror-scroll { overflow: auto hidden; z-index: 3; }
.CodeMirror-gutter-filler, .CodeMirror-scrollbar-filler { background-color: rgb(255, 255, 255); }
.CodeMirror-gutters { border-right-width: 1px; border-right-style: solid; border-right-color: rgb(221, 221, 221); background-image: inherit; background-size: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: inherit; white-space: nowrap; background-position: inherit; background-repeat: inherit; }
.CodeMirror-linenumber { padding: 0px 3px 0px 5px; text-align: right; color: rgb(153, 153, 153); }
.cm-s-inner .cm-keyword { color: rgb(119, 0, 136); }
.cm-s-inner .cm-atom, .cm-s-inner.cm-atom { color: rgb(34, 17, 153); }
.cm-s-inner .cm-number { color: rgb(17, 102, 68); }
.cm-s-inner .cm-def { color: rgb(0, 0, 255); }
.cm-s-inner .cm-variable { color: rgb(0, 0, 0); }
.cm-s-inner .cm-variable-2 { color: rgb(0, 85, 170); }
.cm-s-inner .cm-variable-3 { color: rgb(0, 136, 85); }
.cm-s-inner .cm-string { color: rgb(170, 17, 17); }
.cm-s-inner .cm-property { color: rgb(0, 0, 0); }
.cm-s-inner .cm-operator { color: rgb(152, 26, 26); }
.cm-s-inner .cm-comment, .cm-s-inner.cm-comment { color: rgb(170, 85, 0); }
.cm-s-inner .cm-string-2 { color: rgb(255, 85, 0); }
.cm-s-inner .cm-meta { color: rgb(85, 85, 85); }
.cm-s-inner .cm-qualifier { color: rgb(85, 85, 85); }
.cm-s-inner .cm-builtin { color: rgb(51, 0, 170); }
.cm-s-inner .cm-bracket { color: rgb(153, 153, 119); }
.cm-s-inner .cm-tag { color: rgb(17, 119, 0); }
.cm-s-inner .cm-attribute { color: rgb(0, 0, 204); }
.cm-s-inner .cm-header, .cm-s-inner.cm-header { color: rgb(0, 0, 255); }
.cm-s-inner .cm-quote, .cm-s-inner.cm-quote { color: rgb(0, 153, 0); }
.cm-s-inner .cm-hr, .cm-s-inner.cm-hr { color: rgb(153, 153, 153); }
.cm-s-inner .cm-link, .cm-s-inner.cm-link { color: rgb(0, 0, 204); }
.cm-negative { color: rgb(221, 68, 68); }
.cm-positive { color: rgb(34, 153, 34); }
.cm-header, .cm-strong { font-weight: 700; }
.cm-del { text-decoration: line-through; }
.cm-em { font-style: italic; }
.cm-link { text-decoration: underline; }
.cm-error { color: red; }
.cm-invalidchar { color: red; }
.cm-constant { color: rgb(38, 139, 210); }
.cm-defined { color: rgb(181, 137, 0); }
div.CodeMirror span.CodeMirror-matchingbracket { color: rgb(0, 255, 0); }
div.CodeMirror span.CodeMirror-nonmatchingbracket { color: rgb(255, 34, 34); }
.cm-s-inner .CodeMirror-activeline-background { background-image: inherit; background-size: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: inherit; background-position: inherit; background-repeat: inherit; }
.CodeMirror { position: relative; overflow: hidden; }
.CodeMirror-scroll { height: 100%; outline: 0px; position: relative; box-sizing: content-box; background-image: inherit; background-size: inherit; background-attachment: inherit; background-origin: inherit; background-clip: inherit; background-color: inherit; background-position: inherit; background-repeat: inherit; }
.CodeMirror-sizer { position: relative; }
.CodeMirror-gutter-filler, .CodeMirror-hscrollbar, .CodeMirror-scrollbar-filler, .CodeMirror-vscrollbar { position: absolute; z-index: 6; display: none; outline: 0px; }
.CodeMirror-vscrollbar { right: 0px; top: 0px; overflow: hidden; }
.CodeMirror-hscrollbar { bottom: 0px; left: 0px; overflow: auto hidden; }
.CodeMirror-scrollbar-filler { right: 0px; bottom: 0px; }
.CodeMirror-gutter-filler { left: 0px; bottom: 0px; }
.CodeMirror-gutters { position: absolute; left: 0px; top: 0px; padding-bottom: 10px; z-index: 3; overflow-y: hidden; }
.CodeMirror-gutter { white-space: normal; height: 100%; box-sizing: content-box; padding-bottom: 30px; margin-bottom: -32px; display: inline-block; }
.CodeMirror-gutter-wrapper { position: absolute; z-index: 4; border: none !important; background-position: 0px 0px !important; }
.CodeMirror-gutter-background { position: absolute; top: 0px; bottom: 0px; z-index: 4; }
.CodeMirror-gutter-elt { position: absolute; cursor: default; z-index: 4; }
.CodeMirror-lines { cursor: text; }
.CodeMirror pre { border-radius: 0px; border-width: 0px; font-family: inherit; font-size: inherit; margin: 0px; white-space: pre; overflow-wrap: normal; color: inherit; z-index: 2; position: relative; overflow: visible; background-position: 0px 0px; }
.CodeMirror-wrap pre { overflow-wrap: break-word; white-space: pre-wrap; word-break: normal; }
.CodeMirror-code pre { border-right-width: 30px; border-right-style: solid; border-right-color: transparent; width: fit-content; }
.CodeMirror-wrap .CodeMirror-code pre { border-right-style: none; width: auto; }
.CodeMirror-linebackground { position: absolute; inset: 0px; z-index: 0; }
.CodeMirror-linewidget { position: relative; z-index: 2; overflow: auto; }
.CodeMirror-wrap .CodeMirror-scroll { overflow-x: hidden; }
.CodeMirror-measure { position: absolute; width: 100%; height: 0px; overflow: hidden; visibility: hidden; }
.CodeMirror-measure pre { position: static; }
.CodeMirror div.CodeMirror-cursor { position: absolute; visibility: hidden; border-right-style: none; width: 0px; }
.CodeMirror div.CodeMirror-cursor { visibility: hidden; }
.CodeMirror-focused div.CodeMirror-cursor { visibility: inherit; }
.cm-searching { background-color: rgba(255, 255, 0, 0.4); }
span.cm-underlined { text-decoration: underline; }
span.cm-strikethrough { text-decoration: line-through; }
.cm-tw-syntaxerror { color: rgb(255, 255, 255); background-color: rgb(153, 0, 0); }
.cm-tw-deleted { text-decoration: line-through; }
.cm-tw-header5 { font-weight: 700; }
.cm-tw-listitem:first-child { padding-left: 10px; }
.cm-tw-box { border-style: solid; border-right-width: 1px; border-bottom-width: 1px; border-left-width: 1px; border-color: inherit; border-top-width: 0px !important; }
.cm-tw-underline { text-decoration: underline; }
@media print {
  .CodeMirror div.CodeMirror-cursor { visibility: hidden; }
}


:root {
    --side-bar-bg-color: #fafafa;
    --control-text-color: #777;
}

@include-when-export url(https://fonts.loli.net/css?family=Open+Sans:400italic,700italic,700,400&subset=latin,latin-ext);

/* open-sans-regular - latin-ext_latin */
  /* open-sans-italic - latin-ext_latin */
    /* open-sans-700 - latin-ext_latin */
    /* open-sans-700italic - latin-ext_latin */
  html {
    font-size: 16px;
    -webkit-font-smoothing: antialiased;
}

body {
    font-family: "Open Sans","Clear Sans", "Helvetica Neue", Helvetica, Arial, 'Segoe UI Emoji', sans-serif;
    color: rgb(51, 51, 51);
    line-height: 1.6;
}

#write {
    max-width: 860px;
  	margin: 0 auto;
  	padding: 30px;
    padding-bottom: 100px;
}

@media only screen and (min-width: 1400px) {
	#write {
		max-width: 1024px;
	}
}

@media only screen and (min-width: 1800px) {
	#write {
		max-width: 1200px;
	}
}

#write > ul:first-child,
#write > ol:first-child{
    margin-top: 30px;
}

a {
    color: #4183C4;
}
h1,
h2,
h3,
h4,
h5,
h6 {
    position: relative;
    margin-top: 1rem;
    margin-bottom: 1rem;
    font-weight: bold;
    line-height: 1.4;
    cursor: text;
}
h1:hover a.anchor,
h2:hover a.anchor,
h3:hover a.anchor,
h4:hover a.anchor,
h5:hover a.anchor,
h6:hover a.anchor {
    text-decoration: none;
}
h1 tt,
h1 code {
    font-size: inherit;
}
h2 tt,
h2 code {
    font-size: inherit;
}
h3 tt,
h3 code {
    font-size: inherit;
}
h4 tt,
h4 code {
    font-size: inherit;
}
h5 tt,
h5 code {
    font-size: inherit;
}
h6 tt,
h6 code {
    font-size: inherit;
}
h1 {
    font-size: 2.25em;
    line-height: 1.2;
    border-bottom: 1px solid #eee;
}
h2 {
    font-size: 1.75em;
    line-height: 1.225;
    border-bottom: 1px solid #eee;
}

/*@media print {
    .typora-export h1,
    .typora-export h2 {
        border-bottom: none;
        padding-bottom: initial;
    }

    .typora-export h1::after,
    .typora-export h2::after {
        content: "";
        display: block;
        height: 100px;
        margin-top: -96px;
        border-top: 1px solid #eee;
    }
}*/

h3 {
    font-size: 1.5em;
    line-height: 1.43;
}
h4 {
    font-size: 1.25em;
}
h5 {
    font-size: 1em;
}
h6 {
   font-size: 1em;
    color: #777;
}
p,
blockquote,
ul,
ol,
dl,
table{
    margin: 0.8em 0;
}
li>ol,
li>ul {
    margin: 0 0;
}
hr {
    height: 2px;
    padding: 0;
    margin: 16px 0;
    background-color: #e7e7e7;
    border: 0 none;
    overflow: hidden;
    box-sizing: content-box;
}

li p.first {
    display: inline-block;
}
ul,
ol {
    padding-left: 30px;
}
ul:first-child,
ol:first-child {
    margin-top: 0;
}
ul:last-child,
ol:last-child {
    margin-bottom: 0;
}
blockquote {
    border-left: 4px solid #dfe2e5;
    padding: 0 15px;
    color: #777777;
}
blockquote blockquote {
    padding-right: 0;
}
table {
    padding: 0;
    word-break: initial;
}
table tr {
    border: 1px solid #dfe2e5;
    margin: 0;
    padding: 0;
}
table tr:nth-child(2n),
thead {
    background-color: #f8f8f8;
}
table th {
    font-weight: bold;
    border: 1px solid #dfe2e5;
    border-bottom: 0;
    margin: 0;
    padding: 6px 13px;
}
table td {
    border: 1px solid #dfe2e5;
    margin: 0;
    padding: 6px 13px;
}
table th:first-child,
table td:first-child {
    margin-top: 0;
}
table th:last-child,
table td:last-child {
    margin-bottom: 0;
}

.CodeMirror-lines {
    padding-left: 4px;
}

.code-tooltip {
    box-shadow: 0 1px 1px 0 rgba(0,28,36,.3);
    border-top: 1px solid #eef2f2;
}

.md-fences,
code,
tt {
    border: 1px solid #e7eaed;
    background-color: #f8f8f8;
    border-radius: 3px;
    padding: 0;
    padding: 2px 4px 0px 4px;
    font-size: 0.9em;
}

code {
    background-color: #f3f4f4;
    padding: 0 2px 0 2px;
}

.md-fences {
    margin-bottom: 15px;
    margin-top: 15px;
    padding-top: 8px;
    padding-bottom: 6px;
}


.md-task-list-item > input {
  margin-left: -1.3em;
}

@media print {
    html {
        font-size: 13px;
    }
    pre {
        page-break-inside: avoid;
        word-wrap: break-word;
    }
}

.md-fences {
	background-color: #f8f8f8;
}
#write pre.md-meta-block {
	padding: 1rem;
    font-size: 85%;
    line-height: 1.45;
    background-color: #f7f7f7;
    border: 0;
    border-radius: 3px;
    color: #777777;
    margin-top: 0 !important;
}

.mathjax-block>.code-tooltip {
	bottom: .375rem;
}

.md-mathjax-midline {
    background: #fafafa;
}

#write>h3.md-focus:before{
	left: -1.5625rem;
	top: .375rem;
}
#write>h4.md-focus:before{
	left: -1.5625rem;
	top: .285714286rem;
}
#write>h5.md-focus:before{
	left: -1.5625rem;
	top: .285714286rem;
}
#write>h6.md-focus:before{
	left: -1.5625rem;
	top: .285714286rem;
}
.md-image>.md-meta {
    /*border: 1px solid #ddd;*/
    border-radius: 3px;
    padding: 2px 0px 0px 4px;
    font-size: 0.9em;
    color: inherit;
}

.md-tag {
    color: #a7a7a7;
    opacity: 1;
}

.md-toc { 
    margin-top:20px;
    padding-bottom:20px;
}

.sidebar-tabs {
    border-bottom: none;
}

#typora-quick-open {
    border: 1px solid #ddd;
    background-color: #f8f8f8;
}

#typora-quick-open-item {
    background-color: #FAFAFA;
    border-color: #FEFEFE #e5e5e5 #e5e5e5 #eee;
    border-style: solid;
    border-width: 1px;
}

/** focus mode */
.on-focus-mode blockquote {
    border-left-color: rgba(85, 85, 85, 0.12);
}

header, .context-menu, .megamenu-content, footer{
    font-family: "Segoe UI", "Arial", sans-serif;
}

.file-node-content:hover .file-node-icon,
.file-node-content:hover .file-node-open-state{
    visibility: visible;
}

.mac-seamless-mode #typora-sidebar {
    background-color: #fafafa;
    background-color: var(--side-bar-bg-color);
}

.md-lang {
    color: #b4654d;
}

/*.html-for-mac {
    --item-hover-bg-color: #E6F0FE;
}*/

#md-notification .btn {
    border: 0;
}

.dropdown-menu .divider {
    border-color: #e5e5e5;
    opacity: 0.4;
}

.ty-preferences .window-content {
    background-color: #fafafa;
}

.ty-preferences .nav-group-item.active {
    color: white;
    background: #999;
}

.menu-item-container a.menu-style-btn {
    background-color: #f5f8fa;
    background-image: linear-gradient( 180deg , hsla(0, 0%, 100%, 0.8), hsla(0, 0%, 100%, 0)); 
}


 @media print { @page {margin: 0 0 0 0;} body.typora-export {padding-left: 0; padding-right: 0;} #write {padding:0;}}
</style><title>README</title>
<!-- START Inserted by CORE -->
<style type="text/css">
   #ssb_alexa_blue {
   background-color: #3366ff;
   font-weight: bold;
   font-size: 90%;
   color: white;
   position: relative;
   top: -1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   border-color: #3366ff;
   border-radius: 2px;
   white-space: nowrap
   }
   #ssb_alexa_ocean {
   background-color: #00a0d2;
   font-weight: bold;
   font-size: 90%;
   color: white;
   position: relative;
   top: -1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   border-color: #00a0d2;
   white-space: nowrap
   }
   #ssb_alexa_sand {
   background-color: #f2f2f2;
   font-weight: bold;
   font-size: 90%;
   color: #00a0d2;
   position: relative;
   top: -1px;
   border-color: #dcdcdc;
   border-style: solid;
   border-width: 2px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   white-space: nowrap
   }
   #ssb_alexa_white {
   background-color: white;
   font-weight: bold;
   font-size: 90%;
   color: #00a0d2;
   position: relative;
   top: -1px;
   border-color: #00a0d2;
   border-style: solid;
   border-width: 2px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   white-space: nowrap
   }
   #ssb_blue {
   background-color: #257ACF;
   font-weight: bold;
   font-size: 90%;
   color: white;
   position: relative;
   top: -1px;
   border-radius: 5px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   white-space: nowrap
   }
   #ssb_catalog_orange {
   background-color: #E36000;
   font-weight: bold;
   font-size: 90%;
   color: white;
   position: relative;
   top: -1px;
   border-radius: 1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   white-space: nowrap
   }
   #ssb_catalog_red {
   background-color: #D90000;
   font-weight: bold;
   font-size: 90%;
   color: white;
   position: relative;
   top: -1px;
   border-radius: 5px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   white-space: nowrap
   }
   #ssb_dark_blue {
   color: white;
   background-color: darkblue;
   border-radius: 3px;
   padding: 0px 6px;
   white-space: nowrap
   }
   #ssb_grafana_blue {
   background-color: #00678b;
   font-weight: bold;
   font-size: 90%;
   color: white;
   position: relative;
   top: -1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   border-color: #00678b;
   border-radius: 2px;
   white-space: nowrap
   }
   #ssb_grafana_green {
   background-color: #629300;
   font-weight: bold;
   font-size: 90%;
   color: white;
   position: relative;
   top: -1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   border-color: #629300;
   border-radius: 2px;
   white-space: nowrap
   }
   #ssb_grafana_orange {
   background-color: #ec8427;
   font-weight: bold;
   font-size: 90%;
   color: white;
   position: relative;
   top: -1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   border-color: #ec8427;
   border-radius: 2px;
   white-space: nowrap
   }
   #ssb_grey {
   background-color: #DEDEDE;
   font-weight: bold;
   font-size: 90%;
   color: #444;
   position: relative;
   top: -1px;
   border-radius: 5px;
   border-width: 1px;
   border-style: solid;
   border-color: #444;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   white-space: nowrap
   }
   #ssb_grey_square {
   background-color: #DEDEDE;
   font-weight: bold;
   font-size: 90%;
   color: #444;
   position: relative;
   top: -1px;
   border-radius: 1px;
   border-width: 1px;
   border-style: solid;
   border-color: #444;
   padding-top: 2px;
   padding-bottom: 2px;
   padding-left: 10px;
   padding-right: 10px;
   white-space: nowrap
   }
   #ssb_iot_blue {
   background-color: #00A1C9;
   font-weight: bold;
   font-size: 90%;
   color: white;
   position: relative;
   top: -1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   border-color: #00A1C9;
   border-radius: 2px;
   white-space: nowrap
   }
   #ssb_iot_grey {
   background-color: white;
   font-weight: bold;
   font-size: 90%;
   color: gray;
   position: relative;
   top: -1px;
   border-color: gray;
   border-radius: 2px;
   border-style: solid;
   border-width: 1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   white-space: nowrap
   }
   #ssb_iot_white {
   background-color: white;
   font-weight: bold;
   font-size: 90%;
   color: #00A1C9;
   position: relative;
   top: -1px;
   border-color: #00A1C9;
   border-radius: 2px;
   border-style: solid;
   border-width: 1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   white-space: nowrap
   }
   #ssb_kibana_blue {
   background-color: #0079a5;
   font-weight: bold;
   font-size: 90%;
   color: white;
   position: relative;
   top: -1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   border-color: #0079a5;
   border-radius: 2px;
   white-space: nowrap
   }
   #ssb_kibana_white {
   background-color: white;
   font-weight: bold;
   font-size: 90%;
   color: #0079a5;
   position: relative;
   top: -1px;
   border-color: #0079a5;
   border-radius: 2px;
   border-width: 1px;
   border-style: solid;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   white-space: nowrap
   }
   #ssb_lambda_orange {
   background-color: #ec7211;
   font-weight: bold;
   font-size: 90%;
   color: white;
   position: relative;
   top: -1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   white-space: nowrap
   }
   #ssb_lambda_white {
   background-color: white;
   font-weight: bold;
   font-size: 90%;
   color: #545b64;
   position: relative;
   top: -1px;
   border-color: #545b64;
   border-radius: 2px;
   border-width: 1px;
   border-style: solid;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   white-space: nowrap
   }
   #ssb_maroon {
   color: white;
   background-color: darkred;
   border-radius: 3px;
   padding: 0px 6px;
   white-space: nowrap
   }
   #ssb_orange {
   background-color: #ec7211;
   font-weight: bold;
   font-size: 90%;
   color: white;
   position: relative;
   top: -1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   white-space: nowrap
   }
   #ssl_orange {
   color: #ec7211;
   font-weight: bold
   }
   #ssb_orange_oval {
   background-color: #ec7211;
   font-weight: bold;
   font-size: 90%;
   color: white;
   position: relative;
   top: -1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   border-radius: 20px;
   white-space: nowrap
   }
   #ssb_oval {
   background-color: #DEDEDE;
   font-weight: bold;
   font-size: 90%;
   color: #444;
   position: relative;
   top: -1px;
   border-radius: 20px;
   border-width: 1px;
   border-style: solid;
   border-color: #444;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   }
   #ssb_start_lab {
   background-color: #34A853;
   font-weight: bold;
   font-size: 90%;
   color: white;
   border-radius: 2px;
   padding-left: 10px;
   padding-right: 10px;
   padding-top: 3px;
   padding-bottom: 3px
   }
   #ssb_open_console {
   background-color: white;
   font-family: Google Sans;
   font-weight: bold;
   font-size: 90%;
   color: #1a73e8;
   border-color: #dadce0;
   border-radius: 4px;
   border-width: 2px;
   border-style: solid;
   outline-color: #ffffff;
   padding-top: 5px;
   padding-bottom: 5px;
   padding-left: 10px;
   padding-right: 10px
   }
   #ssb_rds_white {
   background-color: white;
   font-weight: bold;
   font-size: 90%;
   color: #545b64;
   position: relative;
   top: -1px;
   border-color: #545b64;
   border-radius: 2px;
   border-width: 1px;
   border-style: solid;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   }
   #ssb_red {
   background-color: #D93025;
   font-weight: bold;
   font-size: 90%;
   color: white;
   border-radius: 2px;
   padding-left: 10px;
   padding-right: 10px;
   padding-top: 3px;
   padding-bottom: 3px
   }
   #ssb_red_oval {
   background-color: #D93025;
   font-weight: bold;
   font-size: 90%;
   color: white;
   position: relative;
   top: -1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   border-radius: 20px;
   white-space: nowrap
   }
   #ssb_s3_blue {
   background-color: #329AD6;
   font-weight: bold;
   font-size: 90%;
   color: white;
   position: relative;
   top: -1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   }
   #ssb_s3_white {
   background-color: white;
   font-weight: bold;
   font-size: 90%;
   color: #329AD6;
   position: relative;
   top: -1px;
   border-color: #329AD6;
   border-width: 1px;
   border-style: solid;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   }
   #ssb_services {
   background-color: #232f3e;
   font-weight: bold;
   font-size: 90%;
   color: white;
   position: relative;
   top: -1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   }
   #ssb_square_lex {
   background-color: white;
   font-weight: bold;
   font-size: 90%;
   color: #1166bb;
   position: relative;
   top: -1px;
   border-color: #c4cbcd;
   border-style: solid;
   border-width: 2px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px
   }
   #ssb_ssm_white {
   background-color: white;
   font-weight: bold;
   font-size: 90%;
   color: #545b64;
   position: relative;
   top: -1px;
   border-color: #545b64;
   border-radius: 2px;
   border-width: 1px;
   border-style: solid;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   }
   #ssb_white {
   background-color: white;
   font-weight: bold;
   font-size: 90%;
   color: #545b64;
   position: relative;
   top: -1px;
   border-color: #545b64;
   border-radius: 2px;
   border-width: 1px;
   border-style: solid;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   }
   #ssbox_cloudformation_blue {
   font-weight: bold;
   background-color: #f1faff;
   font-size: 90%;
   border-color: #00A1C9;
   border-width: 1px;
   border-style: solid;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   }
   #ssl_alexa_ocean {
   color: #00a0d2;
   font-weight: bold
   }
   #ssl_blue {
   color: #1166bb;
   font-weight: bold
   }
   #ssl_catalog_orange {
   color: #E16706;
   font-weight: bold
   }
   #ssb_codestar_blue {
   background-color: #329AD6;
   font-weight: bold;
   font-size: 80%;
   color: white;
   position: relative;
   top: -1px;
   border-radius: 1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   white-space: nowrap
   }
   #ssb_cognito_blue {
   background-color: #2a7fd4;
   font-weight: bold;
   font-size: 90%;
   color: white;
   position: relative;
   top: -1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   border-color: #0055aa;
   border-radius: 2px;
   white-space: nowrap
   }
   #ssb_eb_blue {
   background-color: #0f6dca;
   font-weight: bold;
   font-size: 90%;
   color: white;
   position: relative;
   top: -1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   border-color: #0055aa;
   border-width: 1px;
   border-style: solid;
   border-radius: 4px;
   white-space: nowrap;
   }
   #ssb_eb_grey {
   background-color: #e5e5e5;
   font-weight: bold;
   font-size: 90%;
   color: 444444;
   position: relative;
   top: -1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   border-color: #bbbbbb;
   border-width: 1px;
   border-style: solid;
   border-radius: 4px;
   white-space: nowrap
   }
   #ssb_voc_grey {
   background-color: #F2F3F4;
   font-size: 90%;
   color: black;
   position: relative;
   top: -1px;
   padding-top: 3px;
   padding-bottom: 3px;
   padding-left: 10px;
   padding-right: 10px;
   border-color: grey;
   border-width: 1px;
   border-style: solid;
   white-space: nowrap
   }
   </style>
<!-- END Inserted by CORE -->

<!-- START Inserted by CORE -->
<link rel="stylesheet" href="README_data/all.css" integrity="sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU" crossorigin="anonymous">
<style>
	.ssb_qwiklab_green{
		background-color: yellowgreen;
		font-weight: bold;
		font-size: 90%;
		color: white;
		border-radius: 5px;
		padding-top: 3px;
		padding-bottom: 3px;
		padding-left: 10px;
		padding-right: 10px;
		white-space: nowrap;
	}
	.ssb_blue {
		background-color: #257ACF;
		font-weight: bold;
		font-size: 90%;
		color: white;
		border-radius: 5px;
		padding-top: 3px;
		padding-bottom: 3px;
		padding-left: 10px;
		padding-right: 10px;
		white-space: nowrap;
	}
	.ssb_voc_grey {
		background-color: #F2F3F4;
		font-weight: normal;
		font-size: 90%;
		color: black;
		border-radius: 3px;
		border: 1px solid gray;
		padding-top: 5px;
		padding-bottom: 5px;
		padding-left: 6px;
		padding-right: 6px;
		white-space: nowrap;
	}
	.ssb_grey {
		background-color: #DEDEDE;
		font-weight: bold;
		font-size: 90%;
		color: #444;
		position: relative;
		top:-1px;
		border-radius: 5px;
		border-width: 1px;
		border-style: solid;
		border-color: #444;
		padding-top: 3px;
		padding-bottom: 3px;
		padding-left: 10px;
		padding-right: 10px;
		white-space: nowrap;
	}
	.ssl_alexa_ocean {
		color: #00a0d2;
		font-weight: bold;
	}

 	.ssb_services {
		background-color:#232f3e;
		font-weight:bold;
		font-size:90%;
		color:white;
		padding-top:3px;
		padding-bottom:3px;
		padding-left:10px;
		padding-right:10px;
	}

	.ssb_orange {
		background-color:#ec7211;
		font-weight:bold;
		font-size:90%;
		color:white;
		padding-top:3px;
		padding-bottom:3px;
		padding-left:10px;
		padding-right:10px;
		white-space:
		nowrap;
	}
	.ssbox_cloudformation_blue {
		font-weight:bold;
		background-color:#f1faff;
		font-size:90%;
		border-color:#00A1C9;
		border-width:1px;
		border-style:solid;
		padding-top:3px;
		padding-bottom:3px;
		padding-left:10px;
		padding-right:10px;
	}
	.ssb_ssm_white {
		background-color:white;
		font-weight:bold;
		font-size:90%;
		color:#545b64;
		border-color:#545b64;
		border-radius:2px;
		border-width:1px;
		border-style:solid;
		padding-top:3px;
		padding-bottom:3px;
		padding-left:10px;
		padding-right:10px;
	}
</style>

<!-- END Inserted by CORE -->

</head>
<body class="typora-export"><div class="typora-export-content">
<div id="write" class=""><h1 id="working-with-aws-lambda"><span>Working with AWS Lambda</span></h1><h2 id="lab-overview"><span>Lab overview</span></h2><p><span>In this lab, you deploy and configure an AWS Lambda based serverless computing solution. The Lambda function generates a sales analysis report by pulling data from a database and emailing the results daily. The database connection information is stored in Parameter Store, a capability of AWS Systems Manager. The database itself runs on an Amazon Elastic Compute Cloud (Amazon EC2) Linux, Apache, MySQL, and PHP (LAMP) instance.</span></p><p><span>The following diagram shows the architecture of the sales analysis report solution and illustrates the order in which actions occur.</span></p><p>&nbsp;</p><p><img src="README_data/lambda-activity-architecture.png" alt="Architecture diagram showing interaction between services." width="800"></p><p><span>The diagram includes the following function steps:</span></p><figure><table><thead><tr><th><span>Step</span></th><th><span>Details</span></th></tr></thead><tbody><tr><td><span>1</span></td><td><span>An Amazon CloudWatch Events event calls the salesAnalysisReport Lambda function at 8 PM every day Monday through Saturday.</span></td></tr><tr><td><span>2</span></td><td><span>The
 salesAnalysisReport Lambda function invokes another Lambda function, 
salesAnalysisReportDataExtractor, to retrieve the report data.</span></td></tr><tr><td><span>3</span></td><td><span>The salesAnalysisReportDataExtractor function runs an analytical query against the café database (cafe_db).</span></td></tr><tr><td><span>4</span></td><td><span>The query result is returned to the salesAnalysisReport function.</span></td></tr><tr><td><span>5</span></td><td><span>The
 salesAnalysisReport function formats the report into a message and 
publishes it to the salesAnalysisReportTopic Amazon Simple Notification 
Service (Amazon SNS) topic.</span></td></tr><tr><td><span>6</span></td><td><span>The salesAnalysisReportTopic SNS topic sends the message by email to the administrator.</span></td></tr></tbody></table></figure><p><span>In this lab, the Python code for each Lambda function is provided to you so that you can focus on the SysOps tasks of deploying, configuring, and testing the serverless solution components.</span></p><p>&nbsp;</p><h2 id="objectives"><span>Objectives</span></h2><p><span>After completing this lab, you will be able to do the following:</span></p><ul><li><p><span>Recognize necessary AWS Identity and Access Management (IAM) policy permissions to facilitate a Lambda function to other Amazon Web Services (AWS) resources.</span></p></li><li><p><span>Create a Lambda layer to satisfy an external library dependency.</span></p></li><li><p><span>Create Lambda functions that extract data from database, and send reports to user.</span></p></li><li><p><span>Deploy and test a Lambda function that is initiated based on a schedule and that invokes another function.</span></p></li><li><p><span>Use CloudWatch logs to troubleshoot any issues running a Lambda function.</span></p></li></ul><p>&nbsp;</p><h2 id="duration"><span>Duration</span></h2><p><span>This lab requires approximately </span><strong><span>60 minutes</span></strong><span> to complete.</span></p><p>&nbsp;</p><h2 id="accessing-the-aws-management-console"><span>Accessing the AWS Management Console</span></h2><ol start=""><li><p><span>At the top of these instructions, choose </span><span id="ssb_voc_grey"><span>Start Lab</span></span><span> to launch the lab.</span></p><p><span>A </span><strong><span>Start Lab</span></strong><span> panel opens displaying the lab status.</span></p></li><li><p><span>Wait until the message "Lab status: ready" appears, and then choose </span><strong><span>X</span></strong><span> to close the </span><strong><span>Start Lab</span></strong><span> panel.</span></p></li><li><p><span>At the top of these instructions, choose </span><span id="ssb_voc_grey"><span>AWS</span></span><span> to open the AWS Management Console on a new browser tab. The system automatically signs you in.</span></p><p><strong><span>Tip</span></strong><span> If a new browser tab does not open, a banner or icon at the top of your browser will indicate that your browser is preventing the site from opening pop-up windows. Choose the banner or icon, and choose </span><strong><span>Allow pop-ups</span></strong><span>.</span></p></li><li><p><span>Arrange the AWS Management Console so that it appears alongside these instructions. Ideally, you should be able to see both browser tabs at the same time to follow the lab steps.</span></p><p><span>Leave this browser tab open. You return to it later in this lab.</span></p><p><strong><span>Important:</span></strong><span> Do not change the lab Region unless specifically instructed to do so.</span></p></li></ol><p>&nbsp;</p><h2 id="task-1-observing-the-iam-role-settings"><span>Task 1: Observing the IAM role settings</span></h2><p><span>In this lab, you create two Lambda functions. Each function requires permissions to access the AWS resources with which they interact. </span></p><p><span>In this task, you analyze the IAM roles and the permissions that they grant to the salesAnalysisReport and salesAnalysisReportDataExtractor Lambda functions that you create later.</span></p><h3 id="task-11-observing-the-salesanalysisreport-iam-role-settings"><span>Task 1.1: Observing the salesAnalysisReport IAM role settings</span></h3><ol start="5"><li><p><span>In the AWS Management Console, choose </span><strong><span>Services</span></strong><span> &gt; </span><strong><span>Security, Identity, &amp; Compliance</span></strong><span> &gt; </span><strong><span>IAM</span></strong><span>.</span></p></li><li><p><span>In the navigation pane, choose </span><strong><span>Roles</span></strong><span>.</span></p></li><li><p><span>In the search box, enter </span><code>sales</code></p></li><li><p><span>From the filtered results, choose the </span><strong><span>salesAnalysisReportRole</span></strong><span> hyperlink.</span></p></li><li><p><span>Choose the </span><strong><span>Trust relationships</span></strong><span> tab, and notice that lambda.amazonaws.com is listed as a trusted entity, which means that the Lambda service can use this role.</span></p></li><li><p><span>Choose the </span><strong><span>Permissions</span></strong><span> tab, and notice the four policies assigned to this role. To expand each role and analyze the permissions that each policy grants, choose the </span><strong><span>+</span></strong><span> icon next to each role:</span></p><ul><li><p><strong><span>AmazonSNSFullAccess</span></strong><span> provides full access to Amazon SNS resources.</span></p></li><li><p><strong><span>AmazonSSMReadOnlyAccess</span></strong><span> provides read-only access to Systems Manager resources.</span></p></li><li><p><strong><span>AWSLambdaBasicRunRole</span></strong><span> provides write permissions to CloudWatch logs (which are required by every Lambda function).</span></p></li><li><p><strong><span>AWSLambdaRole</span></strong><span> gives a Lambda function the ability to invoke another Lambda function. </span></p></li></ul><p><span>The salesAnalysisReport Lambda function that you create later in this lab uses the salesAnalysisReportRole role.</span></p></li></ol><h3 id="task-12-observing-the-salesanalysisreportderole-iam-role-settings"><span>Task 1.2: Observing the salesAnalysisReportDERole IAM role settings</span></h3><ol start="11"><li><p><span>Choose </span><strong><span>Roles</span></strong><span> again.</span></p></li><li><p><span>In the search box, enter </span><code>sales</code></p></li><li><p><span>From the filtered results, choose the </span><strong><span>salesAnalysisReportDERole</span></strong><span> hyperlink.</span></p></li><li><p><span>Choose the </span><strong><span>Trust relationships</span></strong><span> tab, and notice that lambda.amazonaws.com is listed as a trusted entity.</span></p></li><li><p><span>Choose the </span><strong><span>Permissions</span></strong><span> tab, and notice the permissions granted to this role:</span></p><ul><li><p><strong><span>AWSLambdaBasicRunRole</span></strong><span> provides write permissions to CloudWatch logs.</span></p></li><li><p><strong><span>AWSLambdaVPCAccessRunRole</span></strong><span> provides permissions to manage elastic network interfaces to connect a function to a virtual private cloud (VPC).</span></p></li></ul></li></ol><p><span>The salesAnalysisReportDataExtractor Lambda function that you create next uses the salesAnalysisReportDERole role.</span></p><p>&nbsp;</p><h2 id="task-2-creating-a-lambda-layer-and-a-data-extractor-lambda-function"><span>Task 2: Creating a Lambda layer and a data extractor Lambda function</span></h2><p><span>In this task, you first create a Lambda layer, and then you create a Lambda function that uses the layer.</span></p><p><span>Start by downloading two required files.</span></p><ol start="16"><li><p><span>To download the lab files required by this task to your local machine, choose the following links:</span></p><p><a href="https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-100-RSJAWS-1-23732/178-activity-JAWS-working-lambda/s3/pymysql-v3.zip" target="_blank" rel="noopener noreferrer"><span>pymysql-v3.zip</span></a></p><p><a href="https://aws-tc-largeobjects.s3.us-west-2.amazonaws.com/CUR-TF-100-RSJAWS-1-23732/178-activity-JAWS-working-lambda/s3/salesAnalysisReportDataExtractor-v3.zip" target="_blank" rel="noopener noreferrer"><span>salesAnalysisReportDataExtractor-v3.zip</span></a></p><p><strong><span>Note</span></strong><span>: The salesAnalysisReportDataExtractor-v3.zip file is a Python implementation of a Lambda function that makes use of the PyMySQL open-source client library to access the MySQL café database. This library has been packaged into the pymysql-v3.zip which is uploaded to Lambda layer next.</span></p></li></ol><h3 id="task-21-creating-a-lambda-layer"><span>Task 2.1: Creating a Lambda Layer</span></h3><p><span>In the next steps, you create a Lambda layer named pymysqlLibrary and upload the client library into it so that it can be used by any function that requires it. Lambda layers provide a flexible mechanism to reuse code between functions so that the code does not have to be included in each function’s deployment package.</span></p><ol start="17"><li><p><span>In the AWS Management Console, choose </span><strong><span>Services</span></strong><span> &gt; </span><strong><span>Compute</span></strong><span> &gt; </span><strong><span>Lambda</span></strong><span>.</span></p><p><strong><span>Tip:</span></strong><span> If the navigation panel is closed, choose the collapsed menu icon (three horizontal lines) to open the </span><strong><span>AWS Lambda</span></strong><span> panel.</span></p></li><li><p><span>Choose </span><strong><span>Layers</span></strong><span>.</span></p></li><li><p><span>Choose </span><strong><span>Create layer</span></strong><span>.</span></p></li><li><p><span>Configure the following layer settings:</span></p><ul><li><p><span>For </span><strong><span>Name</span></strong><span>, enter </span><code>pymysqlLibrary</code></p></li><li><p><span>For </span><strong><span>Description</span></strong><span>, enter </span><code>PyMySQL library modules</code></p></li><li><p><span>Select </span><strong><span>Upload a .zip file</span></strong><span>. To upload the pymysql-v3.zip file, choose </span><strong><span>Upload</span></strong><span>, navigate to the folder where you downloaded the pymysql-v3.zip file, and open it.</span></p></li><li><p><span>For </span><strong><span>Compatible runtimes</span></strong><span>, choose </span><strong><span>Python 3.9</span></strong><span>.</span></p></li></ul></li><li><p><span>Choose </span><strong><span>Create</span></strong><span>.</span></p><p><span>The message "Successfully created layer pymysqlLibrary version 1" is displayed.</span></p><p><strong><span>Tip</span></strong><span>: The Lambda layers feature requires that the .zip file containing the code or library conform to a specific folder structure. The pymysqlLibary.zip file used in this lab was packaged using the following folder structure:</span></p><p><img src="README_data/layer-structure.png" referrerpolicy="no-referrer" alt="Lambda Layer directory structure showing python libraries used by the function ."></p><p><span>For more information about layer paths, see </span><a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html#configuration-layers-path" target="_blank" rel="noopener noreferrer"><span>Including Library Dependencies in a Layer</span></a><span>.</span></p></li></ol><h3 id="task-22-creating-a-data-extractor-lambda-function"><span>Task 2.2: Creating a data extractor Lambda function</span></h3><ol start="22"><li><p><span>In the navigation pane, choose </span><strong><span>Functions</span></strong><span> to open the </span><strong><span>Functions</span></strong><span> dashboard page.</span></p></li><li><p><span>Choose </span><strong><span>Create function</span></strong><span>, and configure the following options:</span></p><ul><li><p><span>At the top of the </span><strong><span>Create function</span></strong><span> page, select </span><strong><span>Author from scratch</span></strong><span>.</span></p></li><li><p><span>For </span><strong><span>Function name</span></strong><span>, enter </span><code>salesAnalysisReportDataExtractor</code></p></li><li><p><span>For </span><strong><span>Runtime</span></strong><span>, choose </span><strong><span>Python 3.9</span></strong><span>.</span></p></li><li><p><span>Expand </span><strong><span>Change default execution role</span></strong><span>, and configure the following options:    </span></p><ul><li><p><span>For </span><strong><span>Execution role</span></strong><span>, choose </span><strong><span>Use an existing role</span></strong><span>.</span></p></li><li><p><span>For </span><strong><span>Existing role:</span></strong><span>, choose </span><strong><span>salesAnalysisReportDERole</span></strong><span>.</span></p></li></ul></li></ul></li><li><p><span>Choose </span><strong><span>Create function</span></strong><span>.</span></p><p><span>A new page opens with the following message: "Successfully created the function salesAnalysisReportDataExtractor."</span></p></li></ol><h3 id="task-23-adding-the-lambda-layer-to-the-function"><span>Task 2.3: Adding the Lambda layer to the function</span></h3><ol start="25"><li><p><span>In the </span><strong><span>Function overview</span></strong><span> panel, choose </span><strong><span>Layers</span></strong><span>.</span></p></li><li><p><span>At the bottom of the page, in the </span><strong><span>Layers</span></strong><span> panel, choose </span><strong><span>Add a layer</span></strong><span>.</span></p></li><li><p><span>On the </span><strong><span>Add layer</span></strong><span> page, configure the following options:</span></p><ul><li><p><strong><span>Choose a layer</span></strong><span>: Choose </span><strong><span>Custom layers</span></strong><span>.</span></p></li><li><p><strong><span>Custom layers</span></strong><span>: Choose </span><strong><span>pymysqlLibrary</span></strong><span>.</span></p></li><li><p><strong><span>Version</span></strong><span>: Choose </span><strong><span>1</span></strong><span>.</span></p></li></ul></li><li><p><span>Choose </span><strong><span>Add</span></strong><span>.</span></p><p><span>The </span><strong><span>Function overview</span></strong><span> panel shows a count of </span><strong><span>(1)</span></strong><span> in the </span><strong><span>Layers</span></strong><span> node for the function.</span></p></li></ol><h3 id="task-24-importing-the-code-for-the-data-extractor-lambda-function"><span>Task 2.4: Importing the code for the data extractor Lambda function</span></h3><ol start="29"><li><p><span>Go to the </span><strong><span>Lambda</span></strong><span> &gt; </span><strong><span>Functions</span></strong><span> &gt; </span><strong><span>salesAnalysisReportDataExtractor</span></strong><span> page.</span></p></li><li><p><span>In the </span><strong><span>Runtime settings</span></strong><span> panel, choose </span><strong><span>Edit</span></strong><span>.</span></p></li><li><p><span>For </span><strong><span>Handler</span></strong><span>, enter </span><code>salesAnalysisReportDataExtractor.lambda_handler</code></p></li><li><p><span>Choose </span><strong><span>Save</span></strong><span>.</span></p></li><li><p><span>In the </span><strong><span>Code source</span></strong><span> panel, choose </span><strong><span>Upload from</span></strong><span>.</span></p></li><li><p><span>Choose </span><strong><span>.zip file</span></strong><span>.</span></p></li><li><p><span>Choose </span><strong><span>Upload</span></strong><span>, and then navigate to and select the </span><strong><span>salesAnalysisReportDataExtractor-v3.zip</span></strong><span> file that you downloaded earlier.</span></p></li><li><p><span>Choose </span><strong><span>Save</span></strong><span>.</span></p><p><span>The Lambda function code is imported and displays in the </span><strong><span>Code source</span></strong><span> panel. If necessary, in the </span><strong><span>Environment</span></strong><span> navigation pane, double-click </span><strong><span>salesAnalysisReportDataExtractor.py</span></strong><span> to display the code.</span></p></li><li><p><span>Review the Python code that implements the function.</span></p><p><strong><span>Note:</span></strong><span> If the code does not yet display in the function code editor, refresh the console so that it displays.</span></p><p><span>Read the comments included in the code to gain an understanding of its logic flow. Notice that the function expects to receive the database connection information (dbURL, dbName, dbUser, and dbPassword) in the event input parameter.</span></p></li></ol><h3 id="task-25-configuring-network-settings-for-the-function"><span>Task 2.5: Configuring network settings for the function</span></h3><p><span>The final step before you can test the function is to configure its network settings. As the architecture diagram at the start of this lab shows, this function requires network access to the café database, which runs in an EC2 LAMP instance. Therefore, you need to specify the instance’s VPC, subnet, and security group information in the function’s configuration.</span></p><ol start="38"><li><p><span>Choose the </span><strong><span>Configuration</span></strong><span> tab, and then choose </span><strong><span>VPC</span></strong><span>.</span></p></li><li><p><span>Choose </span><strong><span>Edit</span></strong><span>, and configure the following options:</span></p><ul><li><p><strong><span>VPC</span></strong><span>: Choose the option with </span><strong><span>Cafe VPC</span></strong><span> as the </span><strong><span>Name</span></strong><span>.</span></p></li><li><p><strong><span>Subnets</span></strong><span>: Choose the option with </span><strong><span>Cafe Public Subnet 1</span></strong><span> as the </span><strong><span>Name</span></strong><span>.</span></p><p><strong><span>Tip</span></strong><span>: You can ignore the warning (if any) that recommends choosing at least two subnets to run in high availability mode because it is not applicable to the function.</span></p></li><li><p><strong><span>Security groups</span></strong><span>: Choose the option with </span><strong><span>CafeSecurityGroup</span></strong><span> as the </span><strong><span>Name</span></strong><span>.</span></p></li></ul><p><span>Notice that the security group’s inbound and outbound rules are automatically displayed following the field.</span></p></li><li><p><span>Choose </span><strong><span>Save</span></strong><span>.</span></p></li></ol><p>&nbsp;</p><h2 id="task-3-testing-the-data-extractor-lambda-function"><span>Task 3: Testing the data extractor Lambda function</span></h2><h3 id="task-31-launching-a-test-of-the-lambda-function"><span>Task 3.1: Launching a test of the Lambda function</span></h3><p><span>You are now ready to test the salesAnalysisReportDataExtractor function. To invoke it, you need to supply values for the café database connection parameters. Recall that these are stored in Parameter Store.</span></p><ol start="41"><li><p><span>On a new browser tab, open the AWS Management Console, and choose </span><strong><span>Services</span></strong><span> &gt; </span><strong><span>Management &amp; Governance</span></strong><span> &gt; </span><strong><span>Systems Manager</span></strong><span>.</span></p></li><li><p><span>In the navigation pane, choose </span><strong><span>Parameter Store</span></strong><span>.</span></p></li><li><p><span>Choose each of the following parameter names, and copy and paste the </span><strong><span>Value</span></strong><span> of each one into a text editor document:</span></p><ul><li><p><span>/cafe/dbUrl</span></p></li><li><p><span>/cafe/dbName</span></p></li><li><p><span>/cafe/dbUser</span></p></li><li><p><span>/cafe/dbPassword</span></p></li></ul></li><li><p><span>Return to the </span><strong><span>Lambda Management Console</span></strong><span> browser tab. On the </span><strong><span>salesAnalysisReportDataExtractor</span></strong><span> function page, choose the </span><strong><span>Test</span></strong><span> tab.</span></p></li><li><p><span>Configure the </span><strong><span>Test event</span></strong><span> panel as follows:</span></p><ul><li><p><span>For </span><strong><span>Test event action</span></strong><span>, select </span><strong><span>Create new event</span></strong><span>.</span></p></li><li><p><span>For </span><strong><span>Event name</span></strong><span>, enter </span><code>SARDETestEvent</code></p></li><li><p><span>For </span><strong><span>Template</span></strong><span>, choose </span><strong><span>hello-world</span></strong><span>.</span></p></li><li><p><span>In the </span><strong><span>Event JSON</span></strong><span> pane, replace the JSON object with the following JSON object:</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="json"><div class="CodeMirror cm-s-inner cm-s-null-scroll CodeMirror-wrap" lang="json"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 9px; left: 8px;"><textarea autocorrect="off" autocapitalize="none" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style=""><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">{</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span class="cm-string cm-property">"dbUrl"</span>: <span class="cm-string">"&lt;value of /cafe/dbUrl parameter&gt;"</span>,</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span class="cm-string cm-property">"dbName"</span>: <span class="cm-string">"&lt;value of /cafe/dbName parameter&gt;"</span>,</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span class="cm-string cm-property">"dbUser"</span>: <span class="cm-string">"&lt;value of /cafe/dbUser parameter&gt;"</span>,</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span class="cm-string cm-property">"dbPassword"</span>: <span class="cm-string">"&lt;value of /cafe/dbPassword parameter&gt;"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">}</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 132px;"></div><div class="CodeMirror-gutters" style="display: none; height: 132px;"></div></div></div></pre></li><li><p><span>In this code, substitute the value of each parameter with the values that you pasted into a text editor in the previous steps. Enclose these values in quotation marks.</span></p></li></ul></li><li><p><span>Choose </span><strong><span>Save</span></strong><span>.</span></p></li><li><p><span>Choose </span><strong><span>Test</span></strong><span>.</span></p><p><span>After a few moments, the page shows the message "Execution result: failed". </span></p></li></ol><h3 id="task-32-troubleshooting-the-data-extractor-lambda-function"><span>Task 3.2: Troubleshooting the data extractor Lambda function</span></h3><ol start="48"><li><p><span>In the </span><strong><span>Execution result</span></strong><span> pane, choose </span><strong><span>Details</span></strong><span> to expand it, and notice that the error object returned a message similar to the following message after the function ran:</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="json"><div class="CodeMirror cm-s-inner cm-s-null-scroll CodeMirror-wrap" lang="json"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 9px; left: 8px;"><textarea autocorrect="off" autocapitalize="none" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">{</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span class="cm-string cm-property">"errorMessage"</span>: <span class="cm-string">"2019-02-14T04:14:15.282Z ff0c3e8f-1985-44a3-8022-519f883c8412 Task timed out after 3.00 seconds"</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">}</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 88px;"></div><div class="CodeMirror-gutters" style="display: none; height: 88px;"></div></div></div></pre><p><span>This message indicates that the function timed out after 3 seconds.</span></p><p><span>The </span><strong><span>Log output</span></strong><span> section includes lines starting with the following keywords:</span></p><ul><li><p><strong><span>START</span></strong><span> indicates that the function started running.</span></p></li><li><p><strong><span>END</span></strong><span> indicates that the function finished running.</span></p></li><li><p><strong><span>REPORT</span></strong><span> provides a summary of the performance and resource utilization statistics related to when the function ran.</span></p></li></ul><p><span>What caused this error?</span></p></li></ol><h3 id="task-33-analyzing-and-correcting-the-lambda-function"><span>Task 3.3: Analyzing and correcting the Lambda function</span></h3><ol start="49"><li><p><span>In this task, you analyze and correct the issue observed when you tested the Lambda function.</span></p><p><span>Here are a few hints to help you find the solution:</span></p><ul><li><p><span>One of the first things that this function does is connect to the MySQL database running in a separate EC2 instance. It waits a certain amount of time to establish a successful connection. After this time passes, if the connection is unsuccessful, the function times out.</span></p></li><li><p><span>By default, a MySQL database uses the MySQL protocol and listens on port number 3306 for client access.</span></p></li><li><p><span>Choose the </span><strong><span>Configuration</span></strong><span> tab again, and choose </span><strong><span>VPC</span></strong><span>. Notice the </span><strong><span>Inbound rules</span></strong><span> for the security group that are used by the EC2 instance running the database. Is the database port number (3306) listed? You can choose the security group link if you want to edit and add an inbound rule to it.</span></p></li></ul></li><li><p><span>Once you have corrected the problem, return to browser tab with the </span><strong><span>salesAnalysisReportDataExtractor</span></strong><span> function page. Choose the </span><strong><span>Test</span></strong><span> tab, and choose </span><strong><span>Test</span></strong><span> again.</span></p><p><span>You should now see a green box showing the message “Execution result: succeeded (logs).” This message indicates that the function ran successfully.</span></p></li><li><p><span>Choose </span><strong><span>Details</span></strong><span> to expand it.</span></p><p><span>The function returned the following JSON object:</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="json"><div class="CodeMirror cm-s-inner cm-s-null-scroll CodeMirror-wrap" lang="json"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 9px; left: 8px;"><textarea autocorrect="off" autocapitalize="none" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">{</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span class="cm-string cm-property">"statusCode"</span>: <span class="cm-number">200</span>,</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span class="cm-string cm-property">"body"</span>: []</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">}</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 88px;"></div><div class="CodeMirror-gutters" style="display: none; height: 88px;"></div></div></div></pre><p><span>The body field, which contains the report data that the function extracted, is empty because there is no order data in the database.</span></p></li></ol><h3 id="task-34-placing-an-order-and-testing-again"><span>Task 3.4: Placing an order and testing again</span></h3><p><span>In this task, you access the café website and place some orders to populate data in the database. </span></p><ol start="52"><li><p><span>To open the café website on a new browser tab, find the public IP address of the café EC2 instance. </span></p><p><span>The URL for the website has the format </span><a href="http://publicip/cafe" target="_blank" class="url" rel="noopener noreferrer">http://publicIP/cafe</a><span> where </span><strong><span>publicIP</span></strong><span> is the public IP address of the café EC2 instance. There are two ways to find the public IP address:</span></p><p><span>Option 1: </span></p><ul><li><p><span>On the AWS Management Console, choose </span><strong><span>Services</span></strong><span> &gt; </span><strong><span>Compute</span></strong><span> &gt; </span><strong><span>EC2</span></strong><span>.</span></p></li><li><p><span>In the navigation pane, choose </span><strong><span>Instances</span></strong><span>.</span></p></li><li><p><span>Choose </span><strong><span>CafeInstance</span></strong><span>.</span></p></li><li><p><span>Copy the </span><strong><span>Public IPv4 address</span></strong><span> to a text editor. </span></p></li><li><p><span>On a new browser tab, enter </span><a href="http://publicip/cafe" target="_blank" class="url" rel="noopener noreferrer">http://publicIP/cafe</a><span>, and replace </span><em><span>publicIP</span></em><span> with the public IPv4 address that you just copied to a text editor.</span></p></li><li><p><span>Press Enter to load the café website.</span></p></li></ul><p><span>Option 2:</span></p><ul><li><p><span>At the top of these instruction, choose </span><span id="ssb_voc_grey"><span>Details</span></span><span>, and then choose </span><span id="ssb_voc_grey"><span>Show</span></span><span>. </span></p></li><li><p><span>From the </span><strong><span>Credentials</span></strong><span> window, copy and paste the </span><strong><span>CafePublicIP</span></strong><span> to a text editor.</span></p></li><li><p><span>On a new browser tab, enter </span><a href="http://publicip/cafe" target="_blank" class="url" rel="noopener noreferrer">http://publicIP/cafe</a><span>, and replace </span><em><span>publicIP</span></em><span> with the public IPv4 address that you just copied to a text editor.</span></p></li><li><p><span>Press Enter to load the café website.</span></p></li></ul></li><li><p><span>On the café website, choose </span><strong><span>Menu</span></strong><span>, and place some orders to populate data in the database. </span></p><p><span>Now that there is order data in the database, you test the function again. </span></p></li><li><p><span>Go to the browser tab with the </span><strong><span>salesAnalysisReportDataExtractor</span></strong><span> function page.</span></p></li><li><p><span>Choose the </span><strong><span>Test</span></strong><span> tab, and choose </span><strong><span>Test</span></strong><span>.</span></p><p><span>The returned JSON object now contains product quantity information in the body field similar to the following:</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="json" style="break-inside: unset;"><div class="CodeMirror cm-s-inner cm-s-null-scroll CodeMirror-wrap" lang="json"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 9px; left: 8px;"><textarea autocorrect="off" autocapitalize="none" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style=""><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">{</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span class="cm-string cm-property">"statusCode"</span>: <span class="cm-number">200</span>,</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;<span class="cm-string cm-property">"body"</span>: [</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  {</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-string cm-property">"product_group_number"</span>: <span class="cm-number">1</span>,</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-string cm-property">"product_group_name"</span>: <span class="cm-string">"Pastries"</span>,</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-string cm-property">"product_id"</span>: <span class="cm-number">1</span>,</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-string cm-property">"product_name"</span>: <span class="cm-string">"Croissant"</span>,</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-string cm-property">"quantity"</span>: <span class="cm-number">1</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  },</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  {</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-string cm-property">"product_group_number"</span>: <span class="cm-number">2</span>,</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-string cm-property">"product_group_name"</span>: <span class="cm-string">"Drinks"</span>,</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-string cm-property">"product_id"</span>: <span class="cm-number">8</span>,</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-string cm-property">"product_name"</span>: <span class="cm-string">"Hot Chocolate"</span>,</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; &nbsp;<span class="cm-string cm-property">"quantity"</span>: <span class="cm-number">2</span></span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp; }</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp;  ]</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">}</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 418px;"></div><div class="CodeMirror-gutters" style="display: none; height: 418px;"></div></div></div></pre><p><span>Congratulations! You have successfully created the salesAnalysisReportDataExtractor Lambda function.</span></p></li></ol><p>&nbsp;</p><h2 id="task-4-configuring-notifications"><span>Task 4: Configuring notifications</span></h2><p><span>In this task, you create an SNS topic and then subscribe an email address to the topic.</span></p><h3 id="task-41-creating-an-sns-topic"><span>Task 4.1: Creating an SNS topic</span></h3><p><span>In this task, you create the SNS topic where the sales analysis report is published and subscribe an email address to it. The topic is responsible for delivering any message it receives to all of its subscribers. You use the Amazon SNS console for this task.</span></p><ol start="56"><li><p><span>On the AWS Management Console, choose </span><strong><span>Services</span></strong><span> &gt; </span><strong><span>Application Integration</span></strong><span> &gt; </span><strong><span>Simple Notification Service</span></strong><span>.</span></p></li><li><p><span>In the navigation pane, choose </span><strong><span>Topics</span></strong><span>, and then choose </span><strong><span>Create topic</span></strong><span>.</span></p><p><strong><span>Note:</span></strong><span> If the </span><strong><span>Topics</span></strong><span> link is not visible, choose the three horizontal lines icon, and then choose </span><strong><span>Topics</span></strong><span>.</span></p><p><span>The </span><strong><span>Create topic</span></strong><span> page opens.</span></p></li><li><p><span>Configure the following options:</span></p><ul><li><p><strong><span>Type</span></strong><span>: Choose </span><strong><span>Standard</span></strong><span>.</span></p></li><li><p><strong><span>Name</span></strong><span>: Enter </span><code>salesAnalysisReportTopic</code></p></li><li><p><strong><span>Display name</span></strong><span>: Enter </span><code>SARTopic</code></p></li></ul></li><li><p><span>Choose </span><strong><span>Create topic</span></strong><span>.</span></p></li><li><p><span>Copy and paste the </span><strong><span>ARN</span></strong><span> value into a text editor document.</span></p><p><span>You need to specify this ARN when you configure the next Lambda function.</span></p></li></ol><h3 id="task-42-subscribing-to-the-sns-topic"><span>Task 4.2: Subscribing to the SNS topic</span></h3><ol start="61"><li><p><span>Choose </span><strong><span>Create subscription</span></strong><span>, and configure the following options:</span></p><ul><li><p><strong><span>Protocol</span></strong><span>: Choose </span><strong><span>Email</span></strong><span>.</span></p></li><li><p><strong><span>Endpoint</span></strong><span>: Enter an email address that you can access.</span></p></li></ul></li><li><p><span>Choose </span><strong><span>Create subscription</span></strong><span>.</span></p><p><span>The subscription is created and has a </span><strong><span>Status</span></strong><span> of </span><em><span>Pending confirmation</span></em><span>.</span></p></li><li><p><span>Check the inbox for the email address that you provided.</span></p><p><span>You should see an email from SARTopic with the subject "AWS Notification - Subscription Confirmation."</span></p></li><li><p><span>Open the email, and choose </span><strong><span>Confirm subscription</span></strong><span>.</span></p><p><span>A new browser tab opens and displays a page with the message "Subscription confirmed!"</span></p></li></ol><p>&nbsp;</p><h2 id="task-5-creating-the-salesanalysisreport-lambda-function"><span>Task 5: Creating the salesAnalysisReport Lambda function</span></h2><p><span>Next, you create and configure the salesAnalysisReport Lambda function. This function is the main driver of the sales analysis report flow. It does the following:</span></p><ul><li><p><span>Retrieves the database connection information from Parameter Store</span></p></li><li><p><span>Invokes the salesAnalysisReportDataExtractor Lambda function, which retrieves the report data from the database</span></p></li><li><p><span>Formats and publishes a message containing the report data to the SNS topic</span></p></li></ul><h3 id="task-51-connecting-to-the-cli-host-instance"><span>Task 5.1: Connecting to the CLI Host instance</span></h3><p><span>In this task, you use EC2 Instance Connect to log in to the CLI Host instance running in your AWS account that already has the AWS Command Line Interface (AWS CLI) installed and the the Python code needed to create the next Lambda function. You then then run an AWS CLI command to create the Lambda function. Finally, you unit test the new function using the Lambda management console.</span></p><ol start="65"><li><p><span>On the </span><strong><span>EC2 Management Console</span></strong><span>, in the navigation pane, choose </span><strong><span>Instances</span></strong><span>.</span></p></li><li><p><span>From the list of EC2 instances, choose the </span><i class="far fa-check-square" style="color:blue"></i><span> check box for the </span><strong><span>CLI Host</span></strong><span> instance. </span></p></li><li><p><span>Choose </span><strong><span>Connect</span></strong><span>.</span></p></li><li><p><span>On the </span><strong><span>EC2 Instance Connect</span></strong><span> tab, choose </span><span style="ssb_orange"><strong><span>Connect</span></strong></span><span> to connect to the CLI Host.</span></p></li></ol><h3 id="task-52-configuring-the-aws-cli"><span>Task 5.2: Configuring the AWS CLI</span></h3><p><span>Amazon Linux instances have the AWS CLI pre-installed; however, you still need to supply credentials to connect the AWS CLI client to an AWS account.</span></p><ol start="69"><li><p><span>In the EC2 Instance Connect terminal window, run the following command to update the AWS CLI software with the credentials:</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="plain"><div class="CodeMirror cm-s-inner cm-s-null-scroll CodeMirror-wrap" lang="plain"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 9px; left: 8px;"><textarea autocorrect="off" autocapitalize="none" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">aws configure</span></pre></div></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 22px;"></div><div class="CodeMirror-gutters" style="display: none; height: 22px;"></div></div></div></pre></li><li><p><span>At the prompts, enter the following information:</span></p><ul><li><p><strong><span>AWS Access Key ID</span></strong><span>: At the top of these instructions, choose the </span><span id="ssb_voc_grey"><span>Details</span></span><span> dropdown menu, and then choose </span><span id="ssb_voc_grey"><span>Show</span></span><span>. A </span><strong><span>Credentials</span></strong><span> window opens. From this window, copy the </span><strong><span>AccessKey</span></strong><span> value, paste it into the terminal window, and press Enter.</span></p></li><li><p><strong><span>AWS Secret Access Key</span></strong><span>: From the same </span><strong><span>Credentials</span></strong><span> window, copy the </span><strong><span>SecretKey</span></strong><span> value, paste it into the terminal window, and press Enter.</span></p></li><li><p><strong><span>Default region name</span></strong><span>: Enter the Region code for the Region where you created the previous Lambda function. For this lab, enter the </span><code>us-west-2</code><span> Region code into the terminal window, and press Enter. To find this code, in the upper-right menu of the Lambda management console, choose the Region dropdown menu. </span></p></li><li><p><strong><span>Default output format</span></strong><span>: Enter </span><code>json</code><span> and press Enter.</span></p></li></ul></li></ol><h3 id="task-53-creating-the-salesanalysisreport-lambda-function-using-the-aws-cli"><span>Task 5.3: Creating the salesAnalysisReport Lambda function using the AWS CLI</span></h3><ol start="71"><li><p><span>To verify that the salesAnalysisReport-v2.zip file containing the code for the salesAnalysisReport Lambda function is already on the CLI Host, run the following commands in the terminal:</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang=""><div class="CodeMirror cm-s-inner cm-s-null-scroll CodeMirror-wrap" lang=""><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 9px; left: 8px;"><textarea autocorrect="off" autocapitalize="none" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">cd activity-files</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">ls</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 44px;"></div><div class="CodeMirror-gutters" style="display: none; height: 44px;"></div></div></div></pre><p><strong><span>Note:</span></strong><span> Before you create the function, you must retrieve the ARN of the salesAnalysisReportRole IAM role. You specify it in the following steps.</span></p></li><li><p><span>To find the ARN of an IAM role, open the IAM management console, and choose </span><strong><span>Roles</span></strong><span>. </span></p></li><li><p><span>In the search box, enter </span><strong><span>salesAnalysisReportRole</span></strong><span>, and choose the role name. The </span><strong><span>Summary</span></strong><span> page includes the </span><strong><span>ARN</span></strong><span>.</span></p></li><li><p><span>Copy and paste the ARN to a text editor document.</span></p></li><li><p><span>Next, you use the Lambda create-function command to create the Lambda function and configure it to use the salesAnalysisReportRole IAM role.</span></p></li></ol><p><span>To do this, at the terminal window command prompt, paste the following command. Replace </span><em><span>&lt;</span><span>salesAnalysisReportRoleARN&gt;</span></em><span> with the value of the salesAnalysisReportRole ARN that you copied in a previous step, and replace </span><em><span>&lt;</span><span>region&gt;</span></em><span> with the </span><code>us-west-2</code><span> Region code. This is the Region where you created the previous Lambda function. To find this code, in the upper-right menu of the Lambda management console, choose the Region dropdown menu.</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="plain"><div class="CodeMirror cm-s-inner cm-s-null-scroll CodeMirror-wrap" lang="plain"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 9px; left: 8px;"><textarea autocorrect="off" autocapitalize="none" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre><span>xxxxxxxxxx</span></pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation" style=""><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">aws lambda create-function \</span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">--function-name salesAnalysisReport \</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">--runtime python3.9 \</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">--zip-file fileb://salesAnalysisReport-v2.zip \</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">--handler salesAnalysisReport.lambda_handler \</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">--region &lt;region&gt; \</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">--role &lt;salesAnalysisReportRoleARN&gt;</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 154px;"></div><div class="CodeMirror-gutters" style="display: none; height: 154px;"></div></div></div></pre><p><span>Once the command completes, it returns a JSON object describing the attributes of the function. You now complete its configuration and unit test it.</span></p><h3 id="task-54-configuring-the-salesanalysisreport-lambda-function"><span>Task 5.4: Configuring the salesAnalysisReport Lambda function</span></h3><ol start="76"><li><p><span>Open the Lambda management console.</span></p></li><li><p><span>Choose </span><strong><span>Functions</span></strong><span>, and then choose </span><strong><span>salesAnalysisReport</span></strong><span>. </span></p><p><span>The </span><strong><span>Details</span></strong><span> page for the function opens.</span></p></li><li><p><span>Review the details in the </span><strong><span>Function overview</span></strong><span> and </span><strong><span>Code source</span></strong><span> panels for the created function.</span></p><p><span>In particular, read through the function code, and use the embedded comments to help you understand the logic.</span></p><p><span>Notice on line 26 that the function retrieves the ARN of the topic to publish to, from an environment variable named </span><strong><span>topicARN</span></strong><span>. Therefore, you need to define that variable in the </span><strong><span>Environment variables</span></strong><span> panel.</span></p></li><li><p><span>Choose the </span><strong><span>Configuration</span></strong><span> tab, and choose </span><strong><span>Environment variables</span></strong><span>.</span></p></li><li><p><span>Choose </span><strong><span>Edit</span></strong><span>.</span></p></li><li><p><span>Choose </span><strong><span>Add environment variable</span></strong><span>, and configure the following options:</span></p><ul><li><p><strong><span>Key</span></strong><span>: Enter </span><code>topicARN</code></p></li><li><p><strong><span>Value</span></strong><span>: Paste the ARN value of the salesAnalysisReportTopic SNS topic that you copied earlier.</span></p></li></ul></li><li><p><span>Choose </span><strong><span>Save</span></strong><span>.</span></p><p><span>The following message appears: "Successfully updated the function salesAnalysisReport."</span></p></li></ol><h3 id="task-55-testing-the-salesanalysisreport-lambda-function"><span>Task 5.5: Testing the salesAnalysisReport Lambda function</span></h3><p><span>You are now ready to test the function.</span></p><ol start="83"><li><p><span>Choose the </span><strong><span>Test</span></strong><span> tab, and configure the test event as follows:</span></p><ul><li><p><span>For </span><strong><span>Test event action</span></strong><span>, choose </span><strong><span>Create new event</span></strong><span>.</span></p></li><li><p><span>For </span><strong><span>Event name</span></strong><span>, enter </span><code>SARTestEvent</code></p></li><li><p><span>For </span><strong><span>Template</span></strong><span>, choose </span><strong><span>hello-world</span></strong><span>.</span></p></li></ul><p><span>The function does not require any input parameters. Leave the default JSON lines as is.</span></p></li><li><p><span>Choose </span><strong><span>Save</span></strong><span>.</span></p></li><li><p><span>Choose </span><strong><span>Test</span></strong><span>.</span></p><p><span>A green box with the message “Execution result: succeeded (logs)” appears.</span></p><p><strong><span>Tip:</span></strong><span> If you get a timeout error, choose the </span><strong><span>Test</span></strong><span> button again. Sometimes, when you first run a function, it takes a little longer to initialize, and the Lambda default timeout value (3 seconds) is exceeded. Usually, you can run the function again, and the error will go away. Alternatively, you can increase the timeout value. To do so, follow these steps:</span></p><ul><li><p><span>Choose the </span><strong><span>Configuration</span></strong><span> tab.</span></p></li><li><p><span>Choose </span><strong><span>General configuration</span></strong><span>.</span></p></li><li><p><span>Choose </span><strong><span>Edit</span></strong><span>.</span></p></li><li><p><span>Adjust the </span><strong><span>Timeout</span></strong><span> as needed. </span></p></li><li><p><span>Choose </span><strong><span>Save</span></strong><span>.</span></p></li></ul></li><li><p><span>Choose </span><strong><span>Details</span></strong><span> to expand it.</span></p></li></ol><p><span>The function should have returned the following JSON object:</span></p><pre class="md-fences md-end-block ty-contain-cm modeLoaded" spellcheck="false" lang="json"><div class="CodeMirror cm-s-inner cm-s-null-scroll CodeMirror-wrap" lang="json"><div style="overflow: hidden; position: relative; width: 3px; height: 0px; top: 53px; left: 176px;"><textarea autocorrect="off" autocapitalize="none" spellcheck="false" tabindex="0" style="position: absolute; bottom: -1em; padding: 0px; width: 1000px; height: 1em; outline: none;"></textarea></div><div class="CodeMirror-scrollbar-filler" cm-not-content="true"></div><div class="CodeMirror-gutter-filler" cm-not-content="true"></div><div class="CodeMirror-scroll" tabindex="-1"><div class="CodeMirror-sizer" style="margin-left: 0px; margin-bottom: 0px; border-right-width: 0px; padding-right: 0px; padding-bottom: 0px;"><div style="position: relative; top: 0px;"><div class="CodeMirror-lines" role="presentation"><div role="presentation" style="position: relative; outline: none;"><div class="CodeMirror-measure"><pre>x</pre></div><div class="CodeMirror-measure"></div><div style="position: relative; z-index: 1;"></div><div class="CodeMirror-code" role="presentation"><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">{</span></pre><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-string cm-property">"statusCode"</span>: <span class="cm-number">200</span>,</span></pre><div class="CodeMirror-activeline" style="position: relative;"><div class="CodeMirror-activeline-background CodeMirror-linebackground"></div><div class="CodeMirror-gutter-background CodeMirror-activeline-gutter" style="left: 0px; width: 0px;"></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;"> &nbsp; &nbsp;<span class="cm-string cm-property">"body"</span>: <span class="cm-string">"\"Sale Analysis Report sent.\""</span></span></pre></div><pre class=" CodeMirror-line " role="presentation"><span role="presentation" style="padding-right: 0.1px;">}</span></pre></div></div></div></div></div><div style="position: absolute; height: 0px; width: 1px; border-bottom-width: 0px; border-bottom-style: solid; border-bottom-color: transparent; top: 88px;"></div><div class="CodeMirror-gutters" style="display: none; height: 88px;"></div></div></div></pre><ol start="87"><li><p><span>Check your email inbox.</span></p><p><span>If there were no errors, you should receive an email from AWS Notifications with the subject "Daily Sales Analysis Report."</span></p><p><span>The email should contain a report that is similar to the following image depending on the orders that you placed on the café website:</span></p><p><img src="README_data/emailed-report.png" alt="Email report that lists the items ordered from the café website." width="400"></p></li><li><p><span>You can place more orders on the café website and test the function to see the changes in the report that you receive.</span></p><p><span>Great job! You have successfully unit tested the salesAnalysisReport Lambda function.</span></p></li></ol><h3 id="task-56-adding-a-trigger-to-the-salesanalysisreport-lambda-function"><span>Task 5.6: Adding a trigger to the salesAnalysisReport Lambda function</span></h3><p><span>To complete the implementation of the salesAnalysisReport function, configure the report to be initiated Monday through Saturday at 8 PM each day. To do so, use a CloudWatch Events event as the trigger mechanism.</span></p><ol start="89"><li><p><span>In the </span><strong><span>Function overview</span></strong><span> panel, choose </span><strong><span>Add trigger</span></strong><span>. The </span><strong><span>Add trigger</span></strong><span> panel is displayed.</span></p></li><li><p><span>In the </span><strong><span>Add trigger</span></strong><span> panel, configure the following options:</span></p><ul><li><p><span>In the </span><strong><span>Trigger configuration</span></strong><span> pane, from the dropdown list, choose </span><strong><span>EventBridge (CloudWatch Events)</span></strong><span>.</span></p></li><li><p><span>For </span><strong><span>Rule</span></strong><span>, choose </span><strong><span>Create a new rule</span></strong><span>. </span></p></li><li><p><span>For </span><strong><span>Rule name</span></strong><span>, enter </span><code>salesAnalysisReportDailyTrigger</code></p></li><li><p><span>For </span><strong><span>Rule description</span></strong><span>, enter </span><code>Initiates report generation on a daily basis</code></p></li><li><p><span>For </span><strong><span>Rule type</span></strong><span>, choose </span><strong><span>Schedule expression</span></strong><span>.</span></p></li><li><p><span>For </span><strong><span>Schedule expression</span></strong><span>, specify the schedule that you would like by using a Cron expression. The general syntax of a Cron expression requires six fields separated by spaces as follows: </span></p><ul><li><p><span>cron(Minutes Hours Day-of-month Month Day-of-week Year): In addition, all times in a Cron expression are based on the UTC time zone.</span></p></li></ul><p><strong><span>Note:</span></strong><span> For testing purposes, enter an expression that schedules the trigger 5 minutes from the current time. You can use the following examples:</span></p><ul><li><p><span>If you are in London (UTC time zone), and the current time is 11:30 AM, enter the following expression:</span></p><p><code>cron(35 11 ? * MON-SAT *)</code></p></li><li><p><span>If you are in New York (UTC time zone -5 during Eastern Standard Time), and the current time is 11:30 AM, enter the following expression:</span></p><p><code>cron(35 16 ? * MON-SAT *)</code></p></li></ul><p><span>This Cron expression schedules the event to be invoked at 11:35 AM Monday through Saturday.</span></p></li></ul><p><strong><span>Tip</span></strong><span>: For more information about the syntax of schedule expressions for rules, see </span><a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/events/ScheduledEvents.html" target="_blank" rel="noopener noreferrer"><span>Schedule Expressions for Rules</span></a><span>.</span></p><p><span>To get the correct UTC time, navigate to any browser and enter </span><code>UTC time</code></p></li><li><p><span>Choose </span><strong><span>Add</span></strong><span>.</span></p></li></ol><p><span>The new trigger is created and displayed in the </span><strong><span>Function overview</span></strong><span> panel and </span><strong><span>Triggers</span></strong><span> pane.</span></p><ol start="92"><li><p><span>Consider the following challenge question, and adjust the Cron expression as needed: What should the Cron expression be when you deploy the function in production? Remember that you need to schedule the trigger every day, Monday through Saturday. Assume the you are in the UTC time zone.</span></p></li><li><p><span>Wait until 5 minutes have elapsed, and then check your email inbox.</span></p></li></ol><p><span>If there were no errors, you should see a new email from AWS Notifications with a subject of "Daily Sales Analysis Report." The CloudWatch Events event invoked this message at the time that you specified in the Cron expression.</span></p><p>&nbsp;</p><h2 id="conclusion"><span>Conclusion</span></h2><p><span>Congratulations! You now have successfully done the following:</span></p><ul><li><p><span>Recognized necessary IAM policy permissions to enable a Lambda function to other AWS resources</span></p></li><li><p><span>Created a Lambda layer to satisfy an external library dependency</span></p></li><li><p><span>Created Lambda functions that extract data from database, and send reports to user.</span></p></li><li><p><span>Deployed and tested a Lambda function that is initiated based on a schedule and that invokes another function</span></p></li><li><p><span>Used CloudWatch logs to troubleshoot any issues running a Lambda function</span></p></li></ul><p>&nbsp;</p><h2 id="lab-complete"><span>Lab complete</span></h2><p><i class="icon-flag-checkered"></i><span> Congratulations! You have completed the lab.</span></p><ol start="94"><li><p><span>Choose </span><span id="ssb_voc_grey"><span>End Lab</span></span><span> at the top of this page, and then choose </span><span id="ssb_blue"><span>Yes</span></span><span> to confirm that you want to end the lab.</span></p></li></ol><p><span>A panel will appear, indicating that "You may close this message box now. Lab resources are terminating."</span></p><ol start="95"><li><p><span>To close the </span><strong><span>End Lab</span></strong><span> panel, choose the </span><strong><span>X</span></strong><span> in the upper-right corner.</span></p></li></ol><p>&nbsp;</p><h2 id="additional-resources"><span>Additional resources</span></h2><ul><li><p><a href="https://docs.aws.amazon.com/lambda/latest/dg/services-cloudwatchevents-tutorial.html" target="_blank" rel="noopener noreferrer"><span>Using AWS Lambda with scheduled events</span></a></p></li><li><p><a href="https://labs.vocareum.com/web/3209731/2792142.0/ASNLIB/public/docs/lang/en-us/[Accessing%20Amazon%20CloudWatch%20logs%20for%20AWS%20Lambda%20-%20AWS%20Lambda](https://docs.aws.amazon.com/lambda/latest/dg/monitoring-cloudwatchlogs.html)" target="_blank" rel="noopener noreferrer"><span>Accessing Amazon CloudWatch logs for AWS Lambda</span></a></p></li></ul><p><span>For more information about AWS Training and Certification, see </span><a href="http://aws.amazon.com/training/" target="_blank" rel="noopener noreferrer"><span>AWS Training and Certification</span></a><span>.</span></p><p><em><span>Your feedback is welcome and appreciated.</span></em></p><p><span>If you would like to share any suggestions or corrections, please provide the details in our </span><a href="https://support.aws.amazon.com/#/contacts/aws-training" target="_blank" rel="noopener noreferrer"><span>AWS Training and Certification Contact Form</span></a><span>.</span></p><p><em><span>© 2023, Amazon Web Services, Inc. or its affiliates. All rights reserved. This work may not be reproduced or redistributed, in whole or in part, without prior written permission from Amazon Web Services, Inc. Commercial copying, lending, or selling is prohibited.</span></em></p></div></div>
<script defer="defer" src="vef91dfe02fce4ee0ad053f6de4f175db1715022073587" integrity="sha512-sDIX0kl85v1Cl5tu4WGLZCpH/dV9OHbA4YlKCuCiMmOQIk4buzoYDZSFj+TvC71mOBLh8CDC/REgE0GX0xcbjA==" data-cf-beacon="{&quot;rayId&quot;:&quot;88c0b8edcb0d385e&quot;,&quot;version&quot;:&quot;2024.4.1&quot;,&quot;token&quot;:&quot;a73834a4a1444e9ab89e8da06da41720&quot;}" crossorigin="anonymous"></script>

</body></html>